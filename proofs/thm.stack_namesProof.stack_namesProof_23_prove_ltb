Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_namesProof
% (134988)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 745
% Passive clauses: 6300
% Generated clauses: 20786
% Final active clauses: 732
% Final passive clauses: 5222
% Input formulas: 69
% Initial clauses: 217
% 
% Duplicate literals: 284
% Trivial inequalities: 18
% Fw subsumption resolutions: 1467
% Fw demodulations: 1704
% Bw demodulations: 6
% 
% Simple tautologies: 219
% Equational tautologies: 56
% Forward subsumptions: 10538
% Fw demodulations to eq. taut.: 13
% 
% Binary resolution: 5389
% Factoring: 1152
% Forward superposition: 5018
% Backward superposition: 5279
% Self superposition: 93
% Equality factoring: 26
% Equality resolution: 10
% 
% Split clauses: 290
% Split components: 601
% SAT solver clauses: 521
% SAT solver unit clauses: 12
% SAT solver binary clauses: 90
% 
% Sat splits: 290
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 521
% TWLsolver calls for satisfiability: 294
% 
% Memory used [KB]: 15351
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stack_namesProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_namesProof
% SZS output start Proof for thm.stack_namesProof
fof(f6929,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f6928,f6915,f6916,f425,f607,f6892,f6893,f2665,f2675,f301,f542])).
fof(f542,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X2),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) ) | $spl0),
  inference(cnf_transformation,[],[f542_D])).
fof(f542_D,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X2),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f301,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X2),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5)))))))) )),
  inference(cnf_transformation,[],[f213])).
fof(f213,plain,(
  ! [X2,X3,X4,X5] : s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X2),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11])],[f173])).
fof(f173,plain,(
  ? [X0,X1] : ! [X2,X3,X4,X5] : s('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X1) != s('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(X0),X2),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5)))))))),
  inference(ennf_transformation,[],[f72])).
fof(f72,plain,(
  ~! [X0,X1] : ? [X2,X3,X4,X5] : s('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X1) = s('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(X0),X2),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5)))))))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ~! [X0] : ! [X1] : ? [X2,X3,X4,X5] : s('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X1) = s('type.pair.prod'('type.stackLang.prog'(X0),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(X0),X2),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X3),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X4),s('type.num.num',X5)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ? [X8,X9,X10,X11] : s('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X7) = s('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(X6),X8),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ? [X8,X9,X10,X11] : s('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X7) = s('type.pair.prod'('type.stackLang.prog'(X6),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(X6),X8),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X9),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num',X11)))))))),
  file('thm.stack_namesProof.stack_namesProof_23_prove_ltb','thm.stack_namesProof.stack_namesProof_23_prove_ltb')).
fof(f2675,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X1),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.num.num','type.num.num'),X0)))))) ) | $spl1048),
  inference(cnf_transformation,[],[f2675_D])).
fof(f2675_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X1),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.num.num','type.num.num'),X0)))))) ) <=> ~$spl1048),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1048])])).
fof(f2665,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X1),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.num.num',X2),s('type.pair.prod'('type.num.num','type.num.num'),X0)))))) ) | ($spl0 | $spl94)),
  inference(superposition,[],[f542,f607])).
fof(f6893,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X1),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),X0)))) ) | $spl2530),
  inference(cnf_transformation,[],[f6893_D])).
fof(f6893_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X1),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),X0)))) ) <=> ~$spl2530),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2530])])).
fof(f6892,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.stackLang.prog'(sK10),X1),s('type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num')),X0)))) ) | ($spl94 | $spl1048)),
  inference(superposition,[],[f2675,f607])).
fof(f607,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK19(X2,X1,X0)),s(X1,sK20(X2,X1,X0))))) ) | $spl94),
  inference(cnf_transformation,[],[f607_D])).
fof(f607_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK19(X2,X1,X0)),s(X1,sK20(X2,X1,X0))))) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f425,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK19(X2,X1,X0)),s(X1,sK20(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f264])).
fof(f264,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK19(X2,X1,X0)),s(X1,sK20(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20])],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X6,X37] : ! [X7] : ? [X47,X46] : s('type.pair.prod'(X6,X37),X7) = s('type.pair.prod'(X6,X37),'const.pair.,_2'(s(X6,X47),s(X37,X46)))),
  file('thm.stack_namesProof.stack_namesProof_23_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f6916,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X0)) ) | $spl2532),
  inference(cnf_transformation,[],[f6916_D])).
fof(f6916_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X0)) ) <=> ~$spl2532),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2532])])).
fof(f6915,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),sK11) != s('type.pair.prod'('type.stackLang.prog'(sK10),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.num.num'))),X0)) ) | ($spl94 | $spl2530)),
  inference(superposition,[],[f6893,f607])).
fof(f6928,plain,(
  $false | $spl2532),
  inference(equality_resolution,[],[f6916])).
% SZS output end Proof for thm.stack_namesProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 268
% Passive clauses: 1293
% Generated clauses: 6666
% Final active clauses: 263
% Final passive clauses: 978
% Input formulas: 69
% Initial clauses: 217
% 
% Duplicate literals: 81
% Trivial inequalities: 4
% Fw subsumption resolutions: 328
% Fw demodulations: 333
% Bw demodulations: 48
% Condensations: 110
% Global subsumptions: 14
% 
% Simple tautologies: 163
% Equational tautologies: 7
% Forward subsumptions: 2856
% Fw demodulations to eq. taut.: 10
% 
% Binary resolution: 1318
% Factoring: 245
% Forward superposition: 1370
% Backward superposition: 1213
% Self superposition: 62
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 1688
% SAT solver unit clauses: 227
% SAT solver binary clauses: 81
% SAT solver learnt clauses: 29
% SAT solver learnt literals: 12
% 
% Sat splits: 6
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1631
% TWLsolver calls for satisfiability: 1691
% 
% Memory used [KB]: 13816
% Time elapsed: 0.429 s
% ------------------------------
% ------------------------------
% Success in time 1.06 s
