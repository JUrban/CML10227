Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (70631)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 577
% Passive clauses: 3264
% Generated clauses: 15063
% Final active clauses: 543
% Final passive clauses: 2418
% Input formulas: 35
% Initial clauses: 150
% 
% Duplicate literals: 764
% Trivial inequalities: 80
% Fw subsumption resolutions: 1823
% Fw demodulations: 264
% Bw demodulations: 33
% 
% Simple tautologies: 223
% Equational tautologies: 65
% Forward subsumptions: 5993
% 
% Binary resolution: 4443
% Factoring: 1182
% Forward superposition: 1908
% Backward superposition: 4016
% Self superposition: 110
% Equality factoring: 108
% Equality resolution: 19
% 
% Split clauses: 1090
% Split components: 2314
% SAT solver clauses: 1373
% SAT solver unit clauses: 20
% SAT solver binary clauses: 117
% 
% Sat splits: 1090
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1367
% TWLsolver calls for satisfiability: 303
% 
% Memory used [KB]: 6652
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 142 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f3901,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3899,f841,f851,f854,f212,f374,f857,f202,f365,f368,f370,f1613,f1634,f204,f361,f224,f377,f1702,f1717,f220,f375,f3872,f3874,f203,f363,f1851,f1852,f247,f383])).
fof(f383,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) ) | $spl20),
  inference(cnf_transformation,[],[f383_D])).
fof(f383_D,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f247,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(flattening,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5)))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(ennf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5)))) => s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5] : ((s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5)))) => s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X5) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X14] : ! [X8,X7,X10,X9,X15] : ((s('type.pair.prod'('type.patSem.state'(X14),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X15) = s('type.pair.prod'('type.patSem.state'(X14),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X8),s('type.patSem.state'(X14),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X10),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X14),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X15)))) => s('type.pair.prod'('type.patSem.state'(X14),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),X15) = s('type.pair.prod'('type.patSem.state'(X14),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X8),s('type.patSem.state'(X14),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X10),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))),
  file('thm.exh_to_patProof.sLet_intro','thm.exh_to_patProof.sLet_correct')).
fof(f1852,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) ) | $spl714),
  inference(cnf_transformation,[],[f1852_D])).
fof(f1852_D,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) ) <=> ~$spl714),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl714])])).
fof(f1851,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X1),s('type.patSem.state'(X0),X2),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X3),s('type.patLang.exp',X4))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) ) | $spl20),
  inference(equality_resolution,[],[f383])).
fof(f363,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | $spl3),
  inference(cnf_transformation,[],[f363_D])).
fof(f363_D,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f203,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))),
  inference(cnf_transformation,[],[f137])).
fof(f137,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) & ~p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17])],[f92])).
fof(f92,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X5),s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) & ~p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X5),s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))))),
  inference(flattening,[],[f91])).
fof(f91,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X5),s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & ~p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X5),s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X5),s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) => p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X5),s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5] : ((p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X5),s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) => p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X5),s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X2),s('type.patSem.state'(X0),X1),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X4),s('type.patLang.exp',X3))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11] : ((p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X11),s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X8),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X10),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X8),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X10),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) => p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X11),s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X8),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X10),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11] : ((p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X11),s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X8),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X10),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) & ~s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) = s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.pair.SND_1'(s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X8),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',X10),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) => p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),X11),s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),X8),s('type.patSem.state'(X6),X7),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',X10),s('type.patLang.exp',X9))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))))),
  file('thm.exh_to_patProof.sLet_intro','thm.exh_to_patProof.sLet_intro')).
fof(f3874,plain,(
  s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | $spl1162),
  inference(cnf_transformation,[],[f3874_D])).
fof(f3874_D,plain,(
  s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) <=> ~$spl1162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1162])])).
fof(f3872,plain,(
  s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | ($spl3 | $spl714)),
  inference(trivial_inequality_removal,[],[f3871])).
fof(f3871,plain,(
  s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) != s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),'const.semanticPrimitives.Rerr_1'(s('type.semanticPrimitives.error_result'('type.patSem.v'),'const.semanticPrimitives.Rabort_1'(s('type.semanticPrimitives.abort','const.semanticPrimitives.Rtype_error_0'))))) | s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) = s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))) | ($spl3 | $spl714)),
  inference(superposition,[],[f363,f1852])).
fof(f375,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl12),
  inference(cnf_transformation,[],[f375_D])).
fof(f375_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f220,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f18])).
fof(f18,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.exh_to_patProof.sLet_intro','thm.bool.EQ_CLAUSES|split|1')).
fof(f1717,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | $spl638),
  inference(cnf_transformation,[],[f1717_D])).
fof(f1717_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) <=> ~$spl638),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl638])])).
fof(f1702,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | ($spl4 | $spl12)),
  inference(resolution,[],[f365,f375])).
fof(f377,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f377_D])).
fof(f377_D,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f224,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X12] : (s(bool,'F_0') = s(bool,X12) <=> ~p(s(bool,X12)))),
  file('thm.exh_to_patProof.sLet_intro','thm.bool.EQ_CLAUSES|split|3')).
fof(f361,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) | $spl1),
  inference(cnf_transformation,[],[f361_D])).
fof(f361_D,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f204,plain,(
  ~p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))))),
  inference(cnf_transformation,[],[f137])).
fof(f1634,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | $spl580),
  inference(cnf_transformation,[],[f1634_D])).
fof(f1634_D,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) <=> ~$spl580),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl580])])).
fof(f1613,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.sLet_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | ($spl1 | $spl16)),
  inference(resolution,[],[f361,f377])).
fof(f370,plain,(
  ~p(s(bool,'F_0')) | $spl9),
  inference(cnf_transformation,[],[f370_D])).
fof(f370_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f368,plain,(
  ~p(s(bool,'F_0'))),
  inference(global_subsumption,[],[f208,f205])).
fof(f205,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.exh_to_patProof.sLet_intro','thm.bool.TRUTH')).
fof(f208,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f39])).
fof(f39,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f15])).
fof(f15,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.exh_to_patProof.sLet_intro','thm.bool.NOT_CLAUSES|split|2')).
fof(f365,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) | $spl4),
  inference(cnf_transformation,[],[f365_D])).
fof(f365_D,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f202,plain,(
  p(s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))))),
  inference(cnf_transformation,[],[f137])).
fof(f857,plain,(
  $false | ($spl4 | $spl9 | $spl338)),
  inference(subsumption_resolution,[],[f855,f370])).
fof(f855,plain,(
  p(s(bool,'F_0')) | ($spl4 | $spl338)),
  inference(backward_demodulation,[],[f854,f365])).
fof(f374,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl10),
  inference(cnf_transformation,[],[f374_D])).
fof(f374_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f212,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.exh_to_patProof.sLet_intro',aHL_BOOL_CASES)).
fof(f854,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl338),
  inference(cnf_transformation,[],[f854_D])).
fof(f854_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl338),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl338])])).
fof(f851,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl337),
  inference(cnf_transformation,[],[f851_D])).
fof(f851_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl337),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl337])])).
fof(f841,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) ) | $spl10),
  inference(equality_factoring,[],[f374])).
fof(f3899,plain,(
  $false | ($spl337 | $spl580 | $spl638 | $spl1162)),
  inference(subsumption_resolution,[],[f3898,f851])).
fof(f3898,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl580 | $spl638 | $spl1162)),
  inference(forward_demodulation,[],[f3875,f1717])).
fof(f3875,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),bool),sK17),s('type.pair.prod'('type.patSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),sK14),s('type.patSem.state'(sK12),sK13),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.patLang.Let_2'(s('type.patLang.exp',sK16),s('type.patLang.exp',sK15))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0'))))))) | ($spl580 | $spl1162)),
  inference(backward_demodulation,[],[f3874,f1634])).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 251
% Passive clauses: 552
% Generated clauses: 3634
% Final active clauses: 244
% Final passive clauses: 278
% Input formulas: 35
% Initial clauses: 150
% 
% Duplicate literals: 145
% Trivial inequalities: 14
% Fw subsumption resolutions: 429
% Fw demodulations: 15
% Bw demodulations: 28
% Condensations: 126
% Global subsumptions: 13
% 
% Simple tautologies: 190
% Equational tautologies: 16
% Forward subsumptions: 1402
% 
% Binary resolution: 1253
% Factoring: 191
% Forward superposition: 142
% Backward superposition: 517
% Self superposition: 22
% Equality factoring: 26
% Equality resolution: 5
% 
% Split clauses: 57
% Split components: 119
% SAT solver clauses: 890
% SAT solver unit clauses: 167
% SAT solver binary clauses: 61
% SAT solver learnt clauses: 27
% SAT solver learnt literals: 10
% 
% Sat splits: 57
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 837
% TWLsolver calls for satisfiability: 1537
% 
% Memory used [KB]: 3326
% Time elapsed: 0.169 s
% ------------------------------
% ------------------------------
% Success in time 0.931 s
