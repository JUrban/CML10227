Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_mtiProof
% (85842)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 149
% Passive clauses: 3355
% Generated clauses: 22200
% Final active clauses: 125
% Final passive clauses: 3059
% Input formulas: 37
% Initial clauses: 80
% 
% Duplicate literals: 1168
% Trivial inequalities: 200
% Fw subsumption resolutions: 1763
% Fw demodulations: 2402
% Bw demodulations: 21
% 
% Simple tautologies: 351
% Equational tautologies: 33
% Forward subsumptions: 11433
% 
% Binary resolution: 431
% Forward superposition: 9831
% Backward superposition: 5723
% Self superposition: 224
% Equality factoring: 82
% Equality resolution: 13
% 
% Split clauses: 1088
% Split components: 2241
% SAT solver clauses: 1667
% SAT solver unit clauses: 52
% SAT solver binary clauses: 438
% 
% Sat splits: 1088
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1626
% TWLsolver calls for satisfiability: 150
% 
% Memory used [KB]: 16758
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_mtiProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_mtiProof
% SZS output start Proof for thm.clos_mtiProof
fof(f7475,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f7465,f141,f231,f279,f281,f139,f223,f142,f233,f145,f235,f282,f284,f138,f225,f285,f287,f137,f227,f7319,f7320,f140,f221,f187,f248,f6473,f6491,f136,f229,f270,f278])).
fof(f278,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl62),
  inference(cnf_transformation,[],[f278_D])).
fof(f278_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f270,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | ($spl13 | $spl16)),
  inference(superposition,[],[f233,f235])).
fof(f229,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1)))) | $spl8),
  inference(cnf_transformation,[],[f229_D])).
fof(f229_D,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f136,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))))),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8)))) & ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),sK8),s('type.list.list'('type.closSem.v'),sK6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8])],[f90])).
fof(f90,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))))),
  inference(flattening,[],[f89])).
fof(f89,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8))))) & ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8))))) => p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8))))) => p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.closSem.v'),X12)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X14))))) => p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X9))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X14),s('type.list.list'('type.closSem.v'),X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13,X14] : ((p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7)))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.closSem.v'),X12)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X14))))) => p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X9))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X14),s('type.list.list'('type.closSem.v'),X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))))))))),
  file('thm.clos_mtiProof.recClosure_add_arg_lem','thm.clos_mtiProof.recClosure_add_arg_lem')).
fof(f6491,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))) | $spl1316),
  inference(cnf_transformation,[],[f6491_D])).
fof(f6491_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))) <=> ~$spl1316),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1316])])).
fof(f6473,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))) | ($spl8 | $spl62)),
  inference(resolution,[],[f229,f278])).
fof(f248,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))))) ) | $spl26),
  inference(cnf_transformation,[],[f248_D])).
fof(f248_D,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f187,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))))) )),
  inference(cnf_transformation,[],[f96])).
fof(f96,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1)))) | ! [X3,X4,X5,X6,X7,X8] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) | (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))) & ! [X9,X10,X11,X12,X13,X14,X15,X16,X17] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X14),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X13),s('type.closLang.exp',X15))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X14))),s('type.num.num',X13))),s('type.num.num','const.closLang.max_app_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X9))),s('type.num.num',X13)))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X16),s('type.closLang.exp',X17))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))) | s('type.num.num',X14) != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X10))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X9),s('type.list.list'('type.closSem.v'),X10))),s('type.list.list'('type.closSem.v'),X11)))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X9),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X10),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))))),s('type.list.list'('type.closSem.v'),X5))),s('type.num.num',X13),s('type.closLang.exp',X15))))),s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.closSem.v'),X8))),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num',X12))))))))))),
  inference(flattening,[],[f95])).
fof(f95,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1)))) | ! [X3,X4,X5,X6,X7,X8] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8))))) | (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))) & ! [X9,X10,X11,X12,X13,X14,X15,X16,X17] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X14),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X13),s('type.closLang.exp',X15))))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X14))),s('type.num.num',X13))),s('type.num.num','const.closLang.max_app_0')))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X9))),s('type.num.num',X13)))) | s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X16),s('type.closLang.exp',X17))) != s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))) | s('type.num.num',X14) != s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X10))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7))))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X9),s('type.list.list'('type.closSem.v'),X10))),s('type.list.list'('type.closSem.v'),X11))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X9),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X10),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))))),s('type.list.list'('type.closSem.v'),X5))),s('type.num.num',X13),s('type.closLang.exp',X15))))),s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.closSem.v'),X8))),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num',X12))))))))))),
  inference(ennf_transformation,[],[f67])).
fof(f67,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1)))) => ! [X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8))))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))) & ! [X9,X10,X11,X12,X13,X14,X15,X16,X17] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X14),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X13),s('type.closLang.exp',X15))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X14))),s('type.num.num',X13))),s('type.num.num','const.closLang.max_app_0')))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X9))),s('type.num.num',X13)))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X16),s('type.closLang.exp',X17))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))) & s('type.num.num',X14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X10))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X9),s('type.list.list'('type.closSem.v'),X10))),s('type.list.list'('type.closSem.v'),X11))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X9),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X10),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))))),s('type.list.list'('type.closSem.v'),X5))),s('type.num.num',X13),s('type.closLang.exp',X15))))),s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.closSem.v'),X8))),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num',X12))))))))))),
  inference(flattening,[],[f66])).
fof(f66,plain,(
  ! [X0] : ! [X1,X2] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1)))) => ! [X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X3),s('type.num.num',X4)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8))))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))))) & ! [X9,X10,X11,X12,X13,X14,X15,X16,X17] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X12),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2)))))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X14),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X13),s('type.closLang.exp',X15))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X14))),s('type.num.num',X13))),s('type.num.num','const.closLang.max_app_0')))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X9))),s('type.num.num',X13)))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X16),s('type.closLang.exp',X17))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))) & s('type.num.num',X14) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X10))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X7))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X4))),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X9),s('type.list.list'('type.closSem.v'),X10))),s('type.list.list'('type.closSem.v'),X11))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X0),'const.bool.the_value_0'),s('type.num.num',X3))),s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X9),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X10),s('type.list.list'('type.closSem.v'),X7))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X2))))))),s('type.list.list'('type.closSem.v'),X5))),s('type.num.num',X13),s('type.closLang.exp',X15))))),s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.closSem.v'),X8))),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X1))),s('type.num.num',X12))))))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(X6),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7)))) => ! [X9,X10,X11,X12,X13,X14] : ((p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X9),s('type.num.num',X10)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.closSem.v'),X12)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X14))))) => (p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X9))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X13),s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X14),s('type.list.list'('type.closSem.v'),X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))))))) & ! [X15,X16,X17,X18,X19,X20,X21,X22,X23] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X18),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8)))))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X18),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X20),s('type.closLang.exp','const.closLang.Fn_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.option.option'('type.list.list'('type.num.num')),'const.option.NONE_0'),s('type.num.num',X19),s('type.closLang.exp',X21))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num',X20))),s('type.num.num',X19))),s('type.num.num','const.closLang.max_app_0')))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X15))),s('type.num.num',X19)))) & s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.pair.,_2'(s('type.num.num',X22),s('type.closLang.exp',X23))) = s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.list.EL_2'(s('type.num.num',X18),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7))) & s('type.num.num',X20) = s('type.num.num',happ(s(fun('type.num.num','type.num.num'),happ(s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X16))))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.closSem.v'),X13))))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X10))),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16))),s('type.list.list'('type.closSem.v'),X17))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(X6),'const.bool.the_value_0'),s('type.num.num',X9))),s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X13))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.NIL_0'),s('type.list.list'('type.closSem.v'),X11),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X8))))))),s('type.list.list'('type.closSem.v'),X11))),s('type.num.num',X19),s('type.closLang.exp',X21))))),s('type.closSem.v',happ(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),'const.list.APPEND_2'(s('type.list.list'('type.closSem.v'),X17),s('type.list.list'('type.closSem.v'),X14))),s('type.list.list'('type.closSem.v'),X12),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X7))),s('type.num.num',X18))))))))))),
  file('thm.clos_mtiProof.recClosure_add_arg_lem','thm.clos_mtiProof.clos_mtiProof_53_prove_ltb')).
fof(f221,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),sK8),s('type.list.list'('type.closSem.v'),sK6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))))))) | $spl1),
  inference(cnf_transformation,[],[f221_D])).
fof(f221_D,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),sK8),s('type.list.list'('type.closSem.v'),sK6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2)))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f140,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK3))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))),s('type.list.list'('type.closSem.v'),'const.list.GENLIST_2'(s(fun('type.num.num','type.closSem.v'),'const.closSem.Recclosure_4'(s('type.option.option'('type.num.num'),'const.option.NONE_0'),s('type.list.list'('type.closSem.v'),sK8),s('type.list.list'('type.closSem.v'),sK6),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2))))))))),
  inference(cnf_transformation,[],[f98])).
fof(f7320,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))))) ) | $spl1390),
  inference(cnf_transformation,[],[f7320_D])).
fof(f7320_D,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))))) ) <=> ~$spl1390),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1390])])).
fof(f7319,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))))) ) | ($spl1 | $spl10 | $spl26 | $spl1316)),
  inference(subsumption_resolution,[],[f7318,f231])).
fof(f7318,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0))))) ) | ($spl1 | $spl26 | $spl1316)),
  inference(forward_demodulation,[],[f7234,f6491])).
fof(f7234,plain,(
  ( ! [X0] : (~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',X0))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',X0)))) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),happ(s(fun(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool))),'_dst_x00x11_2'(s(fun(fun('type.num.num',fun('type.closLang.exp',bool)),fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)),'const.pair.UNCURRY_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1100x1111x1011_4'(s(fun('type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')),fun(bool,fun(fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool),bool))),'const.option.option_CASE_0'),s(fun('type.num.num',fun('type.closLang.exp','type.option.option'('type.pair.prod'('type.num.num','type.closLang.exp')))),'const.clos_mtiProof.dest_addarg_Fn_0'),s(fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool)))),'_dst_x0000x1010x0101_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x10x01_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.pair.prod'('type.num.num','type.closLang.exp'),bool)))),'_dst_x0001x1110_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),fun(fun('type.num.num',fun('type.closLang.exp',bool)),bool)),'const.pair.pair_CASE_0'),s(fun('type.num.num',fun('type.num.num',fun('type.closLang.exp',fun('type.num.num',fun('type.closLang.exp',bool))))),'_dst_x00000x00101x11010_3'(s(fun(bool,fun(bool,bool)),'|slash||bslash|_0'),s(fun('type.closLang.exp',fun('type.closLang.exp',bool)),'_dst_x00x01x10_3'(s(fun('type.list.list'('type.closLang.exp'),fun('type.list.list'('type.closLang.exp'),bool)),'const.clos_relation.exp_rel_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s(fun('type.closLang.exp','type.list.list'('type.closLang.exp')),'_dst_x1x0_2'(s(fun('type.closLang.exp',fun('type.list.list'('type.closLang.exp'),'type.list.list'('type.closLang.exp'))),'const.list.CONS_0'),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s(fun('type.num.num',fun('type.num.num',fun('type.num.num',bool))),'_dst_x000x010x101_3'(s(fun('type.num.num',fun('type.num.num',bool)),'=_0'),s(fun('type.num.num','type.num.num'),'_i_0_0'),s(fun('type.num.num',fun('type.num.num','type.num.num')),'const.arithmetic.+_0'))))))))))))),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK2),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),sK1))))) ) | ($spl1 | $spl26)),
  inference(resolution,[],[f248,f221])).
fof(f227,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) | $spl6),
  inference(cnf_transformation,[],[f227_D])).
fof(f227_D,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f137,plain,(
  p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))))),
  inference(cnf_transformation,[],[f98])).
fof(f287,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) | $spl68),
  inference(cnf_transformation,[],[f287_D])).
fof(f287_D,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f285,plain,(
  s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) | ($spl6 | $spl13 | $spl16)),
  inference(subsumption_resolution,[],[f274,f233])).
fof(f274,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4))) | ($spl6 | $spl16)),
  inference(superposition,[],[f227,f235])).
fof(f225,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) | $spl4),
  inference(cnf_transformation,[],[f225_D])).
fof(f225_D,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f138,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6))))),
  inference(cnf_transformation,[],[f98])).
fof(f284,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6))) | $spl66),
  inference(cnf_transformation,[],[f284_D])).
fof(f284_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f282,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6))) | ($spl4 | $spl13 | $spl16)),
  inference(subsumption_resolution,[],[f273,f233])).
fof(f273,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6))) | ($spl4 | $spl16)),
  inference(superposition,[],[f225,f235])).
fof(f235,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl16),
  inference(cnf_transformation,[],[f235_D])).
fof(f235_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f145,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.clos_mtiProof.recClosure_add_arg_lem',aHL_BOOL_CASES)).
fof(f233,plain,(
  ~p(s(bool,'F_0')) | $spl13),
  inference(cnf_transformation,[],[f233_D])).
fof(f233_D,plain,(
  ~p(s(bool,'F_0')) <=> ~$spl13),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl13])])).
fof(f142,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f41])).
fof(f41,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_mtiProof.recClosure_add_arg_lem',aHL_FALSITY)).
fof(f223,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8)))) | $spl2),
  inference(cnf_transformation,[],[f223_D])).
fof(f223_D,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8)))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f139,plain,(
  p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))))),
  inference(cnf_transformation,[],[f98])).
fof(f281,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) | $spl64),
  inference(cnf_transformation,[],[f281_D])).
fof(f281_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f279,plain,(
  s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) | ($spl2 | $spl13 | $spl16)),
  inference(subsumption_resolution,[],[f272,f233])).
fof(f272,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK7),s('type.list.list'('type.closSem.v'),sK8))) | ($spl2 | $spl16)),
  inference(superposition,[],[f223,f235])).
fof(f231,plain,(
  p(s(bool,'T_0')) | $spl10),
  inference(cnf_transformation,[],[f231_D])).
fof(f231_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f141,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.clos_mtiProof.recClosure_add_arg_lem',aHL_TRUTH)).
fof(f7465,plain,(
  $false | ($spl10 | $spl64 | $spl66 | $spl68 | $spl1390)),
  inference(subsumption_resolution,[],[f7464,f231])).
fof(f7464,plain,(
  ~p(s(bool,'T_0')) | ($spl10 | $spl64 | $spl66 | $spl68 | $spl1390)),
  inference(forward_demodulation,[],[f7463,f287])).
fof(f7463,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) | ($spl10 | $spl64 | $spl66 | $spl1390)),
  inference(subsumption_resolution,[],[f7462,f231])).
fof(f7462,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) | ($spl10 | $spl64 | $spl66 | $spl1390)),
  inference(forward_demodulation,[],[f7461,f284])).
fof(f7461,plain,(
  ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) | ($spl10 | $spl64 | $spl1390)),
  inference(subsumption_resolution,[],[f7427,f231])).
fof(f7427,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),'const.clos_relation.val_rel_2'(s('type.bool.itself'(sK0),'const.bool.the_value_0'),s('type.num.num',sK4))),s('type.list.list'('type.closSem.v'),sK5),s('type.list.list'('type.closSem.v'),sK6)))) | ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK3),s('type.num.num',sK4)))) | ($spl64 | $spl1390)),
  inference(superposition,[],[f7320,f281])).
% SZS output end Proof for thm.clos_mtiProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 63
% Passive clauses: 697
% Generated clauses: 7168
% Final active clauses: 58
% Final passive clauses: 613
% Input formulas: 37
% Initial clauses: 80
% 
% Duplicate literals: 404
% Trivial inequalities: 46
% Fw subsumption resolutions: 273
% Fw demodulations: 567
% Bw demodulations: 25
% Condensations: 825
% Global subsumptions: 8
% 
% Simple tautologies: 108
% Equational tautologies: 24
% Forward subsumptions: 3126
% 
% Binary resolution: 115
% Forward superposition: 2107
% Backward superposition: 1768
% Self superposition: 145
% Equality factoring: 56
% Equality resolution: 4
% 
% Split clauses: 23
% Split components: 46
% SAT solver clauses: 1164
% SAT solver unit clauses: 80
% SAT solver binary clauses: 54
% SAT solver learnt clauses: 17
% 
% Sat splits: 23
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 1131
% TWLsolver calls for satisfiability: 495
% 
% Memory used [KB]: 11385
% Time elapsed: 0.532 s
% ------------------------------
% ------------------------------
% Success in time 1.15 s
