Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% (45391)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 106
% Passive clauses: 2275
% Generated clauses: 10883
% Final active clauses: 106
% Final passive clauses: 2089
% Input formulas: 68
% Initial clauses: 117
% 
% Duplicate literals: 384
% Trivial inequalities: 297
% Fw subsumption resolutions: 946
% Fw demodulations: 1573
% 
% Simple tautologies: 318
% Equational tautologies: 42
% Forward subsumptions: 4948
% 
% Binary resolution: 79
% Factoring: 1
% Forward superposition: 3808
% Backward superposition: 3576
% Self superposition: 139
% Equality factoring: 62
% Equality resolution: 39
% 
% Split clauses: 112
% Split components: 226
% SAT solver clauses: 180
% SAT solver unit clauses: 23
% SAT solver binary clauses: 64
% 
% Sat splits: 112
% 
% TWLsolver clauses: 180
% TWLsolver calls for satisfiability: 53
% 
% Memory used [KB]: 7675
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modProps
% (45400)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 98
% Passive clauses: 1025
% Generated clauses: 11411
% Final active clauses: 88
% Final passive clauses: 791
% Input formulas: 68
% Initial clauses: 117
% 
% Duplicate literals: 404
% Trivial inequalities: 141
% Fw subsumption resolutions: 527
% Fw demodulations: 1128
% Bw demodulations: 132
% Condensations: 721
% Global subsumptions: 12
% 
% Simple tautologies: 212
% Equational tautologies: 42
% Forward subsumptions: 5196
% Bw demodulations to eq. taut.: 10
% 
% Binary resolution: 90
% Factoring: 1
% Forward superposition: 3484
% Backward superposition: 3312
% Self superposition: 149
% Equality factoring: 59
% Equality resolution: 26
% 
% Split clauses: 36
% Split components: 72
% SAT solver clauses: 1999
% SAT solver unit clauses: 164
% SAT solver binary clauses: 64
% SAT solver learnt clauses: 24
% 
% Sat splits: 36
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1951
% TWLsolver calls for satisfiability: 437
% 
% Memory used [KB]: 15223
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.modProps
% (45424)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 457
% Passive clauses: 11636
% Generated clauses: 139459
% Final active clauses: 265
% Final passive clauses: 981
% Input formulas: 68
% Initial clauses: 117
% Discarded non-redundant clauses: 69721
% 
% Duplicate literals: 2631
% Trivial inequalities: 1186
% Fw subsumption resolutions: 6235
% Fw demodulations: 24072
% Bw demodulations: 5212
% Condensations: 5315
% Global subsumptions: 406
% 
% Simple tautologies: 987
% Equational tautologies: 619
% Forward subsumptions: 66612
% Fw demodulations to eq. taut.: 2672
% Bw demodulations to eq. taut.: 78
% 
% Unit resulting resolution: 27740
% Factoring: 2
% Forward superposition: 29113
% Backward superposition: 28653
% Self superposition: 512
% Equality factoring: 188
% Equality resolution: 107
% 
% Split clauses: 78
% Split components: 165
% SAT solver clauses: 12793
% SAT solver unit clauses: 2257
% SAT solver binary clauses: 3353
% 
% Sat splits: 78
% Sat splitting refutations: 592
% 
% Memory used [KB]: 121661
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f674,plain,(
  $false),
  inference(equality_resolution,[],[f621])).
fof(f621,plain,(
  ( ! [X16] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),X16) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK2)))) )),
  inference(superposition,[],[f574,f199])).
fof(f199,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5])],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f51])).
fof(f51,axiom,(
  ! [X6,X14] : ! [X36] : ? [X54,X13] : s('type.pair.prod'(X6,X14),X36) = s('type.pair.prod'(X6,X14),'const.pair.,_2'(s(X6,X54),s(X14,X13)))),
  file('thm.modProps.modProps_|49||48|_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f574,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK2))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),X10)))) )),
  inference(superposition,[],[f311,f199])).
fof(f311,plain,(
  ( ! [X14,X12,X13] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK2))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X13),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X14),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),X12)))))) )),
  inference(superposition,[],[f167,f199])).
fof(f167,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK2))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))) )),
  inference(cnf_transformation,[],[f134])).
fof(f134,plain,(
  ! [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.dec'),sK2))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f120])).
fof(f120,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) != s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.dec'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X5),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X9),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.dec'),X8))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_decs_3'(s('type.modSem.environment',X9),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.dec'),X8))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X11),s('type.pair.prod'('type.list.list'('type.modSem.v'),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.modSem.v'),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  file('thm.modProps.modProps_|49||48|_prove_ltb','thm.modProps.modProps_|49||48|_prove_ltb')).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 54
% Passive clauses: 195
% Generated clauses: 385
% Final active clauses: 54
% Final passive clauses: 185
% Input formulas: 68
% Initial clauses: 75
% 
% Selected by SInE selection: 34
% SInE iterations: 1
% 
% Duplicate literals: 2
% Trivial inequalities: 1
% Fw demodulations: 13
% 
% Simple tautologies: 26
% Equational tautologies: 2
% Forward subsumptions: 178
% 
% Forward superposition: 413
% Equality resolution: 4
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 2302
% Time elapsed: 0.024 s
% ------------------------------
% ------------------------------
% Success in time 11.767 s
