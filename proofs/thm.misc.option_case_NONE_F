Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.misc
% (98726)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 157
% Passive clauses: 3664
% Generated clauses: 24404
% Final active clauses: 128
% Final passive clauses: 3082
% Input formulas: 30
% Initial clauses: 58
% 
% Duplicate literals: 1223
% Trivial inequalities: 477
% Fw subsumption resolutions: 3772
% Fw demodulations: 2924
% Bw demodulations: 17
% 
% Simple tautologies: 545
% Equational tautologies: 60
% Forward subsumptions: 10207
% Fw demodulations to eq. taut.: 15
% 
% Binary resolution: 301
% Factoring: 1
% Forward superposition: 6952
% Backward superposition: 8038
% Self superposition: 231
% Equality factoring: 164
% Equality resolution: 44
% 
% Split clauses: 693
% Split components: 1401
% SAT solver clauses: 1677
% SAT solver unit clauses: 47
% SAT solver binary clauses: 243
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 2
% 
% Sat splits: 693
% Sat splitting refutations: 11
% 
% TWLsolver clauses: 1674
% TWLsolver calls for satisfiability: 223
% 
% Memory used [KB]: 12792
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.misc
% (98743)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 183
% Passive clauses: 1368
% Generated clauses: 14996
% Final active clauses: 126
% Final passive clauses: 965
% Input formulas: 30
% Initial clauses: 58
% 
% Duplicate literals: 214
% Trivial inequalities: 330
% Fw subsumption resolutions: 980
% Fw demodulations: 2513
% Bw demodulations: 222
% Condensations: 383
% Global subsumptions: 9
% 
% Simple tautologies: 145
% Equational tautologies: 24
% Forward subsumptions: 6841
% Fw demodulations to eq. taut.: 19
% Bw demodulations to eq. taut.: 10
% 
% Binary resolution: 130
% Factoring: 1
% Forward superposition: 4178
% Backward superposition: 4480
% Self superposition: 151
% Equality factoring: 39
% Equality resolution: 40
% 
% Split clauses: 47
% Split components: 94
% SAT solver clauses: 2142
% SAT solver unit clauses: 72
% SAT solver binary clauses: 74
% SAT solver learnt clauses: 20
% SAT solver learnt literals: 4
% 
% Sat splits: 47
% Sat splitting refutations: 26
% 
% TWLsolver clauses: 2104
% TWLsolver calls for satisfiability: 373
% 
% Memory used [KB]: 12537
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.misc
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.misc
% SZS output start Proof for thm.misc
fof(f42759,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f110,f170,f169,f109,f172,f108,f174,f168,f756,f757,f758,f760,f761,f762,f844,f848,f852,f856,f860,f864,f865,f1153,f1236,f1154,f1238,f1239,f2728,f2713,f2707,f2698,f2756,f2697,f2652,f2643,f2884,f2642,f2886,f2629,f2767,f2588,f2934,f2933,f3105,f3106,f3108,f3109,f3112,f3115,f3116,f3117,f3119,f3121,f3122,f3123,f3126,f3130,f3132,f3133,f3134,f3136,f3138,f3142,f3144,f3146,f3148,f3150,f3152,f3154,f3199,f3204,f3206,f3210,f4661,f4708,f4707,f5513,f5578,f5760,f5758,f5770,f5939,f5941,f5945,f5947,f5948,f5950,f5951,f5953,f5957,f5961,f6373,f6442,f7683,f7685,f7684,f8632,f8643,f8655,f8656,f8658,f8659,f10649,f10651,f10748,f10750,f11106,f11028,f11107,f13530,f13595,f14386,f14387,f14389,f14390,f14391,f14394,f14395,f14397,f14399,f14400,f14401,f14406,f14407,f14409,f14413,f14414,f14415,f14437,f14440,f14448,f14450,f14466,f14469,f14471,f14475,f14477,f14480,f14483,f14486,f14489,f14496,f14506,f14509,f14511,f14536,f14540,f14542,f14546,f14548,f14552,f14554,f14558,f14560,f14562,f14564,f14566,f14568,f14570,f14574,f14576,f14578,f14582,f14584,f14586,f14588,f19604,f19655,f20073,f20076,f20079,f20083,f20097,f20100,f20456,f20458,f20462,f20464,f20465,f20467,f20468,f20469,f20470,f20471,f20473,f20477,f20481,f20485,f20501,f20503,f20504,f20506,f20509,f20511,f20514,f20522,f20525,f20526,f26709,f10650,f26606,f26602,f26715,f26716,f26710,f27502,f27503,f27505,f27506,f27507,f27510,f27511,f27513,f27515,f27516,f27517,f27520,f27522,f27526,f27527,f27528,f27550,f27553,f27561,f27563,f27581,f27583,f27587,f27589,f27592,f27595,f27598,f27601,f27608,f27618,f27621,f27623,f27647,f27653,f27656,f27663,f27667,f27669,f27673,f27675,f27679,f27681,f27685,f27687,f27689,f27691,f27693,f27695,f27697,f27701,f27703,f27705,f27709,f27711,f27713,f27715,f27726,f27728,f36304,f36377,f37318,f37319,f37320,f37321,f37340,f37333,f37322,f37339,f37337,f37323,f37324,f37325,f37326,f37341,f37327,f37345,f37343,f37328,f37344,f37347,f37329,f37336,f37334,f37348,f39607,f39608,f39609,f39610,f39946,f39907,f39612,f39613,f39614,f39615,f39967,f10749,f39968,f10751,f39791,f39792,f39793,f39989,f39795,f39906,f39797,f39990,f39798,f39799,f39800,f39943,f39801,f39945,f39942,f40972,f40973,f40975,f40976,f40994,f40997,f41005,f41007,f41024,f41026,f41030,f41032,f41035,f41038,f41041,f41044,f41051,f41061,f41064,f41066,f41090,f41095,f41098,f41117,f41121,f41122,f41130,f41134,f41136,f41138,f41140,f41144,f41148,f41150,f41154,f41156,f41160,f41162,f41166,f41168,f41170,f41172,f41174,f41176,f41178,f41180,f41182,f41184,f41186,f41188,f41190,f41192,f41194,f41195,f41197,f41201,f41205,f41207,f41209,f41213,f41217,f41219,f41221,f41223,f41225,f41227,f41229,f41230,f41237,f41239,f41242,f41245,f41247,f41249,f41254,f41259,f41264,f41266,f41280,f41288,f41301,f41314,f41315,f41316,f41318,f41317,f41605,f41607,f41606,f41615,f26717,f41646,f41647,f41650,f41652,f2757,f41930,f41932,f41933,f41935,f41937,f41941,f41943,f41945,f41947,f41949,f41950,f41952,f41954,f41956,f41961,f41967,f41975,f41978,f42043,f42064,f42080,f42085,f42086,f42088,f42091,f42094,f42097,f42107,f42117,f42132,f42137,f42140,f42142,f42148,f42151,f42156,f42161,f42164,f42165,f42168,f42169,f42172,f42173,f42176,f42178,f42272,f42274,f42273,f42495,f42661,f42662,f42665,f42666,f42669,f42670,f42682,f42683,f42691,f5577,f42692,f42752,f42758])).
fof(f42758,plain,(
  $false | ($spl2 | $spl95 | $spl98)),
  inference(subsumption_resolution,[],[f42757,f111])).
fof(f111,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f7])).
fof(f7,axiom,(
  p(s(bool,'T_0'))),
  file('thm.misc.option_case_NONE_F','thm.bool.TRUTH')).
fof(f42757,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl95 | $spl98)),
  inference(forward_demodulation,[],[f42750,f39945])).
fof(f42750,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0))))) | ($spl2 | $spl95)),
  inference(trivial_inequality_removal,[],[f42748])).
fof(f42748,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),sK1) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0))))) | ($spl2 | $spl95)),
  inference(superposition,[],[f170,f42321])).
fof(f42321,plain,(
  s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4(sK1,sK0)))) | $spl95),
  inference(unit_resulting_resolution,[],[f39941,f145])).
fof(f145,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK4(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f98])).
fof(f98,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK4(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f51])).
fof(f51,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6] : ! [X15] : (s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X15) | ? [X9] : s('type.option.option'(X6),X15) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))))),
  file('thm.misc.option_case_NONE_F','thm.option.option_nchotomy')).
fof(f39941,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1) | $spl95),
  inference(cnf_transformation,[],[f39941_D])).
fof(f39941_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1) <=> ~$spl95),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl95])])).
fof(f42752,plain,(
  $false | ($spl2 | $spl95 | $spl98)),
  inference(subsumption_resolution,[],[f42751,f111])).
fof(f42751,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl95 | $spl98)),
  inference(forward_demodulation,[],[f42741,f39945])).
fof(f42741,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0))))) | ($spl2 | $spl95)),
  inference(unit_resulting_resolution,[],[f42321,f170])).
fof(f42692,plain,(
  ( ! [X222,X223] : (s('type.option.option'(X222),'const.option.NONE_0') = s('type.option.option'(X222),X223)) ) | $spl124),
  inference(cnf_transformation,[],[f42692_D])).
fof(f42692_D,plain,(
  ( ! [X222,X223] : (s('type.option.option'(X222),'const.option.NONE_0') = s('type.option.option'(X222),X223)) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f5577,plain,(
  ( ! [X56] : (s(bool,'F_0') = s(bool,X56)) ) | $spl32),
  inference(cnf_transformation,[],[f5577_D])).
fof(f5577_D,plain,(
  ( ! [X56] : (s(bool,'F_0') = s(bool,X56)) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f42691,plain,(
  ( ! [X222,X223,X226] : (s(bool,'F_0') = s(bool,X226) | s('type.option.option'(X222),'const.option.NONE_0') = s('type.option.option'(X222),X223)) ) | ($spl18 | $spl40 | $spl52)),
  inference(subsumption_resolution,[],[f42690,f42688])).
fof(f42688,plain,(
  ( ! [X182,X180,X179] : (~p(s(bool,happ(s(fun(X179,bool),X182),s(X179,sK4(X180,X179))))) | s('type.option.option'(X179),'const.option.NONE_0') = s('type.option.option'(X179),X180)) ) | ($spl18 | $spl52)),
  inference(subsumption_resolution,[],[f42630,f176])).
fof(f176,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f175,f120])).
fof(f120,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f83])).
fof(f83,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f38])).
fof(f38,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.misc.option_case_NONE_F','thm.bool.EQ_CLAUSES|split|1')).
fof(f175,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f114,f111])).
fof(f114,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f81])).
fof(f81,plain,(
  (p(s(bool,'T_0')) | p(s(bool,'F_0'))) & (~p(s(bool,'F_0')) | ~p(s(bool,'T_0')))),
  inference(nnf_transformation,[],[f34])).
fof(f34,plain,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  inference(flattening,[],[f17])).
fof(f17,axiom,(
  ~p(s(bool,'T_0')) <=> p(s(bool,'F_0'))),
  file('thm.misc.option_case_NONE_F','thm.bool.NOT_CLAUSES|split|1')).
fof(f42630,plain,(
  ( ! [X182,X180,X179] : (s(bool,'T_0') = s(bool,'F_0') | ~p(s(bool,happ(s(fun(X179,bool),X182),s(X179,sK4(X180,X179))))) | s('type.option.option'(X179),'const.option.NONE_0') = s('type.option.option'(X179),X180)) ) | ($spl18 | $spl52)),
  inference(backward_demodulation,[],[f42502,f39807])).
fof(f39807,plain,(
  ( ! [X182,X180,X181,X179] : (~p(s(bool,happ(s(fun(X179,bool),X182),s(X179,sK4(X180,X179))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X179),X180),s(bool,X181),s(fun(X179,bool),X182))) | s('type.option.option'(X179),'const.option.NONE_0') = s('type.option.option'(X179),X180)) )),
  inference(superposition,[],[f121,f651])).
fof(f651,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s(X5,happ(s(fun(X3,X5),X6),s(X3,sK4(X4,X3)))) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X3),X4),s(X5,X7),s(fun(X3,X5),X6))) | s('type.option.option'(X3),'const.option.NONE_0') = s('type.option.option'(X3),X4)) )),
  inference(superposition,[],[f164,f145])).
fof(f164,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))) )),
  inference(cnf_transformation,[],[f70])).
fof(f70,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(flattening,[],[f69])).
fof(f69,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun(X1,X0),X4),s(X1,X2))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.SOME_1'(s(X1,X2))),s(X0,X3),s(fun(X1,X0),X4)))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X16,X6] : ! [X9,X17,X18] : s(X16,happ(s(fun(X6,X16),X18),s(X6,X9))) = s(X16,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))),s(X16,X17),s(fun(X6,X16),X18)))),
  file('thm.misc.option_case_NONE_F','thm.option.option_case_def|split|1')).
fof(f121,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f83])).
fof(f42502,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,X2),s(fun(X0,bool),X3)))) ) | ($spl18 | $spl52)),
  inference(unit_resulting_resolution,[],[f42453,f36391])).
fof(f36391,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(condensation,[],[f36390])).
fof(f36390,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X1)) | s(bool,'F_0') = s(bool,X1)) ) | $spl18),
  inference(condensation,[],[f36389])).
fof(f36389,plain,(
  ( ! [X165,X163,X164] : (p(s(bool,X164)) | s(bool,'F_0') = s(bool,X165) | s(bool,'F_0') = s(bool,X163) | s(bool,'F_0') = s(bool,X164)) ) | $spl18),
  inference(subsumption_resolution,[],[f35340,f3826])).
fof(f3826,plain,(
  ( ! [X57,X56] : (s(bool,X57) = s(bool,sK4('const.option.SOME_1'(s(bool,X56)),bool)) | s(bool,'F_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X57)) ) | $spl18),
  inference(superposition,[],[f3511,f1267])).
fof(f1267,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,sK4('const.option.SOME_1'(s(X0,X1)),X0))) )),
  inference(unit_resulting_resolution,[],[f547,f153])).
fof(f153,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : ((s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))))),
  inference(nnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(flattening,[],[f60])).
fof(f60,plain,(
  ! [X0] : ! [X1,X2] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X6] : ! [X9,X13] : (s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X13))) <=> s(X6,X9) = s(X6,X13))),
  file('thm.misc.option_case_NONE_F','thm.option.SOME_|49||49|')).
fof(f547,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK4('const.option.SOME_1'(s(X0,X1)),X0))))) )),
  inference(unit_resulting_resolution,[],[f150,f145])).
fof(f150,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : s('type.option.option'(X0),'const.option.NONE_0') != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(flattening,[],[f56])).
fof(f56,plain,(
  ! [X0] : ! [X1] : ~s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X6] : ! [X9] : ~s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9)))),
  file('thm.misc.option_case_NONE_F','thm.option.NOT_NONE_SOME')).
fof(f3511,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f2767,f2767])).
fof(f35340,plain,(
  ( ! [X165,X163,X164] : (p(s(bool,X164)) | s(bool,X165) != s(bool,sK4('const.option.SOME_1'(s(bool,X163)),bool)) | s(bool,'F_0') = s(bool,X165) | s(bool,'F_0') = s(bool,X163) | s(bool,'F_0') = s(bool,X164)) ) | $spl18),
  inference(superposition,[],[f7424,f3826])).
fof(f7424,plain,(
  ( ! [X109,X110] : (p(s(bool,X110)) | s(bool,X109) != s(bool,X110) | s(bool,'F_0') = s(bool,X109)) ) | $spl18),
  inference(forward_demodulation,[],[f7423,f1267])).
fof(f7423,plain,(
  ( ! [X109,X110] : (s(bool,X109) != s(bool,X110) | p(s(bool,X110)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X109)),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f6924,f176])).
fof(f6924,plain,(
  ( ! [X109,X110] : (s(bool,X109) != s(bool,X110) | p(s(bool,X110)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X109)),bool))) ) | $spl18),
  inference(superposition,[],[f120,f3772])).
fof(f3772,plain,(
  ( ! [X68,X69] : (s(bool,X68) = s(bool,X69) | s(bool,'F_0') = s(bool,X69) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X68)),bool))) ) | $spl18),
  inference(superposition,[],[f3511,f1267])).
fof(f42453,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(bool,X39),s(fun(X37,bool),X40))))) ) | ($spl18 | $spl52)),
  inference(subsumption_resolution,[],[f42443,f42298])).
fof(f42298,plain,(
  ( ! [X64,X62,X65,X63] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X62,bool),bool),happ(s(fun(bool,fun(fun(X62,bool),bool)),happ(s(fun('type.option.option'(X62),fun(bool,fun(fun(X62,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X62),X63))),s(bool,X64))),s(fun(X62,bool),X65)))) ) | ($spl18 | $spl52)),
  inference(global_subsumption,[],[f11438,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f550,f125,f1426,f13356,f13354,f13351,f13332,f13308,f11567,f11565,f11562,f11552,f11524,f10144,f10143,f10062,f10061,f10044,f10030,f10029,f9683,f9682,f9681,f9680,f8872,f8871,f8870,f8869,f8593,f5309,f5281,f5065,f4884,f4789,f4788,f1000,f999,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36527,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37673,f37676,f37696,f37979,f37765,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39641,f39643,f39652,f39653,f39656,f39765,f39771,f39773,f39782,f39783,f39786,f39816,f39903,f10749,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39811,f39809,f39807,f39806,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f39897,f39889,f39888,f39887,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39687,f39686,f39683,f39682,f39679,f39670,f39658,f39513,f38588,f38587,f38007,f124,f175,f358,f427,f436,f437,f476,f477,f512,f513,f606,f675,f1027,f1030,f1031,f1062,f1280,f2004,f4787,f4834,f4876,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5756,f8592,f8594,f8595,f8907,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f1639,f1493,f39681,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9764,f10139,f10141,f12560,f39680,f1427,f39823,f5282,f5066,f39684,f5310])).
fof(f5310,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X71),X72),s(bool,X73),s(fun(X71,bool),X74))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X71,bool),bool),happ(s(fun(bool,fun(fun(X71,bool),bool)),happ(s(fun('type.option.option'(X71),fun(bool,fun(fun(X71,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X71),X72))),s(bool,X73))),s(fun(X71,bool),X74))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f437,f165])).
fof(f39684,plain,(
  ( ! [X269,X265,X267,X268,X266] : (s(bool,X269) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X265),X267),s(bool,X268),s(fun(X265,bool),X266))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X269))) | s(bool,'T_0') = s(bool,happ(s(fun(X265,bool),X266),s(X265,sK4(X267,X265)))) | s('type.option.option'(X265),'const.option.NONE_0') = s('type.option.option'(X265),X267)) )),
  inference(superposition,[],[f477,f651])).
fof(f5066,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X69),X70),s(bool,X71),s(fun(X69,bool),X72))))) | s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72))) | s(bool,'T_0') = s(bool,X73)) )),
  inference(superposition,[],[f436,f165])).
fof(f5282,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X71),X72),s(bool,X73),s(fun(X71,bool),X74))))) | s(bool,'F_0') = s(bool,X75) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X71,bool),bool),happ(s(fun(bool,fun(fun(X71,bool),bool)),happ(s(fun('type.option.option'(X71),fun(bool,fun(fun(X71,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X71),X72))),s(bool,X73))),s(fun(X71,bool),X74)))) )),
  inference(superposition,[],[f437,f165])).
fof(f39823,plain,(
  ( ! [X261,X259,X260,X262,X258] : (s(bool,X262) != s(bool,happ(s(fun(X258,bool),X261),s(X258,sK4(X259,X258)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X258),X259),s(bool,X260),s(fun(X258,bool),X261))))) | s(bool,'T_0') = s(bool,X262) | s('type.option.option'(X258),'const.option.NONE_0') = s('type.option.option'(X258),X259)) )),
  inference(superposition,[],[f477,f651])).
fof(f1427,plain,(
  ( ! [X30,X28,X31,X29,X32] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X28),X29),s(bool,X30),s(fun(X28,bool),X31))) | s(bool,X32) = s(bool,happ(s(fun(fun(X28,bool),bool),happ(s(fun(bool,fun(fun(X28,bool),bool)),happ(s(fun('type.option.option'(X28),fun(bool,fun(fun(X28,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X28),X29))),s(bool,X30))),s(fun(X28,bool),X31))) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f213,f165])).
fof(f39680,plain,(
  ( ! [X249,X246,X248,X247,X245] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X245),X247),s(bool,X248),s(fun(X245,bool),X246))))) | s(bool,X249) = s(bool,happ(s(fun(X245,bool),X246),s(X245,sK4(X247,X245)))) | s(bool,'T_0') = s(bool,X249) | s('type.option.option'(X245),'const.option.NONE_0') = s('type.option.option'(X245),X247)) )),
  inference(superposition,[],[f436,f651])).
fof(f12560,plain,(
  ( ! [X30,X28,X31,X29] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X28),s(fun(X30,bool),X31))) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f442,f118])).
fof(f10141,plain,(
  ( ! [X112,X113] : (s(bool,'T_0') != s(bool,X113) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4(X112,bool)))) | s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) )),
  inference(superposition,[],[f154,f550])).
fof(f10139,plain,(
  ( ! [X109,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X109) = s(bool,sK4(X108,bool)) | s('type.option.option'(bool),X108) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X108)) )),
  inference(superposition,[],[f153,f550])).
fof(f9764,plain,(
  ( ! [X6,X4,X5] : (s(bool,'F_0') = s(bool,sK5('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f9724,f111])).
fof(f9724,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK5('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f513,f213])).
fof(f10025,plain,(
  ( ! [X24,X25] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X25))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X24) = s('type.option.option'(bool),X25) | s(bool,'T_0') = s(bool,sK4(X24,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X24)) )),
  inference(superposition,[],[f153,f550])).
fof(f10027,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),X29) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X28))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X29))) | s(bool,'T_0') = s(bool,sK4(X28,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X28)) )),
  inference(superposition,[],[f154,f550])).
fof(f10038,plain,(
  ( ! [X61,X59,X60] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),f(s(X59,sK6(X60,X61,'type.option.option'(bool),X59)))) | s(fun(X59,'type.option.option'(bool)),X60) = s(fun(X59,'type.option.option'(bool)),X61) | s(bool,'T_0') = s(bool,sK4(g(s(X59,sK6(X60,X61,'type.option.option'(bool),X59))),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),g(s(X59,sK6(X60,X61,'type.option.option'(bool),X59))))) )),
  inference(superposition,[],[f163,f550])).
fof(f10042,plain,(
  ( ! [X73] : (s('type.option.option'('type.option.option'(bool)),X73) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X73) | s(bool,'T_0') = s(bool,sK4(sK4(X73,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK4(X73,'type.option.option'(bool)))) )),
  inference(superposition,[],[f145,f550])).
fof(f10045,plain,(
  ( ! [X78,X79,X77] : (s(X79,f(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) != s(X79,g(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(fun('type.option.option'(bool),X79),X77) = s(fun('type.option.option'(bool),X79),X78) | s(bool,'T_0') = s(bool,sK4(sK6(X77,X78,X79,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK6(X77,X78,X79,'type.option.option'(bool)))) )),
  inference(superposition,[],[f163,f550])).
fof(f10051,plain,(
  ( ! [X12,X10,X13,X11] : (s(X11,happ(s(fun(bool,X11),X12),s(bool,'F_0'))) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(bool),X10),s(X11,X13),s(fun(bool,X11),X12))) | s(bool,'T_0') = s(bool,sK4(X10,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X10)) )),
  inference(superposition,[],[f164,f550])).
fof(f10057,plain,(
  ( ! [X24,X25] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X24))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X25))) | s('type.option.option'(bool),X25) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X24,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X24)) )),
  inference(superposition,[],[f153,f550])).
fof(f10059,plain,(
  ( ! [X28,X29] : (s('type.option.option'(bool),X28) != s('type.option.option'(bool),X29) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X29))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s(bool,'T_0') = s(bool,sK4(X28,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X28)) )),
  inference(superposition,[],[f154,f550])).
fof(f10154,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))) )),
  inference(duplicate_literal_removal,[],[f10136])).
fof(f10136,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) )),
  inference(superposition,[],[f145,f550])).
fof(f10163,plain,(
  ( ! [X12] : (p(s(bool,sK4(X12,bool))) | s('type.option.option'(bool),X12) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12)) )),
  inference(trivial_inequality_removal,[],[f10081])).
fof(f10081,plain,(
  ( ! [X12] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,sK4(X12,bool))) | s('type.option.option'(bool),X12) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12)) )),
  inference(superposition,[],[f120,f550])).
fof(f10173,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4('const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s('type.option.option'(bool),X4),s(fun(X3,'type.option.option'(bool)),X5)),bool))) )),
  inference(forward_demodulation,[],[f9973,f162])).
fof(f9973,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4('const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s('type.option.option'(bool),X4),s(fun(X3,'type.option.option'(bool)),X5)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s('type.option.option'(bool),X4),s(fun(X3,'type.option.option'(bool)),X5)))) )),
  inference(superposition,[],[f550,f162])).
fof(f10174,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(X6,'type.option.option'(bool)),X9),s(X6,X7))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X6,'type.option.option'(bool)),X9),s(X6,X7))) | s(bool,'T_0') = s(bool,sK4('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s('type.option.option'(bool),X8),s(fun(X6,'type.option.option'(bool)),X9)),bool))) )),
  inference(forward_demodulation,[],[f9974,f164])).
fof(f9974,plain,(
  ( ! [X6,X8,X7,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),happ(s(fun(X6,'type.option.option'(bool)),X9),s(X6,X7))) | s(bool,'T_0') = s(bool,sK4('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s('type.option.option'(bool),X8),s(fun(X6,'type.option.option'(bool)),X9)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s('type.option.option'(bool),X8),s(fun(X6,'type.option.option'(bool)),X9)))) )),
  inference(superposition,[],[f550,f164])).
fof(f10175,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X10),X11),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X10),X11),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13))) | s(bool,'T_0') = s(bool,sK4(happ(s(fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X10),fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X10),X11))),s('type.option.option'(bool),X12))),s(fun(X10,'type.option.option'(bool)),X13)),bool))) )),
  inference(forward_demodulation,[],[f9975,f165])).
fof(f9975,plain,(
  ( ! [X12,X10,X13,X11] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X10),X11),s('type.option.option'(bool),X12),s(fun(X10,'type.option.option'(bool)),X13))) | s(bool,'T_0') = s(bool,sK4(happ(s(fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X10),fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X10),X11))),s('type.option.option'(bool),X12))),s(fun(X10,'type.option.option'(bool)),X13)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),happ(s(fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)),happ(s(fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool))),happ(s(fun('type.option.option'(X10),fun('type.option.option'(bool),fun(fun(X10,'type.option.option'(bool)),'type.option.option'(bool)))),'const.option.option_CASE_0'),s('type.option.option'(X10),X11))),s('type.option.option'(bool),X12))),s(fun(X10,'type.option.option'(bool)),X13)))) )),
  inference(superposition,[],[f550,f165])).
fof(f10176,plain,(
  ( ! [X14] : (s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X14) | s('type.option.option'(bool),X14) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(sK4('const.option.SOME_1'(s('type.option.option'(bool),X14)),'type.option.option'(bool)),bool))) )),
  inference(forward_demodulation,[],[f9976,f1267])).
fof(f9976,plain,(
  ( ! [X14] : (s('type.option.option'(bool),X14) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(sK4('const.option.SOME_1'(s('type.option.option'(bool),X14)),'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK4('const.option.SOME_1'(s('type.option.option'(bool),X14)),'type.option.option'(bool)))) )),
  inference(superposition,[],[f550,f1267])).
fof(f10180,plain,(
  ( ! [X12,X10,X11,X9] : (s(bool,'T_0') = s(bool,X9) | s(X10,happ(s(fun(bool,X10),X11),s(bool,X9))) = s(X10,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X10,X12),s(fun(bool,X10),X11)))) )),
  inference(forward_demodulation,[],[f10179,f1267])).
fof(f10179,plain,(
  ( ! [X12,X10,X11,X9] : (s(X10,happ(s(fun(bool,X10),X11),s(bool,X9))) = s(X10,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X10,X12),s(fun(bool,X10),X11))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X9)),bool))) )),
  inference(subsumption_resolution,[],[f10018,f150])).
fof(f10018,plain,(
  ( ! [X12,X10,X11,X9] : (s(X10,happ(s(fun(bool,X10),X11),s(bool,X9))) = s(X10,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(X10,X12),s(fun(bool,X10),X11))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X9)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9)))) )),
  inference(superposition,[],[f164,f550])).
fof(f10185,plain,(
  ( ! [X14] : (s(bool,'F_0') != s(bool,sK4(X14,bool)) | s('type.option.option'(bool),X14) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X14)) )),
  inference(subsumption_resolution,[],[f10083,f111])).
fof(f10083,plain,(
  ( ! [X14] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,sK4(X14,bool)) | s('type.option.option'(bool),X14) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X14)) )),
  inference(superposition,[],[f124,f550])).
fof(f10186,plain,(
  ( ! [X21,X20] : (~p(s(bool,X21)) | s(bool,X21) = s(bool,sK4(X20,bool)) | s('type.option.option'(bool),X20) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X20)) )),
  inference(subsumption_resolution,[],[f10087,f111])).
fof(f10087,plain,(
  ( ! [X21,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X21)) | s(bool,X21) = s(bool,sK4(X20,bool)) | s('type.option.option'(bool),X20) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X20)) )),
  inference(superposition,[],[f161,f550])).
fof(f11235,plain,(
  ( ! [X94,X95,X93,X96] : (s('type.option.option'(bool),X96) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK4(X96,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.NONE_0'),s(bool,X94),s(fun(X93,bool),X95))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X96) | s(bool,'F_0') = s(bool,X94)) )),
  inference(superposition,[],[f551,f358])).
fof(f11245,plain,(
  ( ! [X121,X122] : (s('type.option.option'(bool),X122) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK4(X121,bool)) = s(bool,sK4(X122,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X122) | s('type.option.option'(bool),X121) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X121)) )),
  inference(superposition,[],[f551,f550])).
fof(f11247,plain,(
  ( ! [X127,X126] : (s('type.option.option'('type.option.option'(bool)),X127) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X126))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK4(X127,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X127) | s(bool,'T_0') = s(bool,sK4(X126,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X126)) )),
  inference(superposition,[],[f551,f550])).
fof(f11248,plain,(
  ( ! [X128,X129] : (s('type.option.option'('type.option.option'(bool)),X129) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X128) = s('type.option.option'(bool),sK4(X129,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X129) | s(bool,'T_0') = s(bool,sK4(X128,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X128)) )),
  inference(superposition,[],[f551,f550])).
fof(f11250,plain,(
  ( ! [X4,X3] : (s('type.option.option'(bool),X3) != s('type.option.option'(bool),X4) | s(bool,'F_0') = s(bool,sK4(X4,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s(bool,'T_0') = s(bool,sK4(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3)) )),
  inference(superposition,[],[f551,f550])).
fof(f11255,plain,(
  ( ! [X4,X3] : (s('type.option.option'(bool),X3) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK4(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3)) )),
  inference(subsumption_resolution,[],[f11197,f150])).
fof(f11197,plain,(
  ( ! [X4,X3] : (s('type.option.option'(bool),X3) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X3,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X3)) )),
  inference(superposition,[],[f551,f550])).
fof(f12583,plain,(
  ( ! [X140,X138,X139,X137] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X137))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138))) | s(bool,X138) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X139),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X139,bool),X140))) | s(bool,'T_0') = s(bool,X137)) )),
  inference(superposition,[],[f442,f118])).
fof(f12601,plain,(
  ( ! [X218,X220,X219,X217] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) | s(bool,X218) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X219),'const.option.NONE_0'),s(bool,sK4(X217,bool)),s(fun(X219,bool),X220))) | s('type.option.option'(bool),X217) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X217)) )),
  inference(superposition,[],[f442,f550])).
fof(f12604,plain,(
  ( ! [X231,X229,X230,X232] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X229))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X230))) | s('type.option.option'(bool),X230) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X231),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X231,'type.option.option'(bool)),X232))) | s(bool,'T_0') = s(bool,sK4(X229,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X229)) )),
  inference(superposition,[],[f442,f550])).
fof(f12606,plain,(
  ( ! [X241,X239,X240,X238] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X239))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X239) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X240),'const.option.NONE_0'),s('type.option.option'(bool),X238),s(fun(X240,'type.option.option'(bool)),X241))) | s(bool,'T_0') = s(bool,sK4(X238,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X238)) )),
  inference(superposition,[],[f442,f550])).
fof(f12609,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.option.option'(bool),X8) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X9) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X10),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X10,bool),X11))) | s(bool,'T_0') = s(bool,sK4(X8,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X8)) )),
  inference(superposition,[],[f442,f550])).
fof(f12645,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X164))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X161),'const.option.NONE_0'),s(bool,X162),s(fun(X161,bool),X163))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,X164),s(fun(X165,bool),X166))) | s(bool,'F_0') = s(bool,X162)) )),
  inference(superposition,[],[f442,f358])).
fof(f12657,plain,(
  ( ! [X218,X220,X219,X217] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) | s(bool,sK4(X217,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X219),'const.option.NONE_0'),s(bool,X218),s(fun(X219,bool),X220))) | s('type.option.option'(bool),X217) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X217)) )),
  inference(superposition,[],[f442,f550])).
fof(f12660,plain,(
  ( ! [X231,X229,X230,X232] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X229))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X230))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X231),'const.option.NONE_0'),s('type.option.option'(bool),X230),s(fun(X231,'type.option.option'(bool)),X232))) | s(bool,'T_0') = s(bool,sK4(X229,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X229)) )),
  inference(superposition,[],[f442,f550])).
fof(f12662,plain,(
  ( ! [X241,X239,X240,X238] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X239))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X238) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X240),'const.option.NONE_0'),s('type.option.option'(bool),X239),s(fun(X240,'type.option.option'(bool)),X241))) | s(bool,'T_0') = s(bool,sK4(X238,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X238)) )),
  inference(superposition,[],[f442,f550])).
fof(f12665,plain,(
  ( ! [X10,X8,X11,X9] : (s('type.option.option'(bool),X8) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X10),'const.option.NONE_0'),s(bool,X9),s(fun(X10,bool),X11))) | s(bool,'T_0') = s(bool,sK4(X8,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X8)) )),
  inference(superposition,[],[f442,f550])).
fof(f39681,plain,(
  ( ! [X253,X251,X254,X252,X250] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X254))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X250),X252),s(bool,X253),s(fun(X250,bool),X251))))) | s(bool,'F_0') = s(bool,X254) | s(bool,'T_0') = s(bool,happ(s(fun(X250,bool),X251),s(X250,sK4(X252,X250)))) | s('type.option.option'(X250),'const.option.NONE_0') = s('type.option.option'(X250),X252)) )),
  inference(superposition,[],[f437,f651])).
fof(f1493,plain,(
  ( ! [X144,X142,X145,X143] : (s(bool,X145) != s(bool,f(s(X142,sK6(X143,X144,bool,X142)))) | s(fun(X142,bool),X143) = s(fun(X142,bool),X144) | s(bool,'T_0') = s(bool,X145) | s(bool,'T_0') = s(bool,g(s(X142,sK6(X143,X144,bool,X142))))) )),
  inference(superposition,[],[f163,f213])).
fof(f1639,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') != s(bool,f(s(X131,sK6(X132,X133,bool,X131)))) | s(fun(X131,bool),X132) = s(fun(X131,bool),X133) | s(bool,X134) = s(bool,g(s(X131,sK6(X132,X133,bool,X131)))) | s(bool,'T_0') = s(bool,X134)) )),
  inference(superposition,[],[f163,f213])).
fof(f1074,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X70),X71),s(bool,X72),s(fun(X70,bool),X73)))) | s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) )),
  inference(superposition,[],[f156,f165])).
fof(f1099,plain,(
  ( ! [X68,X66,X69,X67,X65] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X69)))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X68)))) | s(fun(X65,bool),X68) != s(fun(X65,bool),X69)) )),
  inference(forward_demodulation,[],[f1073,f165])).
fof(f1073,plain,(
  ( ! [X68,X66,X69,X67,X65] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X68)))) | p(s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X69)))) | s(fun(X65,bool),X68) != s(fun(X65,bool),X69)) )),
  inference(superposition,[],[f155,f165])).
fof(f1100,plain,(
  ( ! [X76,X74,X77,X75] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),X75),s(bool,X76),s(fun(X74,bool),X77)))) | p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),X75),s(bool,X76),s(fun(X74,bool),sK5(X77,happ(s(fun(bool,fun(fun(X74,bool),bool)),happ(s(fun('type.option.option'(X74),fun(bool,fun(fun(X74,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X74),X75))),s(bool,X76)),fun(X74,bool))))))) )),
  inference(forward_demodulation,[],[f1075,f165])).
fof(f1075,plain,(
  ( ! [X76,X74,X77,X75] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),X75),s(bool,X76),s(fun(X74,bool),sK5(X77,happ(s(fun(bool,fun(fun(X74,bool),bool)),happ(s(fun('type.option.option'(X74),fun(bool,fun(fun(X74,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X74),X75))),s(bool,X76)),fun(X74,bool)))))) | ~p(s(bool,happ(s(fun(fun(X74,bool),bool),happ(s(fun(bool,fun(fun(X74,bool),bool)),happ(s(fun('type.option.option'(X74),fun(bool,fun(fun(X74,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X74),X75))),s(bool,X76))),s(fun(X74,bool),X77))))) )),
  inference(superposition,[],[f157,f165])).
fof(f1398,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,X45) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),X42),s(bool,X43),s(fun(X41,bool),X44))) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X41,bool),bool),happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43))),s(fun(X41,bool),X44)))) )),
  inference(superposition,[],[f213,f165])).
fof(f11613,plain,(
  ( ! [X68,X66,X69,X67] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),X67),s(bool,X68),s(fun(X66,bool),sK5(X69,happ(s(fun(bool,fun(fun(X66,bool),bool)),happ(s(fun('type.option.option'(X66),fun(bool,fun(fun(X66,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X66),X67))),s(bool,X68)),fun(X66,bool))))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),X67),s(bool,X68),s(fun(X66,bool),X69))))) )),
  inference(forward_demodulation,[],[f11586,f165])).
fof(f11586,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),X67),s(bool,X68),s(fun(X66,bool),X69)))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X66,bool),bool),happ(s(fun(bool,fun(fun(X66,bool),bool)),happ(s(fun('type.option.option'(X66),fun(bool,fun(fun(X66,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X66),X67))),s(bool,X68))),s(fun(X66,bool),sK5(X69,happ(s(fun(bool,fun(fun(X66,bool),bool)),happ(s(fun('type.option.option'(X66),fun(bool,fun(fun(X66,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X66),X67))),s(bool,X68)),fun(X66,bool)))))) )),
  inference(superposition,[],[f612,f165])).
fof(f13377,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X112),X113),s(bool,X114),s(fun(X112,bool),X115)))) | s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) )),
  inference(superposition,[],[f524,f165])).
fof(f38558,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X112),X113),s(bool,X114),s(fun(X112,bool),X115)))) | s(fun(X112,bool),X115) = s(fun(X112,bool),sK5(X115,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(fun(X112,bool),bool),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114))),s(fun(X116,fun(fun(X112,bool),bool)),X117)),fun(X112,bool)))) )),
  inference(superposition,[],[f510,f165])).
fof(f8907,plain,(
  ( ! [X6,X4,X5] : (s(bool,X5) = s(bool,sK5(X5,X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f8891,f111])).
fof(f8891,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | s(bool,X5) = s(bool,sK5(X5,X4,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f512,f213])).
fof(f8595,plain,(
  ( ! [X97,X98] : (s(bool,X97) != s(bool,X98) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X97)),bool))) )),
  inference(superposition,[],[f477,f1267])).
fof(f8594,plain,(
  ( ! [X94,X92,X95,X93,X96] : (s(bool,X96) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X92),X93),s(bool,X94),s(fun(X92,bool),X95))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X92,bool),bool),happ(s(fun(bool,fun(fun(X92,bool),bool)),happ(s(fun('type.option.option'(X92),fun(bool,fun(fun(X92,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X92),X93))),s(bool,X94))),s(fun(X92,bool),X95)))) )),
  inference(superposition,[],[f477,f165])).
fof(f8592,plain,(
  ( ! [X85,X83,X86,X84] : (s(bool,X84) != s(bool,X86) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X86))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X83),'const.option.NONE_0'),s(bool,X84),s(fun(X83,bool),X85)))) )),
  inference(superposition,[],[f477,f162])).
fof(f5756,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) )),
  inference(condensation,[],[f5755])).
fof(f5755,plain,(
  ( ! [X37,X36] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X36)) )),
  inference(trivial_inequality_removal,[],[f5741])).
fof(f5741,plain,(
  ( ! [X37,X36] : (s(bool,X36) != s(bool,X36) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X37))) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f476,f118])).
fof(f5312,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,sK4(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f437,f145])).
fof(f5311,plain,(
  ( ! [X76,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X76))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,'T_0') = s(bool,X77)) )),
  inference(superposition,[],[f437,f1267])).
fof(f5308,plain,(
  ( ! [X64,X62,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f437,f162])).
fof(f5284,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,sK4(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f437,f145])).
fof(f5283,plain,(
  ( ! [X76,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X76))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,'F_0') = s(bool,X77) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X76)),bool))) )),
  inference(superposition,[],[f437,f1267])).
fof(f5280,plain,(
  ( ! [X64,X62,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))) | s(bool,'F_0') = s(bool,X65) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X63),s(fun(X62,bool),X64)))) )),
  inference(superposition,[],[f437,f162])).
fof(f5068,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X1) = s(bool,sK4(X0,bool)) | s(bool,'T_0') = s(bool,X1) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f436,f145])).
fof(f5067,plain,(
  ( ! [X74,X75] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X74))) | s(bool,X75) = s(bool,sK4('const.option.SOME_1'(s(bool,X74)),bool)) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f436,f1267])).
fof(f5064,plain,(
  ( ! [X61,X62,X60,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X61))) | s(bool,X63) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X61),s(fun(X60,bool),X62))) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f436,f162])).
fof(f4881,plain,(
  ( ! [X130,X128] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X128))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))) | s(bool,'T_0') != s(bool,X130) | s(bool,'F_0') = s(bool,X128)) )),
  inference(forward_demodulation,[],[f4836,f162])).
fof(f4836,plain,(
  ( ! [X127,X130,X128,X129] : (s(bool,'T_0') != s(bool,X130) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X130))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(bool,X128),s(fun(X127,bool),X129))))) | s(bool,'F_0') = s(bool,X128)) )),
  inference(superposition,[],[f154,f358])).
fof(f4876,plain,(
  ( ! [X14,X12,X13] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X13),s(fun(X12,bool),X14))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(subsumption_resolution,[],[f4807,f111])).
fof(f4807,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X13),s(fun(X12,bool),X14))) | s(bool,'F_0') = s(bool,X13)) )),
  inference(superposition,[],[f124,f358])).
fof(f4834,plain,(
  ( ! [X121,X122,X120,X119] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) | s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X119),'const.option.NONE_0'),s(bool,X120),s(fun(X119,bool),X121))) | s(bool,'F_0') = s(bool,X120)) )),
  inference(superposition,[],[f153,f358])).
fof(f4787,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.NONE_0'),s(bool,X86),s(fun(X88,bool),X89))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),'const.option.NONE_0'),s(bool,X86),s(fun(X85,bool),X87)))) )),
  inference(superposition,[],[f358,f162])).
fof(f2004,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X10)),bool))) )),
  inference(superposition,[],[f1267,f118])).
fof(f1280,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool))) )),
  inference(superposition,[],[f547,f118])).
fof(f1062,plain,(
  ( ! [X6,X8,X7,X5] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X5),X6),s(bool,X7),s(fun(X5,bool),X8))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X5,bool),bool),happ(s(fun(bool,fun(fun(X5,bool),bool)),happ(s(fun('type.option.option'(X5),fun(bool,fun(fun(X5,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X5),X6))),s(bool,X7))),s(fun(X5,bool),X8)))) )),
  inference(superposition,[],[f165,f118])).
fof(f1031,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f163,f118])).
fof(f1030,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,X2,bool))) )),
  inference(superposition,[],[f163,f118])).
fof(f1027,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))),
  inference(unit_resulting_resolution,[],[f427,f153])).
fof(f675,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X42),'const.option.SOME_1'(s(X42,X43))),s(bool,X44),s(fun(X42,bool),X45))) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X45),s(X42,X43)))) )),
  inference(superposition,[],[f118,f164])).
fof(f606,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X0,X1,bool))) )),
  inference(superposition,[],[f157,f118])).
fof(f513,plain,(
  ( ! [X4,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X3)))) | s(bool,'F_0') = s(bool,sK5('F_0',X4,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f156,f118])).
fof(f512,plain,(
  ( ! [X2,X1] : (~p(s(bool,happ(s(fun(bool,bool),X2),s(bool,'F_0')))) | s(bool,X1) = s(bool,sK5(X1,X2,bool)) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f156,f118])).
fof(f477,plain,(
  ( ! [X4,X3] : (s(bool,X3) != s(bool,X4) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f154,f118])).
fof(f476,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') != s(bool,X2) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f154,f118])).
fof(f437,plain,(
  ( ! [X4,X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X4))) | s(bool,'F_0') = s(bool,X4) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f153,f118])).
fof(f436,plain,(
  ( ! [X2,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X1)) )),
  inference(superposition,[],[f153,f118])).
fof(f427,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))),
  inference(unit_resulting_resolution,[],[f176,f153])).
fof(f358,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,X1),s(fun(X0,bool),X2))) | s(bool,'F_0') = s(bool,X1)) )),
  inference(superposition,[],[f162,f118])).
fof(f124,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f85])).
fof(f85,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f41])).
fof(f41,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f40])).
fof(f40,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X12] : (s(bool,'F_0') = s(bool,X12) <=> ~p(s(bool,X12)))),
  file('thm.misc.option_case_NONE_F','thm.bool.EQ_CLAUSES|split|2')).
fof(f38007,plain,(
  ( ! [X399,X401,X403,X400,X402] : (s(bool,happ(s(fun(X399,bool),X402),s(X399,X400))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X399),'const.option.SOME_1'(s(X399,X400))),s(bool,X401),s(fun(X399,bool),X402)),X403,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X403),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(X399,bool),X402),s(X399,X400)))) )),
  inference(forward_demodulation,[],[f37829,f164])).
fof(f37829,plain,(
  ( ! [X399,X401,X403,X400,X402] : (~p(s(bool,happ(s(fun(bool,bool),X403),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X399),'const.option.SOME_1'(s(X399,X400))),s(bool,X401),s(fun(X399,bool),X402))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X399),'const.option.SOME_1'(s(X399,X400))),s(bool,X401),s(fun(X399,bool),X402)),X403,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X399,bool),X402),s(X399,X400)))) )),
  inference(superposition,[],[f156,f675])).
fof(f38587,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (s(bool,X174) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,X174),s(fun(X173,bool),X175)),'const.option.option_CASE_3'(s('type.option.option'(X177),'const.option.NONE_0'),s(fun(bool,bool),X176),s(fun(X177,fun(bool,bool)),X178)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X176),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X174)) )),
  inference(forward_demodulation,[],[f38522,f162])).
fof(f38522,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (~p(s(bool,happ(s(fun(bool,bool),X176),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,X174),s(fun(X173,bool),X175))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,X174),s(fun(X173,bool),X175)),'const.option.option_CASE_3'(s('type.option.option'(X177),'const.option.NONE_0'),s(fun(bool,bool),X176),s(fun(X177,fun(bool,bool)),X178)),bool)) | s(bool,'F_0') = s(bool,X174)) )),
  inference(superposition,[],[f510,f358])).
fof(f38588,plain,(
  ( ! [X191,X189,X187,X185,X190,X188,X186] : (s(bool,happ(s(fun(X185,bool),X188),s(X185,X186))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X185),'const.option.SOME_1'(s(X185,X186))),s(bool,X187),s(fun(X185,bool),X188)),'const.option.option_CASE_3'(s('type.option.option'(X190),'const.option.NONE_0'),s(fun(bool,bool),X189),s(fun(X190,fun(bool,bool)),X191)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X189),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,happ(s(fun(X185,bool),X188),s(X185,X186)))) )),
  inference(forward_demodulation,[],[f38524,f164])).
fof(f38524,plain,(
  ( ! [X191,X189,X187,X185,X190,X188,X186] : (~p(s(bool,happ(s(fun(bool,bool),X189),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X185),'const.option.SOME_1'(s(X185,X186))),s(bool,X187),s(fun(X185,bool),X188))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X185),'const.option.SOME_1'(s(X185,X186))),s(bool,X187),s(fun(X185,bool),X188)),'const.option.option_CASE_3'(s('type.option.option'(X190),'const.option.NONE_0'),s(fun(bool,bool),X189),s(fun(X190,fun(bool,bool)),X191)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X185,bool),X188),s(X185,X186)))) )),
  inference(superposition,[],[f510,f675])).
fof(f39513,plain,(
  ( ! [X19,X17,X18,X16] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X16),X18),s(bool,X19),s(fun(X16,bool),X17))) | s('type.option.option'(X16),'const.option.NONE_0') = s('type.option.option'(X16),X18) | s(bool,'T_0') = s(bool,happ(s(fun(X16,bool),X17),s(X16,sK4(X18,X16))))) )),
  inference(superposition,[],[f651,f118])).
fof(f39658,plain,(
  ( ! [X134,X132,X130,X128,X133,X131,X129] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.SOME_1'(s(X128,'const.option.option_CASE_3'(s('type.option.option'(X129),X131),s(X128,X132),s(fun(X129,X128),X130))))),s(bool,X133),s(fun(X128,bool),X134))) | s(bool,'F_0') = s(bool,happ(s(fun(X128,bool),X134),s(X128,happ(s(fun(X129,X128),X130),s(X129,sK4(X131,X129)))))) | s('type.option.option'(X129),'const.option.NONE_0') = s('type.option.option'(X129),X131)) )),
  inference(superposition,[],[f675,f651])).
fof(f39670,plain,(
  ( ! [X198,X196,X197,X195] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X195),X197),s(bool,X198),s(fun(X195,bool),X196)))) | s(bool,'F_0') != s(bool,happ(s(fun(X195,bool),X196),s(X195,sK4(X197,X195)))) | s('type.option.option'(X195),'const.option.NONE_0') = s('type.option.option'(X195),X197)) )),
  inference(superposition,[],[f124,f651])).
fof(f39679,plain,(
  ( ! [X243,X241,X239,X244,X242,X240] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X243),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X239),X241),s(bool,X242),s(fun(X239,bool),X240))),s(fun(X243,bool),X244))) | s(bool,'F_0') = s(bool,happ(s(fun(X239,bool),X240),s(X239,sK4(X241,X239)))) | s('type.option.option'(X239),'const.option.NONE_0') = s('type.option.option'(X239),X241)) )),
  inference(superposition,[],[f358,f651])).
fof(f39682,plain,(
  ( ! [X255,X257,X259,X256,X258] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X259))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X255),X257),s(bool,X258),s(fun(X255,bool),X256))))) | s(bool,'F_0') = s(bool,happ(s(fun(X255,bool),X256),s(X255,sK4(X257,X255)))) | s(bool,'T_0') = s(bool,X259) | s('type.option.option'(X255),'const.option.NONE_0') = s('type.option.option'(X255),X257)) )),
  inference(superposition,[],[f437,f651])).
fof(f39683,plain,(
  ( ! [X261,X263,X260,X262,X264] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X260),X262),s(bool,X263),s(fun(X260,bool),X261))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X264))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X260,bool),X261),s(X260,sK4(X262,X260)))))) | s(bool,'T_0') = s(bool,X264) | s('type.option.option'(X260),'const.option.NONE_0') = s('type.option.option'(X260),X262)) )),
  inference(superposition,[],[f476,f651])).
fof(f39686,plain,(
  ( ! [X277,X279,X275,X276,X278] : (~p(s(bool,happ(s(fun(bool,bool),X279),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X275),X277),s(bool,X278),s(fun(X275,bool),X276)))))) | s(bool,'F_0') = s(bool,sK5('F_0',X279,bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X275,bool),X276),s(X275,sK4(X277,X275)))) | s('type.option.option'(X275),'const.option.NONE_0') = s('type.option.option'(X275),X277)) )),
  inference(superposition,[],[f513,f651])).
fof(f39687,plain,(
  ( ! [X280,X282,X281,X283,X284] : (~p(s(bool,happ(s(fun(bool,bool),X284),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X280),X282),s(bool,X283),s(fun(X280,bool),X281)))))) | p(s(bool,happ(s(fun(bool,bool),X284),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun(X280,bool),X281),s(X280,sK4(X282,X280))),X284,bool)) | s('type.option.option'(X280),'const.option.NONE_0') = s('type.option.option'(X280),X282)) )),
  inference(superposition,[],[f606,f651])).
fof(f39749,plain,(
  ( ! [X584,X586,X582,X585,X583] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X582),X584),s(fun(bool,bool),X585),s(fun(X582,fun(bool,bool)),X583))),s(bool,X586)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X582,fun(bool,bool)),X583),s(X582,sK4(X584,X582)))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X586,happ(s(fun(X582,fun(bool,bool)),X583),s(X582,sK4(X584,X582))),bool)) | s('type.option.option'(X582),'const.option.NONE_0') = s('type.option.option'(X582),X584)) )),
  inference(superposition,[],[f606,f651])).
fof(f39750,plain,(
  ( ! [X588,X590,X589,X591,X587] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X587),X589),s(fun(bool,bool),X590),s(fun(X587,fun(bool,bool)),X588))),s(bool,X591)))) | s(bool,'F_0') = s(bool,sK5('F_0',happ(s(fun(X587,fun(bool,bool)),X588),s(X587,sK4(X589,X587))),bool)) | s(bool,'T_0') = s(bool,X591) | s('type.option.option'(X587),'const.option.NONE_0') = s('type.option.option'(X587),X589)) )),
  inference(superposition,[],[f513,f651])).
fof(f39751,plain,(
  ( ! [X596,X592,X594,X593,X595] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X592),X594),s(fun(bool,bool),X595),s(fun(X592,fun(bool,bool)),X593))),s(bool,'F_0')))) | s(bool,X596) = s(bool,sK5(X596,happ(s(fun(X592,fun(bool,bool)),X593),s(X592,sK4(X594,X592))),bool)) | s(bool,'T_0') = s(bool,X596) | s('type.option.option'(X592),'const.option.NONE_0') = s('type.option.option'(X592),X594)) )),
  inference(superposition,[],[f512,f651])).
fof(f39759,plain,(
  ( ! [X648,X650,X644,X646,X649,X645,X647] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X644),'const.option.SOME_1'(s(X644,X649))),s(bool,X650),s(fun(X644,bool),'const.option.option_CASE_3'(s('type.option.option'(X645),X647),s(fun(X644,bool),X648),s(fun(X645,fun(X644,bool)),X646))))) | s(bool,'F_0') = s(bool,happ(s(fun(X644,bool),happ(s(fun(X645,fun(X644,bool)),X646),s(X645,sK4(X647,X645)))),s(X644,X649))) | s('type.option.option'(X645),'const.option.NONE_0') = s('type.option.option'(X645),X647)) )),
  inference(superposition,[],[f675,f651])).
fof(f39788,plain,(
  ( ! [X134,X132,X136,X135,X133,X131,X137] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X131),'const.option.SOME_1'(s(X131,happ(s(fun(X132,X131),X135),s(X132,sK4(X133,X132)))))),s(bool,X136),s(fun(X131,bool),X137))) | s(bool,'F_0') = s(bool,happ(s(fun(X131,bool),X137),s(X131,'const.option.option_CASE_3'(s('type.option.option'(X132),X133),s(X131,X134),s(fun(X132,X131),X135))))) | s('type.option.option'(X132),'const.option.NONE_0') = s('type.option.option'(X132),X133)) )),
  inference(superposition,[],[f675,f651])).
fof(f39808,plain,(
  ( ! [X185,X186,X184,X183] : (~p(s(bool,happ(s(fun(X183,bool),X186),s(X183,sK4(X184,X183))))) | s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X183),X184),s(bool,X185),s(fun(X183,bool),X186))) | s('type.option.option'(X183),'const.option.NONE_0') = s('type.option.option'(X183),X184)) )),
  inference(superposition,[],[f124,f651])).
fof(f39817,plain,(
  ( ! [X231,X229,X227,X230,X228,X232] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X231),'const.option.NONE_0'),s(bool,happ(s(fun(X227,bool),X230),s(X227,sK4(X228,X227)))),s(fun(X231,bool),X232))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X227),X228),s(bool,X229),s(fun(X227,bool),X230))) | s('type.option.option'(X227),'const.option.NONE_0') = s('type.option.option'(X227),X228)) )),
  inference(superposition,[],[f358,f651])).
fof(f39819,plain,(
  ( ! [X241,X239,X242,X240,X238] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X242))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X238,bool),X241),s(X238,sK4(X239,X238)))))) | s(bool,'F_0') = s(bool,X242) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X238),X239),s(bool,X240),s(fun(X238,bool),X241))) | s('type.option.option'(X238),'const.option.NONE_0') = s('type.option.option'(X238),X239)) )),
  inference(superposition,[],[f437,f651])).
fof(f39820,plain,(
  ( ! [X243,X246,X244,X247,X245] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X247))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X243,bool),X246),s(X243,sK4(X244,X243)))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X243),X244),s(bool,X245),s(fun(X243,bool),X246))) | s(bool,'T_0') = s(bool,X247) | s('type.option.option'(X243),'const.option.NONE_0') = s('type.option.option'(X243),X244)) )),
  inference(superposition,[],[f437,f651])).
fof(f39821,plain,(
  ( ! [X251,X249,X252,X250,X248] : (s(bool,'F_0') != s(bool,happ(s(fun(X248,bool),X251),s(X248,sK4(X249,X248)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X252))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X248),X249),s(bool,X250),s(fun(X248,bool),X251))))) | s(bool,'T_0') = s(bool,X252) | s('type.option.option'(X248),'const.option.NONE_0') = s('type.option.option'(X248),X249)) )),
  inference(superposition,[],[f476,f651])).
fof(f39824,plain,(
  ( ! [X263,X265,X267,X264,X266] : (~p(s(bool,happ(s(fun(bool,bool),X267),s(bool,happ(s(fun(X263,bool),X266),s(X263,sK4(X264,X263))))))) | s(bool,'F_0') = s(bool,sK5('F_0',X267,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X263),X264),s(bool,X265),s(fun(X263,bool),X266))) | s('type.option.option'(X263),'const.option.NONE_0') = s('type.option.option'(X263),X264)) )),
  inference(superposition,[],[f513,f651])).
fof(f39825,plain,(
  ( ! [X269,X271,X268,X270,X272] : (~p(s(bool,happ(s(fun(bool,bool),X272),s(bool,happ(s(fun(X268,bool),X271),s(X268,sK4(X269,X268))))))) | p(s(bool,happ(s(fun(bool,bool),X272),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X268),X269),s(bool,X270),s(fun(X268,bool),X271)),X272,bool)) | s('type.option.option'(X268),'const.option.NONE_0') = s('type.option.option'(X268),X269)) )),
  inference(superposition,[],[f606,f651])).
fof(f39887,plain,(
  ( ! [X565,X561,X563,X564,X562] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X561,fun(bool,bool)),X564),s(X561,sK4(X562,X561)))),s(bool,X565)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X561),X562),s(fun(bool,bool),X563),s(fun(X561,fun(bool,bool)),X564))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X565,'const.option.option_CASE_3'(s('type.option.option'(X561),X562),s(fun(bool,bool),X563),s(fun(X561,fun(bool,bool)),X564)),bool)) | s('type.option.option'(X561),'const.option.NONE_0') = s('type.option.option'(X561),X562)) )),
  inference(superposition,[],[f606,f651])).
fof(f39888,plain,(
  ( ! [X569,X567,X568,X570,X566] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X566,fun(bool,bool)),X569),s(X566,sK4(X567,X566)))),s(bool,X570)))) | s(bool,'F_0') = s(bool,sK5('F_0','const.option.option_CASE_3'(s('type.option.option'(X566),X567),s(fun(bool,bool),X568),s(fun(X566,fun(bool,bool)),X569)),bool)) | s(bool,'T_0') = s(bool,X570) | s('type.option.option'(X566),'const.option.NONE_0') = s('type.option.option'(X566),X567)) )),
  inference(superposition,[],[f513,f651])).
fof(f39889,plain,(
  ( ! [X573,X575,X571,X572,X574] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X571,fun(bool,bool)),X574),s(X571,sK4(X572,X571)))),s(bool,'F_0')))) | s(bool,X575) = s(bool,sK5(X575,'const.option.option_CASE_3'(s('type.option.option'(X571),X572),s(fun(bool,bool),X573),s(fun(X571,fun(bool,bool)),X574)),bool)) | s(bool,'T_0') = s(bool,X575) | s('type.option.option'(X571),'const.option.NONE_0') = s('type.option.option'(X571),X572)) )),
  inference(superposition,[],[f512,f651])).
fof(f39897,plain,(
  ( ! [X629,X625,X627,X623,X628,X624,X626] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X623),'const.option.SOME_1'(s(X623,X628))),s(bool,X629),s(fun(X623,bool),happ(s(fun(X624,fun(X623,bool)),X627),s(X624,sK4(X625,X624)))))) | s(bool,'F_0') = s(bool,happ(s(fun(X623,bool),'const.option.option_CASE_3'(s('type.option.option'(X624),X625),s(fun(X623,bool),X626),s(fun(X624,fun(X623,bool)),X627))),s(X623,X628))) | s('type.option.option'(X624),'const.option.NONE_0') = s('type.option.option'(X624),X625)) )),
  inference(superposition,[],[f675,f651])).
fof(f39661,plain,(
  ( ! [X146,X151,X149,X147,X150,X148] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X146),X148),s(bool,X149),s(fun(X146,bool),X147)))) | s(X146,sK4(X148,X146)) = s(X146,sK5(sK4(X148,X146),'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(fun(X146,bool),X147),s(fun(X150,fun(X146,bool)),X151)),X146)) | s('type.option.option'(X146),'const.option.NONE_0') = s('type.option.option'(X146),X148)) )),
  inference(superposition,[],[f510,f651])).
fof(f39662,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),X154),s(bool,X155),s(fun(X152,bool),X153)))) | s(X152,sK4(X154,X152)) = s(X152,sK5('const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(X152,sK4(X154,X152)),s(fun(X156,X152),X157)),X153,X152)) | s('type.option.option'(X152),'const.option.NONE_0') = s('type.option.option'(X152),X154)) )),
  inference(superposition,[],[f524,f651])).
fof(f39663,plain,(
  ( ! [X158,X161,X159,X160] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X158),X160),s(bool,X161),s(fun(X158,bool),X159)))) | s(bool,'T_0') = s(bool,happ(s(fun(X158,bool),X159),s(X158,sK5(sK4(X160,X158),X159,X158)))) | s('type.option.option'(X158),'const.option.NONE_0') = s('type.option.option'(X158),X160)) )),
  inference(superposition,[],[f612,f651])).
fof(f39665,plain,(
  ( ! [X167,X169,X166,X170,X168] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X166),X168),s(bool,X169),s(fun(X166,bool),X167)))) | p(s(bool,happ(s(fun(X166,bool),X167),s(X166,X170)))) | s(X166,X170) != s(X166,sK4(X168,X166)) | s('type.option.option'(X166),'const.option.NONE_0') = s('type.option.option'(X166),X168)) )),
  inference(superposition,[],[f155,f651])).
fof(f39666,plain,(
  ( ! [X173,X171,X174,X172] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X171),X173),s(bool,X174),s(fun(X171,bool),X172)))) | s(X171,sK4(X173,X171)) = s(X171,sK5(sK4(X173,X171),X172,X171)) | s('type.option.option'(X171),'const.option.NONE_0') = s('type.option.option'(X171),X173)) )),
  inference(superposition,[],[f156,f651])).
fof(f39668,plain,(
  ( ! [X189,X187,X190,X188] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X187),X189),s(bool,X190),s(fun(X187,bool),X188))) | p(s(bool,happ(s(fun(X187,bool),X188),s(X187,sK4(X189,X187))))) | s('type.option.option'(X187),'const.option.NONE_0') = s('type.option.option'(X187),X189)) )),
  inference(superposition,[],[f120,f651])).
fof(f39669,plain,(
  ( ! [X191,X194,X192,X193] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X191),X193),s(bool,X194),s(fun(X191,bool),X192)))) | s(bool,'T_0') = s(bool,happ(s(fun(X191,bool),X192),s(X191,sK4(X193,X191)))) | s('type.option.option'(X191),'const.option.NONE_0') = s('type.option.option'(X191),X193)) )),
  inference(superposition,[],[f121,f651])).
fof(f39671,plain,(
  ( ! [X202,X200,X199,X203,X201] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X199),X201),s(bool,X202),s(fun(X199,bool),X200)))) | p(s(bool,X203)) | s(bool,X203) = s(bool,happ(s(fun(X199,bool),X200),s(X199,sK4(X201,X199)))) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) )),
  inference(superposition,[],[f158,f651])).
fof(f39673,plain,(
  ( ! [X212,X210,X213,X211,X209] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X209),X211),s(bool,X212),s(fun(X209,bool),X210)))) | ~p(s(bool,X213)) | s(bool,X213) = s(bool,happ(s(fun(X209,bool),X210),s(X209,sK4(X211,X209)))) | s('type.option.option'(X209),'const.option.NONE_0') = s('type.option.option'(X209),X211)) )),
  inference(superposition,[],[f161,f651])).
fof(f39678,plain,(
  ( ! [X237,X235,X238,X236,X234] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X234),X236),s(bool,X237),s(fun(X234,bool),X235)))) | s(bool,X238) = s(bool,happ(s(fun(X234,bool),X235),s(X234,sK4(X236,X234)))) | s(bool,'T_0') = s(bool,X238) | s('type.option.option'(X234),'const.option.NONE_0') = s('type.option.option'(X234),X236)) )),
  inference(superposition,[],[f252,f651])).
fof(f39806,plain,(
  ( ! [X177,X175,X178,X176] : (s(bool,'T_0') != s(bool,happ(s(fun(X175,bool),X178),s(X175,sK4(X176,X175)))) | p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X175),X176),s(bool,X177),s(fun(X175,bool),X178)))) | s('type.option.option'(X175),'const.option.NONE_0') = s('type.option.option'(X175),X176)) )),
  inference(superposition,[],[f120,f651])).
fof(f39809,plain,(
  ( ! [X191,X189,X187,X190,X188] : (p(s(bool,happ(s(fun(X187,bool),X190),s(X187,sK4(X188,X187))))) | p(s(bool,X191)) | s(bool,X191) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X187),X188),s(bool,X189),s(fun(X187,bool),X190))) | s('type.option.option'(X187),'const.option.NONE_0') = s('type.option.option'(X187),X188)) )),
  inference(superposition,[],[f158,f651])).
fof(f39811,plain,(
  ( ! [X198,X200,X199,X197,X201] : (~p(s(bool,happ(s(fun(X197,bool),X200),s(X197,sK4(X198,X197))))) | ~p(s(bool,X201)) | s(bool,X201) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X197),X198),s(bool,X199),s(fun(X197,bool),X200))) | s('type.option.option'(X197),'const.option.NONE_0') = s('type.option.option'(X197),X198)) )),
  inference(superposition,[],[f161,f651])).
fof(f155,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f106])).
fof(f106,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK5(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5])],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f104])).
fof(f104,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X6] : ! [X8,X14] : (? [X9] : (s(X6,X9) = s(X6,X14) & p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X9))))) <=> p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X14)))))),
  file('thm.misc.option_case_NONE_F','thm.bool.UNWIND_THM2')).
fof(f156,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f106])).
fof(f157,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f106])).
fof(f510,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) )),
  inference(superposition,[],[f156,f162])).
fof(f524,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),X15),s(X11,X13)))) | s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) )),
  inference(forward_demodulation,[],[f518,f162])).
fof(f518,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,happ(s(fun(X11,bool),X15),s(X11,X13)))) | s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14))) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) )),
  inference(superposition,[],[f156,f162])).
fof(f610,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0)))))) )),
  inference(forward_demodulation,[],[f605,f162])).
fof(f605,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))))) | ~p(s(bool,happ(s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3))),s(X0,X4))))) )),
  inference(superposition,[],[f157,f162])).
fof(f612,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0))))) )),
  inference(subsumption_resolution,[],[f609,f175])).
fof(f609,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK5(X2,X1,X0))))) )),
  inference(superposition,[],[f157,f118])).
fof(f1397,plain,(
  ( ! [X39,X37,X38,X36,X40] : (s(bool,X40) = s(bool,happ(s(fun(X36,bool),X39),s(X36,X37))) | s(bool,'T_0') = s(bool,X40) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.SOME_1'(s(X36,X37))),s(bool,X38),s(fun(X36,bool),X39)))) )),
  inference(superposition,[],[f213,f164])).
fof(f1967,plain,(
  ( ! [X74,X72,X71,X75,X73] : (p(s(bool,happ(s(fun(X71,bool),X72),s(X71,X74)))) | s(X71,X73) != s(X71,X74) | s(bool,X75) = s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(subsumption_resolution,[],[f1623,f111])).
fof(f1623,plain,(
  ( ! [X74,X72,X71,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X71,bool),X72),s(X71,X74)))) | s(X71,X73) != s(X71,X74) | s(bool,X75) = s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))) | s(bool,'T_0') = s(bool,X75)) )),
  inference(superposition,[],[f155,f213])).
fof(f2042,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,happ(s(fun(X88,bool),X89),s(X88,X90)))) | s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) )),
  inference(superposition,[],[f156,f1267])).
fof(f2061,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20)) | ~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X21))))) )),
  inference(forward_demodulation,[],[f2011,f1267])).
fof(f2011,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,happ(s(fun(X20,bool),X22),s(X20,X21)))) | s(X20,sK4('const.option.SOME_1'(s(X20,X21)),X20)) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) )),
  inference(superposition,[],[f156,f1267])).
fof(f2080,plain,(
  ( ! [X87,X85,X86] : (~p(s(bool,happ(s(fun(X85,bool),X86),s(X85,X87)))) | p(s(bool,happ(s(fun(X85,bool),X86),s(X85,sK5(X87,sK4('const.option.SOME_1'(s(fun(X85,bool),X86)),fun(X85,bool)),X85)))))) )),
  inference(forward_demodulation,[],[f2041,f1267])).
fof(f2041,plain,(
  ( ! [X87,X85,X86] : (p(s(bool,happ(s(fun(X85,bool),X86),s(X85,sK5(X87,sK4('const.option.SOME_1'(s(fun(X85,bool),X86)),fun(X85,bool)),X85))))) | ~p(s(bool,happ(s(fun(X85,bool),sK4('const.option.SOME_1'(s(fun(X85,bool),X86)),fun(X85,bool))),s(X85,X87))))) )),
  inference(superposition,[],[f157,f1267])).
fof(f11520,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))))) )),
  inference(superposition,[],[f612,f162])).
fof(f11523,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) | s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,sK5(sK4('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))))) )),
  inference(superposition,[],[f612,f1267])).
fof(f11587,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) )),
  inference(forward_demodulation,[],[f11516,f162])).
fof(f11516,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(bool,'T_0') = s(bool,happ(s(fun(X0,bool),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3))),s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))))) )),
  inference(superposition,[],[f612,f162])).
fof(f11590,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),X18),s(X17,sK5(X19,sK4('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17)))) | ~p(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))))) )),
  inference(forward_demodulation,[],[f11519,f1267])).
fof(f11519,plain,(
  ( ! [X19,X17,X18] : (~p(s(bool,happ(s(fun(X17,bool),X18),s(X17,X19)))) | s(bool,'T_0') = s(bool,happ(s(fun(X17,bool),sK4('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool))),s(X17,sK5(X19,sK4('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))))) )),
  inference(superposition,[],[f612,f1267])).
fof(f11604,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(X8,X7,X6)))) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f11570,f111])).
fof(f11570,plain,(
  ( ! [X6,X8,X7,X9] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X6,bool),X7),s(X6,sK5(X8,X7,X6)))) | s(bool,X9) = s(bool,happ(s(fun(X6,bool),X7),s(X6,X8))) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f612,f213])).
fof(f13300,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | s(X0,X4) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) )),
  inference(superposition,[],[f524,f162])).
fof(f13303,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,happ(s(fun(X23,bool),X24),s(X23,X25)))) | s(X23,X25) = s(X23,sK5('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK4('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) )),
  inference(superposition,[],[f524,f1267])).
fof(f13415,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s(X10,X12) = s(X10,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X10,X12),s(fun(X13,X10),X14)),X11,X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f13359,f111])).
fof(f13359,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X10,X12) = s(X10,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X10,X12),s(fun(X13,X10),X14)),X11,X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f524,f213])).
fof(f38566,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(X23,X24) = s(X23,sK5(sK4('const.option.SOME_1'(s(X23,X24)),X23),'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(fun(X23,bool),X25),s(fun(X26,fun(X23,bool)),X27)),X23)) | ~p(s(bool,happ(s(fun(X23,bool),X25),s(X23,X24))))) )),
  inference(forward_demodulation,[],[f38489,f1267])).
fof(f38489,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,happ(s(fun(X23,bool),X25),s(X23,X24)))) | s(X23,sK4('const.option.SOME_1'(s(X23,X24)),X23)) = s(X23,sK5(sK4('const.option.SOME_1'(s(X23,X24)),X23),'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(fun(X23,bool),X25),s(fun(X26,fun(X23,bool)),X27)),X23))) )),
  inference(superposition,[],[f510,f1267])).
fof(f38602,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (s(X10,X12) = s(X10,sK5(X12,'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X10,bool),X11),s(fun(X13,fun(X10,bool)),X14)),X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(subsumption_resolution,[],[f38540,f111])).
fof(f38540,plain,(
  ( ! [X14,X12,X10,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X10,X12) = s(X10,sK5(X12,'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X10,bool),X11),s(fun(X13,fun(X10,bool)),X14)),X10)) | s(bool,X15) = s(bool,happ(s(fun(X10,bool),X11),s(X10,X12))) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f510,f213])).
fof(f39645,plain,(
  ( ! [X39,X37,X35,X41,X38,X36,X40] : (~p(s(bool,happ(s(fun(X35,bool),X40),s(X35,'const.option.option_CASE_3'(s('type.option.option'(X36),X38),s(X35,X39),s(fun(X36,X35),X37)))))) | p(s(bool,happ(s(fun(X35,bool),X40),s(X35,X41)))) | s(X35,X41) != s(X35,happ(s(fun(X36,X35),X37),s(X36,sK4(X38,X36)))) | s('type.option.option'(X36),'const.option.NONE_0') = s('type.option.option'(X36),X38)) )),
  inference(superposition,[],[f155,f651])).
fof(f39775,plain,(
  ( ! [X39,X43,X41,X38,X44,X42,X40] : (~p(s(bool,happ(s(fun(X38,bool),X43),s(X38,happ(s(fun(X39,X38),X42),s(X39,sK4(X40,X39))))))) | p(s(bool,happ(s(fun(X38,bool),X43),s(X38,X44)))) | s(X38,X44) != s(X38,'const.option.option_CASE_3'(s('type.option.option'(X39),X40),s(X38,X41),s(fun(X39,X38),X42))) | s('type.option.option'(X39),'const.option.NONE_0') = s('type.option.option'(X39),X40)) )),
  inference(superposition,[],[f155,f651])).
fof(f1098,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36)) | ~p(s(bool,happ(s(fun(X36,bool),X41),s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))))))) )),
  inference(forward_demodulation,[],[f1069,f165])).
fof(f1069,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,happ(s(fun(X36,bool),X41),s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40)))))) | s(X36,happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) )),
  inference(superposition,[],[f156,f165])).
fof(f11522,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,sK5(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))))) )),
  inference(superposition,[],[f612,f165])).
fof(f38565,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))) = s(X15,sK5(happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(fun(X15,bool),X20),s(fun(X21,fun(X15,bool)),X22)),X15)) | ~p(s(bool,happ(s(fun(X15,bool),X20),s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))))))) )),
  inference(forward_demodulation,[],[f38488,f165])).
fof(f38488,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X15,bool),X20),s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19)))))) | s(X15,happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19))) = s(X15,sK5(happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(fun(X15,bool),X20),s(fun(X21,fun(X15,bool)),X22)),X15))) )),
  inference(superposition,[],[f510,f165])).
fof(f39646,plain,(
  ( ! [X47,X45,X43,X46,X44,X42] : (~p(s(bool,happ(s(fun(X42,bool),X47),s(X42,'const.option.option_CASE_3'(s('type.option.option'(X43),X45),s(X42,X46),s(fun(X43,X42),X44)))))) | s(X42,happ(s(fun(X43,X42),X44),s(X43,sK4(X45,X43)))) = s(X42,sK5(happ(s(fun(X43,X42),X44),s(X43,sK4(X45,X43))),X47,X42)) | s('type.option.option'(X43),'const.option.NONE_0') = s('type.option.option'(X43),X45)) )),
  inference(superposition,[],[f156,f651])).
fof(f39654,plain,(
  ( ! [X103,X101,X107,X105,X102,X100,X106,X104] : (~p(s(bool,happ(s(fun(X100,bool),X105),s(X100,'const.option.option_CASE_3'(s('type.option.option'(X101),X103),s(X100,X104),s(fun(X101,X100),X102)))))) | s(X100,happ(s(fun(X101,X100),X102),s(X101,sK4(X103,X101)))) = s(X100,sK5(happ(s(fun(X101,X100),X102),s(X101,sK4(X103,X101))),'const.option.option_CASE_3'(s('type.option.option'(X106),'const.option.NONE_0'),s(fun(X100,bool),X105),s(fun(X106,fun(X100,bool)),X107)),X100)) | s('type.option.option'(X101),'const.option.NONE_0') = s('type.option.option'(X101),X103)) )),
  inference(superposition,[],[f510,f651])).
fof(f39655,plain,(
  ( ! [X111,X109,X114,X112,X110,X108,X115,X113] : (~p(s(bool,happ(s(fun(X108,bool),X113),s(X108,'const.option.option_CASE_3'(s('type.option.option'(X109),X111),s(X108,X112),s(fun(X109,X108),X110)))))) | s(X108,happ(s(fun(X109,X108),X110),s(X109,sK4(X111,X109)))) = s(X108,sK5('const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(X108,happ(s(fun(X109,X108),X110),s(X109,sK4(X111,X109)))),s(fun(X114,X108),X115)),X113,X108)) | s('type.option.option'(X109),'const.option.NONE_0') = s('type.option.option'(X109),X111)) )),
  inference(superposition,[],[f524,f651])).
fof(f39657,plain,(
  ( ! [X127,X125,X123,X126,X124,X122] : (~p(s(bool,happ(s(fun(X122,bool),X127),s(X122,'const.option.option_CASE_3'(s('type.option.option'(X123),X125),s(X122,X126),s(fun(X123,X122),X124)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X122,bool),X127),s(X122,sK5(happ(s(fun(X123,X122),X124),s(X123,sK4(X125,X123))),X127,X122)))) | s('type.option.option'(X123),'const.option.NONE_0') = s('type.option.option'(X123),X125)) )),
  inference(superposition,[],[f612,f651])).
fof(f38564,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X7,bool),X12),s(fun(X13,fun(X7,bool)),X14)),X7)) | ~p(s(bool,happ(s(fun(X7,bool),X12),s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))))))) )),
  inference(forward_demodulation,[],[f38487,f164])).
fof(f38487,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,happ(s(fun(X7,bool),X12),s(X7,happ(s(fun(X8,X7),X11),s(X8,X9)))))) | s(X7,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11))) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X7,bool),X12),s(fun(X13,fun(X7,bool)),X14)),X7))) )),
  inference(superposition,[],[f510,f164])).
fof(f11521,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,sK5('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))))) )),
  inference(superposition,[],[f612,f164])).
fof(f786,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29)) | ~p(s(bool,happ(s(fun(X29,bool),X34),s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))))))) )),
  inference(forward_demodulation,[],[f673,f164])).
fof(f673,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,happ(s(fun(X29,bool),X34),s(X29,happ(s(fun(X30,X29),X33),s(X30,X31)))))) | s(X29,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) )),
  inference(superposition,[],[f156,f164])).
fof(f39776,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (~p(s(bool,happ(s(fun(X45,bool),X50),s(X45,happ(s(fun(X46,X45),X49),s(X46,sK4(X47,X46))))))) | s(X45,'const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49))) = s(X45,sK5('const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49)),X50,X45)) | s('type.option.option'(X46),'const.option.NONE_0') = s('type.option.option'(X46),X47)) )),
  inference(superposition,[],[f156,f651])).
fof(f39784,plain,(
  ( ! [X103,X109,X107,X105,X110,X108,X106,X104] : (~p(s(bool,happ(s(fun(X103,bool),X108),s(X103,happ(s(fun(X104,X103),X107),s(X104,sK4(X105,X104))))))) | s(X103,'const.option.option_CASE_3'(s('type.option.option'(X104),X105),s(X103,X106),s(fun(X104,X103),X107))) = s(X103,sK5('const.option.option_CASE_3'(s('type.option.option'(X104),X105),s(X103,X106),s(fun(X104,X103),X107)),'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.NONE_0'),s(fun(X103,bool),X108),s(fun(X109,fun(X103,bool)),X110)),X103)) | s('type.option.option'(X104),'const.option.NONE_0') = s('type.option.option'(X104),X105)) )),
  inference(superposition,[],[f510,f651])).
fof(f39785,plain,(
  ( ! [X111,X118,X116,X114,X112,X117,X115,X113] : (~p(s(bool,happ(s(fun(X111,bool),X116),s(X111,happ(s(fun(X112,X111),X115),s(X112,sK4(X113,X112))))))) | s(X111,'const.option.option_CASE_3'(s('type.option.option'(X112),X113),s(X111,X114),s(fun(X112,X111),X115))) = s(X111,sK5('const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(X111,'const.option.option_CASE_3'(s('type.option.option'(X112),X113),s(X111,X114),s(fun(X112,X111),X115))),s(fun(X117,X111),X118)),X116,X111)) | s('type.option.option'(X112),'const.option.NONE_0') = s('type.option.option'(X112),X113)) )),
  inference(superposition,[],[f524,f651])).
fof(f39787,plain,(
  ( ! [X127,X125,X130,X128,X126,X129] : (~p(s(bool,happ(s(fun(X125,bool),X130),s(X125,happ(s(fun(X126,X125),X129),s(X126,sK4(X127,X126))))))) | s(bool,'T_0') = s(bool,happ(s(fun(X125,bool),X130),s(X125,sK5('const.option.option_CASE_3'(s('type.option.option'(X126),X127),s(X125,X128),s(fun(X126,X125),X129)),X130,X125)))) | s('type.option.option'(X126),'const.option.NONE_0') = s('type.option.option'(X126),X127)) )),
  inference(superposition,[],[f612,f651])).
fof(f1091,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (~p(s(bool,happ(s(fun(X147,bool),'const.option.option_CASE_3'(s('type.option.option'(X148),X149),s(fun(X147,bool),X150),s(fun(X148,fun(X147,bool)),X151))),s(X147,X152)))) | s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) )),
  inference(superposition,[],[f156,f165])).
fof(f1111,plain,(
  ( ! [X146,X144,X142,X145,X143,X141] : (~p(s(bool,happ(s(fun(X141,bool),'const.option.option_CASE_3'(s('type.option.option'(X142),X143),s(fun(X141,bool),X144),s(fun(X142,fun(X141,bool)),X145))),s(X141,X146)))) | p(s(bool,happ(s(fun(X141,bool),'const.option.option_CASE_3'(s('type.option.option'(X142),X143),s(fun(X141,bool),X144),s(fun(X142,fun(X141,bool)),X145))),s(X141,sK5(X146,happ(s(fun(fun(X142,fun(X141,bool)),fun(X141,bool)),happ(s(fun(fun(X141,bool),fun(fun(X142,fun(X141,bool)),fun(X141,bool))),happ(s(fun('type.option.option'(X142),fun(fun(X141,bool),fun(fun(X142,fun(X141,bool)),fun(X141,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X142),X143))),s(fun(X141,bool),X144))),s(fun(X142,fun(X141,bool)),X145)),X141)))))) )),
  inference(forward_demodulation,[],[f1090,f165])).
fof(f1090,plain,(
  ( ! [X146,X144,X142,X145,X143,X141] : (p(s(bool,happ(s(fun(X141,bool),'const.option.option_CASE_3'(s('type.option.option'(X142),X143),s(fun(X141,bool),X144),s(fun(X142,fun(X141,bool)),X145))),s(X141,sK5(X146,happ(s(fun(fun(X142,fun(X141,bool)),fun(X141,bool)),happ(s(fun(fun(X141,bool),fun(fun(X142,fun(X141,bool)),fun(X141,bool))),happ(s(fun('type.option.option'(X142),fun(fun(X141,bool),fun(fun(X142,fun(X141,bool)),fun(X141,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X142),X143))),s(fun(X141,bool),X144))),s(fun(X142,fun(X141,bool)),X145)),X141))))) | ~p(s(bool,happ(s(fun(X141,bool),happ(s(fun(fun(X142,fun(X141,bool)),fun(X141,bool)),happ(s(fun(fun(X141,bool),fun(fun(X142,fun(X141,bool)),fun(X141,bool))),happ(s(fun('type.option.option'(X142),fun(fun(X141,bool),fun(fun(X142,fun(X141,bool)),fun(X141,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X142),X143))),s(fun(X141,bool),X144))),s(fun(X142,fun(X141,bool)),X145))),s(X141,X146))))) )),
  inference(superposition,[],[f157,f165])).
fof(f11589,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,sK5(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11)))) | ~p(s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))))) )),
  inference(forward_demodulation,[],[f11518,f165])).
fof(f11518,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (~p(s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16)))) | s(bool,'T_0') = s(bool,happ(s(fun(X11,bool),happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15))),s(X11,sK5(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))))) )),
  inference(superposition,[],[f612,f165])).
fof(f13302,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,happ(s(fun(X15,bool),'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(fun(X15,bool),X18),s(fun(X16,fun(X15,bool)),X19))),s(X15,X20)))) | s(X15,X20) = s(X15,sK5('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) )),
  inference(superposition,[],[f524,f165])).
fof(f39752,plain,(
  ( ! [X600,X602,X598,X601,X603,X597,X599] : (~p(s(bool,happ(s(fun(X597,bool),'const.option.option_CASE_3'(s('type.option.option'(X598),X600),s(fun(X597,bool),X601),s(fun(X598,fun(X597,bool)),X599))),s(X597,X602)))) | p(s(bool,happ(s(fun(X597,bool),happ(s(fun(X598,fun(X597,bool)),X599),s(X598,sK4(X600,X598)))),s(X597,X603)))) | s(X597,X602) != s(X597,X603) | s('type.option.option'(X598),'const.option.NONE_0') = s('type.option.option'(X598),X600)) )),
  inference(superposition,[],[f155,f651])).
fof(f39753,plain,(
  ( ! [X606,X609,X605,X607,X608,X604] : (~p(s(bool,happ(s(fun(X604,bool),'const.option.option_CASE_3'(s('type.option.option'(X605),X607),s(fun(X604,bool),X608),s(fun(X605,fun(X604,bool)),X606))),s(X604,X609)))) | s(X604,X609) = s(X604,sK5(X609,happ(s(fun(X605,fun(X604,bool)),X606),s(X605,sK4(X607,X605))),X604)) | s('type.option.option'(X605),'const.option.NONE_0') = s('type.option.option'(X605),X607)) )),
  inference(superposition,[],[f156,f651])).
fof(f39756,plain,(
  ( ! [X629,X625,X627,X623,X628,X624,X626,X622] : (~p(s(bool,happ(s(fun(X622,bool),'const.option.option_CASE_3'(s('type.option.option'(X623),X625),s(fun(X622,bool),X626),s(fun(X623,fun(X622,bool)),X624))),s(X622,X627)))) | s(X622,X627) = s(X622,sK5(X627,'const.option.option_CASE_3'(s('type.option.option'(X628),'const.option.NONE_0'),s(fun(X622,bool),happ(s(fun(X623,fun(X622,bool)),X624),s(X623,sK4(X625,X623)))),s(fun(X628,fun(X622,bool)),X629)),X622)) | s('type.option.option'(X623),'const.option.NONE_0') = s('type.option.option'(X623),X625)) )),
  inference(superposition,[],[f510,f651])).
fof(f39757,plain,(
  ( ! [X633,X635,X631,X636,X632,X634,X630,X637] : (~p(s(bool,happ(s(fun(X630,bool),'const.option.option_CASE_3'(s('type.option.option'(X631),X633),s(fun(X630,bool),X634),s(fun(X631,fun(X630,bool)),X632))),s(X630,X635)))) | s(X630,X635) = s(X630,sK5('const.option.option_CASE_3'(s('type.option.option'(X636),'const.option.NONE_0'),s(X630,X635),s(fun(X636,X630),X637)),happ(s(fun(X631,fun(X630,bool)),X632),s(X631,sK4(X633,X631))),X630)) | s('type.option.option'(X631),'const.option.NONE_0') = s('type.option.option'(X631),X633)) )),
  inference(superposition,[],[f524,f651])).
fof(f39758,plain,(
  ( ! [X639,X640,X642,X638,X641,X643] : (~p(s(bool,happ(s(fun(X638,bool),'const.option.option_CASE_3'(s('type.option.option'(X639),X641),s(fun(X638,bool),X642),s(fun(X639,fun(X638,bool)),X640))),s(X638,X643)))) | s(bool,'T_0') = s(bool,happ(s(fun(X638,bool),happ(s(fun(X639,fun(X638,bool)),X640),s(X639,sK4(X641,X639)))),s(X638,sK5(X643,happ(s(fun(X639,fun(X638,bool)),X640),s(X639,sK4(X641,X639))),X638)))) | s('type.option.option'(X639),'const.option.NONE_0') = s('type.option.option'(X639),X641)) )),
  inference(superposition,[],[f612,f651])).
fof(f39890,plain,(
  ( ! [X580,X582,X576,X578,X581,X577,X579] : (~p(s(bool,happ(s(fun(X576,bool),happ(s(fun(X577,fun(X576,bool)),X580),s(X577,sK4(X578,X577)))),s(X576,X581)))) | p(s(bool,happ(s(fun(X576,bool),'const.option.option_CASE_3'(s('type.option.option'(X577),X578),s(fun(X576,bool),X579),s(fun(X577,fun(X576,bool)),X580))),s(X576,X582)))) | s(X576,X581) != s(X576,X582) | s('type.option.option'(X577),'const.option.NONE_0') = s('type.option.option'(X577),X578)) )),
  inference(superposition,[],[f155,f651])).
fof(f39892,plain,(
  ( ! [X592,X594,X590,X593,X589,X591] : (p(s(bool,happ(s(fun(X589,bool),happ(s(fun(X590,fun(X589,bool)),X593),s(X590,sK4(X591,X590)))),s(X589,sK5(X594,'const.option.option_CASE_3'(s('type.option.option'(X590),X591),s(fun(X589,bool),X592),s(fun(X590,fun(X589,bool)),X593)),X589))))) | ~p(s(bool,happ(s(fun(X589,bool),'const.option.option_CASE_3'(s('type.option.option'(X590),X591),s(fun(X589,bool),X592),s(fun(X590,fun(X589,bool)),X593))),s(X589,X594)))) | s('type.option.option'(X590),'const.option.NONE_0') = s('type.option.option'(X590),X591)) )),
  inference(superposition,[],[f157,f651])).
fof(f39754,plain,(
  ( ! [X613,X615,X611,X612,X614,X610] : (p(s(bool,happ(s(fun(X610,bool),'const.option.option_CASE_3'(s('type.option.option'(X611),X613),s(fun(X610,bool),X614),s(fun(X611,fun(X610,bool)),X612))),s(X610,sK5(X615,happ(s(fun(X611,fun(X610,bool)),X612),s(X611,sK4(X613,X611))),X610))))) | ~p(s(bool,happ(s(fun(X610,bool),happ(s(fun(X611,fun(X610,bool)),X612),s(X611,sK4(X613,X611)))),s(X610,X615)))) | s('type.option.option'(X611),'const.option.NONE_0') = s('type.option.option'(X611),X613)) )),
  inference(superposition,[],[f157,f651])).
fof(f39896,plain,(
  ( ! [X621,X617,X619,X620,X622,X618] : (~p(s(bool,happ(s(fun(X617,bool),happ(s(fun(X618,fun(X617,bool)),X621),s(X618,sK4(X619,X618)))),s(X617,X622)))) | s(bool,'T_0') = s(bool,happ(s(fun(X617,bool),'const.option.option_CASE_3'(s('type.option.option'(X618),X619),s(fun(X617,bool),X620),s(fun(X618,fun(X617,bool)),X621))),s(X617,sK5(X622,'const.option.option_CASE_3'(s('type.option.option'(X618),X619),s(fun(X617,bool),X620),s(fun(X618,fun(X617,bool)),X621)),X617)))) | s('type.option.option'(X618),'const.option.NONE_0') = s('type.option.option'(X618),X619)) )),
  inference(superposition,[],[f612,f651])).
fof(f13301,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,happ(s(fun(X7,bool),happ(s(fun(X8,fun(X7,bool)),X11),s(X8,X9))),s(X7,X12)))) | s(X7,X12) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) )),
  inference(superposition,[],[f524,f164])).
fof(f11588,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,sK5(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5)))) | ~p(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))))) )),
  inference(forward_demodulation,[],[f11517,f164])).
fof(f11517,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (~p(s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10)))) | s(bool,'T_0') = s(bool,happ(s(fun(X5,bool),'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9))),s(X5,sK5(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))))) )),
  inference(superposition,[],[f612,f164])).
fof(f778,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (~p(s(bool,happ(s(fun(X115,bool),happ(s(fun(X116,fun(X115,bool)),X119),s(X116,X117))),s(X115,X120)))) | p(s(bool,happ(s(fun(X115,bool),happ(s(fun(X116,fun(X115,bool)),X119),s(X116,X117))),s(X115,sK5(X120,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.SOME_1'(s(X116,X117))),s(fun(X115,bool),X118),s(fun(X116,fun(X115,bool)),X119)),X115)))))) )),
  inference(forward_demodulation,[],[f692,f164])).
fof(f692,plain,(
  ( ! [X118,X116,X120,X119,X117,X115] : (p(s(bool,happ(s(fun(X115,bool),happ(s(fun(X116,fun(X115,bool)),X119),s(X116,X117))),s(X115,sK5(X120,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.SOME_1'(s(X116,X117))),s(fun(X115,bool),X118),s(fun(X116,fun(X115,bool)),X119)),X115))))) | ~p(s(bool,happ(s(fun(X115,bool),'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.SOME_1'(s(X116,X117))),s(fun(X115,bool),X118),s(fun(X116,fun(X115,bool)),X119))),s(X115,X120))))) )),
  inference(superposition,[],[f157,f164])).
fof(f693,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,happ(s(fun(X121,bool),happ(s(fun(X122,fun(X121,bool)),X125),s(X122,X123))),s(X121,X126)))) | s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) )),
  inference(superposition,[],[f156,f164])).
fof(f39891,plain,(
  ( ! [X588,X584,X586,X585,X587,X583] : (~p(s(bool,happ(s(fun(X583,bool),happ(s(fun(X584,fun(X583,bool)),X587),s(X584,sK4(X585,X584)))),s(X583,X588)))) | s(X583,X588) = s(X583,sK5(X588,'const.option.option_CASE_3'(s('type.option.option'(X584),X585),s(fun(X583,bool),X586),s(fun(X584,fun(X583,bool)),X587)),X583)) | s('type.option.option'(X584),'const.option.NONE_0') = s('type.option.option'(X584),X585)) )),
  inference(superposition,[],[f156,f651])).
fof(f39894,plain,(
  ( ! [X606,X602,X605,X607,X601,X603,X608,X604] : (~p(s(bool,happ(s(fun(X601,bool),happ(s(fun(X602,fun(X601,bool)),X605),s(X602,sK4(X603,X602)))),s(X601,X606)))) | s(X601,X606) = s(X601,sK5(X606,'const.option.option_CASE_3'(s('type.option.option'(X607),'const.option.NONE_0'),s(fun(X601,bool),'const.option.option_CASE_3'(s('type.option.option'(X602),X603),s(fun(X601,bool),X604),s(fun(X602,fun(X601,bool)),X605))),s(fun(X607,fun(X601,bool)),X608)),X601)) | s('type.option.option'(X602),'const.option.NONE_0') = s('type.option.option'(X602),X603)) )),
  inference(superposition,[],[f510,f651])).
fof(f39895,plain,(
  ( ! [X613,X615,X609,X611,X616,X612,X614,X610] : (~p(s(bool,happ(s(fun(X609,bool),happ(s(fun(X610,fun(X609,bool)),X613),s(X610,sK4(X611,X610)))),s(X609,X614)))) | s(X609,X614) = s(X609,sK5('const.option.option_CASE_3'(s('type.option.option'(X615),'const.option.NONE_0'),s(X609,X614),s(fun(X615,X609),X616)),'const.option.option_CASE_3'(s('type.option.option'(X610),X611),s(fun(X609,bool),X612),s(fun(X610,fun(X609,bool)),X613)),X609)) | s('type.option.option'(X610),'const.option.NONE_0') = s('type.option.option'(X610),X611)) )),
  inference(superposition,[],[f524,f651])).
fof(f1487,plain,(
  ( ! [X114,X112,X115,X113] : (~p(s(bool,happ(s(fun(bool,bool),X114),s(bool,X113)))) | p(s(bool,happ(s(fun(bool,bool),X114),s(bool,X115)))) | s(bool,X112) != s(bool,X115) | s(bool,'T_0') = s(bool,X113) | s(bool,'T_0') = s(bool,X112)) )),
  inference(superposition,[],[f155,f213])).
fof(f1488,plain,(
  ( ! [X118,X116,X117] : (~p(s(bool,happ(s(fun(bool,bool),X118),s(bool,X117)))) | s(bool,X116) = s(bool,sK5(X116,X118,bool)) | s(bool,'T_0') = s(bool,X117) | s(bool,'T_0') = s(bool,X116)) )),
  inference(superposition,[],[f156,f213])).
fof(f1498,plain,(
  ( ! [X163,X164,X162] : (p(s(bool,happ(s(fun(bool,bool),X163),s(bool,X164)))) | ~p(s(bool,happ(s(fun(bool,bool),X163),s(bool,X162)))) | s(bool,'T_0') = s(bool,X164) | s(bool,'T_0') = s(bool,sK5(X162,X163,bool))) )),
  inference(superposition,[],[f157,f213])).
fof(f1586,plain,(
  ( ! [X70,X68,X71,X69] : (~p(s(bool,happ(s(fun(bool,bool),X69),s(bool,X68)))) | p(s(bool,happ(s(fun(bool,bool),X69),s(bool,X70)))) | s(bool,'T_0') != s(bool,X70) | s(bool,X68) = s(bool,X71) | s(bool,'T_0') = s(bool,X71)) )),
  inference(superposition,[],[f155,f213])).
fof(f1587,plain,(
  ( ! [X74,X72,X73] : (~p(s(bool,happ(s(fun(bool,bool),X73),s(bool,X72)))) | s(bool,'T_0') = s(bool,sK5('T_0',X73,bool)) | s(bool,X72) = s(bool,X74) | s(bool,'T_0') = s(bool,X74)) )),
  inference(superposition,[],[f156,f213])).
fof(f1633,plain,(
  ( ! [X103,X105,X102,X104] : (~p(s(bool,happ(s(fun(bool,bool),X103),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X103),s(bool,X104)))) | s(bool,X102) != s(bool,X104) | s(bool,X102) = s(bool,X105) | s(bool,'T_0') = s(bool,X105)) )),
  inference(superposition,[],[f155,f213])).
fof(f1644,plain,(
  ( ! [X152,X151,X153] : (p(s(bool,happ(s(fun(bool,bool),X152),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))) | s(bool,X153) = s(bool,sK5(X151,X152,bool)) | s(bool,'T_0') = s(bool,X153)) )),
  inference(superposition,[],[f157,f213])).
fof(f11526,plain,(
  ( ! [X26,X27,X25] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,X26)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X27),s(bool,sK5(X25,X27,bool)))) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f612,f213])).
fof(f11541,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,happ(s(fun(bool,bool),X67),s(bool,X66)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X67),s(bool,sK5('T_0',X67,bool)))) | s(bool,X66) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f612,f213])).
fof(f11546,plain,(
  ( ! [X81,X82] : (~p(s(bool,happ(s(fun(bool,bool),X82),s(bool,X81)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X82),s(bool,sK5('F_0',X82,bool)))) | s(bool,'T_0') = s(bool,X81)) )),
  inference(superposition,[],[f612,f118])).
fof(f13310,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,X37) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X37),s(fun(X40,bool),X41)),X39,bool)) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f524,f213])).
fof(f13327,plain,(
  ( ! [X118,X116,X120,X119,X117] : (~p(s(bool,happ(s(fun(bool,bool),X117),s(bool,X116)))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X118,bool),X119)),X117,bool)) | s(bool,X116) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f524,f213])).
fof(f38492,plain,(
  ( ! [X39,X37,X41,X38,X40] : (~p(s(bool,happ(s(fun(bool,bool),X39),s(bool,X38)))) | s(bool,X37) = s(bool,sK5(X37,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(fun(bool,bool),X39),s(fun(X40,fun(bool,bool)),X41)),bool)) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f510,f213])).
fof(f38509,plain,(
  ( ! [X118,X116,X120,X119,X117] : (~p(s(bool,happ(s(fun(bool,bool),X117),s(bool,X116)))) | s(bool,'T_0') = s(bool,sK5('T_0','const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(fun(bool,bool),X117),s(fun(X118,fun(bool,bool)),X119)),bool)) | s(bool,X116) = s(bool,X120) | s(bool,'T_0') = s(bool,X120)) )),
  inference(superposition,[],[f510,f213])).
fof(f1634,plain,(
  ( ! [X107,X108,X106] : (~p(s(bool,happ(s(fun(bool,bool),X107),s(bool,'T_0')))) | s(bool,X106) = s(bool,sK5(X106,X107,bool)) | s(bool,X106) = s(bool,X108) | s(bool,'T_0') = s(bool,X108)) )),
  inference(superposition,[],[f156,f213])).
fof(f11525,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X23),s(bool,sK5(X22,X23,bool)))) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f612,f213])).
fof(f13309,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | s(bool,X32) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X32),s(fun(X34,bool),X35)),X33,bool)) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f524,f213])).
fof(f38491,plain,(
  ( ! [X35,X33,X36,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X33),s(bool,'T_0')))) | s(bool,X32) = s(bool,sK5(X32,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(fun(bool,bool),X33),s(fun(X34,fun(bool,bool)),X35)),bool)) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f510,f213])).
fof(f560,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,happ(s(fun('type.option.option'(X23),bool),X25),s('type.option.option'(X23),X24)))) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) )),
  inference(superposition,[],[f156,f145])).
fof(f1003,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,happ(s(fun('type.option.option'(X24),bool),X26),s('type.option.option'(X24),X25)))) | p(s(bool,happ(s(fun('type.option.option'(X24),bool),X26),s('type.option.option'(X24),X27)))) | s('type.option.option'(X24),X27) != s('type.option.option'(X24),'const.option.SOME_1'(s(X24,sK4(X25,X24)))) | s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),X25)) )),
  inference(superposition,[],[f155,f145])).
fof(f11566,plain,(
  ( ! [X130,X131,X129] : (~p(s(bool,happ(s(fun('type.option.option'(X129),bool),X131),s('type.option.option'(X129),X130)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(X129),bool),X131),s('type.option.option'(X129),sK5('const.option.SOME_1'(s(X129,sK4(X130,X129))),X131,'type.option.option'(X129))))) | s('type.option.option'(X129),'const.option.NONE_0') = s('type.option.option'(X129),X130)) )),
  inference(superposition,[],[f612,f145])).
fof(f13355,plain,(
  ( ! [X243,X241,X244,X242,X245] : (~p(s(bool,happ(s(fun('type.option.option'(X241),bool),X243),s('type.option.option'(X241),X242)))) | s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))) = s('type.option.option'(X241),sK5('const.option.option_CASE_3'(s('type.option.option'(X244),'const.option.NONE_0'),s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))),s(fun(X244,'type.option.option'(X241)),X245)),X243,'type.option.option'(X241))) | s('type.option.option'(X241),'const.option.NONE_0') = s('type.option.option'(X241),X242)) )),
  inference(superposition,[],[f524,f145])).
fof(f38537,plain,(
  ( ! [X246,X244,X248,X247,X245] : (~p(s(bool,happ(s(fun('type.option.option'(X244),bool),X246),s('type.option.option'(X244),X245)))) | s('type.option.option'(X244),'const.option.SOME_1'(s(X244,sK4(X245,X244)))) = s('type.option.option'(X244),sK5('const.option.SOME_1'(s(X244,sK4(X245,X244))),'const.option.option_CASE_3'(s('type.option.option'(X247),'const.option.NONE_0'),s(fun('type.option.option'(X244),bool),X246),s(fun(X247,fun('type.option.option'(X244),bool)),X248)),'type.option.option'(X244))) | s('type.option.option'(X244),'const.option.NONE_0') = s('type.option.option'(X244),X245)) )),
  inference(superposition,[],[f510,f145])).
fof(f39903,plain,(
  ( ! [X666,X668,X670,X667,X669,X665] : (s('type.option.option'(X665),'const.option.SOME_1'(s(X665,X670))) != s('type.option.option'(X665),happ(s(fun(X666,'type.option.option'(X665)),X669),s(X666,sK4(X667,X666)))) | s(X665,X670) = s(X665,sK4('const.option.option_CASE_3'(s('type.option.option'(X666),X667),s('type.option.option'(X665),X668),s(fun(X666,'type.option.option'(X665)),X669)),X665)) | s('type.option.option'(X665),'const.option.NONE_0') = s('type.option.option'(X665),'const.option.option_CASE_3'(s('type.option.option'(X666),X667),s('type.option.option'(X665),X668),s(fun(X666,'type.option.option'(X665)),X669))) | s('type.option.option'(X666),'const.option.NONE_0') = s('type.option.option'(X666),X667)) )),
  inference(superposition,[],[f551,f651])).
fof(f39816,plain,(
  ( ! [X222,X225,X223,X226,X224] : (p(s(bool,happ(s(fun(X222,bool),X225),s(X222,sK4(X223,X222))))) | s(bool,X226) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X222),X223),s(bool,X224),s(fun(X222,bool),X225))) | s(bool,'T_0') = s(bool,X226) | s('type.option.option'(X222),'const.option.NONE_0') = s('type.option.option'(X222),X223)) )),
  inference(superposition,[],[f252,f651])).
fof(f39786,plain,(
  ( ! [X123,X121,X124,X122,X120,X119] : (s('type.option.option'(X119),X124) != s('type.option.option'(X119),'const.option.SOME_1'(s(X119,happ(s(fun(X120,X119),X123),s(X120,sK4(X121,X120)))))) | s(X119,sK4(X124,X119)) = s(X119,'const.option.option_CASE_3'(s('type.option.option'(X120),X121),s(X119,X122),s(fun(X120,X119),X123))) | s('type.option.option'(X119),'const.option.NONE_0') = s('type.option.option'(X119),X124) | s('type.option.option'(X120),'const.option.NONE_0') = s('type.option.option'(X120),X121)) )),
  inference(superposition,[],[f551,f651])).
fof(f39783,plain,(
  ( ! [X101,X99,X97,X95,X102,X100,X98,X96] : (s('type.option.option'(X95),'const.option.SOME_1'(s(X95,X100))) != s('type.option.option'(X95),'const.option.SOME_1'(s(X95,happ(s(fun(X96,X95),X99),s(X96,sK4(X97,X96)))))) | s(X95,'const.option.option_CASE_3'(s('type.option.option'(X101),'const.option.NONE_0'),s(X95,X100),s(fun(X101,X95),X102))) = s(X95,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(X95,X98),s(fun(X96,X95),X99))) | s('type.option.option'(X96),'const.option.NONE_0') = s('type.option.option'(X96),X97)) )),
  inference(superposition,[],[f442,f651])).
fof(f39782,plain,(
  ( ! [X94,X92,X90,X88,X87,X93,X91,X89] : (s('type.option.option'(X87),'const.option.SOME_1'(s(X87,X92))) != s('type.option.option'(X87),'const.option.SOME_1'(s(X87,happ(s(fun(X88,X87),X91),s(X88,sK4(X89,X88)))))) | s(X87,X92) = s(X87,'const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.NONE_0'),s(X87,'const.option.option_CASE_3'(s('type.option.option'(X88),X89),s(X87,X90),s(fun(X88,X87),X91))),s(fun(X93,X87),X94))) | s('type.option.option'(X88),'const.option.NONE_0') = s('type.option.option'(X88),X89)) )),
  inference(superposition,[],[f442,f651])).
fof(f39773,plain,(
  ( ! [X30,X28,X26,X31,X29,X27] : (s(X26,X31) != s(X26,happ(s(fun(X27,X26),X30),s(X27,sK4(X28,X27)))) | s('type.option.option'(X26),'const.option.SOME_1'(s(X26,X31))) = s('type.option.option'(X26),'const.option.SOME_1'(s(X26,'const.option.option_CASE_3'(s('type.option.option'(X27),X28),s(X26,X29),s(fun(X27,X26),X30))))) | s('type.option.option'(X27),'const.option.NONE_0') = s('type.option.option'(X27),X28)) )),
  inference(superposition,[],[f154,f651])).
fof(f39771,plain,(
  ( ! [X14,X19,X17,X15,X18,X16] : (s('type.option.option'(X14),'const.option.SOME_1'(s(X14,X19))) != s('type.option.option'(X14),'const.option.SOME_1'(s(X14,happ(s(fun(X15,X14),X18),s(X15,sK4(X16,X15)))))) | s(X14,X19) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(X15),X16),s(X14,X17),s(fun(X15,X14),X18))) | s('type.option.option'(X15),'const.option.NONE_0') = s('type.option.option'(X15),X16)) )),
  inference(superposition,[],[f153,f651])).
fof(f39765,plain,(
  ( ! [X689,X691,X687,X688,X690,X686] : (s('type.option.option'(X686),'const.option.SOME_1'(s(X686,X691))) != s('type.option.option'(X686),'const.option.option_CASE_3'(s('type.option.option'(X687),X689),s('type.option.option'(X686),X690),s(fun(X687,'type.option.option'(X686)),X688))) | s(X686,X691) = s(X686,sK4(happ(s(fun(X687,'type.option.option'(X686)),X688),s(X687,sK4(X689,X687))),X686)) | s('type.option.option'(X686),'const.option.NONE_0') = s('type.option.option'(X686),happ(s(fun(X687,'type.option.option'(X686)),X688),s(X687,sK4(X689,X687)))) | s('type.option.option'(X687),'const.option.NONE_0') = s('type.option.option'(X687),X689)) )),
  inference(superposition,[],[f551,f651])).
fof(f39656,plain,(
  ( ! [X121,X118,X116,X120,X119,X117] : (s('type.option.option'(X116),X121) != s('type.option.option'(X116),'const.option.SOME_1'(s(X116,'const.option.option_CASE_3'(s('type.option.option'(X117),X119),s(X116,X120),s(fun(X117,X116),X118))))) | s(X116,sK4(X121,X116)) = s(X116,happ(s(fun(X117,X116),X118),s(X117,sK4(X119,X117)))) | s('type.option.option'(X116),'const.option.NONE_0') = s('type.option.option'(X116),X121) | s('type.option.option'(X117),'const.option.NONE_0') = s('type.option.option'(X117),X119)) )),
  inference(superposition,[],[f551,f651])).
fof(f39653,plain,(
  ( ! [X94,X92,X99,X97,X95,X93,X98,X96] : (s('type.option.option'(X92),'const.option.SOME_1'(s(X92,X97))) != s('type.option.option'(X92),'const.option.SOME_1'(s(X92,'const.option.option_CASE_3'(s('type.option.option'(X93),X95),s(X92,X96),s(fun(X93,X92),X94))))) | s(X92,happ(s(fun(X93,X92),X94),s(X93,sK4(X95,X93)))) = s(X92,'const.option.option_CASE_3'(s('type.option.option'(X98),'const.option.NONE_0'),s(X92,X97),s(fun(X98,X92),X99))) | s('type.option.option'(X93),'const.option.NONE_0') = s('type.option.option'(X93),X95)) )),
  inference(superposition,[],[f442,f651])).
fof(f39652,plain,(
  ( ! [X90,X88,X87,X85,X91,X89,X86,X84] : (s('type.option.option'(X84),'const.option.SOME_1'(s(X84,X89))) != s('type.option.option'(X84),'const.option.SOME_1'(s(X84,'const.option.option_CASE_3'(s('type.option.option'(X85),X87),s(X84,X88),s(fun(X85,X84),X86))))) | s(X84,X89) = s(X84,'const.option.option_CASE_3'(s('type.option.option'(X90),'const.option.NONE_0'),s(X84,happ(s(fun(X85,X84),X86),s(X85,sK4(X87,X85)))),s(fun(X90,X84),X91))) | s('type.option.option'(X85),'const.option.NONE_0') = s('type.option.option'(X85),X87)) )),
  inference(superposition,[],[f442,f651])).
fof(f39643,plain,(
  ( ! [X28,X26,X24,X23,X27,X25] : (s(X23,X28) != s(X23,'const.option.option_CASE_3'(s('type.option.option'(X24),X26),s(X23,X27),s(fun(X24,X23),X25))) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X28))) = s('type.option.option'(X23),'const.option.SOME_1'(s(X23,happ(s(fun(X24,X23),X25),s(X24,sK4(X26,X24)))))) | s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),X26)) )),
  inference(superposition,[],[f154,f651])).
fof(f39641,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s('type.option.option'(X11),'const.option.SOME_1'(s(X11,X16))) != s('type.option.option'(X11),'const.option.SOME_1'(s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X14),s(X11,X15),s(fun(X12,X11),X13))))) | s(X11,X16) = s(X11,happ(s(fun(X12,X11),X13),s(X12,sK4(X14,X12)))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X14)) )),
  inference(superposition,[],[f153,f651])).
fof(f39939,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s('type.option.option'(X52),'const.option.NONE_0') = s('type.option.option'(X52),X53) | s(X54,'const.option.option_CASE_3'(s('type.option.option'(X52),X53),s(X54,X56),s(fun(X52,X54),X55))) = s(X54,happ(s(fun(X52,X54),X55),s(X52,sK4(sK4('const.option.SOME_1'(s('type.option.option'(X52),X53)),'type.option.option'(X52)),X52))))) )),
  inference(forward_demodulation,[],[f39541,f1267])).
fof(f39541,plain,(
  ( ! [X54,X52,X56,X55,X53] : (s(X54,'const.option.option_CASE_3'(s('type.option.option'(X52),X53),s(X54,X56),s(fun(X52,X54),X55))) = s(X54,happ(s(fun(X52,X54),X55),s(X52,sK4(sK4('const.option.SOME_1'(s('type.option.option'(X52),X53)),'type.option.option'(X52)),X52)))) | s('type.option.option'(X52),'const.option.NONE_0') = s('type.option.option'(X52),sK4('const.option.SOME_1'(s('type.option.option'(X52),X53)),'type.option.option'(X52)))) )),
  inference(superposition,[],[f651,f1267])).
fof(f39540,plain,(
  ( ! [X47,X45,X50,X48,X46,X44,X51,X49] : (s(X49,happ(s(fun(X44,X49),X50),s(X44,sK4(happ(s(fun(X45,'type.option.option'(X44)),X46),s(X45,sK4(X47,X45))),X44)))) = s(X49,'const.option.option_CASE_3'(s('type.option.option'(X44),'const.option.option_CASE_3'(s('type.option.option'(X45),X47),s('type.option.option'(X44),X48),s(fun(X45,'type.option.option'(X44)),X46))),s(X49,X51),s(fun(X44,X49),X50))) | s('type.option.option'(X44),'const.option.NONE_0') = s('type.option.option'(X44),happ(s(fun(X45,'type.option.option'(X44)),X46),s(X45,sK4(X47,X45)))) | s('type.option.option'(X45),'const.option.NONE_0') = s('type.option.option'(X45),X47)) )),
  inference(superposition,[],[f651,f651])).
fof(f39938,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X42,X40] : (s('type.option.option'(X36),'const.option.NONE_0') = s('type.option.option'(X36),'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s('type.option.option'(X36),X39),s(fun(X37,'type.option.option'(X36)),X40))) | s(X41,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s('type.option.option'(X36),X39),s(fun(X37,'type.option.option'(X36)),X40))),s(X41,X43),s(fun(X36,X41),X42))) = s(X41,happ(s(fun(X36,X41),X42),s(X36,sK4(happ(s(fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36)),happ(s(fun('type.option.option'(X36),fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36))),happ(s(fun('type.option.option'(X37),fun('type.option.option'(X36),fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36)))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s('type.option.option'(X36),X39))),s(fun(X37,'type.option.option'(X36)),X40)),X36))))) )),
  inference(forward_demodulation,[],[f39539,f165])).
fof(f39539,plain,(
  ( ! [X39,X37,X43,X41,X38,X36,X42,X40] : (s(X41,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s('type.option.option'(X36),X39),s(fun(X37,'type.option.option'(X36)),X40))),s(X41,X43),s(fun(X36,X41),X42))) = s(X41,happ(s(fun(X36,X41),X42),s(X36,sK4(happ(s(fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36)),happ(s(fun('type.option.option'(X36),fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36))),happ(s(fun('type.option.option'(X37),fun('type.option.option'(X36),fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36)))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s('type.option.option'(X36),X39))),s(fun(X37,'type.option.option'(X36)),X40)),X36)))) | s('type.option.option'(X36),'const.option.NONE_0') = s('type.option.option'(X36),happ(s(fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36)),happ(s(fun('type.option.option'(X36),fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36))),happ(s(fun('type.option.option'(X37),fun('type.option.option'(X36),fun(fun(X37,'type.option.option'(X36)),'type.option.option'(X36)))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s('type.option.option'(X36),X39))),s(fun(X37,'type.option.option'(X36)),X40)))) )),
  inference(superposition,[],[f651,f165])).
fof(f39538,plain,(
  ( ! [X30,X28,X35,X33,X31,X29,X34,X32] : (s(X33,'const.option.option_CASE_3'(s('type.option.option'(X28),happ(s(fun(X29,'type.option.option'(X28)),X32),s(X29,sK4(X30,X29)))),s(X33,X35),s(fun(X28,X33),X34))) = s(X33,happ(s(fun(X28,X33),X34),s(X28,sK4('const.option.option_CASE_3'(s('type.option.option'(X29),X30),s('type.option.option'(X28),X31),s(fun(X29,'type.option.option'(X28)),X32)),X28)))) | s('type.option.option'(X28),'const.option.NONE_0') = s('type.option.option'(X28),'const.option.option_CASE_3'(s('type.option.option'(X29),X30),s('type.option.option'(X28),X31),s(fun(X29,'type.option.option'(X28)),X32))) | s('type.option.option'(X29),'const.option.NONE_0') = s('type.option.option'(X29),X30)) )),
  inference(superposition,[],[f651,f651])).
fof(f39937,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),happ(s(fun(X21,'type.option.option'(X20)),X24),s(X21,X22))) | s(X25,'const.option.option_CASE_3'(s('type.option.option'(X20),happ(s(fun(X21,'type.option.option'(X20)),X24),s(X21,X22))),s(X25,X27),s(fun(X20,X25),X26))) = s(X25,happ(s(fun(X20,X25),X26),s(X20,sK4('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.SOME_1'(s(X21,X22))),s('type.option.option'(X20),X23),s(fun(X21,'type.option.option'(X20)),X24)),X20))))) )),
  inference(forward_demodulation,[],[f39537,f164])).
fof(f39537,plain,(
  ( ! [X26,X24,X23,X21,X27,X25,X22,X20] : (s(X25,'const.option.option_CASE_3'(s('type.option.option'(X20),happ(s(fun(X21,'type.option.option'(X20)),X24),s(X21,X22))),s(X25,X27),s(fun(X20,X25),X26))) = s(X25,happ(s(fun(X20,X25),X26),s(X20,sK4('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.SOME_1'(s(X21,X22))),s('type.option.option'(X20),X23),s(fun(X21,'type.option.option'(X20)),X24)),X20)))) | s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.SOME_1'(s(X21,X22))),s('type.option.option'(X20),X23),s(fun(X21,'type.option.option'(X20)),X24)))) )),
  inference(superposition,[],[f651,f164])).
fof(f39936,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (s('type.option.option'(X13),'const.option.NONE_0') = s('type.option.option'(X13),X15) | s(X17,'const.option.option_CASE_3'(s('type.option.option'(X13),X15),s(X17,X19),s(fun(X13,X17),X18))) = s(X17,happ(s(fun(X13,X17),X18),s(X13,sK4('const.option.option_CASE_3'(s('type.option.option'(X14),'const.option.NONE_0'),s('type.option.option'(X13),X15),s(fun(X14,'type.option.option'(X13)),X16)),X13))))) )),
  inference(forward_demodulation,[],[f39536,f162])).
fof(f39536,plain,(
  ( ! [X14,X19,X17,X15,X13,X18,X16] : (s(X17,'const.option.option_CASE_3'(s('type.option.option'(X13),X15),s(X17,X19),s(fun(X13,X17),X18))) = s(X17,happ(s(fun(X13,X17),X18),s(X13,sK4('const.option.option_CASE_3'(s('type.option.option'(X14),'const.option.NONE_0'),s('type.option.option'(X13),X15),s(fun(X14,'type.option.option'(X13)),X16)),X13)))) | s('type.option.option'(X13),'const.option.NONE_0') = s('type.option.option'(X13),'const.option.option_CASE_3'(s('type.option.option'(X14),'const.option.NONE_0'),s('type.option.option'(X13),X15),s(fun(X14,'type.option.option'(X13)),X16)))) )),
  inference(superposition,[],[f651,f162])).
fof(f39515,plain,(
  ( ! [X28,X26,X29,X27,X25] : (s(bool,X28) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X25),X27),s(bool,X29),s(fun(X25,bool),X26))) | s('type.option.option'(X25),'const.option.NONE_0') = s('type.option.option'(X25),X27) | s(bool,'T_0') = s(bool,X28) | s(bool,'T_0') = s(bool,happ(s(fun(X25,bool),X26),s(X25,sK4(X27,X25))))) )),
  inference(superposition,[],[f651,f213])).
fof(f39514,plain,(
  ( ! [X24,X23,X21,X22,X20] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X20),X22),s(bool,X23),s(fun(X20,bool),X21))) | s('type.option.option'(X20),'const.option.NONE_0') = s('type.option.option'(X20),X22) | s(bool,X24) = s(bool,happ(s(fun(X20,bool),X21),s(X20,sK4(X22,X20)))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f651,f213])).
fof(f39920,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X10),s(fun(X7,X6),X8))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X11),s(fun(X7,X6),X8))) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9)) )),
  inference(duplicate_literal_removal,[],[f39511])).
fof(f39511,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X10),s(fun(X7,X6),X8))) = s(X6,'const.option.option_CASE_3'(s('type.option.option'(X7),X9),s(X6,X11),s(fun(X7,X6),X8))) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9)) )),
  inference(superposition,[],[f651,f651])).
fof(f39510,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),X2),s(X0,X3),s(fun(X1,X0),sK4(X4,fun(X1,X0))))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(fun(X1,X0)),X4),s(X0,X5),s(fun(fun(X1,X0),X0),happ(s(fun(X0,fun(fun(X1,X0),X0)),happ(s(fun('type.option.option'(X1),fun(X0,fun(fun(X1,X0),X0))),'const.option.option_CASE_0'),s('type.option.option'(X1),X2))),s(X0,X3))))) | s('type.option.option'(fun(X1,X0)),'const.option.NONE_0') = s('type.option.option'(fun(X1,X0)),X4)) )),
  inference(superposition,[],[f651,f165])).
fof(f37839,plain,(
  ( ! [X461,X463,X465,X462,X464] : (~p(s(bool,happ(s(fun(bool,bool),X465),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X465),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X461),'const.option.SOME_1'(s(X461,X462))),s(bool,X463),s(fun(X461,bool),X464)),X465,bool)))) | s(bool,'F_0') = s(bool,happ(s(fun(X461,bool),X464),s(X461,X462)))) )),
  inference(superposition,[],[f612,f675])).
fof(f37838,plain,(
  ( ! [X457,X459,X460,X456,X458] : (s('type.option.option'(bool),X460) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK4(X460,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X456),'const.option.SOME_1'(s(X456,X457))),s(bool,X458),s(fun(X456,bool),X459))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X460) | s(bool,'F_0') = s(bool,happ(s(fun(X456,bool),X459),s(X456,X457)))) )),
  inference(superposition,[],[f551,f675])).
fof(f37836,plain,(
  ( ! [X445,X447,X443,X444,X446,X442,X448] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X446))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X447),'const.option.NONE_0'),s(bool,X446),s(fun(X447,bool),X448))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X442),'const.option.SOME_1'(s(X442,X443))),s(bool,X444),s(fun(X442,bool),X445))) | s(bool,'F_0') = s(bool,happ(s(fun(X442,bool),X445),s(X442,X443)))) )),
  inference(superposition,[],[f442,f675])).
fof(f37824,plain,(
  ( ! [X377,X374,X376,X373,X375] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X377))) | s(bool,X377) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X373),'const.option.SOME_1'(s(X373,X374))),s(bool,X375),s(fun(X373,bool),X376))) | s(bool,'F_0') = s(bool,happ(s(fun(X373,bool),X376),s(X373,X374)))) )),
  inference(superposition,[],[f153,f675])).
fof(f37765,plain,(
  ( ! [X99,X97,X95,X98,X96] : (~p(s(bool,happ(s(fun(bool,bool),X99),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X99),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X95),'const.option.SOME_1'(s(X95,X96))),s(bool,X97),s(fun(X95,bool),X98)),X99,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X95,bool),X98),s(X95,X96)))) )),
  inference(superposition,[],[f606,f675])).
fof(f37979,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X13))),s(bool,X14),s(fun(X12,bool),X15))) | s(bool,'F_0') = s(bool,happ(s(fun(X12,bool),X15),s(X12,X13)))) )),
  inference(subsumption_resolution,[],[f37750,f111])).
fof(f37750,plain,(
  ( ! [X14,X12,X15,X13] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X13))),s(bool,X14),s(fun(X12,bool),X15))) | s(bool,'F_0') = s(bool,happ(s(fun(X12,bool),X15),s(X12,X13)))) )),
  inference(superposition,[],[f124,f675])).
fof(f37696,plain,(
  ( ! [X92,X90,X88,X91,X89] : (s(bool,X88) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.SOME_1'(s(X89,X90))),s(bool,X88),s(fun(X89,bool),X91))) | s(bool,'F_0') = s(bool,happ(s(fun(X89,bool),X91),s(X89,X90))) | s(bool,X88) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f675,f213])).
fof(f37676,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),X7),s(bool,X8),s(fun(X6,bool),X9))) | s(bool,'F_0') = s(bool,happ(s(fun(X6,bool),X9),s(X6,sK4(X7,X6)))) | s('type.option.option'(X6),'const.option.NONE_0') = s('type.option.option'(X6),X7)) )),
  inference(superposition,[],[f675,f145])).
fof(f37673,plain,(
  ( ! [X191,X192,X190,X193] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(X190)),'const.option.SOME_1'(s('type.option.option'(X190),X191))),s(bool,X192),s(fun('type.option.option'(X190),bool),X193))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X190),bool),X193),s('type.option.option'(X190),'const.option.SOME_1'(s(X190,sK4(X191,X190)))))) | s('type.option.option'(X190),'const.option.NONE_0') = s('type.option.option'(X190),X191)) )),
  inference(superposition,[],[f675,f145])).
fof(f37651,plain,(
  ( ! [X114,X115,X113] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))),s(bool,X114),s(fun(bool,bool),X115))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X115),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X113)) )),
  inference(superposition,[],[f675,f118])).
fof(f37646,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,X93) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X93))),s(bool,X94),s(fun(bool,bool),X95))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X95),s(bool,'T_0'))) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f675,f213])).
fof(f37629,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))),s(bool,X33),s(fun(bool,bool),X34))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X34),s(bool,X31))) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,X31)) )),
  inference(superposition,[],[f675,f213])).
fof(f37628,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X28),s(fun(bool,bool),X29))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X29),s(bool,X27))) | s(bool,X27) = s(bool,X30) | s(bool,'T_0') = s(bool,X30)) )),
  inference(superposition,[],[f675,f213])).
fof(f37627,plain,(
  ( ! [X26,X24,X25] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X25),s(fun(bool,bool),X26))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X26),s(bool,X24))) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f675,f118])).
fof(f36584,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X5,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f36545,f111])).
fof(f36545,plain,(
  ( ! [X6,X4,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X5,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f606,f213])).
fof(f36542,plain,(
  ( ! [X121,X120] : (~p(s(bool,happ(s(fun(bool,bool),X121),s(bool,X120)))) | p(s(bool,happ(s(fun(bool,bool),X121),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X120)),bool),X121,bool))) )),
  inference(superposition,[],[f606,f1267])).
fof(f36541,plain,(
  ( ! [X118,X116,X119,X117,X115] : (~p(s(bool,happ(s(fun(bool,bool),X119),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X115),X116),s(bool,X117),s(fun(X115,bool),X118)))))) | p(s(bool,happ(s(fun(bool,bool),X119),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(happ(s(fun(fun(X115,bool),bool),happ(s(fun(bool,fun(fun(X115,bool),bool)),happ(s(fun('type.option.option'(X115),fun(bool,fun(fun(X115,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X115),X116))),s(bool,X117))),s(fun(X115,bool),X118)),X119,bool))) )),
  inference(superposition,[],[f606,f165])).
fof(f36540,plain,(
  ( ! [X111,X114,X112,X110,X113] : (~p(s(bool,happ(s(fun(bool,bool),X114),s(bool,happ(s(fun(X110,bool),X113),s(X110,X111)))))) | p(s(bool,happ(s(fun(bool,bool),X114),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X110),'const.option.SOME_1'(s(X110,X111))),s(bool,X112),s(fun(X110,bool),X113)),X114,bool))) )),
  inference(superposition,[],[f606,f164])).
fof(f36539,plain,(
  ( ! [X109,X107,X108,X106] : (~p(s(bool,happ(s(fun(bool,bool),X109),s(bool,X107)))) | p(s(bool,happ(s(fun(bool,bool),X109),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X106),'const.option.NONE_0'),s(bool,X107),s(fun(X106,bool),X108)),X109,bool))) )),
  inference(superposition,[],[f606,f162])).
fof(f36527,plain,(
  ( ! [X76,X74,X77,X75] : (~p(s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X77),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X74),'const.option.NONE_0'),s(bool,X75),s(fun(X74,bool),X76)),X77,bool)) | s(bool,'F_0') = s(bool,X75)) )),
  inference(superposition,[],[f606,f358])).
fof(f36522,plain,(
  ( ! [X64,X63] : (~p(s(bool,happ(s(fun(bool,bool),X64),s(bool,X63)))) | p(s(bool,happ(s(fun(bool,bool),X64),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('F_0',X64,bool)) | s(bool,'T_0') = s(bool,X63)) )),
  inference(superposition,[],[f606,f118])).
fof(f36501,plain,(
  ( ! [X6,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X6)))) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X5,X7,bool)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f606,f213])).
fof(f36500,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X2,X3,bool)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f606,f213])).
fof(f36565,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | s(bool,'T_0') = s(bool,sK5(X15,sK4('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool))) )),
  inference(forward_demodulation,[],[f36498,f1267])).
fof(f36498,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | p(s(bool,happ(s(fun(bool,bool),sK4('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X15,sK4('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool))) )),
  inference(superposition,[],[f606,f1267])).
fof(f36564,plain,(
  ( ! [X12,X10,X13,X11,X9] : (p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | s(bool,'T_0') = s(bool,sK5(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool))) )),
  inference(forward_demodulation,[],[f36497,f165])).
fof(f36497,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | p(s(bool,happ(s(fun(bool,bool),happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool))) )),
  inference(superposition,[],[f606,f165])).
fof(f36563,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | s(bool,'T_0') = s(bool,sK5(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool))) )),
  inference(forward_demodulation,[],[f36496,f164])).
fof(f36496,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool))) )),
  inference(superposition,[],[f606,f164])).
fof(f36562,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | s(bool,'T_0') = s(bool,sK5(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool))) )),
  inference(forward_demodulation,[],[f36495,f162])).
fof(f36495,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2))),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool))) )),
  inference(superposition,[],[f606,f162])).
fof(f999,plain,(
  ( ! [X14,X15,X13] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | s(bool,X13) != s(bool,X15) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f155,f118])).
fof(f1000,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X17),s(bool,X16)))) | p(s(bool,happ(s(fun(bool,bool),X17),s(bool,X18)))) | s(bool,'F_0') != s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f155,f118])).
fof(f4788,plain,(
  ( ! [X94,X92,X90,X95,X93,X91] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X94),'const.option.NONE_0'),s(bool,happ(s(fun(X90,bool),X93),s(X90,X91))),s(fun(X94,bool),X95))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X90),'const.option.SOME_1'(s(X90,X91))),s(bool,X92),s(fun(X90,bool),X93)))) )),
  inference(superposition,[],[f358,f164])).
fof(f4789,plain,(
  ( ! [X101,X99,X97,X100,X98,X96] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X100),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X97),s(bool,X98),s(fun(X96,bool),X99))),s(fun(X100,bool),X101))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X96,bool),bool),happ(s(fun(bool,fun(fun(X96,bool),bool)),happ(s(fun('type.option.option'(X96),fun(bool,fun(fun(X96,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X96),X97))),s(bool,X98))),s(fun(X96,bool),X99)))) )),
  inference(superposition,[],[f358,f165])).
fof(f4884,plain,(
  ( ! [X142,X140,X143,X141] : (s(bool,X141) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X141),s(fun(X140,bool),X142)),X143,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X143),s(bool,'T_0')))) | s(bool,'F_0') = s(bool,X141)) )),
  inference(forward_demodulation,[],[f4839,f162])).
fof(f4839,plain,(
  ( ! [X142,X140,X143,X141] : (~p(s(bool,happ(s(fun(bool,bool),X143),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X141),s(fun(X140,bool),X142))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X140),'const.option.NONE_0'),s(bool,X141),s(fun(X140,bool),X142)),X143,bool)) | s(bool,'F_0') = s(bool,X141)) )),
  inference(superposition,[],[f156,f358])).
fof(f5065,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X64,bool),X67),s(X64,X65))))) | s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.SOME_1'(s(X64,X65))),s(bool,X66),s(fun(X64,bool),X67))) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f436,f164])).
fof(f5281,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X66,bool),X69),s(X66,X67))))) | s(bool,'F_0') = s(bool,X70) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.SOME_1'(s(X66,X67))),s(bool,X68),s(fun(X66,bool),X69)))) )),
  inference(superposition,[],[f437,f164])).
fof(f5309,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X66,bool),X69),s(X66,X67))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.SOME_1'(s(X66,X67))),s(bool,X68),s(fun(X66,bool),X69))) | s(bool,'T_0') = s(bool,X70)) )),
  inference(superposition,[],[f437,f164])).
fof(f8593,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X91) != s(bool,happ(s(fun(X87,bool),X90),s(X87,X88))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),'const.option.SOME_1'(s(X87,X88))),s(bool,X89),s(fun(X87,bool),X90)))) )),
  inference(superposition,[],[f477,f164])).
fof(f8869,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,X3) = s(bool,sK5(X3,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f512,f162])).
fof(f8870,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,'F_0')))) | s(bool,X8) = s(bool,sK5(X8,'const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f512,f164])).
fof(f8871,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,'F_0')))) | s(bool,X13) = s(bool,sK5(X13,happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f512,f165])).
fof(f8872,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,'F_0')))) | s(bool,X15) = s(bool,sK5(X15,sK4('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f512,f1267])).
fof(f9680,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X3)))) | s(bool,'F_0') = s(bool,sK5('F_0','const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f513,f162])).
fof(f9681,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X4,fun(bool,bool)),X7),s(X4,X5))),s(bool,X8)))) | s(bool,'F_0') = s(bool,sK5('F_0','const.option.option_CASE_3'(s('type.option.option'(X4),'const.option.SOME_1'(s(X4,X5))),s(fun(bool,bool),X6),s(fun(X4,fun(bool,bool)),X7)),bool)) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f513,f164])).
fof(f9682,plain,(
  ( ! [X12,X10,X13,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X9),X10),s(fun(bool,bool),X11),s(fun(X9,fun(bool,bool)),X12))),s(bool,X13)))) | s(bool,'F_0') = s(bool,sK5('F_0',happ(s(fun(fun(X9,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X9),fun(fun(bool,bool),fun(fun(X9,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X9),X10))),s(fun(bool,bool),X11))),s(fun(X9,fun(bool,bool)),X12)),bool)) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f513,f165])).
fof(f9683,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X14),s(bool,X15)))) | s(bool,'F_0') = s(bool,sK5('F_0',sK4('const.option.SOME_1'(s(fun(bool,bool),X14)),fun(bool,bool)),bool)) | s(bool,'T_0') = s(bool,X15)) )),
  inference(superposition,[],[f513,f1267])).
fof(f10029,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X33),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X33),s('type.option.option'(bool),X34)))) | s('type.option.option'(bool),X32) != s('type.option.option'(bool),X34) | s(bool,'T_0') = s(bool,sK4(X32,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(superposition,[],[f155,f550])).
fof(f10030,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X36),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X35) = s('type.option.option'(bool),sK5(X35,X36,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK4(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35)) )),
  inference(superposition,[],[f156,f550])).
fof(f10044,plain,(
  ( ! [X76,X75] : (p(s(bool,happ(s(fun('type.option.option'(bool),bool),X76),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | ~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X76),s('type.option.option'(bool),X75)))) | s(bool,'T_0') = s(bool,sK4(sK5(X75,X76,'type.option.option'(bool)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),sK5(X75,X76,'type.option.option'(bool)))) )),
  inference(superposition,[],[f157,f550])).
fof(f10061,plain,(
  ( ! [X33,X34,X32] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X33),s('type.option.option'(bool),X32)))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X33),s('type.option.option'(bool),X34)))) | s('type.option.option'(bool),X34) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X32,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X32)) )),
  inference(superposition,[],[f155,f550])).
fof(f10062,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X36),s('type.option.option'(bool),X35)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,'F_0')),X36,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK4(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35)) )),
  inference(superposition,[],[f156,f550])).
fof(f10143,plain,(
  ( ! [X118,X116,X117] : (~p(s(bool,happ(s(fun(bool,bool),X117),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X117),s(bool,X118)))) | s(bool,X118) != s(bool,sK4(X116,bool)) | s('type.option.option'(bool),X116) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X116)) )),
  inference(superposition,[],[f155,f550])).
fof(f10144,plain,(
  ( ! [X120,X119] : (~p(s(bool,happ(s(fun(bool,bool),X120),s(bool,'T_0')))) | s(bool,sK4(X119,bool)) = s(bool,sK5(sK4(X119,bool),X120,bool)) | s('type.option.option'(bool),X119) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X119)) )),
  inference(superposition,[],[f156,f550])).
fof(f11524,plain,(
  ( ! [X21,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X21),s(bool,sK5(X20,X21,bool)))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f612,f118])).
fof(f11552,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,happ(s(fun(bool,bool),X96),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X96),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.NONE_0'),s(bool,X94),s(fun(X93,bool),X95)),X96,bool)))) | s(bool,'F_0') = s(bool,X94)) )),
  inference(superposition,[],[f612,f358])).
fof(f11562,plain,(
  ( ! [X121,X122] : (~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X122),s(bool,sK5(sK4(X121,bool),X122,bool)))) | s('type.option.option'(bool),X121) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X121)) )),
  inference(superposition,[],[f612,f550])).
fof(f11565,plain,(
  ( ! [X127,X128] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X128),s('type.option.option'(bool),X127)))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X128),s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,'F_0')),X128,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK4(X127,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X127)) )),
  inference(superposition,[],[f612,f550])).
fof(f11567,plain,(
  ( ! [X132,X133] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X133),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X133),s('type.option.option'(bool),sK5(X132,X133,'type.option.option'(bool))))) | s(bool,'T_0') = s(bool,sK4(X132,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X132)) )),
  inference(superposition,[],[f612,f550])).
fof(f13308,plain,(
  ( ! [X30,X28,X31,X29] : (~p(s(bool,happ(s(fun(bool,bool),X29),s(bool,'F_0')))) | s(bool,X28) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X28),s(fun(X30,bool),X31)),X29,bool)) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f524,f118])).
fof(f13332,plain,(
  ( ! [X144,X142,X143,X141] : (~p(s(bool,happ(s(fun(bool,bool),X142),s(bool,X141)))) | s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X143),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X143,bool),X144)),X142,bool)) | s(bool,'T_0') = s(bool,X141)) )),
  inference(superposition,[],[f524,f118])).
fof(f13351,plain,(
  ( ! [X227,X225,X228,X226] : (~p(s(bool,happ(s(fun(bool,bool),X226),s(bool,'T_0')))) | s(bool,sK4(X225,bool)) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X227),'const.option.NONE_0'),s(bool,sK4(X225,bool)),s(fun(X227,bool),X228)),X226,bool)) | s('type.option.option'(bool),X225) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X225)) )),
  inference(superposition,[],[f524,f550])).
fof(f13354,plain,(
  ( ! [X239,X237,X240,X238] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X238),s('type.option.option'(bool),X237)))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X239),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(fun(X239,'type.option.option'(bool)),X240)),X238,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK4(X237,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X237)) )),
  inference(superposition,[],[f524,f550])).
fof(f13356,plain,(
  ( ! [X249,X246,X248,X247] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X247),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0')))))) | s('type.option.option'(bool),X246) = s('type.option.option'(bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X248),'const.option.NONE_0'),s('type.option.option'(bool),X246),s(fun(X248,'type.option.option'(bool)),X249)),X247,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK4(X246,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X246)) )),
  inference(superposition,[],[f524,f550])).
fof(f1426,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(bool,'T_0') = s(bool,happ(s(fun(X23,bool),X26),s(X23,X24))) | s(bool,X27) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X24))),s(bool,X25),s(fun(X23,bool),X26))) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f213,f164])).
fof(f125,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f85])).
fof(f550,plain,(
  ( ! [X0] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,sK4(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f145,f118])).
fof(f12661,plain,(
  ( ! [X237,X235,X233,X236,X234] : (s('type.option.option'('type.option.option'(X233)),'const.option.SOME_1'(s('type.option.option'(X233),X234))) != s('type.option.option'('type.option.option'(X233)),'const.option.SOME_1'(s('type.option.option'(X233),X235))) | s('type.option.option'(X233),'const.option.SOME_1'(s(X233,sK4(X234,X233)))) = s('type.option.option'(X233),'const.option.option_CASE_3'(s('type.option.option'(X236),'const.option.NONE_0'),s('type.option.option'(X233),X235),s(fun(X236,'type.option.option'(X233)),X237))) | s('type.option.option'(X233),'const.option.NONE_0') = s('type.option.option'(X233),X234)) )),
  inference(superposition,[],[f442,f145])).
fof(f12634,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(bool,X113),s(fun(X114,bool),X115))) | s(bool,X112) = s(bool,X116) | s(bool,'T_0') = s(bool,X116)) )),
  inference(superposition,[],[f442,f213])).
fof(f12618,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X37) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X39),s(fun(X40,bool),X41))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f442,f213])).
fof(f12617,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X32) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X33),s(fun(X34,bool),X35))) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f442,f213])).
fof(f12615,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X24))) != s('type.option.option'(X23),'const.option.SOME_1'(s(X23,X25))) | s(X23,sK4('const.option.SOME_1'(s(X23,X24)),X23)) = s(X23,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)))) )),
  inference(superposition,[],[f442,f1267])).
fof(f12614,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s('type.option.option'(X15),'const.option.SOME_1'(s(X15,X20))) != s('type.option.option'(X15),'const.option.SOME_1'(s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))))) | s(X15,'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22))) = s(X15,happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)))) )),
  inference(superposition,[],[f442,f165])).
fof(f12613,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X12))) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))))) | s(X7,'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14))) = s(X7,'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)))) )),
  inference(superposition,[],[f442,f164])).
fof(f12612,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) | s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)))) )),
  inference(superposition,[],[f442,f162])).
fof(f12610,plain,(
  ( ! [X14,X12,X15,X13,X16] : (s('type.option.option'(X12),X13) != s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X14))) | s(X12,X14) = s(X12,'const.option.option_CASE_3'(s('type.option.option'(X15),'const.option.NONE_0'),s(X12,sK4(X13,X12)),s(fun(X15,X12),X16))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X13)) )),
  inference(superposition,[],[f442,f145])).
fof(f12605,plain,(
  ( ! [X237,X235,X233,X236,X234] : (s('type.option.option'('type.option.option'(X233)),'const.option.SOME_1'(s('type.option.option'(X233),X234))) != s('type.option.option'('type.option.option'(X233)),'const.option.SOME_1'(s('type.option.option'(X233),X235))) | s('type.option.option'(X233),X235) = s('type.option.option'(X233),'const.option.option_CASE_3'(s('type.option.option'(X236),'const.option.NONE_0'),s('type.option.option'(X233),'const.option.SOME_1'(s(X233,sK4(X234,X233)))),s(fun(X236,'type.option.option'(X233)),X237))) | s('type.option.option'(X233),'const.option.NONE_0') = s('type.option.option'(X233),X234)) )),
  inference(superposition,[],[f442,f145])).
fof(f12578,plain,(
  ( ! [X116,X114,X112,X115,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X112))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s(bool,X113) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X114,bool),X115))) | s(bool,X112) = s(bool,X116) | s(bool,'T_0') = s(bool,X116)) )),
  inference(superposition,[],[f442,f213])).
fof(f12562,plain,(
  ( ! [X39,X37,X41,X38,X40] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X39))) | s(bool,X39) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X37),s(fun(X40,bool),X41))) | s(bool,'T_0') = s(bool,X38) | s(bool,'T_0') = s(bool,X37)) )),
  inference(superposition,[],[f442,f213])).
fof(f12561,plain,(
  ( ! [X35,X33,X36,X34,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X33) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X32),s(fun(X34,bool),X35))) | s(bool,X32) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f442,f213])).
fof(f11249,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),X2) | s(X0,sK4(X1,X0)) = s(X0,sK4(X2,X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X2) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f551,f145])).
fof(f11246,plain,(
  ( ! [X125,X123,X124] : (s('type.option.option'('type.option.option'(X123)),X125) != s('type.option.option'('type.option.option'(X123)),'const.option.SOME_1'(s('type.option.option'(X123),X124))) | s('type.option.option'(X123),sK4(X125,'type.option.option'(X123))) = s('type.option.option'(X123),'const.option.SOME_1'(s(X123,sK4(X124,X123)))) | s('type.option.option'('type.option.option'(X123)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(X123)),X125) | s('type.option.option'(X123),'const.option.NONE_0') = s('type.option.option'(X123),X124)) )),
  inference(superposition,[],[f551,f145])).
fof(f11209,plain,(
  ( ! [X26,X27,X25] : (s('type.option.option'(bool),X27) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X26))) | s(bool,X25) = s(bool,sK4(X27,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X27) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) )),
  inference(superposition,[],[f551,f213])).
fof(f11208,plain,(
  ( ! [X24,X23,X22] : (s('type.option.option'(bool),X23) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X22) = s(bool,sK4(X23,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X23) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f551,f213])).
fof(f11206,plain,(
  ( ! [X19,X17,X18] : (s('type.option.option'(X17),X19) != s('type.option.option'(X17),'const.option.SOME_1'(s(X17,X18))) | s(X17,sK4(X19,X17)) = s(X17,sK4('const.option.SOME_1'(s(X17,X18)),X17)) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),X19)) )),
  inference(superposition,[],[f551,f1267])).
fof(f11205,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s('type.option.option'(X11),X16) != s('type.option.option'(X11),'const.option.SOME_1'(s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))))) | s(X11,sK4(X16,X11)) = s(X11,happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15))) | s('type.option.option'(X11),'const.option.NONE_0') = s('type.option.option'(X11),X16)) )),
  inference(superposition,[],[f551,f165])).
fof(f11204,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),X10) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,sK4(X10,X5)) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) | s('type.option.option'(X5),'const.option.NONE_0') = s('type.option.option'(X5),X10)) )),
  inference(superposition,[],[f551,f164])).
fof(f11203,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.option.option'(X0),X4) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,sK4(X4,X0)) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X4)) )),
  inference(superposition,[],[f551,f162])).
fof(f11259,plain,(
  ( ! [X26,X24,X25] : (s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),X25) | s('type.option.option'(X24),X25) != s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X26))) | s(X24,X26) = s(X24,sK4(sK4('const.option.SOME_1'(s('type.option.option'(X24),X25)),'type.option.option'(X24)),X24))) )),
  inference(forward_demodulation,[],[f11202,f1267])).
fof(f11202,plain,(
  ( ! [X26,X24,X25] : (s('type.option.option'(X24),X25) != s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X26))) | s(X24,X26) = s(X24,sK4(sK4('const.option.SOME_1'(s('type.option.option'(X24),X25)),'type.option.option'(X24)),X24)) | s('type.option.option'(X24),'const.option.NONE_0') = s('type.option.option'(X24),sK4('const.option.SOME_1'(s('type.option.option'(X24),X25)),'type.option.option'(X24)))) )),
  inference(superposition,[],[f551,f1267])).
fof(f11258,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),'const.option.option_CASE_3'(s('type.option.option'(X19),X20),s('type.option.option'(X18),X21),s(fun(X19,'type.option.option'(X18)),X22))) | s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X23))) != s('type.option.option'(X18),'const.option.option_CASE_3'(s('type.option.option'(X19),X20),s('type.option.option'(X18),X21),s(fun(X19,'type.option.option'(X18)),X22))) | s(X18,X23) = s(X18,sK4(happ(s(fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)),happ(s(fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18))),happ(s(fun('type.option.option'(X19),fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)))),'const.option.option_CASE_0'),s('type.option.option'(X19),X20))),s('type.option.option'(X18),X21))),s(fun(X19,'type.option.option'(X18)),X22)),X18))) )),
  inference(forward_demodulation,[],[f11201,f165])).
fof(f11201,plain,(
  ( ! [X23,X21,X19,X22,X20,X18] : (s('type.option.option'(X18),'const.option.SOME_1'(s(X18,X23))) != s('type.option.option'(X18),'const.option.option_CASE_3'(s('type.option.option'(X19),X20),s('type.option.option'(X18),X21),s(fun(X19,'type.option.option'(X18)),X22))) | s(X18,X23) = s(X18,sK4(happ(s(fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)),happ(s(fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18))),happ(s(fun('type.option.option'(X19),fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)))),'const.option.option_CASE_0'),s('type.option.option'(X19),X20))),s('type.option.option'(X18),X21))),s(fun(X19,'type.option.option'(X18)),X22)),X18)) | s('type.option.option'(X18),'const.option.NONE_0') = s('type.option.option'(X18),happ(s(fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)),happ(s(fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18))),happ(s(fun('type.option.option'(X19),fun('type.option.option'(X18),fun(fun(X19,'type.option.option'(X18)),'type.option.option'(X18)))),'const.option.option_CASE_0'),s('type.option.option'(X19),X20))),s('type.option.option'(X18),X21))),s(fun(X19,'type.option.option'(X18)),X22)))) )),
  inference(superposition,[],[f551,f165])).
fof(f11257,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),happ(s(fun(X13,'type.option.option'(X12)),X16),s(X13,X14))) | s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X17))) != s('type.option.option'(X12),happ(s(fun(X13,'type.option.option'(X12)),X16),s(X13,X14))) | s(X12,X17) = s(X12,sK4('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.SOME_1'(s(X13,X14))),s('type.option.option'(X12),X15),s(fun(X13,'type.option.option'(X12)),X16)),X12))) )),
  inference(forward_demodulation,[],[f11200,f164])).
fof(f11200,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.option.option'(X12),'const.option.SOME_1'(s(X12,X17))) != s('type.option.option'(X12),happ(s(fun(X13,'type.option.option'(X12)),X16),s(X13,X14))) | s(X12,X17) = s(X12,sK4('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.SOME_1'(s(X13,X14))),s('type.option.option'(X12),X15),s(fun(X13,'type.option.option'(X12)),X16)),X12)) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.SOME_1'(s(X13,X14))),s('type.option.option'(X12),X15),s(fun(X13,'type.option.option'(X12)),X16)))) )),
  inference(superposition,[],[f551,f164])).
fof(f11256,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),X9) | s('type.option.option'(X7),X9) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))) | s(X7,X11) = s(X7,sK4('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.NONE_0'),s('type.option.option'(X7),X9),s(fun(X8,'type.option.option'(X7)),X10)),X7))) )),
  inference(forward_demodulation,[],[f11199,f162])).
fof(f11199,plain,(
  ( ! [X10,X8,X7,X11,X9] : (s('type.option.option'(X7),X9) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X11))) | s(X7,X11) = s(X7,sK4('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.NONE_0'),s('type.option.option'(X7),X9),s(fun(X8,'type.option.option'(X7)),X10)),X7)) | s('type.option.option'(X7),'const.option.NONE_0') = s('type.option.option'(X7),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.NONE_0'),s('type.option.option'(X7),X9),s(fun(X8,'type.option.option'(X7)),X10)))) )),
  inference(superposition,[],[f551,f162])).
fof(f11254,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X2) = s(X0,sK4('const.option.SOME_1'(s(X0,sK4(X1,X0))),X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(subsumption_resolution,[],[f11196,f150])).
fof(f11196,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X2) = s(X0,sK4('const.option.SOME_1'(s(X0,sK4(X1,X0))),X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK4(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f551,f145])).
fof(f10046,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),X0) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,sK4(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f436,f550])).
fof(f9993,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),X0) = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK4(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,'T_0') = s(bool,sK4(X0,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X0)) )),
  inference(superposition,[],[f550,f550])).
fof(f8657,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) != s(bool,X40) | s(bool,'T_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(subsumption_resolution,[],[f8610,f427])).
fof(f8610,plain,(
  ( ! [X39,X41,X40] : (s(bool,X39) != s(bool,X40) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X40) | s(bool,X39) = s(bool,X41) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f477,f213])).
fof(f5763,plain,(
  ( ! [X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(trivial_inequality_removal,[],[f5729])).
fof(f5729,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f476,f118])).
fof(f1968,plain,(
  ( ! [X78,X76,X79,X77] : (s(X76,X78) = s(X76,sK5(X78,X77,X76)) | s(bool,X79) = s(bool,happ(s(fun(X76,bool),X77),s(X76,X78))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(subsumption_resolution,[],[f1624,f111])).
fof(f1624,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,'T_0')) | s(X76,X78) = s(X76,sK5(X78,X77,X76)) | s(bool,X79) = s(bool,happ(s(fun(X76,bool),X77),s(X76,X78))) | s(bool,'T_0') = s(bool,X79)) )),
  inference(superposition,[],[f156,f213])).
fof(f2119,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'('type.option.option'(X0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(X0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))))) )),
  inference(unit_resulting_resolution,[],[f433,f153])).
fof(f2002,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f1267,f213])).
fof(f2000,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1267,f213])).
fof(f1645,plain,(
  ( ! [X156,X154,X157,X155] : (s(X156,f(s(bool,'T_0'))) != s(X156,g(s(bool,'T_0'))) | s(fun(bool,X156),X154) = s(fun(bool,X156),X155) | s(bool,X157) = s(bool,sK6(X154,X155,X156,bool)) | s(bool,'T_0') = s(bool,X157)) )),
  inference(superposition,[],[f163,f213])).
fof(f1643,plain,(
  ( ! [X149,X150] : (s('type.option.option'(bool),X149) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X149) | s(bool,X150) = s(bool,sK4(X149,bool)) | s(bool,'T_0') = s(bool,X150)) )),
  inference(superposition,[],[f145,f213])).
fof(f1631,plain,(
  ( ! [X97,X98,X96] : (s(bool,'T_0') != s(bool,X97) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X96))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X97))) | s(bool,X96) = s(bool,X98) | s(bool,'T_0') = s(bool,X98)) )),
  inference(superposition,[],[f154,f213])).
fof(f1629,plain,(
  ( ! [X92,X90,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) | s(bool,X90) = s(bool,X91) | s(bool,X90) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f153,f213])).
fof(f1965,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(subsumption_resolution,[],[f1599,f111])).
fof(f1599,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | s(bool,X16) = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'T_0') = s(bool,X18)) )),
  inference(superposition,[],[f161,f213])).
fof(f1964,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(subsumption_resolution,[],[f1595,f111])).
fof(f1595,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f124,f213])).
fof(f1584,plain,(
  ( ! [X64,X62,X63] : (s(bool,X62) != s(bool,X63) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) | s(bool,X62) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f154,f213])).
fof(f1560,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) != s(bool,X3) | p(s(bool,X3)) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f120,f213])).
fof(f1499,plain,(
  ( ! [X167,X165,X166,X168] : (s(X167,f(s(bool,X168))) != s(X167,g(s(bool,X168))) | s(fun(bool,X167),X165) = s(fun(bool,X167),X166) | s(bool,'T_0') = s(bool,X168) | s(bool,'T_0') = s(bool,sK6(X165,X166,X167,bool))) )),
  inference(superposition,[],[f163,f213])).
fof(f1497,plain,(
  ( ! [X161,X160] : (s('type.option.option'(bool),X160) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X161))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X160) | s(bool,'T_0') = s(bool,X161) | s(bool,'T_0') = s(bool,sK4(X160,bool))) )),
  inference(superposition,[],[f145,f213])).
fof(f1485,plain,(
  ( ! [X107,X108,X106] : (s(bool,X107) != s(bool,X108) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X106))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,'T_0') = s(bool,X107) | s(bool,'T_0') = s(bool,X106)) )),
  inference(superposition,[],[f154,f213])).
fof(f1483,plain,(
  ( ! [X101,X102,X100] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) | s(bool,X100) = s(bool,X102) | s(bool,'T_0') = s(bool,X101) | s(bool,'T_0') = s(bool,X100)) )),
  inference(superposition,[],[f153,f213])).
fof(f1425,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,X22) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X19),'const.option.NONE_0'),s(bool,X20),s(fun(X19,bool),X21))) | s(bool,'T_0') = s(bool,X22)) )),
  inference(superposition,[],[f213,f162])).
fof(f1415,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f213,f213])).
fof(f1396,plain,(
  ( ! [X35,X33,X34,X32] : (s(bool,X33) = s(bool,X35) | s(bool,'T_0') = s(bool,X35) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X32),'const.option.NONE_0'),s(bool,X33),s(fun(X32,bool),X34)))) )),
  inference(superposition,[],[f213,f162])).
fof(f1282,plain,(
  ( ! [X8,X7,X9] : (s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X8))) != s('type.option.option'(X7),'const.option.SOME_1'(s(X7,X9))) | s(X7,X9) = s(X7,sK4('const.option.SOME_1'(s(X7,X8)),X7))) )),
  inference(superposition,[],[f153,f547])).
fof(f1064,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X10))) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),X7),s(X5,X8),s(fun(X6,X5),X9))))) | s(X5,X10) = s(X5,happ(s(fun(fun(X6,X5),X5),happ(s(fun(X5,fun(fun(X6,X5),X5)),happ(s(fun('type.option.option'(X6),fun(X5,fun(fun(X6,X5),X5))),'const.option.option_CASE_0'),s('type.option.option'(X6),X7))),s(X5,X8))),s(fun(X6,X5),X9)))) )),
  inference(superposition,[],[f153,f165])).
fof(f783,plain,(
  ( ! [X57,X54,X55] : (s(bool,'F_0') != s(bool,happ(s(fun(X54,bool),X57),s(X54,X55))) | ~p(s(bool,happ(s(fun(X54,bool),X57),s(X54,X55))))) )),
  inference(forward_demodulation,[],[f678,f164])).
fof(f678,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,happ(s(fun(X54,bool),X57),s(X54,X55)))) | s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.SOME_1'(s(X54,X55))),s(bool,X56),s(fun(X54,bool),X57)))) )),
  inference(superposition,[],[f124,f164])).
fof(f782,plain,(
  ( ! [X61,X59,X58] : (s(bool,'F_0') = s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))) | p(s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))))) )),
  inference(forward_demodulation,[],[f679,f164])).
fof(f679,plain,(
  ( ! [X61,X59,X60,X58] : (p(s(bool,happ(s(fun(X58,bool),X61),s(X58,X59)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61)))) )),
  inference(superposition,[],[f125,f164])).
fof(f669,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s('type.option.option'(X5),'const.option.SOME_1'(s(X5,X10))) != s('type.option.option'(X5),'const.option.SOME_1'(s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,X10) = s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)))) )),
  inference(superposition,[],[f153,f164])).
fof(f558,plain,(
  ( ! [X19,X17,X18] : (s('type.option.option'(X17),X18) != s('type.option.option'(X17),X19) | s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),X19))) = s('type.option.option'('type.option.option'(X17)),'const.option.SOME_1'(s('type.option.option'(X17),'const.option.SOME_1'(s(X17,sK4(X18,X17)))))) | s('type.option.option'(X17),'const.option.NONE_0') = s('type.option.option'(X17),X18)) )),
  inference(superposition,[],[f154,f145])).
fof(f556,plain,(
  ( ! [X12,X13,X11] : (s('type.option.option'('type.option.option'(X11)),'const.option.SOME_1'(s('type.option.option'(X11),X12))) != s('type.option.option'('type.option.option'(X11)),'const.option.SOME_1'(s('type.option.option'(X11),X13))) | s('type.option.option'(X11),X13) = s('type.option.option'(X11),'const.option.SOME_1'(s(X11,sK4(X12,X11)))) | s('type.option.option'(X11),'const.option.NONE_0') = s('type.option.option'(X11),X12)) )),
  inference(superposition,[],[f153,f145])).
fof(f551,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))) | s(X0,X2) = s(X0,sK4(X1,X0)) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(superposition,[],[f153,f145])).
fof(f442,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s('type.option.option'(X11),'const.option.SOME_1'(s(X11,X13))) != s('type.option.option'(X11),'const.option.SOME_1'(s(X11,X15))) | s(X11,X15) = s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)))) )),
  inference(superposition,[],[f153,f162])).
fof(f433,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(X0)),'const.option.SOME_1'(s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1)))))) )),
  inference(unit_resulting_resolution,[],[f150,f153])).
fof(f252,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(subsumption_resolution,[],[f244,f175])).
fof(f244,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f158,f118])).
fof(f213,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f118,f118])).
fof(f165,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))) )),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ! [X0,X1,X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))),
  inference(flattening,[],[f71])).
fof(f71,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),X2),s(X1,X3),s(fun(X0,X1),X4))) = s(X1,happ(s(fun(fun(X0,X1),X1),happ(s(fun(X1,fun(fun(X0,X1),X1)),happ(s(fun('type.option.option'(X0),fun(X1,fun(fun(X0,X1),X1))),'const.option.option_CASE_0'),s('type.option.option'(X0),X2))),s(X1,X3))),s(fun(X0,X1),X4)))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X6,X16] : ! [X19,X20,X21] : s(X16,'const.option.option_CASE_3'(s('type.option.option'(X6),X19),s(X16,X20),s(fun(X6,X16),X21))) = s(X16,happ(s(fun(fun(X6,X16),X16),happ(s(fun(X16,fun(fun(X6,X16),X16)),happ(s(fun('type.option.option'(X6),fun(X16,fun(fun(X6,X16),X16))),'const.option.option_CASE_0'),s('type.option.option'(X6),X19))),s(X16,X20))),s(fun(X6,X16),X21)))),
  file('thm.misc.option_case_NONE_F','ARITY_0_3_const.option.option_CASE')).
fof(f163,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK6(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK6(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK6(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK6(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK6])],[f77])).
fof(f77,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.misc.option_case_NONE_F',aHL_EXT)).
fof(f162,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X0,X1,X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(flattening,[],[f65])).
fof(f65,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X1,X2) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(X1,X2),s(fun(X0,X1),X3)))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6,X16] : ! [X17,X18] : s(X16,X17) = s(X16,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(X16,X17),s(fun(X6,X16),X18)))),
  file('thm.misc.option_case_NONE_F','thm.option.option_case_def|split|0')).
fof(f158,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f75])).
fof(f75,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10,X11] : ((p(s(bool,X10)) => p(s(bool,X11))) => ((p(s(bool,X11)) => p(s(bool,X10))) => s(bool,X10) = s(bool,X11)))),
  file('thm.misc.option_case_NONE_F','thm.bool.IMP_ANTISYM_AX')).
fof(f161,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f76])).
fof(f154,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X1))) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2)))) )),
  inference(cnf_transformation,[],[f103])).
fof(f118,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.misc.option_case_NONE_F',aHL_BOOL_CASES)).
fof(f11438,plain,(
  ( ! [X64,X62,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),X63),s(bool,X64),s(fun(X62,bool),X65))))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X62,bool),bool),happ(s(fun(bool,fun(fun(X62,bool),bool)),happ(s(fun('type.option.option'(X62),fun(bool,fun(fun(X62,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X62),X63))),s(bool,X64))),s(fun(X62,bool),X65)))) ) | $spl18),
  inference(superposition,[],[f11188,f165])).
fof(f11188,plain,(
  ( ! [X111] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X111))) | s(bool,'F_0') = s(bool,X111)) ) | $spl18),
  inference(subsumption_resolution,[],[f10997,f150])).
fof(f10997,plain,(
  ( ! [X111] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X111))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X111)) ) | $spl18),
  inference(superposition,[],[f145,f10594])).
fof(f10594,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f10593])).
fof(f10593,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(condensation,[],[f10592])).
fof(f10592,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4)) ) | $spl18),
  inference(subsumption_resolution,[],[f10231,f3984])).
fof(f3984,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl18),
  inference(superposition,[],[f176,f3511])).
fof(f10231,plain,(
  ( ! [X4,X2,X3] : (s(bool,X3) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl18),
  inference(superposition,[],[f3826,f213])).
fof(f42443,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(bool,X39),s(fun(X37,bool),X40)))) | s(bool,'F_0') != s(bool,happ(s(fun(fun(X37,bool),bool),happ(s(fun(bool,fun(fun(X37,bool),bool)),happ(s(fun('type.option.option'(X37),fun(bool,fun(fun(X37,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(bool,X39))),s(fun(X37,bool),X40)))) )),
  inference(superposition,[],[f124,f165])).
fof(f42690,plain,(
  ( ! [X222,X225,X223,X226] : (s(bool,'F_0') = s(bool,X226) | p(s(bool,happ(s(fun(X222,bool),X225),s(X222,sK4(X223,X222))))) | s('type.option.option'(X222),'const.option.NONE_0') = s('type.option.option'(X222),X223)) ) | ($spl18 | $spl40 | $spl52)),
  inference(subsumption_resolution,[],[f42634,f42664])).
fof(f42664,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X0) != s(bool,X1)) ) | ($spl18 | $spl40 | $spl52)),
  inference(condensation,[],[f42663])).
fof(f42663,plain,(
  ( ! [X167,X169,X168] : (s(bool,X168) != s(bool,X169) | s(bool,'F_0') = s(bool,X167) | s(bool,'F_0') = s(bool,X168)) ) | ($spl18 | $spl40 | $spl52)),
  inference(subsumption_resolution,[],[f42567,f9646])).
fof(f9646,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl18 | $spl40)),
  inference(condensation,[],[f9645])).
fof(f9645,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X13)),bool)) | s(bool,'F_0') = s(bool,X13) | s(bool,'F_0') = s(bool,X12)) ) | ($spl18 | $spl40)),
  inference(subsumption_resolution,[],[f9579,f7183])).
fof(f7183,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f7165])).
fof(f7165,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(equality_factoring,[],[f3772])).
fof(f9579,plain,(
  ( ! [X12,X13] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X13)),bool)) | s(bool,X12) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X13) | s(bool,'F_0') = s(bool,X12)) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f9551,f3511])).
fof(f9551,plain,(
  ( ! [X10] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(subsumption_resolution,[],[f9218,f111])).
fof(f9218,plain,(
  ( ! [X10] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f124,f8191])).
fof(f8191,plain,(
  ( ! [X63] : (s(bool,X63) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X63)),bool))) ) | $spl40),
  inference(superposition,[],[f7684,f1267])).
fof(f42567,plain,(
  ( ! [X167,X169,X168] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X167)),bool)) | s(bool,X168) != s(bool,X169) | s(bool,'F_0') = s(bool,X167) | s(bool,'F_0') = s(bool,X168)) ) | ($spl18 | $spl52)),
  inference(backward_demodulation,[],[f42502,f26125])).
fof(f26125,plain,(
  ( ! [X167,X171,X169,X170,X168] : (s(bool,X168) != s(bool,X169) | s(bool,sK4('const.option.SOME_1'(s(bool,X167)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X170),'const.option.NONE_0'),s(bool,X169),s(fun(X170,bool),X171))) | s(bool,'F_0') = s(bool,X167) | s(bool,'F_0') = s(bool,X168)) ) | $spl18),
  inference(superposition,[],[f23836,f3826])).
fof(f23836,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,X108) != s(bool,X110) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X107),'const.option.NONE_0'),s(bool,X108),s(fun(X107,bool),X109)))) ) | $spl18),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f13273,f13194,f12713,f12705,f12696,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11436,f11397,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11188,f11057,f10999,f10915,f10734,f10602,f10594,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5068,f5067,f5064,f5031,f4881,f4876,f4834,f4787,f4478,f4475,f4340,f4076,f4073,f4060,f4058,f4011,f3986,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1030,f1027,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f12342,f6883,f9764,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10141,f10057,f10051,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f8870,f9681,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11530,f11524,f8872,f8869,f8046,f7486,f4062,f512,f13351,f13309,f11562,f11552,f11525,f10144,f4884,f1634,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f1111,f1091,f11589,f13302,f786,f11521,f1098,f11522,f13415,f13303,f13300,f12287,f11604,f11590,f11587,f11523,f11520,f11437,f10227,f8593,f7678,f6748,f6712,f5309,f5281,f5065,f4788,f4476,f4358,f3824,f3770,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4789,f4477,f3825,f3771,f1427,f1398,f1100,f1099,f1074,f1062,f12709,f12657,f12652,f12649,f12645,f11235,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f1639,f1493,f1031,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835])).
fof(f23835,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,X108) != s(bool,X110) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X107),'const.option.NONE_0'),s(bool,X108),s(fun(X107,bool),X109))) | s(bool,'F_0') = s(bool,X110)) ) | $spl18),
  inference(forward_demodulation,[],[f23745,f1267])).
fof(f23745,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,X110) != s(bool,sK4('const.option.SOME_1'(s(bool,X108)),bool)) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X107),'const.option.NONE_0'),s(bool,X108),s(fun(X107,bool),X109))) | s(bool,'F_0') = s(bool,X110)) ) | $spl18),
  inference(superposition,[],[f7171,f162])).
fof(f23703,plain,(
  ( ! [X116,X117] : (s(bool,X116) != s(bool,sK4('const.option.SOME_1'(s(bool,X117)),bool)) | s(bool,X117) = s(bool,sK4('const.option.SOME_1'(s(bool,X116)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X116)),bool))) ) | $spl18),
  inference(superposition,[],[f7171,f1267])).
fof(f23702,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,sK4('const.option.SOME_1'(s(bool,X115)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),X112),s(bool,X113),s(fun(X111,bool),X114))) | s(bool,X115) = s(bool,happ(s(fun(fun(X111,bool),bool),happ(s(fun(bool,fun(fun(X111,bool),bool)),happ(s(fun('type.option.option'(X111),fun(bool,fun(fun(X111,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X111),X112))),s(bool,X113))),s(fun(X111,bool),X114))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X111,bool),bool),happ(s(fun(bool,fun(fun(X111,bool),bool)),happ(s(fun('type.option.option'(X111),fun(bool,fun(fun(X111,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X111),X112))),s(bool,X113))),s(fun(X111,bool),X114)))) ) | $spl18),
  inference(superposition,[],[f7171,f165])).
fof(f23701,plain,(
  ( ! [X109,X107,X110,X108,X106] : (s(bool,sK4('const.option.SOME_1'(s(bool,X110)),bool)) != s(bool,happ(s(fun(X106,bool),X109),s(X106,X107))) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X106),'const.option.SOME_1'(s(X106,X107))),s(bool,X108),s(fun(X106,bool),X109))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X106),'const.option.SOME_1'(s(X106,X107))),s(bool,X108),s(fun(X106,bool),X109)))) ) | $spl18),
  inference(superposition,[],[f7171,f164])).
fof(f23700,plain,(
  ( ! [X103,X105,X102,X104] : (s(bool,X103) != s(bool,sK4('const.option.SOME_1'(s(bool,X105)),bool)) | s(bool,X105) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.NONE_0'),s(bool,X103),s(fun(X102,bool),X104))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.NONE_0'),s(bool,X103),s(fun(X102,bool),X104)))) ) | $spl18),
  inference(superposition,[],[f7171,f162])).
fof(f23791,plain,(
  ( ! [X39,X37,X38] : (s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) != s(bool,sK4('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,X37) = s(bool,X39) | s(bool,'F_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X38)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f23678])).
fof(f23678,plain,(
  ( ! [X39,X37,X38] : (s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) != s(bool,sK4('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,X37) = s(bool,X39) | s(bool,'F_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl18),
  inference(superposition,[],[f7171,f3826])).
fof(f23638,plain,(
  ( ! [X121,X122] : (s(bool,'T_0') != s(bool,X121) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,X121)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X122)),bool))) ) | $spl18),
  inference(superposition,[],[f6977,f1267])).
fof(f23637,plain,(
  ( ! [X118,X116,X120,X119,X117] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),X117),s(bool,X118),s(fun(X116,bool),X119))) | s(bool,X120) = s(bool,happ(s(fun(fun(X116,bool),bool),happ(s(fun(bool,fun(fun(X116,bool),bool)),happ(s(fun('type.option.option'(X116),fun(bool,fun(fun(X116,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X116),X117))),s(bool,X118))),s(fun(X116,bool),X119))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X120)),bool))) ) | $spl18),
  inference(superposition,[],[f6977,f165])).
fof(f23636,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,'T_0') != s(bool,happ(s(fun(X111,bool),X114),s(X111,X112))) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.SOME_1'(s(X111,X112))),s(bool,X113),s(fun(X111,bool),X114))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X115)),bool))) ) | $spl18),
  inference(superposition,[],[f6977,f164])).
fof(f23635,plain,(
  ( ! [X109,X107,X110,X108] : (s(bool,'T_0') != s(bool,X108) | s(bool,X110) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X107),'const.option.NONE_0'),s(bool,X108),s(fun(X107,bool),X109))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X110)),bool))) ) | $spl18),
  inference(superposition,[],[f6977,f162])).
fof(f23584,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f6977,f213])).
fof(f3911,plain,(
  ( ! [X152,X151,X149,X150] : (s(bool,X152) != s(bool,f(s(X149,sK6(X150,X151,bool,X149)))) | s(fun(X149,bool),X150) = s(fun(X149,bool),X151) | s(bool,'F_0') = s(bool,X152) | s(bool,'F_0') = s(bool,g(s(X149,sK6(X150,X151,bool,X149))))) ) | $spl18),
  inference(superposition,[],[f163,f3511])).
fof(f4069,plain,(
  ( ! [X138,X136,X135,X137] : (s(bool,'F_0') != s(bool,f(s(X135,sK6(X136,X137,bool,X135)))) | s(fun(X135,bool),X136) = s(fun(X135,bool),X137) | s(bool,X138) = s(bool,g(s(X135,sK6(X136,X137,bool,X135)))) | s(bool,'F_0') = s(bool,X138)) ) | $spl18),
  inference(superposition,[],[f163,f3511])).
fof(f6877,plain,(
  ( ! [X237,X235,X236,X234] : (s(bool,X237) != s(bool,f(s(X234,sK6(X235,X236,bool,X234)))) | s(fun(X234,bool),X235) = s(fun(X234,bool),X236) | s(bool,'F_0') = s(bool,X237) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,g(s(X234,sK6(X235,X236,bool,X234))))),bool))) ) | $spl18),
  inference(superposition,[],[f163,f3772])).
fof(f6968,plain,(
  ( ! [X237,X235,X236,X234] : (s(bool,X237) != s(bool,f(s(X234,sK6(X235,X236,bool,X234)))) | s(fun(X234,bool),X235) = s(fun(X234,bool),X236) | s(bool,'F_0') = s(bool,g(s(X234,sK6(X235,X236,bool,X234)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X237)),bool))) ) | $spl18),
  inference(superposition,[],[f163,f3772])).
fof(f7105,plain,(
  ( ! [X206,X204,X207,X205] : (s(bool,'F_0') != s(bool,f(s(X204,sK6(X205,X206,bool,X204)))) | s(fun(X204,bool),X205) = s(fun(X204,bool),X206) | s(bool,X207) = s(bool,g(s(X204,sK6(X205,X206,bool,X204)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X207)),bool))) ) | $spl18),
  inference(superposition,[],[f163,f3772])).
fof(f10397,plain,(
  ( ! [X315,X316,X318,X317] : (s(bool,sK4('const.option.SOME_1'(s(bool,X318)),bool)) != s(bool,f(s(X315,sK6(X316,X317,bool,X315)))) | s(fun(X315,bool),X316) = s(fun(X315,bool),X317) | s(bool,'F_0') = s(bool,X318) | s(bool,'F_0') = s(bool,g(s(X315,sK6(X316,X317,bool,X315))))) ) | $spl18),
  inference(superposition,[],[f163,f3826])).
fof(f12330,plain,(
  ( ! [X196,X197,X195] : (s(bool,'T_0') != s(bool,f(s(X195,sK6(X196,X197,bool,X195)))) | s(fun(X195,bool),X196) = s(fun(X195,bool),X197) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,g(s(X195,sK6(X196,X197,bool,X195))))),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11956,f1267])).
fof(f11956,plain,(
  ( ! [X196,X197,X195] : (s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) != s(bool,f(s(X195,sK6(X196,X197,bool,X195)))) | s(fun(X195,bool),X196) = s(fun(X195,bool),X197) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,g(s(X195,sK6(X196,X197,bool,X195))))),bool))) ) | $spl18),
  inference(superposition,[],[f163,f11057])).
fof(f12649,plain,(
  ( ! [X187,X185,X186,X184,X183] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X185))) | s(bool,sK4('const.option.SOME_1'(s(bool,X183)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X186),'const.option.NONE_0'),s(bool,X185),s(fun(X186,bool),X187))) | s(bool,'F_0') = s(bool,X183) | s(bool,'F_0') = s(bool,X184)) ) | $spl18),
  inference(superposition,[],[f442,f3826])).
fof(f12652,plain,(
  ( ! [X198,X196,X200,X199,X197] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X197))) | s(bool,sK4('const.option.SOME_1'(s(bool,X196)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X198),'const.option.NONE_0'),s(bool,X197),s(fun(X198,bool),X199))) | s(bool,X196) = s(bool,X200) | s(bool,'F_0') = s(bool,X200)) ) | $spl18),
  inference(superposition,[],[f442,f3772])).
fof(f12709,plain,(
  ( ! [X182,X180,X181,X179] : (s(bool,'T_0') = s(bool,X179) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) | s(bool,sK4('const.option.SOME_1'(s(bool,X179)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X181),'const.option.NONE_0'),s(bool,X180),s(fun(X181,bool),X182)))) ) | $spl18),
  inference(forward_demodulation,[],[f12648,f1267])).
fof(f12648,plain,(
  ( ! [X182,X180,X181,X179] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) | s(bool,sK4('const.option.SOME_1'(s(bool,X179)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X181),'const.option.NONE_0'),s(bool,X180),s(fun(X181,bool),X182))) | s(bool,X179) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f442,f11057])).
fof(f3771,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s(bool,X65),s(fun(X63,bool),X66))) | s(bool,'F_0') = s(bool,X67) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66)))) ) | $spl18),
  inference(superposition,[],[f3511,f165])).
fof(f3825,plain,(
  ( ! [X54,X52,X55,X53,X51] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X51),X52),s(bool,X53),s(fun(X51,bool),X54))) | s(bool,X55) = s(bool,happ(s(fun(fun(X51,bool),bool),happ(s(fun(bool,fun(fun(X51,bool),bool)),happ(s(fun('type.option.option'(X51),fun(bool,fun(fun(X51,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X51),X52))),s(bool,X53))),s(fun(X51,bool),X54))) | s(bool,'F_0') = s(bool,X55)) ) | $spl18),
  inference(superposition,[],[f3511,f165])).
fof(f4477,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),X66),s(bool,X67),s(fun(X65,bool),X68))) | s(bool,X69) = s(bool,happ(s(fun(fun(X65,bool),bool),happ(s(fun(bool,fun(fun(X65,bool),bool)),happ(s(fun('type.option.option'(X65),fun(bool,fun(fun(X65,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X65),X66))),s(bool,X67))),s(fun(X65,bool),X68))) | s(bool,'F_0') = s(bool,X69)) ) | $spl18),
  inference(superposition,[],[f3984,f165])).
fof(f6713,plain,(
  ( ! [X88,X87,X85,X89,X86] : (s(bool,X89) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X85),X86),s(bool,X87),s(fun(X85,bool),X88))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X85,bool),bool),happ(s(fun(bool,fun(fun(X85,bool),bool)),happ(s(fun('type.option.option'(X85),fun(bool,fun(fun(X85,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X85),X86))),s(bool,X87))),s(fun(X85,bool),X88))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X89)),bool))) ) | $spl18),
  inference(superposition,[],[f3772,f165])).
fof(f6749,plain,(
  ( ! [X70,X68,X71,X69,X67] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X67),X68),s(bool,X69),s(fun(X67,bool),X70))) | s(bool,X71) = s(bool,happ(s(fun(fun(X67,bool),bool),happ(s(fun(bool,fun(fun(X67,bool),bool)),happ(s(fun('type.option.option'(X67),fun(bool,fun(fun(X67,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X67),X68))),s(bool,X69))),s(fun(X67,bool),X70))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X71)),bool))) ) | $spl18),
  inference(superposition,[],[f3772,f165])).
fof(f7679,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X53),X54),s(bool,X55),s(fun(X53,bool),X56))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X53,bool),bool),happ(s(fun(bool,fun(fun(X53,bool),bool)),happ(s(fun('type.option.option'(X53),fun(bool,fun(fun(X53,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X53),X54))),s(bool,X55))),s(fun(X53,bool),X56)))) ) | $spl18),
  inference(forward_demodulation,[],[f7629,f1267])).
fof(f7629,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X53),X54),s(bool,X55),s(fun(X53,bool),X56))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X53,bool),bool),happ(s(fun(bool,fun(fun(X53,bool),bool)),happ(s(fun('type.option.option'(X53),fun(bool,fun(fun(X53,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X53),X54))),s(bool,X55))),s(fun(X53,bool),X56)))) ) | $spl18),
  inference(superposition,[],[f7183,f165])).
fof(f10228,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,sK4('const.option.SOME_1'(s(bool,X107)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X103),X104),s(bool,X105),s(fun(X103,bool),X106))) | s(bool,'F_0') = s(bool,X107) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X103,bool),bool),happ(s(fun(bool,fun(fun(X103,bool),bool)),happ(s(fun('type.option.option'(X103),fun(bool,fun(fun(X103,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X103),X104))),s(bool,X105))),s(fun(X103,bool),X106)))) ) | $spl18),
  inference(superposition,[],[f3826,f165])).
fof(f3770,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) = s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))) | s(bool,'F_0') = s(bool,X62) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61)))) ) | $spl18),
  inference(superposition,[],[f3511,f164])).
fof(f3824,plain,(
  ( ! [X47,X50,X48,X46,X49] : (s(bool,'F_0') = s(bool,happ(s(fun(X46,bool),X49),s(X46,X47))) | s(bool,X50) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X46),'const.option.SOME_1'(s(X46,X47))),s(bool,X48),s(fun(X46,bool),X49))) | s(bool,'F_0') = s(bool,X50)) ) | $spl18),
  inference(superposition,[],[f3511,f164])).
fof(f4358,plain,(
  ( ! [X90,X88,X91,X89] : (~p(s(bool,happ(s(fun(X88,bool),X89),s(X88,X90)))) | s(bool,X91) = s(bool,happ(s(fun(X88,bool),X89),s(X88,sK5(X90,X89,X88)))) | s(bool,'F_0') = s(bool,X91)) ) | $spl18),
  inference(subsumption_resolution,[],[f4056,f175])).
fof(f4056,plain,(
  ( ! [X90,X88,X91,X89] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X88,bool),X89),s(X88,X90)))) | s(bool,X91) = s(bool,happ(s(fun(X88,bool),X89),s(X88,sK5(X90,X89,X88)))) | s(bool,'F_0') = s(bool,X91)) ) | $spl18),
  inference(superposition,[],[f157,f3511])).
fof(f4476,plain,(
  ( ! [X61,X64,X62,X60,X63] : (s(bool,'T_0') != s(bool,happ(s(fun(X60,bool),X63),s(X60,X61))) | s(bool,X64) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.SOME_1'(s(X60,X61))),s(bool,X62),s(fun(X60,bool),X63))) | s(bool,'F_0') = s(bool,X64)) ) | $spl18),
  inference(superposition,[],[f3984,f164])).
fof(f6712,plain,(
  ( ! [X80,X83,X81,X84,X82] : (s(bool,X84) = s(bool,happ(s(fun(X80,bool),X83),s(X80,X81))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X80),'const.option.SOME_1'(s(X80,X81))),s(bool,X82),s(fun(X80,bool),X83))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X84)),bool))) ) | $spl18),
  inference(superposition,[],[f3772,f164])).
fof(f6748,plain,(
  ( ! [X66,X64,X62,X65,X63] : (s(bool,'F_0') = s(bool,happ(s(fun(X62,bool),X65),s(X62,X63))) | s(bool,X66) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.SOME_1'(s(X62,X63))),s(bool,X64),s(fun(X62,bool),X65))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X66)),bool))) ) | $spl18),
  inference(superposition,[],[f3772,f164])).
fof(f7678,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,'F_0') != s(bool,happ(s(fun(X49,bool),X52),s(X49,X50))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X49),'const.option.SOME_1'(s(X49,X50))),s(bool,X51),s(fun(X49,bool),X52)))) ) | $spl18),
  inference(forward_demodulation,[],[f7628,f1267])).
fof(f7628,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,happ(s(fun(X49,bool),X52),s(X49,X50))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X49),'const.option.SOME_1'(s(X49,X50))),s(bool,X51),s(fun(X49,bool),X52)))) ) | $spl18),
  inference(superposition,[],[f7183,f164])).
fof(f10227,plain,(
  ( ! [X101,X99,X102,X100,X98] : (s(bool,sK4('const.option.SOME_1'(s(bool,X102)),bool)) = s(bool,happ(s(fun(X98,bool),X101),s(X98,X99))) | s(bool,'F_0') = s(bool,X102) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X98),'const.option.SOME_1'(s(X98,X99))),s(bool,X100),s(fun(X98,bool),X101)))) ) | $spl18),
  inference(superposition,[],[f3826,f164])).
fof(f11437,plain,(
  ( ! [X61,X59,X60,X58] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61)))) ) | $spl18),
  inference(superposition,[],[f11188,f164])).
fof(f12287,plain,(
  ( ! [X118,X120,X119] : (s(bool,'T_0') = s(bool,happ(s(fun(X118,bool),X119),s(X118,sK5(X120,X119,X118)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X118,bool),X119),s(X118,X120)))),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f12286,f111])).
fof(f12286,plain,(
  ( ! [X118,X120,X119] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X118,bool),X119),s(X118,sK5(X120,X119,X118)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X118,bool),X119),s(X118,X120)))),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11917,f1267])).
fof(f11917,plain,(
  ( ! [X118,X120,X119] : (~p(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'T_0') = s(bool,happ(s(fun(X118,bool),X119),s(X118,sK5(X120,X119,X118)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X118,bool),X119),s(X118,X120)))),bool))) ) | $spl18),
  inference(superposition,[],[f612,f11057])).
fof(f3904,plain,(
  ( ! [X121,X120,X119] : (~p(s(bool,happ(s(fun(bool,bool),X121),s(bool,X120)))) | s(bool,X119) = s(bool,sK5(X119,X121,bool)) | s(bool,'F_0') = s(bool,X120) | s(bool,'F_0') = s(bool,X119)) ) | $spl18),
  inference(superposition,[],[f156,f3511])).
fof(f3917,plain,(
  ( ! [X173,X171,X172] : (p(s(bool,happ(s(fun(bool,bool),X172),s(bool,X173)))) | ~p(s(bool,happ(s(fun(bool,bool),X172),s(bool,X171)))) | s(bool,'F_0') = s(bool,X173) | s(bool,'F_0') = s(bool,sK5(X171,X172,bool))) ) | $spl18),
  inference(superposition,[],[f157,f3511])).
fof(f4013,plain,(
  ( ! [X83,X84,X82] : (~p(s(bool,happ(s(fun(bool,bool),X83),s(bool,X82)))) | s(bool,'F_0') = s(bool,sK5('F_0',X83,bool)) | s(bool,X82) = s(bool,X84) | s(bool,'F_0') = s(bool,X84)) ) | $spl18),
  inference(superposition,[],[f156,f3511])).
fof(f4075,plain,(
  ( ! [X158,X159,X157] : (p(s(bool,happ(s(fun(bool,bool),X158),s(bool,'F_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X158),s(bool,X157)))) | s(bool,X159) = s(bool,sK5(X157,X158,bool)) | s(bool,'F_0') = s(bool,X159)) ) | $spl18),
  inference(superposition,[],[f157,f3511])).
fof(f4395,plain,(
  ( ! [X47,X48,X46,X49] : (~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X48)))) | s(bool,X46) != s(bool,X48) | s(bool,X46) = s(bool,X49) | s(bool,'F_0') = s(bool,X49)) ) | $spl18),
  inference(superposition,[],[f155,f3511])).
fof(f4396,plain,(
  ( ! [X52,X50,X53,X51] : (~p(s(bool,happ(s(fun(bool,bool),X52),s(bool,X51)))) | p(s(bool,happ(s(fun(bool,bool),X52),s(bool,X53)))) | s(bool,X50) != s(bool,X53) | s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,X50)) ) | $spl18),
  inference(superposition,[],[f155,f3511])).
fof(f4401,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,happ(s(fun(bool,bool),X71),s(bool,X70)))) | p(s(bool,happ(s(fun(bool,bool),X71),s(bool,X72)))) | s(bool,'F_0') != s(bool,X72) | s(bool,X70) = s(bool,X73) | s(bool,'F_0') = s(bool,X73)) ) | $spl18),
  inference(superposition,[],[f155,f3511])).
fof(f8906,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X3) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,X2) = s(bool,sK5(X2,X1,bool)) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3)) ) | $spl18),
  inference(forward_demodulation,[],[f8873,f1267])).
fof(f8873,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,X2) = s(bool,sK5(X2,X1,bool)) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X3)),bool))) ) | $spl18),
  inference(superposition,[],[f512,f3772])).
fof(f10738,plain,(
  ( ! [X202,X200,X201] : (s(bool,X200) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X200)),bool),X202,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X202),s(bool,X201)))) | s(bool,'F_0') = s(bool,X200) | s(bool,'F_0') = s(bool,X201)) ) | $spl18),
  inference(forward_demodulation,[],[f10483,f1267])).
fof(f10483,plain,(
  ( ! [X202,X200,X201] : (~p(s(bool,happ(s(fun(bool,bool),X202),s(bool,X201)))) | s(bool,sK4('const.option.SOME_1'(s(bool,X200)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X200)),bool),X202,bool)) | s(bool,'F_0') = s(bool,X200) | s(bool,'F_0') = s(bool,X201)) ) | $spl18),
  inference(superposition,[],[f156,f3826])).
fof(f11192,plain,(
  ( ! [X125,X124] : (s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),X125,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X125),s(bool,X124)))) | s(bool,'F_0') = s(bool,X124)) ) | $spl18),
  inference(forward_demodulation,[],[f11004,f1267])).
fof(f11004,plain,(
  ( ! [X125,X124] : (~p(s(bool,happ(s(fun(bool,bool),X125),s(bool,X124)))) | s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),X125,bool)) | s(bool,'F_0') = s(bool,X124)) ) | $spl18),
  inference(superposition,[],[f156,f10594])).
fof(f11531,plain,(
  ( ! [X39,X41,X40] : (~p(s(bool,happ(s(fun(bool,bool),X41),s(bool,X40)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X41),s(bool,sK5(X39,X41,bool)))) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | $spl18),
  inference(superposition,[],[f612,f3511])).
fof(f11547,plain,(
  ( ! [X83,X84] : (~p(s(bool,happ(s(fun(bool,bool),X84),s(bool,X83)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X84),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X84,bool)))) | s(bool,'F_0') = s(bool,X83)) ) | $spl18),
  inference(superposition,[],[f612,f2767])).
fof(f11555,plain,(
  ( ! [X107,X105,X106] : (~p(s(bool,happ(s(fun(bool,bool),X107),s(bool,X106)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X107),s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X105)),bool),X107,bool)))) | s(bool,'F_0') = s(bool,X105) | s(bool,'F_0') = s(bool,X106)) ) | $spl18),
  inference(superposition,[],[f612,f3826])).
fof(f11561,plain,(
  ( ! [X120,X119] : (~p(s(bool,happ(s(fun(bool,bool),X120),s(bool,X119)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X120),s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),X120,bool)))) | s(bool,'F_0') = s(bool,X119)) ) | $spl18),
  inference(superposition,[],[f612,f10594])).
fof(f11600,plain,(
  ( ! [X74,X72,X73] : (s(bool,'F_0') = s(bool,X74) | ~p(s(bool,happ(s(fun(bool,bool),X73),s(bool,X72)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X73),s(bool,sK5('F_0',X73,bool)))) | s(bool,X72) = s(bool,X74)) ) | $spl18),
  inference(forward_demodulation,[],[f11543,f1267])).
fof(f11543,plain,(
  ( ! [X74,X72,X73] : (~p(s(bool,happ(s(fun(bool,bool),X73),s(bool,X72)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X73),s(bool,sK5('F_0',X73,bool)))) | s(bool,X72) = s(bool,X74) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X74)),bool))) ) | $spl18),
  inference(superposition,[],[f612,f3772])).
fof(f12297,plain,(
  ( ! [X138,X137] : (s(bool,'F_0') = s(bool,sK5('F_0',X137,bool)) | s(bool,'T_0') = s(bool,X138) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X137),s(bool,X138)))),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f12296,f111])).
fof(f12296,plain,(
  ( ! [X138,X137] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK5('F_0',X137,bool)) | s(bool,'T_0') = s(bool,X138) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X137),s(bool,X138)))),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11924,f1267])).
fof(f11924,plain,(
  ( ! [X138,X137] : (~p(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,'F_0') = s(bool,sK5('F_0',X137,bool)) | s(bool,'T_0') = s(bool,X138) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X137),s(bool,X138)))),bool))) ) | $spl18),
  inference(superposition,[],[f513,f11057])).
fof(f13315,plain,(
  ( ! [X61,X64,X62,X65,X63] : (~p(s(bool,happ(s(fun(bool,bool),X63),s(bool,X62)))) | s(bool,X61) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.NONE_0'),s(bool,X61),s(fun(X64,bool),X65)),X63,bool)) | s(bool,'F_0') = s(bool,X62) | s(bool,'F_0') = s(bool,X61)) ) | $spl18),
  inference(superposition,[],[f524,f3511])).
fof(f13394,plain,(
  ( ! [X127,X130,X128,X126,X129] : (s(bool,'F_0') = s(bool,X130) | ~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X128,bool),X129)),X127,bool)) | s(bool,X126) = s(bool,X130)) ) | $spl18),
  inference(forward_demodulation,[],[f13329,f1267])).
fof(f13329,plain,(
  ( ! [X127,X130,X128,X126,X129] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X128,bool),X129)),X127,bool)) | s(bool,X126) = s(bool,X130) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X130)),bool))) ) | $spl18),
  inference(superposition,[],[f524,f3772])).
fof(f4062,plain,(
  ( ! [X107,X108,X106] : (~p(s(bool,happ(s(fun(bool,bool),X107),s(bool,'F_0')))) | s(bool,X106) = s(bool,sK5(X106,X107,bool)) | s(bool,X106) = s(bool,X108) | s(bool,'F_0') = s(bool,X108)) ) | $spl18),
  inference(superposition,[],[f156,f3511])).
fof(f7486,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X121)),bool),X122,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,'F_0')))) | s(bool,X121) = s(bool,X123) | s(bool,'F_0') = s(bool,X123)) ) | $spl18),
  inference(forward_demodulation,[],[f7155,f1267])).
fof(f7155,plain,(
  ( ! [X123,X121,X122] : (~p(s(bool,happ(s(fun(bool,bool),X122),s(bool,'F_0')))) | s(bool,sK4('const.option.SOME_1'(s(bool,X121)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X121)),bool),X122,bool)) | s(bool,X121) = s(bool,X123) | s(bool,'F_0') = s(bool,X123)) ) | $spl18),
  inference(superposition,[],[f156,f3772])).
fof(f8046,plain,(
  ( ! [X94,X93] : (s(bool,X93) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X93)),bool),X94,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X94),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,X93)) ) | $spl18),
  inference(forward_demodulation,[],[f7971,f1267])).
fof(f7971,plain,(
  ( ! [X94,X93] : (~p(s(bool,happ(s(fun(bool,bool),X94),s(bool,'F_0')))) | s(bool,sK4('const.option.SOME_1'(s(bool,X93)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X93)),bool),X94,bool)) | s(bool,'T_0') = s(bool,X93)) ) | $spl18),
  inference(superposition,[],[f156,f7320])).
fof(f11530,plain,(
  ( ! [X37,X38,X36] : (~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X37),s(bool,sK5(X36,X37,bool)))) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) ) | $spl18),
  inference(superposition,[],[f612,f3511])).
fof(f11557,plain,(
  ( ! [X111,X110] : (~p(s(bool,happ(s(fun(bool,bool),X111),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X111),s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X110)),bool),X111,bool)))) | s(bool,'T_0') = s(bool,X110)) ) | $spl18),
  inference(superposition,[],[f612,f7320])).
fof(f11558,plain,(
  ( ! [X114,X112,X113] : (~p(s(bool,happ(s(fun(bool,bool),X113),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X113),s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X112)),bool),X113,bool)))) | s(bool,X112) = s(bool,X114) | s(bool,'F_0') = s(bool,X114)) ) | $spl18),
  inference(superposition,[],[f612,f3772])).
fof(f12295,plain,(
  ( ! [X136,X135] : (s(bool,X136) = s(bool,sK5(X136,X135,bool)) | s(bool,'T_0') = s(bool,X136) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X135),s(bool,'F_0')))),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f12294,f111])).
fof(f12294,plain,(
  ( ! [X136,X135] : (~p(s(bool,'T_0')) | s(bool,X136) = s(bool,sK5(X136,X135,bool)) | s(bool,'T_0') = s(bool,X136) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X135),s(bool,'F_0')))),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11923,f1267])).
fof(f11923,plain,(
  ( ! [X136,X135] : (~p(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) | s(bool,X136) = s(bool,sK5(X136,X135,bool)) | s(bool,'T_0') = s(bool,X136) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(bool,bool),X135),s(bool,'F_0')))),bool))) ) | $spl18),
  inference(superposition,[],[f512,f11057])).
fof(f13314,plain,(
  ( ! [X59,X57,X60,X58,X56] : (~p(s(bool,happ(s(fun(bool,bool),X57),s(bool,'F_0')))) | s(bool,X56) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s(bool,X56),s(fun(X58,bool),X59)),X57,bool)) | s(bool,X56) = s(bool,X60) | s(bool,'F_0') = s(bool,X60)) ) | $spl18),
  inference(superposition,[],[f524,f3511])).
fof(f11458,plain,(
  ( ! [X35,X33,X34] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X34),s('type.option.option'(bool),X35)))) | s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X33)) ) | $spl18),
  inference(superposition,[],[f155,f11188])).
fof(f11459,plain,(
  ( ! [X37,X36] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X37),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X36)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,'T_0')),X37,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X36)) ) | $spl18),
  inference(superposition,[],[f156,f11188])).
fof(f11564,plain,(
  ( ! [X125,X126] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X126),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125)))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X126),s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,'T_0')),X126,'type.option.option'(bool))))) | s(bool,'F_0') = s(bool,X125)) ) | $spl18),
  inference(superposition,[],[f612,f11188])).
fof(f13353,plain,(
  ( ! [X235,X233,X236,X234] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X234),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X233)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X235),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(X235,'type.option.option'(bool)),X236)),X234,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X233)) ) | $spl18),
  inference(superposition,[],[f524,f11188])).
fof(f11488,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X39),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | p(s(bool,happ(s(fun('type.option.option'(bool),bool),X39),s('type.option.option'(bool),X40)))) | s('type.option.option'(bool),X40) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,'F_0') = s(bool,X38)) ) | $spl18),
  inference(superposition,[],[f155,f11188])).
fof(f11489,plain,(
  ( ! [X41,X42] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X42),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) = s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,X41)),X42,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X41)) ) | $spl18),
  inference(superposition,[],[f156,f11188])).
fof(f11563,plain,(
  ( ! [X123,X124] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X124),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s(bool,'T_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X124),s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,X123)),X124,'type.option.option'(bool))))) | s(bool,'F_0') = s(bool,X123)) ) | $spl18),
  inference(superposition,[],[f612,f11188])).
fof(f13352,plain,(
  ( ! [X231,X229,X230,X232] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X230),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))) = s('type.option.option'(bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X231),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X229))),s(fun(X231,'type.option.option'(bool)),X232)),X230,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X229)) ) | $spl18),
  inference(superposition,[],[f524,f11188])).
fof(f6881,plain,(
  ( ! [X253,X252] : (s('type.option.option'(bool),X252) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X253))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X252) | s(bool,'F_0') = s(bool,X253) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK4(X252,bool))),bool))) ) | $spl18),
  inference(superposition,[],[f145,f3772])).
fof(f11238,plain,(
  ( ! [X107,X105,X106] : (s('type.option.option'(bool),X107) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X106))) | s(bool,sK4(X107,bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X105)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X107) | s(bool,'F_0') = s(bool,X105) | s(bool,'F_0') = s(bool,X106)) ) | $spl18),
  inference(superposition,[],[f551,f3826])).
fof(f11240,plain,(
  ( ! [X111,X110] : (s('type.option.option'(bool),X111) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK4(X111,bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X110)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X111) | s(bool,'T_0') = s(bool,X110)) ) | $spl18),
  inference(superposition,[],[f551,f7320])).
fof(f11241,plain,(
  ( ! [X114,X112,X113] : (s('type.option.option'(bool),X113) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK4(X113,bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X112)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X113) | s(bool,X112) = s(bool,X114) | s(bool,'F_0') = s(bool,X114)) ) | $spl18),
  inference(superposition,[],[f551,f3772])).
fof(f11840,plain,(
  ( ! [X147,X148] : (s('type.option.option'(bool),X148) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK4(X148,bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X147)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X148) | s(bool,X147) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f551,f11057])).
fof(f12337,plain,(
  ( ! [X209] : (s('type.option.option'(bool),X209) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X209) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK4(X209,bool))),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11960,f1267])).
fof(f11960,plain,(
  ( ! [X209] : (s('type.option.option'(bool),X209) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X209) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK4(X209,bool))),bool))) ) | $spl18),
  inference(superposition,[],[f145,f11057])).
fof(f13253,plain,(
  ( ! [X111,X112] : (s(bool,X112) = s(bool,sK4('const.option.SOME_1'(s(bool,sK4(X111,bool))),bool)) | s(bool,'F_0') = s(bool,X112) | s('type.option.option'(bool),X111) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X111)) ) | $spl18),
  inference(trivial_inequality_removal,[],[f13247])).
fof(f13247,plain,(
  ( ! [X111,X112] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X112) = s(bool,sK4('const.option.SOME_1'(s(bool,sK4(X111,bool))),bool)) | s(bool,'F_0') = s(bool,X112) | s('type.option.option'(bool),X111) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X111)) ) | $spl18),
  inference(superposition,[],[f4478,f550])).
fof(f10569,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) ) | $spl18),
  inference(condensation,[],[f10568])).
fof(f10568,plain,(
  ( ! [X39,X37,X38] : (s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X38)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f10208])).
fof(f10208,plain,(
  ( ! [X39,X37,X38] : (s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl18),
  inference(superposition,[],[f3826,f3826])).
fof(f6883,plain,(
  ( ! [X257,X259,X256,X258] : (s(X258,f(s(bool,X259))) != s(X258,g(s(bool,X259))) | s(fun(bool,X258),X256) = s(fun(bool,X258),X257) | s(bool,'F_0') = s(bool,X259) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK6(X256,X257,X258,bool))),bool))) ) | $spl18),
  inference(superposition,[],[f163,f3772])).
fof(f12342,plain,(
  ( ! [X215,X213,X214] : (s(X215,f(s(bool,'T_0'))) != s(X215,g(s(bool,'T_0'))) | s(fun(bool,X215),X213) = s(fun(bool,X215),X214) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK6(X213,X214,X215,bool))),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11963,f1267])).
fof(f11963,plain,(
  ( ! [X215,X213,X214] : (s(X215,f(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)))) != s(X215,g(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(fun(bool,X215),X213) = s(fun(bool,X215),X214) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK6(X213,X214,X215,bool))),bool))) ) | $spl18),
  inference(superposition,[],[f163,f11057])).
fof(f3501,plain,(
  ( ! [X23,X21,X22] : (s(bool,X22) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(bool,X22),s(fun(X21,bool),X23)))) ) | $spl18),
  inference(superposition,[],[f2767,f162])).
fof(f3504,plain,(
  ( ! [X32] : (s(bool,X32) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X32)),bool))) ) | $spl18),
  inference(superposition,[],[f2767,f1267])).
fof(f3505,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f2767,f118])).
fof(f3552,plain,(
  ( ! [X50,X51] : (s(bool,X51) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X50))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))) | s(bool,'F_0') = s(bool,X50)) ) | $spl18),
  inference(superposition,[],[f154,f2767])).
fof(f3595,plain,(
  ( ! [X41,X42] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X41))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X42))) | s(bool,X42) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X41)) ) | $spl18),
  inference(superposition,[],[f153,f2767])).
fof(f3769,plain,(
  ( ! [X57,X54,X56,X55] : (s(bool,X55) = s(bool,X57) | s(bool,'F_0') = s(bool,X57) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X55),s(fun(X54,bool),X56)))) ) | $spl18),
  inference(superposition,[],[f3511,f162])).
fof(f3823,plain,(
  ( ! [X45,X43,X44,X42] : (s(bool,'F_0') = s(bool,X43) | s(bool,X45) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X42),'const.option.NONE_0'),s(bool,X43),s(fun(X42,bool),X44))) | s(bool,'F_0') = s(bool,X45)) ) | $spl18),
  inference(superposition,[],[f3511,f162])).
fof(f3900,plain,(
  ( ! [X109,X107,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X107) = s(bool,X109) | s(bool,'F_0') = s(bool,X108) | s(bool,'F_0') = s(bool,X107)) ) | $spl18),
  inference(superposition,[],[f153,f3511])).
fof(f3902,plain,(
  ( ! [X114,X115,X113] : (s(bool,X114) != s(bool,X115) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115))) | s(bool,'F_0') = s(bool,X114) | s(bool,'F_0') = s(bool,X113)) ) | $spl18),
  inference(superposition,[],[f154,f3511])).
fof(f3915,plain,(
  ( ! [X167,X168] : (s('type.option.option'(bool),X167) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X168))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X167) | s(bool,'F_0') = s(bool,X168) | s(bool,'F_0') = s(bool,sK4(X167,bool))) ) | $spl18),
  inference(superposition,[],[f145,f3511])).
fof(f3918,plain,(
  ( ! [X177,X175,X176,X174] : (s(X176,f(s(bool,X177))) != s(X176,g(s(bool,X177))) | s(fun(bool,X176),X174) = s(fun(bool,X176),X175) | s(bool,'F_0') = s(bool,X177) | s(bool,'F_0') = s(bool,sK6(X174,X175,X176,bool))) ) | $spl18),
  inference(superposition,[],[f163,f3511])).
fof(f3986,plain,(
  ( ! [X12,X13,X11] : (s(bool,X12) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X11),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X12) | s(bool,X11) = s(bool,X13) | s(bool,'F_0') = s(bool,X13)) ) | $spl18),
  inference(superposition,[],[f2767,f3511])).
fof(f4011,plain,(
  ( ! [X78,X76,X77] : (s(bool,X76) != s(bool,X77) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,X76) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | $spl18),
  inference(superposition,[],[f154,f3511])).
fof(f4058,plain,(
  ( ! [X94,X95,X96] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X94) = s(bool,X95) | s(bool,X94) = s(bool,X96) | s(bool,'F_0') = s(bool,X96)) ) | $spl18),
  inference(superposition,[],[f153,f3511])).
fof(f4060,plain,(
  ( ! [X101,X102,X100] : (s(bool,'F_0') != s(bool,X101) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X100))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) | s(bool,X100) = s(bool,X102) | s(bool,'F_0') = s(bool,X102)) ) | $spl18),
  inference(superposition,[],[f154,f3511])).
fof(f4073,plain,(
  ( ! [X154,X153] : (s('type.option.option'(bool),X153) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X153) | s(bool,X154) = s(bool,sK4(X153,bool)) | s(bool,'F_0') = s(bool,X154)) ) | $spl18),
  inference(superposition,[],[f145,f3511])).
fof(f4076,plain,(
  ( ! [X163,X161,X162,X160] : (s(X162,f(s(bool,'F_0'))) != s(X162,g(s(bool,'F_0'))) | s(fun(bool,X162),X160) = s(fun(bool,X162),X161) | s(bool,X163) = s(bool,sK6(X160,X161,X162,bool)) | s(bool,'F_0') = s(bool,X163)) ) | $spl18),
  inference(superposition,[],[f163,f3511])).
fof(f4340,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl18),
  inference(subsumption_resolution,[],[f4024,f175])).
fof(f4024,plain,(
  ( ! [X10,X11,X9] : (p(s(bool,'F_0')) | p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,X9) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | $spl18),
  inference(superposition,[],[f158,f3511])).
fof(f4475,plain,(
  ( ! [X59,X57,X58,X56] : (s(bool,'T_0') != s(bool,X57) | s(bool,X59) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X57),s(fun(X56,bool),X58))) | s(bool,'F_0') = s(bool,X59)) ) | $spl18),
  inference(superposition,[],[f3984,f162])).
fof(f4478,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') != s(bool,X70) | s(bool,X71) = s(bool,sK4('const.option.SOME_1'(s(bool,X70)),bool)) | s(bool,'F_0') = s(bool,X71)) ) | $spl18),
  inference(superposition,[],[f3984,f1267])).
fof(f5031,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f436,f3511])).
fof(f5717,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X2))) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f476,f3511])).
fof(f5762,plain,(
  ( ! [X17,X18,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,'T_0') = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,X18)) ) | $spl18),
  inference(trivial_inequality_removal,[],[f5735])).
fof(f5735,plain,(
  ( ! [X17,X18,X16] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,'T_0') = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,X18)) ) | $spl18),
  inference(superposition,[],[f476,f3511])).
fof(f6711,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X77) = s(bool,X79) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X76),'const.option.NONE_0'),s(bool,X77),s(fun(X76,bool),X78))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X79)),bool))) ) | $spl18),
  inference(superposition,[],[f3772,f162])).
fof(f6715,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X3)),bool))) ) | $spl18),
  inference(superposition,[],[f3772,f3772])).
fof(f6716,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,X4) = s(bool,X7) | s(bool,'F_0') = s(bool,X7)) ) | $spl18),
  inference(superposition,[],[f3772,f3511])).
fof(f6750,plain,(
  ( ! [X72,X73] : (s(bool,'F_0') = s(bool,X72) | s(bool,X73) = s(bool,sK4('const.option.SOME_1'(s(bool,X72)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X73)),bool))) ) | $spl18),
  inference(superposition,[],[f3772,f1267])).
fof(f6865,plain,(
  ( ! [X191,X189,X190] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X190))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X191))) | s(bool,X189) = s(bool,X191) | s(bool,'F_0') = s(bool,X190) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X189)),bool))) ) | $spl18),
  inference(superposition,[],[f153,f3772])).
fof(f6867,plain,(
  ( ! [X196,X197,X195] : (s(bool,X196) != s(bool,X197) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X197))) | s(bool,'F_0') = s(bool,X196) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X195)),bool))) ) | $spl18),
  inference(superposition,[],[f154,f3772])).
fof(f6956,plain,(
  ( ! [X191,X189,X190] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X190))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X191))) | s(bool,X189) = s(bool,X191) | s(bool,'F_0') = s(bool,X189) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X190)),bool))) ) | $spl18),
  inference(superposition,[],[f153,f3772])).
fof(f6958,plain,(
  ( ! [X196,X197,X195] : (s(bool,X196) != s(bool,X197) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X195))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X197))) | s(bool,'F_0') = s(bool,X195) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X196)),bool))) ) | $spl18),
  inference(superposition,[],[f154,f3772])).
fof(f6972,plain,(
  ( ! [X253,X252] : (s('type.option.option'(bool),X252) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X253))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X252) | s(bool,'F_0') = s(bool,sK4(X252,bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X253)),bool))) ) | $spl18),
  inference(superposition,[],[f145,f3772])).
fof(f6974,plain,(
  ( ! [X257,X259,X256,X258] : (s(X258,f(s(bool,X259))) != s(X258,g(s(bool,X259))) | s(fun(bool,X258),X256) = s(fun(bool,X258),X257) | s(bool,'F_0') = s(bool,sK6(X256,X257,X258,bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X259)),bool))) ) | $spl18),
  inference(superposition,[],[f163,f3772])).
fof(f6977,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X6)),bool))) ) | $spl18),
  inference(superposition,[],[f176,f3772])).
fof(f6978,plain,(
  ( ! [X10,X8,X7,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9) | s(bool,X7) = s(bool,X10) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X10)),bool))) ) | $spl18),
  inference(superposition,[],[f436,f3772])).
fof(f6979,plain,(
  ( ! [X14,X12,X13,X11] : (s(bool,X11) != s(bool,X12) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X12))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X13))) | s(bool,'T_0') = s(bool,X13) | s(bool,X11) = s(bool,X14) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X14)),bool))) ) | $spl18),
  inference(superposition,[],[f476,f3772])).
fof(f6981,plain,(
  ( ! [X21,X19,X20] : (s(bool,X20) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X19),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X20) | s(bool,X19) = s(bool,X21) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X21)),bool))) ) | $spl18),
  inference(superposition,[],[f2767,f3772])).
fof(f7024,plain,(
  ( ! [X138,X139,X137] : (s(bool,X137) != s(bool,X138) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X138))) | s(bool,X137) = s(bool,X139) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X139)),bool))) ) | $spl18),
  inference(superposition,[],[f154,f3772])).
fof(f7093,plain,(
  ( ! [X161,X162,X160] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X161))) | s(bool,X160) = s(bool,X161) | s(bool,X160) = s(bool,X162) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X162)),bool))) ) | $spl18),
  inference(superposition,[],[f153,f3772])).
fof(f7095,plain,(
  ( ! [X167,X166,X168] : (s(bool,'F_0') != s(bool,X167) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X166))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X167))) | s(bool,X166) = s(bool,X168) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X168)),bool))) ) | $spl18),
  inference(superposition,[],[f154,f3772])).
fof(f7109,plain,(
  ( ! [X222,X223] : (s('type.option.option'(bool),X222) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X222) | s(bool,X223) = s(bool,sK4(X222,bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X223)),bool))) ) | $spl18),
  inference(superposition,[],[f145,f3772])).
fof(f7111,plain,(
  ( ! [X229,X227,X228,X226] : (s(X228,f(s(bool,'F_0'))) != s(X228,g(s(bool,'F_0'))) | s(fun(bool,X228),X226) = s(fun(bool,X228),X227) | s(bool,X229) = s(bool,sK6(X226,X227,X228,bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X229)),bool))) ) | $spl18),
  inference(superposition,[],[f163,f3772])).
fof(f7151,plain,(
  ( ! [X111,X109,X110] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X110))) | s(bool,X110) = s(bool,sK4('const.option.SOME_1'(s(bool,X109)),bool)) | s(bool,X109) = s(bool,X111) | s(bool,'F_0') = s(bool,X111)) ) | $spl18),
  inference(superposition,[],[f153,f3772])).
fof(f7171,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(equality_factoring,[],[f3772])).
fof(f7210,plain,(
  ( ! [X47,X48,X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) | s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,X48) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl18),
  inference(trivial_inequality_removal,[],[f7050])).
fof(f7050,plain,(
  ( ! [X47,X48,X46] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) | s(bool,'T_0') = s(bool,X47) | s(bool,X46) = s(bool,X48) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl18),
  inference(superposition,[],[f476,f3772])).
fof(f7313,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl18),
  inference(condensation,[],[f7312])).
fof(f7312,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X34)),bool)) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f6663])).
fof(f6663,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,X35) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X34)),bool)) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl18),
  inference(superposition,[],[f3772,f3772])).
fof(f7320,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(condensation,[],[f7319])).
fof(f7319,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f6651])).
fof(f6651,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f3772,f118])).
fof(f7341,plain,(
  ( ! [X39,X37,X38] : (s(bool,X37) = s(bool,X38) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl18),
  inference(subsumption_resolution,[],[f6696,f176])).
fof(f6696,plain,(
  ( ! [X39,X37,X38] : (s(bool,X37) = s(bool,X38) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,X37) = s(bool,X39) | s(bool,'T_0') = s(bool,X39)) ) | $spl18),
  inference(superposition,[],[f3772,f213])).
fof(f7345,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X46),'const.option.NONE_0'),s(bool,X47),s(fun(X46,bool),X48))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'F_0') = s(bool,X47)) ) | $spl18),
  inference(subsumption_resolution,[],[f6745,f176])).
fof(f6745,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X46),'const.option.NONE_0'),s(bool,X47),s(fun(X46,bool),X48))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'F_0') = s(bool,X47)) ) | $spl18),
  inference(superposition,[],[f3772,f358])).
fof(f7359,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl18),
  inference(subsumption_resolution,[],[f6783,f176])).
fof(f6783,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl18),
  inference(superposition,[],[f3772,f213])).
fof(f7415,plain,(
  ( ! [X48] : (s(bool,'F_0') != s(bool,X48) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl18),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f2767,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f3501,f3504,f3505,f3511,f3552,f3595,f3769,f3772,f3798,f3823,f3826,f3900,f3902,f3915,f3918,f3984,f3986,f4011,f4340,f4058,f4060,f4073,f4076,f4446,f4475,f4478,f4787,f4876,f4834,f4881,f5031,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5717,f5763,f5762,f5760,f5758,f5756,f560,f1003,f4884,f1634,f4401,f4396,f4013,f3917,f3904,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f4395,f4075,f4062,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f5309,f5281,f5065,f4788,f4476,f4358,f3824,f3770,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f5310,f5282,f5066,f4789,f4477,f3825,f3771,f1427,f1398,f1100,f1099,f1074,f1062,f4069,f3911,f1639,f1493,f1031,f7320,f7313,f7341,f6711,f6712,f6713,f6715,f6716,f7345,f6748,f6749,f6750,f7359,f6865,f6867,f6877,f6881,f6883,f7414])).
fof(f7428,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) != s(bool,X122) | s(bool,X122) = s(bool,X123) | s(bool,'F_0') = s(bool,X123) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X121)),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f6929,f176])).
fof(f6929,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) != s(bool,X122) | s(bool,X122) = s(bool,X123) | s(bool,'F_0') = s(bool,X123) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X121)),bool))) ) | $spl18),
  inference(superposition,[],[f3984,f3772])).
fof(f7482,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,X94) = s(bool,sK4('const.option.SOME_1'(s(bool,X93)),bool)) | s(bool,X94) = s(bool,X95) | s(bool,'F_0') = s(bool,X95) | s(bool,X93) = s(bool,X96) | s(bool,'F_0') = s(bool,X96)) ) | $spl18),
  inference(subsumption_resolution,[],[f7145,f175])).
fof(f7145,plain,(
  ( ! [X94,X95,X93,X96] : (p(s(bool,'F_0')) | s(bool,X94) = s(bool,sK4('const.option.SOME_1'(s(bool,X93)),bool)) | s(bool,X94) = s(bool,X95) | s(bool,'F_0') = s(bool,X95) | s(bool,X93) = s(bool,X96) | s(bool,'F_0') = s(bool,X96)) ) | $spl18),
  inference(superposition,[],[f4340,f3772])).
fof(f7483,plain,(
  ( ! [X105,X106] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))) | s(bool,X105) = s(bool,X106) | s(bool,'F_0') = s(bool,X106)) ) | $spl18),
  inference(subsumption_resolution,[],[f7149,f150])).
fof(f7149,plain,(
  ( ! [X105,X106] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))) | s(bool,X105) = s(bool,X106) | s(bool,'F_0') = s(bool,X106)) ) | $spl18),
  inference(superposition,[],[f145,f3772])).
fof(f7592,plain,(
  ( ! [X78,X76,X77] : (s(bool,X77) != s(bool,sK4('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,'F_0') = s(bool,X77) | s(bool,X76) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | $spl18),
  inference(subsumption_resolution,[],[f7570,f175])).
fof(f7570,plain,(
  ( ! [X78,X76,X77] : (p(s(bool,'F_0')) | s(bool,X77) != s(bool,sK4('const.option.SOME_1'(s(bool,X76)),bool)) | s(bool,'F_0') = s(bool,X77) | s(bool,X76) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | $spl18),
  inference(superposition,[],[f7424,f3772])).
fof(f7631,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool))) ) | $spl18),
  inference(superposition,[],[f7183,f3772])).
fof(f7634,plain,(
  ( ! [X10,X9] : (s(bool,X10) != s(bool,sK4('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl18),
  inference(superposition,[],[f7183,f118])).
fof(f7668,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl18),
  inference(condensation,[],[f7667])).
fof(f7667,plain,(
  ( ! [X19,X18] : (s(bool,X19) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X19)),bool))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f7611])).
fof(f7611,plain,(
  ( ! [X19,X18] : (s(bool,X19) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X19)),bool))) ) | $spl18),
  inference(superposition,[],[f7183,f3772])).
fof(f7677,plain,(
  ( ! [X47,X48,X46] : (s(bool,'F_0') != s(bool,X47) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X46),'const.option.NONE_0'),s(bool,X47),s(fun(X46,bool),X48)))) ) | $spl18),
  inference(forward_demodulation,[],[f7627,f1267])).
fof(f7627,plain,(
  ( ! [X47,X48,X46] : (s(bool,X47) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X46),'const.option.NONE_0'),s(bool,X47),s(fun(X46,bool),X48)))) ) | $spl18),
  inference(superposition,[],[f7183,f162])).
fof(f7818,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool))) ) | $spl18),
  inference(superposition,[],[f7597,f3772])).
fof(f7819,plain,(
  ( ! [X2,X3] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool)) | s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f7597,f3511])).
fof(f7966,plain,(
  ( ! [X83,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s(bool,X83) = s(bool,sK4('const.option.SOME_1'(s(bool,X82)),bool)) | s(bool,'T_0') = s(bool,X82)) ) | $spl18),
  inference(superposition,[],[f153,f7320])).
fof(f8042,plain,(
  ( ! [X70,X71,X69] : (s(bool,X70) = s(bool,sK4('const.option.SOME_1'(s(bool,X69)),bool)) | s(bool,X70) = s(bool,X71) | s(bool,'F_0') = s(bool,X71) | s(bool,'T_0') = s(bool,X69)) ) | $spl18),
  inference(subsumption_resolution,[],[f7958,f175])).
fof(f7958,plain,(
  ( ! [X70,X71,X69] : (p(s(bool,'F_0')) | s(bool,X70) = s(bool,sK4('const.option.SOME_1'(s(bool,X69)),bool)) | s(bool,X70) = s(bool,X71) | s(bool,'F_0') = s(bool,X71) | s(bool,'T_0') = s(bool,X69)) ) | $spl18),
  inference(superposition,[],[f4340,f7320])).
fof(f8069,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool))) ) | $spl18),
  inference(superposition,[],[f7415,f3772])).
fof(f8784,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool))) ) | $spl18),
  inference(superposition,[],[f7668,f3772])).
fof(f8785,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) != s(bool,sK4('const.option.SOME_1'(s(bool,X3)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,X5)) ) | $spl18),
  inference(superposition,[],[f7668,f3511])).
fof(f8787,plain,(
  ( ! [X10,X9] : (s(bool,X10) != s(bool,sK4('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,X9)) ) | $spl18),
  inference(superposition,[],[f7668,f118])).
fof(f9977,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),X1) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,sK4(X1,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X1) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool))) ) | $spl18),
  inference(superposition,[],[f550,f3772])).
fof(f9978,plain,(
  ( ! [X4,X5,X3] : (s('type.option.option'(bool),X4) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,sK4(X4,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X4) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,X5)) ) | $spl18),
  inference(superposition,[],[f550,f3511])).
fof(f10226,plain,(
  ( ! [X94,X97,X95,X96] : (s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,X97)),bool)) | s(bool,'F_0') = s(bool,X97) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X94),'const.option.NONE_0'),s(bool,X95),s(fun(X94,bool),X96)))) ) | $spl18),
  inference(superposition,[],[f3826,f162])).
fof(f10386,plain,(
  ( ! [X273,X272,X274] : (s(bool,X274) != s(bool,sK4('const.option.SOME_1'(s(bool,X273)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X272))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X274))) | s(bool,'F_0') = s(bool,X273) | s(bool,'F_0') = s(bool,X272)) ) | $spl18),
  inference(superposition,[],[f154,f3826])).
fof(f10478,plain,(
  ( ! [X185,X186,X184] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X185))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X186))) | s(bool,X186) = s(bool,sK4('const.option.SOME_1'(s(bool,X184)),bool)) | s(bool,'F_0') = s(bool,X184) | s(bool,'F_0') = s(bool,X185)) ) | $spl18),
  inference(superposition,[],[f153,f3826])).
fof(f10602,plain,(
  ( ! [X45,X46,X44] : (s(bool,X45) = s(bool,sK4('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,'F_0') = s(bool,X45) | s(bool,X44) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl18),
  inference(subsumption_resolution,[],[f10246,f176])).
fof(f10246,plain,(
  ( ! [X45,X46,X44] : (s(bool,X45) = s(bool,sK4('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X45) | s(bool,X44) = s(bool,X46) | s(bool,'T_0') = s(bool,X46)) ) | $spl18),
  inference(superposition,[],[f3826,f213])).
fof(f10734,plain,(
  ( ! [X180,X181] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X181))) | s(bool,'F_0') = s(bool,X180) | s(bool,'F_0') = s(bool,X181)) ) | $spl18),
  inference(subsumption_resolution,[],[f10476,f150])).
fof(f10476,plain,(
  ( ! [X180,X181] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X181))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X180))) | s(bool,'F_0') = s(bool,X180) | s(bool,'F_0') = s(bool,X181)) ) | $spl18),
  inference(superposition,[],[f145,f3826])).
fof(f10915,plain,(
  ( ! [X152,X153] : (s(bool,X153) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X152))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X153))) | s(bool,'F_0') = s(bool,X152)) ) | $spl18),
  inference(superposition,[],[f154,f10594])).
fof(f10999,plain,(
  ( ! [X114,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X114) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X113)) ) | $spl18),
  inference(superposition,[],[f153,f10594])).
fof(f11057,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,X0) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(condensation,[],[f11056])).
fof(f11056,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X19)),bool))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f10763])).
fof(f10763,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,X18) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X19)),bool))) ) | $spl18),
  inference(superposition,[],[f10594,f3772])).
fof(f11213,plain,(
  ( ! [X37,X38,X36] : (s('type.option.option'(bool),X37) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X36) = s(bool,sK4(X37,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X37) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) ) | $spl18),
  inference(superposition,[],[f551,f3511])).
fof(f11214,plain,(
  ( ! [X39,X41,X40] : (s('type.option.option'(bool),X41) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X40))) | s(bool,X39) = s(bool,sK4(X41,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X41) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | $spl18),
  inference(superposition,[],[f551,f3511])).
fof(f11217,plain,(
  ( ! [X50,X48,X49] : (s('type.option.option'(bool),X50) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s(bool,X48) = s(bool,sK4(X50,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X50) | s(bool,'F_0') = s(bool,X48) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool))) ) | $spl18),
  inference(superposition,[],[f551,f3772])).
fof(f11218,plain,(
  ( ! [X52,X53,X51] : (s('type.option.option'(bool),X53) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X52))) | s(bool,X51) = s(bool,sK4(X53,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X53) | s(bool,'F_0') = s(bool,X52) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X51)),bool))) ) | $spl18),
  inference(superposition,[],[f551,f3772])).
fof(f11219,plain,(
  ( ! [X54,X56,X55] : (s('type.option.option'(bool),X55) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X54) = s(bool,sK4(X55,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X55) | s(bool,X54) = s(bool,X56) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X56)),bool))) ) | $spl18),
  inference(superposition,[],[f551,f3772])).
fof(f11226,plain,(
  ( ! [X74,X72,X73] : (s('type.option.option'(bool),X73) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,'F_0') = s(bool,sK4(X73,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X73) | s(bool,X72) = s(bool,X74) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X74)),bool))) ) | $spl18),
  inference(superposition,[],[f551,f3772])).
fof(f11227,plain,(
  ( ! [X76,X77,X75] : (s('type.option.option'(bool),X76) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) | s(bool,'F_0') = s(bool,sK4(X76,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X76) | s(bool,X75) = s(bool,X77) | s(bool,'F_0') = s(bool,X77)) ) | $spl18),
  inference(superposition,[],[f551,f3511])).
fof(f11397,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl18),
  inference(superposition,[],[f11188,f213])).
fof(f11436,plain,(
  ( ! [X57,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X56))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X55),'const.option.NONE_0'),s(bool,X56),s(fun(X55,bool),X57)))) ) | $spl18),
  inference(superposition,[],[f11188,f162])).
fof(f11447,plain,(
  ( ! [X12,X10,X11,X9] : (s(X10,happ(s(fun(bool,X10),X11),s(bool,'T_0'))) = s(X10,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))),s(X10,X12),s(fun(bool,X10),X11))) | s(bool,'F_0') = s(bool,X9)) ) | $spl18),
  inference(superposition,[],[f164,f11188])).
fof(f11454,plain,(
  ( ! [X26,X25] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X26))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X25))))) | s('type.option.option'(bool),X26) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X25)) ) | $spl18),
  inference(superposition,[],[f153,f11188])).
fof(f11456,plain,(
  ( ! [X30,X29] : (s('type.option.option'(bool),X30) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X29))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X30))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X29)) ) | $spl18),
  inference(superposition,[],[f154,f11188])).
fof(f11465,plain,(
  ( ! [X54,X55] : (s('type.option.option'('type.option.option'(bool)),X55) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X54))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK4(X55,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X55) | s(bool,'F_0') = s(bool,X54)) ) | $spl18),
  inference(superposition,[],[f551,f11188])).
fof(f11476,plain,(
  ( ! [X14,X15,X13,X16] : (s(X14,happ(s(fun(bool,X14),X15),s(bool,X13))) = s(X14,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(X14,X16),s(fun(bool,X14),X15))) | s(bool,'F_0') = s(bool,X13)) ) | $spl18),
  inference(superposition,[],[f164,f11188])).
fof(f11484,plain,(
  ( ! [X30,X31] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X31))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X31) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) | s(bool,'F_0') = s(bool,X30)) ) | $spl18),
  inference(superposition,[],[f153,f11188])).
fof(f11486,plain,(
  ( ! [X35,X34] : (s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X35))) = s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))))) | s(bool,'F_0') = s(bool,X34)) ) | $spl18),
  inference(superposition,[],[f154,f11188])).
fof(f11495,plain,(
  ( ! [X59,X60] : (s('type.option.option'('type.option.option'(bool)),X60) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) = s('type.option.option'(bool),sK4(X60,'type.option.option'(bool))) | s('type.option.option'('type.option.option'(bool)),'const.option.NONE_0') = s('type.option.option'('type.option.option'(bool)),X60) | s(bool,'F_0') = s(bool,X59)) ) | $spl18),
  inference(superposition,[],[f551,f11188])).
fof(f11503,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | $spl18),
  inference(condensation,[],[f11502])).
fof(f11502,plain,(
  ( ! [X17,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,'F_0') = s(bool,X16) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X17)),bool))) ) | $spl18),
  inference(duplicate_literal_removal,[],[f11417])).
fof(f11417,plain,(
  ( ! [X17,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X17))) | s(bool,'F_0') = s(bool,X16) | s(bool,'F_0') = s(bool,X16) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X17)),bool))) ) | $spl18),
  inference(superposition,[],[f11188,f3772])).
fof(f11511,plain,(
  ( ! [X19,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'F_0') = s(bool,X19) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X18)),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f11405,f176])).
fof(f11405,plain,(
  ( ! [X19,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'F_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X18)),bool))) ) | $spl18),
  inference(superposition,[],[f11188,f3772])).
fof(f11515,plain,(
  ( ! [X24,X23] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X24) = s(bool,sK4('const.option.SOME_1'(s(bool,X23)),bool)) | s(bool,'F_0') = s(bool,X23)) ) | $spl18),
  inference(subsumption_resolution,[],[f11481,f150])).
fof(f11481,plain,(
  ( ! [X24,X23] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X24))) | s(bool,X24) = s(bool,sK4('const.option.SOME_1'(s(bool,X23)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,'F_0') = s(bool,X23)) ) | $spl18),
  inference(superposition,[],[f551,f11188])).
fof(f11720,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl18),
  inference(superposition,[],[f11057,f213])).
fof(f11829,plain,(
  ( ! [X118,X119] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool)) | s(bool,X118) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f153,f11057])).
fof(f11943,plain,(
  ( ! [X161,X160] : (s(bool,X161) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X160))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X161))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X160)),bool))) ) | $spl18),
  inference(superposition,[],[f154,f11057])).
fof(f12033,plain,(
  ( ! [X121,X120] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X120))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121))) | s(bool,X121) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X120)),bool))) ) | $spl18),
  inference(superposition,[],[f153,f11057])).
fof(f12110,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10)))) ) | $spl18),
  inference(subsumption_resolution,[],[f12109,f150])).
fof(f12109,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10)))) ) | $spl18),
  inference(subsumption_resolution,[],[f11666,f176])).
fof(f11666,plain,(
  ( ! [X10] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10)))) ) | $spl18),
  inference(superposition,[],[f11057,f550])).
fof(f12197,plain,(
  ( ! [X94,X92,X93] : (s(bool,X93) = s(bool,sK4('const.option.SOME_1'(s(bool,X92)),bool)) | s(bool,X93) = s(bool,X94) | s(bool,'F_0') = s(bool,X94) | s(bool,X92) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f11808,f175])).
fof(f11808,plain,(
  ( ! [X94,X92,X93] : (p(s(bool,'F_0')) | s(bool,X93) = s(bool,sK4('const.option.SOME_1'(s(bool,X92)),bool)) | s(bool,X93) = s(bool,X94) | s(bool,'F_0') = s(bool,X94) | s(bool,X92) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f4340,f11057])).
fof(f12199,plain,(
  ( ! [X103,X102] : (s(bool,X103) != s(bool,sK4('const.option.SOME_1'(s(bool,X102)),bool)) | s(bool,'F_0') = s(bool,X103) | s(bool,X102) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f11814,f175])).
fof(f11814,plain,(
  ( ! [X103,X102] : (p(s(bool,'F_0')) | s(bool,X103) != s(bool,sK4('const.option.SOME_1'(s(bool,X102)),bool)) | s(bool,'F_0') = s(bool,X103) | s(bool,X102) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f7424,f11057])).
fof(f12207,plain,(
  ( ! [X123,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,'F_0') != s(bool,X123) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11831,f1267])).
fof(f11831,plain,(
  ( ! [X123,X122] : (s(bool,'F_0') != s(bool,X123) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,X122)),bool)))) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f154,f11057])).
fof(f12320,plain,(
  ( ! [X156,X157] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X157))) | s(bool,X156) = s(bool,X157) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X156)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11941,f1267])).
fof(f11941,plain,(
  ( ! [X156,X157] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X157))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X156) = s(bool,X157) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X156)),bool))) ) | $spl18),
  inference(superposition,[],[f153,f11057])).
fof(f12326,plain,(
  ( ! [X185,X186] : (s('type.option.option'(bool),X186) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X185) = s(bool,sK4(X186,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X185)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f11952,f1267])).
fof(f11952,plain,(
  ( ! [X185,X186] : (s('type.option.option'(bool),X186) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X185) = s(bool,sK4(X186,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X186) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X185)),bool))) ) | $spl18),
  inference(superposition,[],[f551,f11057])).
fof(f12388,plain,(
  ( ! [X125,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125))) | s(bool,X124) != s(bool,X125) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X124)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f12035,f1267])).
fof(f12035,plain,(
  ( ! [X125,X124] : (s(bool,X124) != s(bool,X125) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X125))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X124)),bool))) ) | $spl18),
  inference(superposition,[],[f154,f11057])).
fof(f12394,plain,(
  ( ! [X149,X150] : (s(bool,'T_0') = s(bool,sK4(X150,bool)) | s('type.option.option'(bool),X150) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X149)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f12044,f1267])).
fof(f12044,plain,(
  ( ! [X149,X150] : (s('type.option.option'(bool),X150) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s(bool,sK4(X150,bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X150) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X149)),bool))) ) | $spl18),
  inference(superposition,[],[f551,f11057])).
fof(f12566,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) | s(bool,X57) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s(bool,X56),s(fun(X58,bool),X59))) | s(bool,X56) = s(bool,X60) | s(bool,'F_0') = s(bool,X60)) ) | $spl18),
  inference(superposition,[],[f442,f3511])).
fof(f12567,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) | s(bool,X63) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.NONE_0'),s(bool,X61),s(fun(X64,bool),X65))) | s(bool,'F_0') = s(bool,X62) | s(bool,'F_0') = s(bool,X61)) ) | $spl18),
  inference(superposition,[],[f442,f3511])).
fof(f12570,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s(bool,X78) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X79),'const.option.NONE_0'),s(bool,X76),s(fun(X79,bool),X80))) | s(bool,'F_0') = s(bool,X76) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X77)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f3772])).
fof(f12572,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X87) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.NONE_0'),s(bool,X86),s(fun(X88,bool),X89))) | s(bool,X86) = s(bool,X90) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X90)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f3772])).
fof(f12580,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,X123) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X124,bool),X125))) | s(bool,X122) = s(bool,X126) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X126)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f3772])).
fof(f12581,plain,(
  ( ! [X127,X130,X128,X131,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X128))) | s(bool,X128) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X129),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X129,bool),X130))) | s(bool,X127) = s(bool,X131) | s(bool,'F_0') = s(bool,X131)) ) | $spl18),
  inference(superposition,[],[f442,f3511])).
fof(f12602,plain,(
  ( ! [X222,X223,X221,X224] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X222))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),X222) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X223),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X221))),s(fun(X223,'type.option.option'(bool)),X224))) | s(bool,'F_0') = s(bool,X221)) ) | $spl18),
  inference(superposition,[],[f442,f11188])).
fof(f12603,plain,(
  ( ! [X227,X225,X228,X226] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X226))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))))) | s('type.option.option'(bool),X226) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X227),'const.option.NONE_0'),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(fun(X227,'type.option.option'(bool)),X228))) | s(bool,'F_0') = s(bool,X225)) ) | $spl18),
  inference(superposition,[],[f442,f11188])).
fof(f12622,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))) | s(bool,X56) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s(bool,X57),s(fun(X58,bool),X59))) | s(bool,X56) = s(bool,X60) | s(bool,'F_0') = s(bool,X60)) ) | $spl18),
  inference(superposition,[],[f442,f3511])).
fof(f12623,plain,(
  ( ! [X61,X64,X62,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X63))) | s(bool,X61) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.NONE_0'),s(bool,X63),s(fun(X64,bool),X65))) | s(bool,'F_0') = s(bool,X62) | s(bool,'F_0') = s(bool,X61)) ) | $spl18),
  inference(superposition,[],[f442,f3511])).
fof(f12626,plain,(
  ( ! [X80,X78,X76,X79,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X78))) | s(bool,X76) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X79),'const.option.NONE_0'),s(bool,X78),s(fun(X79,bool),X80))) | s(bool,'F_0') = s(bool,X76) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X77)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f3772])).
fof(f12627,plain,(
  ( ! [X85,X83,X81,X84,X82] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X82))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X83))) | s(bool,X81) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X84),'const.option.NONE_0'),s(bool,X83),s(fun(X84,bool),X85))) | s(bool,'F_0') = s(bool,X82) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X81)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f3772])).
fof(f12628,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X87))) | s(bool,X86) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.NONE_0'),s(bool,X87),s(fun(X88,bool),X89))) | s(bool,X86) = s(bool,X90) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X90)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f3772])).
fof(f12636,plain,(
  ( ! [X125,X123,X126,X124,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X124),'const.option.NONE_0'),s(bool,X123),s(fun(X124,bool),X125))) | s(bool,X122) = s(bool,X126) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X126)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f3772])).
fof(f12637,plain,(
  ( ! [X127,X130,X128,X131,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X128))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X129),'const.option.NONE_0'),s(bool,X128),s(fun(X129,bool),X130))) | s(bool,X127) = s(bool,X131) | s(bool,'F_0') = s(bool,X131)) ) | $spl18),
  inference(superposition,[],[f442,f3511])).
fof(f12658,plain,(
  ( ! [X222,X223,X221,X224] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X222))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X221))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X223),'const.option.NONE_0'),s('type.option.option'(bool),X222),s(fun(X223,'type.option.option'(bool)),X224))) | s(bool,'F_0') = s(bool,X221)) ) | $spl18),
  inference(superposition,[],[f442,f11188])).
fof(f12659,plain,(
  ( ! [X227,X225,X228,X226] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),X226))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X225))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.option_CASE_3'(s('type.option.option'(X227),'const.option.NONE_0'),s('type.option.option'(bool),X226),s(fun(X227,'type.option.option'(bool)),X228))) | s(bool,'F_0') = s(bool,X225)) ) | $spl18),
  inference(superposition,[],[f442,f11188])).
fof(f12696,plain,(
  ( ! [X212,X210,X211,X209] : (s(bool,X210) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X211),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X211,bool),X212))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X209)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f12599,f1267])).
fof(f12599,plain,(
  ( ! [X212,X210,X211,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210))) | s(bool,X210) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X211),'const.option.NONE_0'),s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X211,bool),X212))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X209)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f11057])).
fof(f12705,plain,(
  ( ! [X111,X109,X110,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X108) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X110),'const.option.NONE_0'),s(bool,X109),s(fun(X110,bool),X111))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X108)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f12633,f1267])).
fof(f12633,plain,(
  ( ! [X111,X109,X110,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X108) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X110),'const.option.NONE_0'),s(bool,X109),s(fun(X110,bool),X111))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X108)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f11057])).
fof(f12713,plain,(
  ( ! [X212,X210,X211,X209] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X211),'const.option.NONE_0'),s(bool,X210),s(fun(X211,bool),X212))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X209)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f12655,f1267])).
fof(f12655,plain,(
  ( ! [X212,X210,X211,X209] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X209))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X210))) | s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X211),'const.option.NONE_0'),s(bool,X210),s(fun(X211,bool),X212))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X209)),bool))) ) | $spl18),
  inference(superposition,[],[f442,f11057])).
fof(f13194,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f4478,f213])).
fof(f13273,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,X27) | s(bool,X28) = s(bool,sK4('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,'F_0') = s(bool,X28) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f13202,f176])).
fof(f13202,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,X27) | s(bool,X28) = s(bool,sK4('const.option.SOME_1'(s(bool,X27)),bool)) | s(bool,'F_0') = s(bool,X28) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool))) ) | $spl18),
  inference(superposition,[],[f4478,f3772])).
fof(f12174,plain,(
  ( ! [X45,X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X45))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f12064,f1267])).
fof(f12064,plain,(
  ( ! [X45,X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,X45)),bool)))) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(trivial_inequality_removal,[],[f11783])).
fof(f11783,plain,(
  ( ! [X45,X46] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,X45)),bool)))) | s(bool,'T_0') = s(bool,X46) | s(bool,X45) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f476,f11057])).
fof(f12111,plain,(
  ( ! [X12,X13] : (s(bool,X12) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X13) = s(bool,sK4('const.option.SOME_1'(s(bool,X12)),bool)) | s(bool,'T_0') = s(bool,X13)) ) | $spl18),
  inference(subsumption_resolution,[],[f11667,f176])).
fof(f11667,plain,(
  ( ! [X12,X13] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X12) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X13) = s(bool,sK4('const.option.SOME_1'(s(bool,X12)),bool)) | s(bool,'T_0') = s(bool,X13)) ) | $spl18),
  inference(superposition,[],[f11057,f213])).
fof(f7821,plain,(
  ( ! [X6] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X6)),bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl18),
  inference(superposition,[],[f7597,f118])).
fof(f7597,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | $spl18),
  inference(unit_resulting_resolution,[],[f176,f7183])).
fof(f7584,plain,(
  ( ! [X17,X18,X16] : (s(bool,X16) != s(bool,X17) | s(bool,'F_0') = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,X18)) ) | $spl18),
  inference(subsumption_resolution,[],[f7549,f175])).
fof(f7549,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'F_0')) | s(bool,X16) != s(bool,X17) | s(bool,'F_0') = s(bool,X17) | s(bool,X16) = s(bool,X18) | s(bool,'F_0') = s(bool,X18)) ) | $spl18),
  inference(superposition,[],[f7424,f3511])).
fof(f7414,plain,(
  ( ! [X47,X48,X49] : (s(bool,'F_0') != s(bool,X48) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f6901,f476])).
fof(f6901,plain,(
  ( ! [X47,X48,X49] : (s(bool,'F_0') != s(bool,X48) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X49))) | s(bool,'T_0') = s(bool,X49) | s(bool,'F_0') = s(bool,X47) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X48)),bool))) ) | $spl18),
  inference(superposition,[],[f476,f3772])).
fof(f4446,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f3984,f213])).
fof(f3798,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'F_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | $spl18),
  inference(superposition,[],[f3511,f3511])).
fof(f42634,plain,(
  ( ! [X222,X225,X223,X226] : (s(bool,'F_0') = s(bool,X226) | p(s(bool,happ(s(fun(X222,bool),X225),s(X222,sK4(X223,X222))))) | s(bool,'T_0') = s(bool,X226) | s('type.option.option'(X222),'const.option.NONE_0') = s('type.option.option'(X222),X223)) ) | ($spl18 | $spl52)),
  inference(backward_demodulation,[],[f42502,f39816])).
fof(f42683,plain,(
  ( ! [X395,X396,X398,X394] : (s(bool,X398) = s(bool,happ(s(fun(X394,bool),X395),s(X394,sK4(X396,X394)))) | s('type.option.option'(X394),'const.option.NONE_0') = s('type.option.option'(X394),X396)) ) | $spl122),
  inference(cnf_transformation,[],[f42683_D])).
fof(f42683_D,plain,(
  ( ! [X395,X396,X398,X394] : (s(bool,X398) = s(bool,happ(s(fun(X394,bool),X395),s(X394,sK4(X396,X394)))) | s('type.option.option'(X394),'const.option.NONE_0') = s('type.option.option'(X394),X396)) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f42682,plain,(
  ( ! [X399,X395,X396,X398,X394] : (s(bool,X398) = s(bool,happ(s(fun(X394,bool),X395),s(X394,sK4(X396,X394)))) | s(bool,'F_0') = s(bool,X399) | s('type.option.option'(X394),'const.option.NONE_0') = s('type.option.option'(X394),X396)) ) | ($spl18 | $spl40 | $spl52)),
  inference(subsumption_resolution,[],[f42681,f175])).
fof(f42681,plain,(
  ( ! [X399,X395,X396,X398,X394] : (p(s(bool,'F_0')) | s(bool,X398) = s(bool,happ(s(fun(X394,bool),X395),s(X394,sK4(X396,X394)))) | s(bool,'F_0') = s(bool,X399) | s('type.option.option'(X394),'const.option.NONE_0') = s('type.option.option'(X394),X396)) ) | ($spl18 | $spl40 | $spl52)),
  inference(subsumption_resolution,[],[f42620,f42664])).
fof(f42620,plain,(
  ( ! [X399,X395,X396,X398,X394] : (p(s(bool,'F_0')) | s(bool,X398) = s(bool,happ(s(fun(X394,bool),X395),s(X394,sK4(X396,X394)))) | s(bool,X398) = s(bool,X399) | s(bool,'F_0') = s(bool,X399) | s('type.option.option'(X394),'const.option.NONE_0') = s('type.option.option'(X394),X396)) ) | ($spl18 | $spl52)),
  inference(backward_demodulation,[],[f42502,f39710])).
fof(f39710,plain,(
  ( ! [X397,X399,X395,X396,X398,X394] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X394),X396),s(bool,X397),s(fun(X394,bool),X395)))) | s(bool,X398) = s(bool,happ(s(fun(X394,bool),X395),s(X394,sK4(X396,X394)))) | s(bool,X398) = s(bool,X399) | s(bool,'F_0') = s(bool,X399) | s('type.option.option'(X394),'const.option.NONE_0') = s('type.option.option'(X394),X396)) ) | $spl18),
  inference(superposition,[],[f4340,f651])).
fof(f42670,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X41,bool),bool),happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43))),s(fun(X41,bool),X44)))) ) | $spl120),
  inference(cnf_transformation,[],[f42670_D])).
fof(f42670_D,plain,(
  ( ! [X43,X41,X44,X42] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X41,bool),bool),happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43))),s(fun(X41,bool),X44)))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f42669,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,'F_0') = s(bool,X45) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X41,bool),bool),happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43))),s(fun(X41,bool),X44)))) ) | ($spl18 | $spl40 | $spl52)),
  inference(subsumption_resolution,[],[f42582,f42664])).
fof(f42582,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s(bool,'F_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X45) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X41,bool),bool),happ(s(fun(bool,fun(fun(X41,bool),bool)),happ(s(fun('type.option.option'(X41),fun(bool,fun(fun(X41,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X41),X42))),s(bool,X43))),s(fun(X41,bool),X44)))) ) | ($spl18 | $spl52)),
  inference(backward_demodulation,[],[f42502,f1398])).
fof(f42666,plain,(
  ( ! [X178] : (s(bool,'T_0') != s(bool,X178)) ) | $spl118),
  inference(cnf_transformation,[],[f42666_D])).
fof(f42666_D,plain,(
  ( ! [X178] : (s(bool,'T_0') != s(bool,X178)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f42665,plain,(
  ( ! [X177,X178] : (s(bool,'F_0') = s(bool,X177) | s(bool,'T_0') != s(bool,X178)) ) | ($spl18 | $spl40 | $spl52)),
  inference(subsumption_resolution,[],[f42573,f9646])).
fof(f42573,plain,(
  ( ! [X177,X178] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X177)),bool)) | s(bool,'F_0') = s(bool,X177) | s(bool,'T_0') != s(bool,X178)) ) | ($spl18 | $spl40 | $spl52)),
  inference(backward_demodulation,[],[f42502,f26199])).
fof(f26199,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,'F_0') = s(bool,X177) | s(bool,'T_0') != s(bool,X178) | s(bool,sK4('const.option.SOME_1'(s(bool,X177)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X179),'const.option.NONE_0'),s(bool,X178),s(fun(X179,bool),X180)))) ) | ($spl18 | $spl40)),
  inference(forward_demodulation,[],[f26127,f1267])).
fof(f26127,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,'T_0') != s(bool,X178) | s(bool,sK4('const.option.SOME_1'(s(bool,X177)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X179),'const.option.NONE_0'),s(bool,X178),s(fun(X179,bool),X180))) | s(bool,X177) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f23836,f8191])).
fof(f42662,plain,(
  ( ! [X189] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189)))) ) | $spl116),
  inference(cnf_transformation,[],[f42662_D])).
fof(f42662_D,plain,(
  ( ! [X189] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f42661,plain,(
  ( ! [X189,X188] : (s(bool,'F_0') = s(bool,X188) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189)))) ) | ($spl18 | $spl40 | $spl52)),
  inference(subsumption_resolution,[],[f42564,f9646])).
fof(f42564,plain,(
  ( ! [X189,X188] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X188)),bool)) | s(bool,'F_0') = s(bool,X188) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189)))) ) | ($spl18 | $spl40 | $spl52)),
  inference(backward_demodulation,[],[f42502,f12710])).
fof(f12710,plain,(
  ( ! [X191,X189,X190,X188] : (s(bool,'F_0') = s(bool,X188) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) | s(bool,sK4('const.option.SOME_1'(s(bool,X188)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X190),'const.option.NONE_0'),s(bool,X189),s(fun(X190,bool),X191)))) ) | $spl40),
  inference(forward_demodulation,[],[f12650,f1267])).
fof(f12650,plain,(
  ( ! [X191,X189,X190,X188] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X189))) | s(bool,sK4('const.option.SOME_1'(s(bool,X188)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X190),'const.option.NONE_0'),s(bool,X189),s(fun(X190,bool),X191))) | s(bool,X188) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f442,f8191])).
fof(f42495,plain,(
  $false | ($spl18 | $spl52)),
  inference(unit_resulting_resolution,[],[f162,f42453,f120])).
fof(f42273,plain,(
  ( ! [X389,X391,X388] : (s('type.option.option'(X388),'const.option.NONE_0') = s('type.option.option'(X388),X389) | s(bool,'T_0') != s(bool,happ(s(fun(X388,bool),X391),s(X388,sK4(X389,X388))))) ) | $spl114),
  inference(cnf_transformation,[],[f42273_D])).
fof(f42273_D,plain,(
  ( ! [X389,X391,X388] : (s('type.option.option'(X388),'const.option.NONE_0') = s('type.option.option'(X388),X389) | s(bool,'T_0') != s(bool,happ(s(fun(X388,bool),X391),s(X388,sK4(X389,X388))))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f42274,plain,(
  ( ! [X368,X370,X367,X371] : (s(bool,'T_0') != s(bool,happ(s(fun(X367,bool),X370),s(X367,sK4(X368,X367)))) | s(bool,'F_0') = s(bool,X371) | s('type.option.option'(X367),'const.option.NONE_0') = s('type.option.option'(X367),X368)) ) | ($spl0 | $spl18 | $spl54)),
  inference(subsumption_resolution,[],[f39845,f41513])).
fof(f41513,plain,(
  ( ! [X412,X414,X410,X413,X411] : (s(bool,X414) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X410),X412),s(bool,X413),s(fun(X410,bool),X411))) | s(bool,'F_0') = s(bool,X414) | s('type.option.option'(X410),'const.option.NONE_0') = s('type.option.option'(X410),X412)) ) | ($spl0 | $spl18 | $spl54)),
  inference(subsumption_resolution,[],[f41512,f176])).
fof(f41512,plain,(
  ( ! [X412,X414,X410,X413,X411] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X414) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X410),X412),s(bool,X413),s(fun(X410,bool),X411))) | s(bool,'F_0') = s(bool,X414) | s('type.option.option'(X410),'const.option.NONE_0') = s('type.option.option'(X410),X412)) ) | ($spl0 | $spl18 | $spl54)),
  inference(forward_demodulation,[],[f41379,f1267])).
fof(f41379,plain,(
  ( ! [X412,X414,X410,X413,X411] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X414) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X410),X412),s(bool,X413),s(fun(X410,bool),X411))) | s(bool,'F_0') = s(bool,X414) | s('type.option.option'(X410),'const.option.NONE_0') = s('type.option.option'(X410),X412)) ) | ($spl0 | $spl18 | $spl54)),
  inference(backward_demodulation,[],[f41320,f39713])).
fof(f39713,plain,(
  ( ! [X412,X414,X410,X413,X411] : (s(bool,X414) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X410),X412),s(bool,X413),s(fun(X410,bool),X411))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X410,bool),X411),s(X410,sK4(X412,X410))))),bool)) | s(bool,'F_0') = s(bool,X414) | s('type.option.option'(X410),'const.option.NONE_0') = s('type.option.option'(X410),X412)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4537,f651])).
fof(f4537,plain,(
  ( ! [X68,X69] : (s(bool,X68) != s(bool,X69) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X68)),bool)) | s(bool,'F_0') = s(bool,X69)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f1267])).
fof(f4326,plain,(
  ( ! [X87,X86] : (s(bool,X86) != s(bool,X87) | s(bool,'T_0') = s(bool,X86) | s(bool,'F_0') = s(bool,X87)) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f3892,f977])).
fof(f977,plain,(
  ( ! [X4] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(subsumption_resolution,[],[f957,f111])).
fof(f957,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f124,f882])).
fof(f882,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f873,f118])).
fof(f873,plain,(
  s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | $spl0),
  inference(unit_resulting_resolution,[],[f168,f121])).
fof(f3892,plain,(
  ( ! [X87,X86] : (s(bool,X86) != s(bool,X87) | s(bool,'T_0') = s(bool,X86) | s(bool,'F_0') = s(bool,X87) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X86),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f994,f3511])).
fof(f994,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X1),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(subsumption_resolution,[],[f981,f176])).
fof(f981,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X1),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(superposition,[],[f977,f118])).
fof(f41320,plain,(
  ( ! [X12,X15,X13] : (s(bool,'F_0') = s(bool,happ(s(fun(X12,bool),X15),s(X12,X13)))) ) | $spl54),
  inference(subsumption_resolution,[],[f37979,f10751])).
fof(f39845,plain,(
  ( ! [X368,X370,X367,X369,X371] : (s(bool,'T_0') != s(bool,happ(s(fun(X367,bool),X370),s(X367,sK4(X368,X367)))) | s(bool,X371) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X367),X368),s(bool,X369),s(fun(X367,bool),X370))) | s(bool,'F_0') = s(bool,X371) | s('type.option.option'(X367),'const.option.NONE_0') = s('type.option.option'(X367),X368)) ) | $spl18),
  inference(superposition,[],[f3984,f651])).
fof(f42272,plain,(
  ( ! [X389,X391,X388,X392] : (s(bool,'F_0') = s(bool,X392) | s('type.option.option'(X388),'const.option.NONE_0') = s('type.option.option'(X388),X389) | s(bool,'T_0') != s(bool,happ(s(fun(X388,bool),X391),s(X388,sK4(X389,X388))))) ) | ($spl0 | $spl18 | $spl54)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f950,f1064,f1153,f1154,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5184,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f7677,f7320,f873,f550,f125,f11601,f23835,f23836,f26040,f26041,f26058,f26090,f26091,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26074,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9766,f9683,f9682,f9681,f9680,f8906,f8872,f8871,f8870,f8869,f8593,f8047,f8046,f7679,f7678,f7487,f7486,f7346,f7343,f7303,f7104,f6981,f6980,f6876,f6748,f6713,f6712,f5310,f5309,f5282,f5281,f5066,f5065,f4885,f4884,f4789,f4788,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4633,f4632,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4561,f4560,f4535,f4476,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4075,f4062,f4013,f3986,f3985,f3917,f3904,f3824,f3771,f3770,f3740,f3738,f3702,f3657,f3654,f3622,f3621,f2920,f2107,f1255,f1000,f999,f26117,f26123,f36391,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36527,f36528,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38525,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39612,f39613,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39816,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4705,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39811,f39809,f39807,f39806,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f39740,f39998,f39973,f39926,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39853,f39852,f39850,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f39714,f39713,f39712,f39711,f39710,f39709,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38596,f38595,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41505,f41507,f41518,f41519,f41520,f41522,f37303,f37302,f27735,f26200,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12649,f12645,f12637,f12636,f12627,f12626,f12623,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12570,f12567,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f11720,f11515,f11511,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f10602,f10594,f10569,f10529,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f882,f894,f921,f964,f994,f1015,f1128,f1129,f1130,f1193,f1561,f1562,f1809,f1966,f1970,f2038,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2767,f2888,f2916,f2919,f2924,f3215,f3501,f3504,f3505,f3552,f3595,f3679,f4339,f4701,f4702,f4890,f5096,f5118,f5121,f5122,f5124,f6982,f7342,f7427,f7445,f11547,f11548,f26044,f26094,f27736,f36578,f38583,f124,f175,f358,f427,f436,f437,f476,f477,f512,f513,f606,f675,f42184,f1027,f1030,f1031,f1062,f1280,f2004,f42225,f3633,f3655,f3658,f3661,f3662,f3677,f3769,f3772,f3823,f3825,f3826,f3900,f3902,f3911,f3915,f3918,f4011,f4058,f4060,f4069,f4073,f4076,f4340,f4475,f4477,f4478,f4534,f4536,f4537,f4559,f4562,f4623,f4625,f4641,f4674,f4758,f4787,f4834,f4876,f4881,f5031,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5717,f5756,f5762,f6711,f6715,f6716,f6749,f6750,f6865,f6867,f6877,f6881,f6883,f6956,f6958,f6968,f6972,f6974,f6977,f6978,f6979,f7024,f7033,f7093,f7095,f7105,f7109,f7111,f7151,f7171,f7183,f7210,f7313,f7341,f7345,f7359,f7415,f7424,f7428,f7429,f7430,f7447,f7482,f7483,f7591,f7592,f7631,f7634,f7668,f7818,f7819,f7966,f8042,f8069,f8592,f8594,f8595,f8784,f8785,f8787,f8907,f41547,f41514,f41506,f39879,f39855,f39726,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f26138,f26135,f1639,f1493,f41521,f41517,f41513,f41508,f41384,f41313,f39953,f39931,f42269,f39856,f42270,f39851,f42271,f39849])).
fof(f39849,plain,(
  ( ! [X389,X391,X388,X390,X392] : (s(bool,'T_0') != s(bool,happ(s(fun(X388,bool),X391),s(X388,sK4(X389,X388)))) | s(bool,X392) = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X388),X389),s(bool,X390),s(fun(X388,bool),X391)))),bool)) | s(bool,'F_0') = s(bool,X392) | s('type.option.option'(X388),'const.option.NONE_0') = s('type.option.option'(X388),X389)) ) | $spl18),
  inference(superposition,[],[f4478,f651])).
fof(f42271,plain,(
  ( ! [X399,X401,X398,X402] : (s(bool,'F_0') = s(bool,X402) | s('type.option.option'(X398),'const.option.NONE_0') = s('type.option.option'(X398),X399) | s(bool,X402) != s(bool,happ(s(fun(X398,bool),X401),s(X398,sK4(X399,X398))))) ) | ($spl0 | $spl18 | $spl54)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f950,f1064,f1153,f1154,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5184,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f7677,f7320,f873,f550,f125,f11601,f23835,f23836,f26040,f26041,f26058,f26090,f26091,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26074,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9766,f9683,f9682,f9681,f9680,f8906,f8872,f8871,f8870,f8869,f8593,f8047,f8046,f7679,f7678,f7487,f7486,f7346,f7343,f7303,f7104,f6981,f6980,f6876,f6748,f6713,f6712,f5310,f5309,f5282,f5281,f5066,f5065,f4885,f4884,f4789,f4788,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4633,f4632,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4561,f4560,f4535,f4476,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4075,f4062,f4013,f3986,f3985,f3917,f3904,f3824,f3771,f3770,f3740,f3738,f3702,f3657,f3654,f3622,f3621,f2920,f2107,f1255,f1000,f999,f26117,f26123,f36391,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36527,f36528,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38525,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39612,f39613,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39816,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4705,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39811,f39809,f39807,f39806,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f39740,f39998,f39973,f39926,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39853,f39852,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f39714,f39713,f39712,f39711,f39710,f39709,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38596,f38595,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41505,f41507,f41518,f41519,f41520,f41522,f37303,f37302,f27735,f26200,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12649,f12645,f12637,f12636,f12627,f12626,f12623,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12570,f12567,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f11720,f11515,f11511,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f10602,f10594,f10569,f10529,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f882,f894,f921,f964,f994,f1015,f1128,f1129,f1130,f1193,f1561,f1562,f1809,f1966,f1970,f2038,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2767,f2888,f2916,f2919,f2924,f3215,f3501,f3504,f3505,f3552,f3595,f3679,f4339,f4701,f4702,f4890,f5096,f5118,f5121,f5122,f5124,f6982,f7342,f7427,f7445,f11547,f11548,f26044,f26094,f27736,f36578,f38583,f124,f175,f358,f427,f436,f437,f476,f477,f512,f513,f606,f675,f42184,f1027,f1030,f1031,f1062,f1280,f2004,f42225,f3633,f3655,f3658,f3661,f3662,f3677,f3769,f3772,f3823,f3825,f3826,f3900,f3902,f3911,f3915,f3918,f4011,f4058,f4060,f4069,f4073,f4076,f4340,f4475,f4477,f4478,f4534,f4536,f4537,f4559,f4562,f4623,f4625,f4641,f4674,f4758,f4787,f4834,f4876,f4881,f5031,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5717,f5756,f5762,f6711,f6715,f6716,f6749,f6750,f6865,f6867,f6877,f6881,f6883,f6956,f6958,f6968,f6972,f6974,f6977,f6978,f6979,f7024,f7033,f7093,f7095,f7105,f7109,f7111,f7151,f7171,f7183,f7210,f7313,f7341,f7345,f7359,f7415,f7424,f7428,f7429,f7430,f7447,f7482,f7483,f7591,f7592,f7631,f7634,f7668,f7818,f7819,f7966,f8042,f8069,f8592,f8594,f8595,f8784,f8785,f8787,f8907,f41547,f41514,f41506,f39879,f39855,f39726,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f26138,f26135,f1639,f1493,f41521,f41517,f41513,f41508,f41384,f41313,f39953,f39931,f42269,f39856,f42270,f39851])).
fof(f39851,plain,(
  ( ! [X399,X401,X398,X400,X402] : (s(bool,X402) != s(bool,happ(s(fun(X398,bool),X401),s(X398,sK4(X399,X398)))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X398),X399),s(bool,X400),s(fun(X398,bool),X401)))),bool)) | s(bool,'F_0') = s(bool,X402) | s('type.option.option'(X398),'const.option.NONE_0') = s('type.option.option'(X398),X399)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4537,f651])).
fof(f42270,plain,(
  ( ! [X407,X403,X404,X406] : (s(bool,X407) != s(bool,happ(s(fun(X403,bool),X406),s(X403,sK4(X404,X403)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X407)),bool)) | s('type.option.option'(X403),'const.option.NONE_0') = s('type.option.option'(X403),X404)) ) | ($spl0 | $spl18 | $spl54)),
  inference(subsumption_resolution,[],[f39852,f41505])).
fof(f39856,plain,(
  ( ! [X424,X426,X423,X425,X427] : (s(bool,'T_0') != s(bool,happ(s(fun(X423,bool),X426),s(X423,sK4(X424,X423)))) | s(bool,X427) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X423),X424),s(bool,X425),s(fun(X423,bool),X426))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X427)),bool)) | s('type.option.option'(X423),'const.option.NONE_0') = s('type.option.option'(X423),X424)) ) | $spl18),
  inference(superposition,[],[f6977,f651])).
fof(f42269,plain,(
  ( ! [X445,X443,X444,X442] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X442),X443),s(bool,X444),s(fun(X442,bool),X445)))),bool)) | s('type.option.option'(X442),'const.option.NONE_0') = s('type.option.option'(X442),X443)) ) | ($spl18 | $spl54)),
  inference(subsumption_resolution,[],[f39860,f42184])).
fof(f39931,plain,(
  ( ! [X2,X0,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,'T_0'))) = s(X1,happ(s(fun(bool,X1),X2),s(bool,X0))) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(forward_demodulation,[],[f39930,f1267])).
fof(f39930,plain,(
  ( ! [X2,X0,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,'T_0'))) = s(X1,happ(s(fun(bool,X1),X2),s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)))) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(forward_demodulation,[],[f39929,f164])).
fof(f39929,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)))) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(X1,X3),s(fun(bool,X1),X2))) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(subsumption_resolution,[],[f39533,f150])).
fof(f39533,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,happ(s(fun(bool,X1),X2),s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)))) = s(X1,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(X1,X3),s(fun(bool,X1),X2))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'F_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f651,f11188])).
fof(f39953,plain,(
  ( ! [X116,X114,X117,X115] : (s(bool,'T_0') = s(bool,happ(s(fun(X114,bool),X117),s(X114,sK4(X115,X114)))) | s('type.option.option'(X114),'const.option.NONE_0') = s('type.option.option'(X114),X115) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X114),X115),s(bool,X116),s(fun(X114,bool),X117)))),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f39636,f1267])).
fof(f39636,plain,(
  ( ! [X116,X114,X117,X115] : (s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,happ(s(fun(X114,bool),X117),s(X114,sK4(X115,X114)))) | s('type.option.option'(X114),'const.option.NONE_0') = s('type.option.option'(X114),X115) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X114),X115),s(bool,X116),s(fun(X114,bool),X117)))),bool))) ) | $spl18),
  inference(superposition,[],[f651,f11057])).
fof(f41313,plain,(
  ( ! [X218,X216,X220,X215,X219,X221] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X220),'const.option.NONE_0'),s(bool,X219),s(fun(X220,bool),X221))) | s(bool,X219) != s(bool,happ(s(fun(X215,bool),X218),s(X215,X216)))) ) | ($spl18 | $spl54)),
  inference(forward_demodulation,[],[f26136,f10751])).
fof(f41384,plain,(
  ( ! [X540,X542,X536,X538,X541,X537,X539] : (s(bool,X540) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X541),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X541,bool),X542))) | s(bool,X540) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X536),X538),s(bool,X539),s(fun(X536,bool),X537))) | s('type.option.option'(X536),'const.option.NONE_0') = s('type.option.option'(X536),X538)) ) | ($spl18 | $spl54)),
  inference(backward_demodulation,[],[f41320,f39741])).
fof(f41508,plain,(
  ( ! [X203] : (s(bool,'F_0') = s(bool,X203) | p(s(bool,X203))) ) | $spl54),
  inference(global_subsumption,[],[f41507,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f550,f125,f1426,f1427,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36527,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37673,f37676,f37696,f37979,f37765,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39765,f39771,f39773,f39782,f39783,f39786,f39816,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39811,f39809,f39807,f39806,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f1639,f1493,f39897,f39889,f39888,f39887,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39658,f39513,f38588,f38587,f38007])).
fof(f41517,plain,(
  ( ! [X383,X385,X387,X382,X384,X386] : (s(bool,X386) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X382),X383),s(bool,X384),s(fun(X382,bool),X385))) | s(bool,X386) = s(bool,X387) | s(bool,'F_0') = s(bool,X387) | s('type.option.option'(X382),'const.option.NONE_0') = s('type.option.option'(X382),X383)) ) | ($spl18 | $spl54)),
  inference(subsumption_resolution,[],[f41397,f41497])).
fof(f41397,plain,(
  ( ! [X383,X385,X387,X382,X384,X386] : (p(s(bool,'F_0')) | s(bool,X386) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X382),X383),s(bool,X384),s(fun(X382,bool),X385))) | s(bool,X386) = s(bool,X387) | s(bool,'F_0') = s(bool,X387) | s('type.option.option'(X382),'const.option.NONE_0') = s('type.option.option'(X382),X383)) ) | ($spl18 | $spl54)),
  inference(backward_demodulation,[],[f41320,f39848])).
fof(f41521,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl18 | $spl54)),
  inference(global_subsumption,[],[f41520,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f7677,f7320,f550,f125,f23835,f23836,f26040,f26041,f26058,f26090,f26091,f27731,f25698,f27735,f1426,f1427,f26137,f26136,f26200,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25809,f25808,f25724,f25631,f25630,f25629,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12696,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39612,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39765,f39771,f39773,f39782,f39783,f39786,f39798,f39816,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f39998,f39973,f39953,f39931,f39926,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38596,f38595,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007])).
fof(f26135,plain,(
  ( ! [X212,X210,X213,X211,X209,X214] : (s(bool,X210) != s(bool,X212) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X209),'const.option.NONE_0'),s(bool,X210),s(fun(X209,bool),X211))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X213),'const.option.NONE_0'),s(bool,X212),s(fun(X213,bool),X214)))) ) | $spl18),
  inference(superposition,[],[f23836,f162])).
fof(f26138,plain,(
  ( ! [X231,X229,X230,X232] : (s(bool,X229) != s(bool,X230) | s(bool,sK4('const.option.SOME_1'(s(bool,X229)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X231),'const.option.NONE_0'),s(bool,X230),s(fun(X231,bool),X232)))) ) | $spl18),
  inference(superposition,[],[f23836,f1267])).
fof(f39878,plain,(
  ( ! [X520,X522,X518,X521,X523,X517,X519] : (s(bool,X521) != s(bool,happ(s(fun(X517,bool),X520),s(X517,sK4(X518,X517)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X522),'const.option.NONE_0'),s(bool,X521),s(fun(X522,bool),X523))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X517),X518),s(bool,X519),s(fun(X517,bool),X520))) | s('type.option.option'(X517),'const.option.NONE_0') = s('type.option.option'(X517),X518)) ) | $spl18),
  inference(superposition,[],[f23836,f651])).
fof(f4951,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X48,bool),bool),happ(s(fun(bool,fun(fun(X48,bool),bool)),happ(s(fun('type.option.option'(X48),fun(bool,fun(fun(X48,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X48),X49))),s(bool,X50))),s(fun(X48,bool),X51))) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X48),X49),s(bool,X50),s(fun(X48,bool),X51)))) ) | $spl0),
  inference(forward_demodulation,[],[f4923,f873])).
fof(f4923,plain,(
  ( ! [X50,X48,X51,X49] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X48),X49),s(bool,X50),s(fun(X48,bool),X51))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,happ(s(fun(fun(X48,bool),bool),happ(s(fun(bool,fun(fun(X48,bool),bool)),happ(s(fun('type.option.option'(X48),fun(bool,fun(fun(X48,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X48),X49))),s(bool,X50))),s(fun(X48,bool),X51)))) ) | $spl0),
  inference(superposition,[],[f2888,f165])).
fof(f39726,plain,(
  ( ! [X472,X474,X471,X473] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X471),X473),s(bool,X474),s(fun(X471,bool),X472)))),bool)) | s(bool,'T_0') = s(bool,happ(s(fun(X471,bool),X472),s(X471,sK4(X473,X471)))) | s('type.option.option'(X471),'const.option.NONE_0') = s('type.option.option'(X471),X473)) ) | $spl18),
  inference(superposition,[],[f7821,f651])).
fof(f39855,plain,(
  ( ! [X420,X422,X421,X419] : (s(bool,'T_0') != s(bool,happ(s(fun(X419,bool),X422),s(X419,sK4(X420,X419)))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X419),X420),s(bool,X421),s(fun(X419,bool),X422)))),bool)) | s('type.option.option'(X419),'const.option.NONE_0') = s('type.option.option'(X419),X420)) ) | $spl0),
  inference(superposition,[],[f4952,f651])).
fof(f39879,plain,(
  ( ! [X528,X530,X524,X526,X529,X525,X527] : (s(bool,X528) != s(bool,happ(s(fun(X524,bool),X527),s(X524,sK4(X525,X524)))) | s(bool,X528) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X529),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X524),X525),s(bool,X526),s(fun(X524,bool),X527))),s(fun(X529,bool),X530))) | s('type.option.option'(X524),'const.option.NONE_0') = s('type.option.option'(X524),X525)) ) | $spl18),
  inference(superposition,[],[f23836,f651])).
fof(f41506,plain,(
  ( ! [X191,X194,X192,X193] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X191),X193),s(bool,X194),s(fun(X191,bool),X192)))) | s('type.option.option'(X191),'const.option.NONE_0') = s('type.option.option'(X191),X193)) ) | $spl54),
  inference(subsumption_resolution,[],[f41369,f176])).
fof(f41369,plain,(
  ( ! [X191,X194,X192,X193] : (s(bool,'T_0') = s(bool,'F_0') | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X191),X193),s(bool,X194),s(fun(X191,bool),X192)))) | s('type.option.option'(X191),'const.option.NONE_0') = s('type.option.option'(X191),X193)) ) | $spl54),
  inference(backward_demodulation,[],[f41320,f39669])).
fof(f41514,plain,(
  ( ! [X191,X189,X187,X190,X188] : (p(s(bool,X191)) | s(bool,X191) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X187),X188),s(bool,X189),s(fun(X187,bool),X190))) | s('type.option.option'(X187),'const.option.NONE_0') = s('type.option.option'(X187),X188)) ) | $spl54),
  inference(subsumption_resolution,[],[f41388,f41497])).
fof(f41388,plain,(
  ( ! [X191,X189,X187,X190,X188] : (p(s(bool,'F_0')) | p(s(bool,X191)) | s(bool,X191) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X187),X188),s(bool,X189),s(fun(X187,bool),X190))) | s('type.option.option'(X187),'const.option.NONE_0') = s('type.option.option'(X187),X188)) ) | $spl54),
  inference(backward_demodulation,[],[f41320,f39809])).
fof(f41547,plain,(
  ( ! [X6,X4,X5] : (s(bool,'T_0') = s(bool,sK5(X5,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) ) | $spl54),
  inference(subsumption_resolution,[],[f41546,f41497])).
fof(f41546,plain,(
  ( ! [X6,X4,X5] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,sK5(X5,X4,bool)) | s(bool,X6) = s(bool,happ(s(fun(bool,bool),X4),s(bool,X5))) | s(bool,'T_0') = s(bool,X6)) ) | $spl54),
  inference(forward_demodulation,[],[f36584,f41320])).
fof(f7591,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X75) != s(bool,happ(s(fun(X72,bool),X73),s(X72,X74))) | s(bool,'F_0') = s(bool,X75) | s(X72,X74) = s(X72,sK5(X74,X73,X72))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f7569,f175])).
fof(f7569,plain,(
  ( ! [X74,X72,X75,X73] : (p(s(bool,'F_0')) | s(bool,X75) != s(bool,happ(s(fun(X72,bool),X73),s(X72,X74))) | s(bool,'F_0') = s(bool,X75) | s(X72,X74) = s(X72,sK5(X74,X73,X72))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f7424,f3654])).
fof(f7447,plain,(
  ( ! [X118,X116,X117] : (s(bool,X116) != s(bool,X117) | s(bool,'F_0') = s(bool,X117) | s(bool,X116) = s(bool,X118) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f7017,f176])).
fof(f7017,plain,(
  ( ! [X118,X116,X117] : (s(bool,X116) != s(bool,X117) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X117) | s(bool,X116) = s(bool,X118) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f3772])).
fof(f7430,plain,(
  ( ! [X128,X129] : (s(bool,X128) != s(bool,X129) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X129)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X128)),bool))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f6931,f176])).
fof(f6931,plain,(
  ( ! [X128,X129] : (s(bool,X128) != s(bool,X129) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X129)),bool)) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X128)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4952,f3772])).
fof(f7429,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,X124) != s(bool,X125) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X126),'const.option.NONE_0'),s(bool,X125),s(fun(X126,bool),X127))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X124)),bool))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f6930,f176])).
fof(f6930,plain,(
  ( ! [X127,X125,X126,X124] : (s(bool,X124) != s(bool,X125) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X126),'const.option.NONE_0'),s(bool,X125),s(fun(X126,bool),X127))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X124)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4949,f3772])).
fof(f7033,plain,(
  ( ! [X171,X169,X170] : (s(bool,X169) = s(bool,happ(s(fun(bool,bool),X170),s(bool,X169))) | s(bool,'F_0') = s(bool,sK5('F_0',X170,bool)) | s(bool,X169) = s(bool,X171) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X171)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3772])).
fof(f4758,plain,(
  ( ! [X80,X78,X81,X79,X77] : (s(bool,X80) = s(bool,happ(s(fun(X77,bool),X78),s(X77,X79))) | s(bool,X80) = s(bool,X81) | s(bool,'F_0') = s(bool,X81) | s(X77,X79) = s(X77,sK5(X79,X78,X77))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f4738,f175])).
fof(f4738,plain,(
  ( ! [X80,X78,X81,X79,X77] : (p(s(bool,'F_0')) | s(bool,X80) = s(bool,happ(s(fun(X77,bool),X78),s(X77,X79))) | s(bool,X80) = s(bool,X81) | s(bool,'F_0') = s(bool,X81) | s(X77,X79) = s(X77,sK5(X79,X78,X77))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4340,f3654])).
fof(f4674,plain,(
  ( ! [X125,X123,X126,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,X126) = s(bool,happ(s(fun(X123,bool),X124),s(X123,X125))) | s(X123,X125) = s(X123,sK5(X125,X124,X123))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f153,f3654])).
fof(f4641,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X39),X40),s(bool,X41),s(fun(X39,bool),X42))) | s(fun(X39,bool),X42) = s(fun(X39,bool),sK5(X42,happ(s(fun(bool,fun(fun(X39,bool),bool)),happ(s(fun('type.option.option'(X39),fun(bool,fun(fun(X39,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X39),X40))),s(bool,X41)),fun(X39,bool)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f165])).
fof(f4625,plain,(
  ( ! [X61,X60] : (s(bool,X60) = s(bool,happ(s(fun(bool,bool),X61),s(bool,X60))) | s(bool,'F_0') = s(bool,sK5('F_0',X61,bool)) | s(bool,'T_0') = s(bool,X60)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f118])).
fof(f4623,plain,(
  ( ! [X54,X56,X55] : (s(bool,X54) = s(bool,happ(s(fun(bool,bool),X55),s(bool,X54))) | s(bool,'F_0') = s(bool,sK5('F_0',X55,bool)) | s(bool,X54) = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3511])).
fof(f4562,plain,(
  ( ! [X68,X69] : (s(bool,X68) != s(bool,X69) | s(bool,'T_0') = s(bool,X69) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X68)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f1267])).
fof(f4559,plain,(
  ( ! [X57,X54,X56,X55] : (s(bool,X55) != s(bool,X57) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X55),s(fun(X54,bool),X56)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f162])).
fof(f4536,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s(bool,X65),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66))) | s(bool,'F_0') = s(bool,X67)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f165])).
fof(f4534,plain,(
  ( ! [X57,X54,X56,X55] : (s(bool,X55) != s(bool,X57) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X55),s(fun(X54,bool),X56))) | s(bool,'F_0') = s(bool,X57)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f162])).
fof(f3677,plain,(
  ( ! [X45,X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) | s(bool,X45) != s(bool,X46) | s(bool,'F_0') = s(bool,X45)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3597,f873])).
fof(f3597,plain,(
  ( ! [X45,X46] : (s(bool,X45) != s(bool,X46) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X46))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | s(bool,'F_0') = s(bool,X45)) ) | $spl18),
  inference(superposition,[],[f154,f2767])).
fof(f3662,plain,(
  ( ! [X94,X92,X93] : (s(X94,f(s(bool,'T_0'))) != s(X94,g(s(bool,'T_0'))) | s(fun(bool,X94),X92) = s(fun(bool,X94),X93) | s(bool,'F_0') = s(bool,sK6(X92,X93,X94,bool))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3567,f873])).
fof(f3567,plain,(
  ( ! [X94,X92,X93] : (s(X94,f(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) != s(X94,g(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | s(fun(bool,X94),X92) = s(fun(bool,X94),X93) | s(bool,'F_0') = s(bool,sK6(X92,X93,X94,bool))) ) | $spl18),
  inference(superposition,[],[f163,f2767])).
fof(f3661,plain,(
  ( ! [X90] : (s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90) | s(bool,'F_0') = s(bool,sK4(X90,bool))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3565,f873])).
fof(f3565,plain,(
  ( ! [X90] : (s('type.option.option'(bool),X90) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X90) | s(bool,'F_0') = s(bool,sK4(X90,bool))) ) | $spl18),
  inference(superposition,[],[f145,f2767])).
fof(f3658,plain,(
  ( ! [X78,X76,X77] : (s(bool,'T_0') != s(bool,f(s(X76,sK6(X77,X78,bool,X76)))) | s(fun(X76,bool),X77) = s(fun(X76,bool),X78) | s(bool,'F_0') = s(bool,g(s(X76,sK6(X77,X78,bool,X76))))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3561,f873])).
fof(f3561,plain,(
  ( ! [X78,X76,X77] : (s(bool,f(s(X76,sK6(X77,X78,bool,X76)))) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(fun(X76,bool),X77) = s(fun(X76,bool),X78) | s(bool,'F_0') = s(bool,g(s(X76,sK6(X77,X78,bool,X76))))) ) | $spl18),
  inference(superposition,[],[f163,f2767])).
fof(f3655,plain,(
  ( ! [X47,X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) | s(bool,X46) = s(bool,X47) | s(bool,'F_0') = s(bool,X46)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3550,f873])).
fof(f3550,plain,(
  ( ! [X47,X46] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X47))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | s(bool,X46) = s(bool,X47) | s(bool,'F_0') = s(bool,X46)) ) | $spl18),
  inference(superposition,[],[f153,f2767])).
fof(f3633,plain,(
  ( ! [X10,X9] : (~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f3632,f111])).
fof(f3632,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3528,f873])).
fof(f3528,plain,(
  ( ! [X10,X9] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | ~p(s(bool,X10)) | s(bool,X9) = s(bool,X10) | s(bool,'F_0') = s(bool,X9)) ) | $spl18),
  inference(superposition,[],[f161,f2767])).
fof(f42225,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))),s(bool,X26),s(fun(X24,bool),X27)))) ) | ($spl0 | $spl18 | $spl54)),
  inference(subsumption_resolution,[],[f42224,f176])).
fof(f42224,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))),s(bool,X26),s(fun(X24,bool),X27)))) ) | ($spl0 | $spl18 | $spl54)),
  inference(forward_demodulation,[],[f3621,f42184])).
fof(f42184,plain,(
  ( ! [X45,X43,X42] : (s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X45),s(X42,X43)))) ) | $spl54),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f550,f125,f1426,f1427,f13356,f13354,f13351,f13332,f13308,f12560,f11567,f11565,f11562,f11552,f11524,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36527,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37673,f37676,f37696,f37979,f37765,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39765,f39771,f39773,f39782,f39783,f39786,f39816,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39811,f39809,f39807,f39806,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f1639,f1493,f39897,f39889,f39888,f39887,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39658,f39513,f38588,f38587,f38007,f41320,f41322,f41497,f41500,f41505,f41506,f41507,f41508,f41514,f41547,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9764,f124,f175,f358,f427,f436,f437,f476,f477,f512,f513,f606,f675])).
fof(f38583,plain,(
  ( ! [X161,X159,X162,X160] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X161),'const.option.NONE_0'),s(fun(bool,bool),X160),s(fun(X161,fun(bool,bool)),X162)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X160),s(bool,X159)))) | s(bool,'F_0') = s(bool,X159)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f38518,f27732])).
fof(f38518,plain,(
  ( ! [X161,X159,X162,X160] : (~p(s(bool,happ(s(fun(bool,bool),X160),s(bool,X159)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X161),'const.option.NONE_0'),s(fun(bool,bool),X160),s(fun(X161,fun(bool,bool)),X162)),bool)) | s(bool,'F_0') = s(bool,X159)) ) | $spl18),
  inference(superposition,[],[f510,f2767])).
fof(f36578,plain,(
  ( ! [X72,X71] : (~p(s(bool,happ(s(fun(bool,bool),X72),s(bool,X71)))) | p(s(bool,happ(s(fun(bool,bool),X72),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X72,bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f36525,f155])).
fof(f36525,plain,(
  ( ! [X72,X71] : (~p(s(bool,happ(s(fun(bool,bool),X72),s(bool,X71)))) | p(s(bool,happ(s(fun(bool,bool),X72),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X72,bool)) | s(bool,'F_0') = s(bool,X71)) ) | $spl18),
  inference(superposition,[],[f606,f2767])).
fof(f27736,plain,(
  ( ! [X92,X91] : (s(bool,'T_0') = s(bool,X91) | ~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X92),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X91),s(fun(sK0,bool),sK2)),X92,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f25953,f162])).
fof(f25953,plain,(
  ( ! [X94,X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X92),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X91),s(fun(sK0,bool),sK2)),X92,bool)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X93),'const.option.NONE_0'),s(bool,X91),s(fun(X93,bool),X94)))) ) | $spl0),
  inference(superposition,[],[f612,f950])).
fof(f26094,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X25) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(bool,X25),s(fun(X26,bool),X27))) | s(bool,'F_0') = s(bool,X24)) ) | $spl18),
  inference(superposition,[],[f23836,f2767])).
fof(f26044,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,X25) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X25) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(bool,X24),s(fun(X26,bool),X27))) | s(bool,'F_0') = s(bool,X24)) ) | $spl18),
  inference(superposition,[],[f23836,f2767])).
fof(f11548,plain,(
  ( ! [X85] : (~p(s(bool,happ(s(fun(bool,bool),X85),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X85),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X85,bool))))) ) | $spl0),
  inference(superposition,[],[f612,f873])).
fof(f7445,plain,(
  ( ! [X92,X91] : (s(bool,X91) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X91),s(fun(sK0,bool),sK2))) | s(bool,X91) = s(bool,X92) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X92)),bool))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f7006,f176])).
fof(f7006,plain,(
  ( ! [X92,X91] : (s(bool,X91) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X91),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X91) = s(bool,X92) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X92)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f977,f3772])).
fof(f7427,plain,(
  ( ! [X120,X119] : (s(bool,X119) != s(bool,X120) | s(bool,X120) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X119)),bool))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f6928,f176])).
fof(f6928,plain,(
  ( ! [X120,X119] : (s(bool,X119) != s(bool,X120) | s(bool,X120) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X119)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f2888,f3772])).
fof(f7342,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X40) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X39),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X40)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),'const.option.NONE_0'),s(bool,X39),s(fun(X41,bool),X42)))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f6742,f176])).
fof(f6742,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X40) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X39),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X40)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),'const.option.NONE_0'),s(bool,X39),s(fun(X41,bool),X42)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3772,f950])).
fof(f6982,plain,(
  ( ! [X24,X23,X22] : (s(bool,X23) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X22),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X23) | s(bool,X22) = s(bool,X24) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X24)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3215,f3772])).
fof(f5124,plain,(
  ( ! [X6,X7] : (s(bool,X7) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X7) | s(bool,'T_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f3215,f118])).
fof(f5122,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,X2)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3215,f3511])).
fof(f5121,plain,(
  ( ! [X50] : (s(bool,X50) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X50)),bool))) ) | $spl0),
  inference(superposition,[],[f3215,f1267])).
fof(f5118,plain,(
  ( ! [X39,X41,X40] : (s(bool,X40) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X39),'const.option.NONE_0'),s(bool,X40),s(fun(X39,bool),X41)))) ) | $spl0),
  inference(superposition,[],[f3215,f162])).
fof(f5096,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(fun(sK0,bool),bool),happ(s(fun(bool,fun(fun(sK0,bool),bool)),happ(s(fun('type.option.option'(sK0),fun(bool,fun(fun(sK0,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(sK0),sK1))),s(bool,'F_0'))),s(fun(sK0,bool),sK2))) | $spl0),
  inference(unit_resulting_resolution,[],[f165,f3215])).
fof(f4890,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f2888,f213])).
fof(f4702,plain,(
  ( ! [X71] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X71,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0')))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4630,f873])).
fof(f4630,plain,(
  ( ! [X71] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X71),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X71,bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f873])).
fof(f4701,plain,(
  ( ! [X70,X69] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X70,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'F_0') = s(bool,X69)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4629,f873])).
fof(f4629,plain,(
  ( ! [X70,X69] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X70),s(bool,X69))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X70,bool)) | s(bool,'F_0') = s(bool,X69)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f2767])).
fof(f4339,plain,(
  ( ! [X59,X58] : (s(bool,X58) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X58),s(fun(sK0,bool),sK2))) | s(bool,X58) = s(bool,X59) | s(bool,'F_0') = s(bool,X59)) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f4003,f176])).
fof(f4003,plain,(
  ( ! [X59,X58] : (s(bool,X58) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X58),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X58) = s(bool,X59) | s(bool,'F_0') = s(bool,X59)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f977,f3511])).
fof(f3679,plain,(
  ( ! [X50,X49] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X50,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,X49)))) | s(bool,'F_0') = s(bool,X49)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3599,f873])).
fof(f3599,plain,(
  ( ! [X50,X49] : (~p(s(bool,happ(s(fun(bool,bool),X50),s(bool,X49)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X50,bool)) | s(bool,'F_0') = s(bool,X49)) ) | $spl18),
  inference(superposition,[],[f156,f2767])).
fof(f3215,plain,(
  ( ! [X65] : (s(bool,X65) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X65)) ) | $spl0),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f786,f524,f510,f156,f155,f610,f157,f612,f168,f874,f882,f921,f950,f951,f978,f964,f966,f968,f994,f1002,f1015,f1016,f1041,f1064,f1098,f1099,f1074,f1100,f1085,f1086,f1088,f1111,f1091,f1128,f1129,f1130,f1153,f1154,f1251,f1193,f1195,f1254,f1257,f1259,f1220,f1260,f1262,f1263,f1267,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1562,f1584,f1586,f1587,f1964,f1965,f1966,f1967,f1968,f1629,f1631,f1633,f1639,f1643,f1644,f1645,f2000,f2002,f2061,f2038,f2080,f2042,f2100,f2108,f2109,f2111,f2119,f2752,f2728,f2713,f2707,f2698,f2697,f2288,f2397,f2399,f2652,f2643,f2642,f2888,f2468,f2478,f2482,f2485,f2490,f2516,f2916,f2630,f2919,f2920,f2629,f2921,f2924,f2568,f2570,f2580,f2584,f2587,f2588,f2616,f560,f1003,f1634,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275])).
fof(f2924,plain,(
  ( ! [X94,X95,X93,X96] : (s(X93,X95) = s(X93,sK5(X95,X94,X93)) | s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X96) = s(bool,happ(s(fun(X93,bool),X94),s(X93,X95)))) ) | $spl0),
  inference(subsumption_resolution,[],[f2563,f111])).
fof(f2563,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,'T_0')) | s(X93,X95) = s(X93,sK5(X95,X94,X93)) | s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X96) = s(bool,happ(s(fun(X93,bool),X94),s(X93,X95)))) ) | $spl0),
  inference(superposition,[],[f156,f1809])).
fof(f2919,plain,(
  ( ! [X47,X48,X46] : (s(bool,X46) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X47),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X47) | s(bool,X48) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X46) = s(bool,X48)) ) | $spl0),
  inference(subsumption_resolution,[],[f2543,f111])).
fof(f2543,plain,(
  ( ! [X47,X48,X46] : (~p(s(bool,'T_0')) | s(bool,X46) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X47),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X47) | s(bool,X48) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X46) = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f978,f1809])).
fof(f2916,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | $spl0),
  inference(subsumption_resolution,[],[f2529,f111])).
fof(f2529,plain,(
  ( ! [X6,X7] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f124,f1809])).
fof(f2888,plain,(
  ( ! [X79] : (s(bool,'T_0') != s(bool,X79) | s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(subsumption_resolution,[],[f2449,f176])).
fof(f2449,plain,(
  ( ! [X79] : (s(bool,'T_0') != s(bool,X79) | s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f176,f1809])).
fof(f2752,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X23),s(fun(sK0,bool),sK2))) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,X23) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(subsumption_resolution,[],[f2168,f176])).
fof(f2168,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X23),s(fun(sK0,bool),sK2))) | s(bool,X24) = s(bool,X25) | s(bool,'T_0') = s(bool,X25) | s(bool,X23) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f1809,f1809])).
fof(f2587,plain,(
  ( ! [X177,X180,X178,X179] : (s(X179,f(s(bool,'T_0'))) != s(X179,g(s(bool,'T_0'))) | s(fun(bool,X179),X177) = s(fun(bool,X179),X178) | s(bool,X180) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X180) = s(bool,sK6(X177,X178,X179,bool))) ) | $spl0),
  inference(superposition,[],[f163,f1809])).
fof(f2584,plain,(
  ( ! [X171,X170] : (s('type.option.option'(bool),X170) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170) | s(bool,X171) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X171) = s(bool,sK4(X170,bool))) ) | $spl0),
  inference(superposition,[],[f145,f1809])).
fof(f2580,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,'T_0') != s(bool,f(s(X152,sK6(X153,X154,bool,X152)))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | $spl0),
  inference(superposition,[],[f163,f1809])).
fof(f2570,plain,(
  ( ! [X114,X115,X113] : (s(bool,'T_0') != s(bool,X114) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X113) = s(bool,X115)) ) | $spl0),
  inference(superposition,[],[f154,f1809])).
fof(f2568,plain,(
  ( ! [X109,X107,X108] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X107) = s(bool,X108) | s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X107) = s(bool,X109)) ) | $spl0),
  inference(superposition,[],[f153,f1809])).
fof(f2516,plain,(
  ( ! [X80,X81,X79] : (s(bool,X79) != s(bool,X80) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X81) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X79) = s(bool,X81)) ) | $spl0),
  inference(superposition,[],[f154,f1809])).
fof(f2490,plain,(
  ( ! [X17,X15,X16] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X16))) | s(bool,X16) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X17) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X15) = s(bool,X17)) ) | $spl0),
  inference(superposition,[],[f894,f1809])).
fof(f2485,plain,(
  ( ! [X194,X192,X195,X193] : (s(X194,f(s(bool,X195))) != s(X194,g(s(bool,X195))) | s(fun(bool,X194),X192) = s(fun(bool,X194),X193) | s(bool,X195) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK6(X192,X193,X194,bool))) ) | $spl0),
  inference(superposition,[],[f163,f1809])).
fof(f2482,plain,(
  ( ! [X185,X186] : (s('type.option.option'(bool),X185) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X186))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X185) | s(bool,X186) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4(X185,bool))) ) | $spl0),
  inference(superposition,[],[f145,f1809])).
fof(f2478,plain,(
  ( ! [X167,X169,X170,X168] : (s(bool,X170) != s(bool,f(s(X167,sK6(X168,X169,bool,X167)))) | s(fun(X167,bool),X168) = s(fun(X167,bool),X169) | s(bool,X170) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,g(s(X167,sK6(X168,X169,bool,X167))))) ) | $spl0),
  inference(superposition,[],[f163,f1809])).
fof(f2468,plain,(
  ( ! [X127,X128,X129] : (s(bool,X128) != s(bool,X129) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X129))) | s(bool,X128) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X127)) ) | $spl0),
  inference(superposition,[],[f154,f1809])).
fof(f2399,plain,(
  ( ! [X127,X128,X129] : (s(bool,X128) != s(bool,X129) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X127))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X129))) | s(bool,X127) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X128)) ) | $spl0),
  inference(superposition,[],[f154,f1809])).
fof(f2397,plain,(
  ( ! [X123,X121,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,X121) = s(bool,X123) | s(bool,X121) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X122)) ) | $spl0),
  inference(superposition,[],[f153,f1809])).
fof(f2288,plain,(
  ( ! [X103,X102,X104] : (s(bool,X103) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X102) = s(bool,X104) | s(bool,'T_0') = s(bool,X104)) ) | $spl0),
  inference(superposition,[],[f154,f1809])).
fof(f2249,plain,(
  ( ! [X47,X48] : (s(bool,'T_0') = s(bool,X47) | s(bool,X48) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X48) = s(bool,sK4('const.option.SOME_1'(s(bool,X47)),bool))) ) | $spl0),
  inference(superposition,[],[f1809,f1267])).
fof(f2246,plain,(
  ( ! [X35,X33,X36,X34] : (s(bool,'T_0') = s(bool,X34) | s(bool,X36) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X36) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X33),'const.option.NONE_0'),s(bool,X34),s(fun(X33,bool),X35)))) ) | $spl0),
  inference(superposition,[],[f1809,f162])).
fof(f2229,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f1809,f213])).
fof(f2228,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f1809,f1809])).
fof(f2227,plain,(
  ( ! [X64,X63] : (s(bool,X63) = s(bool,X64) | s(bool,X64) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X63)),bool))) ) | $spl0),
  inference(superposition,[],[f1809,f1267])).
fof(f2224,plain,(
  ( ! [X52,X50,X51,X49] : (s(bool,X50) = s(bool,X52) | s(bool,X52) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X49),'const.option.NONE_0'),s(bool,X50),s(fun(X49,bool),X51)))) ) | $spl0),
  inference(superposition,[],[f1809,f162])).
fof(f2159,plain,(
  ( ! [X54,X55] : (s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X55) = s(bool,sK4('const.option.SOME_1'(s(bool,X54)),bool)) | s(bool,'T_0') = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f1809,f1267])).
fof(f2156,plain,(
  ( ! [X43,X41,X42,X40] : (s(bool,X41) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X43) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X41),s(fun(X40,bool),X42))) | s(bool,'T_0') = s(bool,X43)) ) | $spl0),
  inference(superposition,[],[f1809,f162])).
fof(f2038,plain,(
  ( ! [X77] : (~p(s(bool,happ(s(fun(bool,bool),X77),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),sK4('const.option.SOME_1'(s(fun(bool,bool),X77)),fun(bool,bool)),bool))) ) | $spl0),
  inference(superposition,[],[f921,f1267])).
fof(f1970,plain,(
  ( ! [X87,X86] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X86,bool)) | s(bool,X87) = s(bool,happ(s(fun(bool,bool),X86),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X87)) ) | $spl0),
  inference(subsumption_resolution,[],[f1627,f111])).
fof(f1627,plain,(
  ( ! [X87,X86] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X86,bool)) | s(bool,X87) = s(bool,happ(s(fun(bool,bool),X86),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X87)) ) | $spl0),
  inference(superposition,[],[f921,f213])).
fof(f1966,plain,(
  ( ! [X39,X38,X40] : (s(bool,X38) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X39),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X39) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl0),
  inference(subsumption_resolution,[],[f1607,f111])).
fof(f1607,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | s(bool,X38) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X39),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X39) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl0),
  inference(superposition,[],[f978,f213])).
fof(f1809,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f1603])).
fof(f1603,plain,(
  ( ! [X26,X27] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl0),
  inference(superposition,[],[f894,f213])).
fof(f1562,plain,(
  ( ! [X12,X10,X11] : (~p(s(bool,happ(s(fun(bool,bool),X11),s(bool,X10)))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X11,bool)) | s(bool,X10) = s(bool,X12) | s(bool,'T_0') = s(bool,X12)) ) | $spl0),
  inference(superposition,[],[f921,f213])).
fof(f1561,plain,(
  ( ! [X8,X7,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))) | s(bool,X8) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X7) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f894,f213])).
fof(f1193,plain,(
  ( ! [X66,X64,X65,X63] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X64))) | s(bool,X64) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X63),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,X63),s(fun(X65,bool),X66)))) ) | $spl0),
  inference(superposition,[],[f153,f950])).
fof(f1130,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),'const.option.option_CASE_3'(s('type.option.option'(X7),X8),s(fun(bool,bool),X9),s(fun(X7,fun(bool,bool)),X10))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),happ(s(fun(fun(X7,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X7,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X7),fun(fun(bool,bool),fun(fun(X7,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X7),X8))),s(fun(bool,bool),X9))),s(fun(X7,fun(bool,bool)),X10)),bool))) ) | $spl0),
  inference(superposition,[],[f921,f165])).
fof(f1129,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),happ(s(fun(X3,fun(bool,bool)),X6),s(X3,X4))),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.SOME_1'(s(X3,X4))),s(fun(bool,bool),X5),s(fun(X3,fun(bool,bool)),X6)),bool))) ) | $spl0),
  inference(superposition,[],[f921,f164])).
fof(f1128,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(bool,bool),X1),s(fun(X0,fun(bool,bool)),X2)),bool))) ) | $spl0),
  inference(superposition,[],[f921,f162])).
fof(f1015,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s(bool,X4),s(fun(X3,bool),X5)))) ) | $spl0),
  inference(superposition,[],[f994,f162])).
fof(f964,plain,(
  ( ! [X14,X15] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,X15) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X14),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X14)) ) | $spl0),
  inference(superposition,[],[f153,f882])).
fof(f921,plain,(
  ( ! [X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X15,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f916,f873])).
fof(f916,plain,(
  ( ! [X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X15,bool))) ) | $spl0),
  inference(superposition,[],[f156,f873])).
fof(f894,plain,(
  ( ! [X3] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3))) | s(bool,X3) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f153,f873])).
fof(f10156,plain,(
  ( ! [X90,X88,X89] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.NONE_0'),s(bool,sK4(X88,bool)),s(fun(X89,bool),X90))) | s('type.option.option'(bool),X88) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X88)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f10122])).
fof(f10122,plain,(
  ( ! [X90,X88,X89] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.NONE_0'),s(bool,sK4(X88,bool)),s(fun(X89,bool),X90))) | s('type.option.option'(bool),X88) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X88)) ) | $spl0),
  inference(superposition,[],[f4949,f550])).
fof(f10529,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | ($spl0 | $spl18)),
  inference(condensation,[],[f10528])).
fof(f10528,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) != s(bool,sK4('const.option.SOME_1'(s(bool,X114)),bool)) | s(bool,'T_0') = s(bool,X115) | s(bool,'F_0') = s(bool,X113) | s(bool,'F_0') = s(bool,X114)) ) | ($spl0 | $spl18)),
  inference(duplicate_literal_removal,[],[f10336])).
fof(f10336,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) != s(bool,sK4('const.option.SOME_1'(s(bool,X114)),bool)) | s(bool,'T_0') = s(bool,X115) | s(bool,'F_0') = s(bool,X113) | s(bool,'F_0') = s(bool,X114) | s(bool,'F_0') = s(bool,X113)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f3826])).
fof(f11260,plain,(
  ( ! [X35,X34] : (s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X34) = s(bool,sK4(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35) | s(bool,'F_0') = s(bool,X34)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f11212,f873])).
fof(f11212,plain,(
  ( ! [X35,X34] : (s('type.option.option'(bool),X35) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | s(bool,X34) = s(bool,sK4(X35,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X35) | s(bool,'F_0') = s(bool,X34)) ) | $spl18),
  inference(superposition,[],[f551,f2767])).
fof(f12682,plain,(
  ( ! [X144,X142,X143,X141] : (s(bool,X142) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X143),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X143,bool),X144))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X141))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142))) | s(bool,'F_0') = s(bool,X141)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f12584,f873])).
fof(f12584,plain,(
  ( ! [X144,X142,X143,X141] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X141))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X142))) | s(bool,X142) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X143),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))),s(fun(X143,bool),X144))) | s(bool,'F_0') = s(bool,X141)) ) | $spl18),
  inference(superposition,[],[f442,f2767])).
fof(f12700,plain,(
  ( ! [X54,X52,X55,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,X52) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X53),s(fun(X54,bool),X55))) | s(bool,'F_0') = s(bool,X52)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f12621,f873])).
fof(f12621,plain,(
  ( ! [X54,X52,X55,X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | s(bool,X52) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(bool,X53),s(fun(X54,bool),X55))) | s(bool,'F_0') = s(bool,X52)) ) | $spl18),
  inference(superposition,[],[f442,f2767])).
fof(f13524,plain,(
  ( ! [X111,X112,X110,X113] : (s(bool,X111) != s(bool,X113) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X113)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X110),'const.option.NONE_0'),s(bool,X111),s(fun(X110,bool),X112)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4537,f162])).
fof(f13532,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool))) ) | ($spl0 | $spl18)),
  inference(condensation,[],[f13531])).
fof(f13531,plain,(
  ( ! [X39,X37,X38] : (s(bool,X39) != s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X38)) ) | ($spl0 | $spl18)),
  inference(duplicate_literal_removal,[],[f13493])).
fof(f13493,plain,(
  ( ! [X39,X37,X38] : (s(bool,X39) != s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X37) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4537,f3826])).
fof(f41584,plain,(
  ( ! [X113] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X113)),bool)) | s(bool,'F_0') != s(bool,X113)) ) | ($spl0 | $spl18 | $spl54)),
  inference(global_subsumption,[],[f41583,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f7677,f7320,f550,f125,f23835,f23836,f26040,f26041,f26058,f26090,f26091,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12696,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39612,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39765,f39771,f39773,f39782,f39783,f39786,f39798,f39816,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f39998,f39973,f39953,f39931,f39926,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38596,f38595,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f27735,f26200,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23791,f23703,f23700,f23638,f23637,f23635,f23584])).
fof(f41583,plain,(
  ( ! [X111,X109,X112,X110,X113] : (s(bool,'F_0') != s(bool,X113) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.SOME_1'(s(X109,X110))),s(bool,X111),s(fun(X109,bool),X112))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X113)),bool))) ) | ($spl0 | $spl18 | $spl54)),
  inference(forward_demodulation,[],[f23363,f41320])).
fof(f23364,plain,(
  ( ! [X118,X116,X114,X117,X115] : (s(bool,X118) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X114),X115),s(bool,X116),s(fun(X114,bool),X117))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X114,bool),bool),happ(s(fun(bool,fun(fun(X114,bool),bool)),happ(s(fun('type.option.option'(X114),fun(bool,fun(fun(X114,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X114),X115))),s(bool,X116))),s(fun(X114,bool),X117))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4562,f165])).
fof(f23838,plain,(
  ( ! [X118,X116,X120,X119,X117] : (s(bool,X120) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),X117),s(bool,X118),s(fun(X116,bool),X119))) | s(bool,X120) = s(bool,happ(s(fun(fun(X116,bool),bool),happ(s(fun(bool,fun(fun(X116,bool),bool)),happ(s(fun('type.option.option'(X116),fun(bool,fun(fun(X116,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X116),X117))),s(bool,X118))),s(fun(X116,bool),X119))) | s(bool,'F_0') = s(bool,X120)) ) | $spl18),
  inference(forward_demodulation,[],[f23747,f1267])).
fof(f23747,plain,(
  ( ! [X118,X116,X120,X119,X117] : (s(bool,X120) != s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),X117),s(bool,X118),s(fun(X116,bool),X119)))),bool)) | s(bool,X120) = s(bool,happ(s(fun(fun(X116,bool),bool),happ(s(fun(bool,fun(fun(X116,bool),bool)),happ(s(fun('type.option.option'(X116),fun(bool,fun(fun(X116,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X116),X117))),s(bool,X118))),s(fun(X116,bool),X119))) | s(bool,'F_0') = s(bool,X120)) ) | $spl18),
  inference(superposition,[],[f7171,f165])).
fof(f23943,plain,(
  ( ! [X103,X105,X102,X104] : (s(bool,X103) != s(bool,sK4('const.option.SOME_1'(s(bool,X105)),bool)) | s(bool,'F_0') = s(bool,X105) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.NONE_0'),s(bool,X103),s(fun(X102,bool),X104)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f10529,f162])).
fof(f23945,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,sK4('const.option.SOME_1'(s(bool,X115)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),X112),s(bool,X113),s(fun(X111,bool),X114))) | s(bool,'F_0') = s(bool,X115) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X111,bool),bool),happ(s(fun(bool,fun(fun(X111,bool),bool)),happ(s(fun('type.option.option'(X111),fun(bool,fun(fun(X111,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X111),X112))),s(bool,X113))),s(fun(X111,bool),X114)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f10529,f165])).
fof(f25629,plain,(
  ( ! [X114,X112,X115,X113] : (s(bool,X113) != s(bool,sK4('const.option.SOME_1'(s(bool,X115)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X112),'const.option.NONE_0'),s(bool,X113),s(fun(X112,bool),X114))) | s(bool,'T_0') = s(bool,X115)) ) | $spl18),
  inference(superposition,[],[f7634,f162])).
fof(f25724,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) != s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,X1)) ) | $spl18),
  inference(condensation,[],[f25723])).
fof(f25723,plain,(
  ( ! [X39,X37,X38] : (s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) != s(bool,sK4('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X38)) ) | $spl18),
  inference(duplicate_literal_removal,[],[f25602])).
fof(f25602,plain,(
  ( ! [X39,X37,X38] : (s(bool,sK4('const.option.SOME_1'(s(bool,X38)),bool)) != s(bool,sK4('const.option.SOME_1'(s(bool,X39)),bool)) | s(bool,'F_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X39) | s(bool,'F_0') = s(bool,X38) | s(bool,'F_0') = s(bool,X37)) ) | $spl18),
  inference(superposition,[],[f7634,f3826])).
fof(f25808,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X1),s(fun(X2,bool),X3))) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X4)),bool))) ) | $spl18),
  inference(superposition,[],[f7677,f3772])).
fof(f25809,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(bool,X5) != s(bool,X6) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X7),'const.option.NONE_0'),s(bool,X6),s(fun(X7,bool),X8))) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl18),
  inference(superposition,[],[f7677,f3511])).
fof(f26039,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X0),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f23836,f118])).
fof(f26045,plain,(
  ( ! [X30,X28,X31,X29,X32] : (s(bool,'F_0') != s(bool,X29) | s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X28),s(fun(X30,bool),X31))) | s(bool,X28) = s(bool,X32) | s(bool,'F_0') = s(bool,X32)) ) | $spl18),
  inference(superposition,[],[f23836,f3511])).
fof(f26046,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s(bool,X34) != s(bool,X35) | s(bool,X35) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.NONE_0'),s(bool,X33),s(fun(X36,bool),X37))) | s(bool,'F_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) ) | $spl18),
  inference(superposition,[],[f23836,f3511])).
fof(f26049,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X49) != s(bool,X50) | s(bool,X50) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X51),'const.option.NONE_0'),s(bool,X48),s(fun(X51,bool),X52))) | s(bool,'F_0') = s(bool,X48) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool))) ) | $spl18),
  inference(superposition,[],[f23836,f3772])).
fof(f26051,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,'F_0') != s(bool,X59) | s(bool,X59) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X58),s(fun(X60,bool),X61))) | s(bool,X58) = s(bool,X62) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl18),
  inference(superposition,[],[f23836,f3772])).
fof(f26052,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X65) != s(bool,sK4('const.option.SOME_1'(s(bool,X64)),bool)) | s(bool,X65) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.NONE_0'),s(bool,X63),s(fun(X66,bool),X67))) | s(bool,'F_0') = s(bool,X64) | s(bool,'F_0') = s(bool,X63)) ) | $spl18),
  inference(superposition,[],[f23836,f3826])).
fof(f26060,plain,(
  ( ! [X101,X99,X102,X100,X98] : (s(bool,X98) != s(bool,X99) | s(bool,X99) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X100),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X100,bool),X101))) | s(bool,X98) = s(bool,X102) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X102)),bool))) ) | $spl18),
  inference(superposition,[],[f23836,f3772])).
fof(f26061,plain,(
  ( ! [X103,X107,X105,X106,X104] : (s(bool,X103) != s(bool,X104) | s(bool,X104) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X105),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X105,bool),X106))) | s(bool,X103) = s(bool,X107) | s(bool,'F_0') = s(bool,X107)) ) | $spl18),
  inference(superposition,[],[f23836,f3511])).
fof(f26063,plain,(
  ( ! [X116,X114,X115,X113] : (s(bool,X113) != s(bool,X114) | s(bool,X114) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X115),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X115,bool),X116))) | s(bool,'T_0') = s(bool,X113)) ) | $spl18),
  inference(superposition,[],[f23836,f118])).
fof(f26084,plain,(
  ( ! [X208,X206,X207,X205] : (s(bool,'T_0') != s(bool,X206) | s(bool,X206) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X207),'const.option.NONE_0'),s(bool,sK4(X205,bool)),s(fun(X207,bool),X208))) | s('type.option.option'(bool),X205) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X205)) ) | $spl18),
  inference(superposition,[],[f23836,f550])).
fof(f26089,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X1) | s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X1),s(fun(X2,bool),X3))) | s(bool,'T_0') = s(bool,X0)) ) | $spl18),
  inference(superposition,[],[f23836,f118])).
fof(f26095,plain,(
  ( ! [X30,X28,X31,X29,X32] : (s(bool,'F_0') != s(bool,X29) | s(bool,X28) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X29),s(fun(X30,bool),X31))) | s(bool,X28) = s(bool,X32) | s(bool,'F_0') = s(bool,X32)) ) | $spl18),
  inference(superposition,[],[f23836,f3511])).
fof(f26096,plain,(
  ( ! [X37,X35,X33,X36,X34] : (s(bool,X34) != s(bool,X35) | s(bool,X33) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X36),'const.option.NONE_0'),s(bool,X35),s(fun(X36,bool),X37))) | s(bool,'F_0') = s(bool,X34) | s(bool,'F_0') = s(bool,X33)) ) | $spl18),
  inference(superposition,[],[f23836,f3511])).
fof(f26099,plain,(
  ( ! [X52,X50,X48,X51,X49] : (s(bool,X49) != s(bool,X50) | s(bool,X48) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X51),'const.option.NONE_0'),s(bool,X50),s(fun(X51,bool),X52))) | s(bool,'F_0') = s(bool,X48) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool))) ) | $spl18),
  inference(superposition,[],[f23836,f3772])).
fof(f26100,plain,(
  ( ! [X57,X54,X56,X55,X53] : (s(bool,X54) != s(bool,X55) | s(bool,X53) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X55),s(fun(X56,bool),X57))) | s(bool,'F_0') = s(bool,X54) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X53)),bool))) ) | $spl18),
  inference(superposition,[],[f23836,f3772])).
fof(f26101,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,'F_0') != s(bool,X59) | s(bool,X58) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,X59),s(fun(X60,bool),X61))) | s(bool,X58) = s(bool,X62) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl18),
  inference(superposition,[],[f23836,f3772])).
fof(f26102,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X65) != s(bool,sK4('const.option.SOME_1'(s(bool,X64)),bool)) | s(bool,X63) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.NONE_0'),s(bool,X65),s(fun(X66,bool),X67))) | s(bool,'F_0') = s(bool,X64) | s(bool,'F_0') = s(bool,X63)) ) | $spl18),
  inference(superposition,[],[f23836,f3826])).
fof(f26122,plain,(
  ( ! [X154,X152,X151,X149,X153,X150] : (s(bool,'T_0') != s(bool,X152) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X149),'const.option.NONE_0'),s(bool,X150),s(fun(X149,bool),X151))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X153),'const.option.NONE_0'),s(bool,X152),s(fun(X153,bool),X154))) | s(bool,'F_0') = s(bool,X150)) ) | $spl18),
  inference(superposition,[],[f23836,f358])).
fof(f26126,plain,(
  ( ! [X175,X173,X176,X174,X172] : (s(bool,'F_0') != s(bool,X173) | s(bool,sK4('const.option.SOME_1'(s(bool,X172)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X174),'const.option.NONE_0'),s(bool,X173),s(fun(X174,bool),X175))) | s(bool,X172) = s(bool,X176) | s(bool,'F_0') = s(bool,X176)) ) | $spl18),
  inference(superposition,[],[f23836,f3772])).
fof(f26134,plain,(
  ( ! [X208,X206,X207,X205] : (s(bool,'T_0') != s(bool,X206) | s(bool,sK4(X205,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X207),'const.option.NONE_0'),s(bool,X206),s(fun(X207,bool),X208))) | s('type.option.option'(bool),X205) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X205)) ) | $spl18),
  inference(superposition,[],[f23836,f550])).
fof(f26158,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,'T_0') != s(bool,X77) | s(bool,X77) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X78),'const.option.NONE_0'),s(bool,X76),s(fun(X78,bool),X79))) | s(bool,'F_0') = s(bool,X76)) ) | $spl18),
  inference(forward_demodulation,[],[f26055,f1267])).
fof(f26055,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,X77) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,X77) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X78),'const.option.NONE_0'),s(bool,X76),s(fun(X78,bool),X79))) | s(bool,'F_0') = s(bool,X76)) ) | $spl18),
  inference(superposition,[],[f23836,f10594])).
fof(f26165,plain,(
  ( ! [X138,X136,X135,X137] : (s(bool,X136) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X137,bool),X138))) | s(bool,X135) != s(bool,X136) | s(bool,'F_0') = s(bool,X135)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f26068,f873])).
fof(f26068,plain,(
  ( ! [X138,X136,X135,X137] : (s(bool,X135) != s(bool,X136) | s(bool,X136) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X137),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))),s(fun(X137,bool),X138))) | s(bool,'F_0') = s(bool,X135)) ) | $spl18),
  inference(superposition,[],[f23836,f2767])).
fof(f26177,plain,(
  ( ! [X191,X189,X192,X190] : (s(bool,X190) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X191),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X191,bool),X192))) | s(bool,X189) != s(bool,X190) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X189)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f26080,f1267])).
fof(f26080,plain,(
  ( ! [X191,X189,X192,X190] : (s(bool,X189) != s(bool,X190) | s(bool,X190) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X191),'const.option.NONE_0'),s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)),s(fun(X191,bool),X192))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X189)),bool))) ) | $spl18),
  inference(superposition,[],[f23836,f11057])).
fof(f26200,plain,(
  ( ! [X182,X184,X183,X181] : (s(bool,'T_0') = s(bool,X181) | s(bool,'F_0') != s(bool,X182) | s(bool,sK4('const.option.SOME_1'(s(bool,X181)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X183),'const.option.NONE_0'),s(bool,X182),s(fun(X183,bool),X184)))) ) | $spl18),
  inference(forward_demodulation,[],[f26128,f1267])).
fof(f26128,plain,(
  ( ! [X182,X184,X183,X181] : (s(bool,'F_0') != s(bool,X182) | s(bool,sK4('const.option.SOME_1'(s(bool,X181)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X183),'const.option.NONE_0'),s(bool,X182),s(fun(X183,bool),X184))) | s(bool,X181) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f23836,f11057])).
fof(f27735,plain,(
  ( ! [X36] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X36)),bool)) | s(bool,'T_0') = s(bool,X36)) ) | $spl18),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f13273,f13194,f12713,f12705,f12696,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11436,f11397,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11188,f11057,f10999,f10915,f10734,f10602,f10594,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5068,f5067,f5064,f5031,f4881,f4876,f4834,f4787,f4478,f4475,f4340,f4076,f4073,f4060,f4058,f4011,f3986,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1030,f1027,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f12342,f6883,f9764,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10141,f10057,f10051,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f8870,f9681,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11530,f11524,f8872,f8869,f8046,f7486,f4062,f512,f13351,f13309,f11562,f11552,f11525,f10144,f4884,f1634,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f1111,f1091,f11589,f13302,f786,f11521,f1098,f11522,f13415,f13303,f13300,f12287,f11604,f11590,f11587,f11523,f11520,f11437,f10227,f8593,f7678,f6748,f6712,f5309,f5281,f5065,f4788,f4476,f4358,f3824,f3770,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4789,f4477,f3825,f3771,f1427,f1398,f1100,f1099,f1074,f1062,f12709,f12657,f12652,f12649,f12645,f11235,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f1639,f1493,f1031,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f25724,f25629,f25630,f25631,f25808,f25809,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f27731,f25698])).
fof(f37302,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,f(s(bool,X0))) != s(X1,g(s(bool,X0))) | s(fun(bool,X1),X2) = s(fun(bool,X1),X3) | s(bool,'T_0') = s(bool,sK6(X2,X3,X1,bool)) | s(bool,X0) = s(bool,X4) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X4)),bool))) ) | $spl18),
  inference(superposition,[],[f1030,f3772])).
fof(f37303,plain,(
  ( ! [X6,X8,X7,X5,X9] : (s(X6,f(s(bool,X5))) != s(X6,g(s(bool,X5))) | s(fun(bool,X6),X7) = s(fun(bool,X6),X8) | s(bool,'T_0') = s(bool,sK6(X7,X8,X6,bool)) | s(bool,X5) = s(bool,X9) | s(bool,'F_0') = s(bool,X9)) ) | $spl18),
  inference(superposition,[],[f1030,f3511])).
fof(f41522,plain,(
  ( ! [X492,X488,X489] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X492)),bool)) | s(bool,'F_0') = s(bool,X492) | s('type.option.option'(X488),'const.option.NONE_0') = s('type.option.option'(X488),X489)) ) | ($spl0 | $spl18 | $spl54)),
  inference(subsumption_resolution,[],[f41403,f41505])).
fof(f41403,plain,(
  ( ! [X492,X488,X490,X489,X491] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X492)),bool)) | s(bool,'F_0') = s(bool,X492) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X488),X489),s(bool,X490),s(fun(X488,bool),X491))) | s('type.option.option'(X488),'const.option.NONE_0') = s('type.option.option'(X488),X489)) ) | ($spl0 | $spl18 | $spl54)),
  inference(backward_demodulation,[],[f41320,f39871])).
fof(f41520,plain,(
  ( ! [X459,X460] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(X459),'const.option.NONE_0') = s('type.option.option'(X459),X460)) ) | ($spl18 | $spl54)),
  inference(subsumption_resolution,[],[f41401,f41505])).
fof(f41401,plain,(
  ( ! [X461,X459,X460,X462] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X459),X460),s(bool,X461),s(fun(X459,bool),X462))) | s('type.option.option'(X459),'const.option.NONE_0') = s('type.option.option'(X459),X460)) ) | ($spl18 | $spl54)),
  inference(backward_demodulation,[],[f41320,f39864])).
fof(f41519,plain,(
  ( ! [X437] : (s(bool,X437) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X437)) ) | ($spl0 | $spl18 | $spl54)),
  inference(global_subsumption,[],[f41518,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f7677,f7320,f550,f125,f23835,f23836,f26040,f26041,f26058,f26090,f26091,f27731,f25698,f27735,f1426,f1427,f26137,f26136,f26200,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25809,f25808,f25724,f25631,f25630,f25629,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12696,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39612,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39765,f39771,f39773,f39782,f39783,f39786,f39798,f39816,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f39998,f39973,f39953,f39931,f39926,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38596,f38595,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007])).
fof(f41518,plain,(
  ( ! [X434,X437,X433] : (s(bool,X437) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X437) | s('type.option.option'(X433),'const.option.NONE_0') = s('type.option.option'(X433),X434)) ) | ($spl0 | $spl18 | $spl54)),
  inference(subsumption_resolution,[],[f41399,f41513])).
fof(f41399,plain,(
  ( ! [X436,X434,X437,X433,X435] : (s(bool,X437) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X437) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X433),X434),s(bool,X435),s(fun(X433,bool),X436))) | s(bool,'F_0') = s(bool,X437) | s('type.option.option'(X433),'const.option.NONE_0') = s('type.option.option'(X433),X434)) ) | ($spl18 | $spl54)),
  inference(backward_demodulation,[],[f41320,f39858])).
fof(f41507,plain,(
  ( ! [X199,X203,X201] : (s(bool,'F_0') = s(bool,X203) | p(s(bool,X203)) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) ) | $spl54),
  inference(subsumption_resolution,[],[f41371,f41506])).
fof(f41371,plain,(
  ( ! [X202,X200,X199,X203,X201] : (s(bool,'F_0') = s(bool,X203) | p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X199),X201),s(bool,X202),s(fun(X199,bool),X200)))) | p(s(bool,X203)) | s('type.option.option'(X199),'const.option.NONE_0') = s('type.option.option'(X199),X201)) ) | $spl54),
  inference(backward_demodulation,[],[f41320,f39671])).
fof(f41505,plain,(
  ( ! [X189,X187,X190,X188] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X187),X189),s(bool,X190),s(fun(X187,bool),X188))) | s('type.option.option'(X187),'const.option.NONE_0') = s('type.option.option'(X187),X189)) ) | $spl54),
  inference(subsumption_resolution,[],[f41368,f41497])).
fof(f41368,plain,(
  ( ! [X189,X187,X190,X188] : (p(s(bool,'F_0')) | s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X187),X189),s(bool,X190),s(fun(X187,bool),X188))) | s('type.option.option'(X187),'const.option.NONE_0') = s('type.option.option'(X187),X189)) ) | $spl54),
  inference(backward_demodulation,[],[f41320,f39668])).
fof(f41367,plain,(
  ( ! [X101,X99,X97,X100,X98] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X101)),bool)) | s('type.option.option'(X97),'const.option.NONE_0') = s('type.option.option'(X97),X98) | s(bool,'F_0') = s(bool,X101) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),X98),s(bool,X99),s(fun(X97,bool),X100)))) ) | ($spl18 | $spl54)),
  inference(backward_demodulation,[],[f41320,f39632])).
fof(f41500,plain,(
  ( ! [X167,X169,X166,X170,X168] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X166),X168),s(bool,X169),s(fun(X166,bool),X167)))) | s(X166,X170) != s(X166,sK4(X168,X166)) | s('type.option.option'(X166),'const.option.NONE_0') = s('type.option.option'(X166),X168)) ) | $spl54),
  inference(subsumption_resolution,[],[f41349,f41497])).
fof(f41349,plain,(
  ( ! [X167,X169,X166,X170,X168] : (p(s(bool,'F_0')) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X166),X168),s(bool,X169),s(fun(X166,bool),X167)))) | s(X166,X170) != s(X166,sK4(X168,X166)) | s('type.option.option'(X166),'const.option.NONE_0') = s('type.option.option'(X166),X168)) ) | $spl54),
  inference(backward_demodulation,[],[f41320,f39665])).
fof(f41497,plain,(
  ~p(s(bool,'F_0')) | $spl54),
  inference(global_subsumption,[],[f41322,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f550,f125,f1426,f1427,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36527,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37673,f37676,f37696,f37979,f37765,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39765,f39771,f39773,f39782,f39783,f39786,f39816,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39811,f39809,f39807,f39806,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f1639,f1493,f39897,f39889,f39888,f39887,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39658,f39513,f38588,f38587,f38007])).
fof(f41322,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'F_0')) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | $spl54),
  inference(backward_demodulation,[],[f41320,f156])).
fof(f38010,plain,(
  ( ! [X472,X474,X471,X473,X470] : (s(bool,happ(s(fun(X470,bool),X473),s(X470,X471))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X470),'const.option.SOME_1'(s(X470,X471))),s(bool,X472),s(fun(X470,bool),X473)),X474,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X474),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,happ(s(fun(X470,bool),X473),s(X470,X471)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f37841,f164])).
fof(f37841,plain,(
  ( ! [X472,X474,X471,X473,X470] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X474),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X470),'const.option.SOME_1'(s(X470,X471))),s(bool,X472),s(fun(X470,bool),X473))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X470),'const.option.SOME_1'(s(X470,X471))),s(bool,X472),s(fun(X470,bool),X473)),X474,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X470,bool),X473),s(X470,X471)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f675])).
fof(f38496,plain,(
  ( ! [X59,X57,X60,X58,X56] : (~p(s(bool,happ(s(fun(bool,bool),X57),s(bool,'F_0')))) | s(bool,X56) = s(bool,sK5(X56,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s(fun(bool,bool),X57),s(fun(X58,fun(bool,bool)),X59)),bool)) | s(bool,X56) = s(bool,X60) | s(bool,'F_0') = s(bool,X60)) ) | $spl18),
  inference(superposition,[],[f510,f3511])).
fof(f38497,plain,(
  ( ! [X61,X64,X62,X65,X63] : (~p(s(bool,happ(s(fun(bool,bool),X63),s(bool,X62)))) | s(bool,X61) = s(bool,sK5(X61,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.NONE_0'),s(fun(bool,bool),X63),s(fun(X64,fun(bool,bool)),X65)),bool)) | s(bool,'F_0') = s(bool,X62) | s(bool,'F_0') = s(bool,X61)) ) | $spl18),
  inference(superposition,[],[f510,f3511])).
fof(f38535,plain,(
  ( ! [X239,X237,X238,X236] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X237),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0')))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X236))) = s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,X236)),'const.option.option_CASE_3'(s('type.option.option'(X238),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X237),s(fun(X238,fun('type.option.option'(bool),bool)),X239)),'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X236)) ) | $spl18),
  inference(superposition,[],[f510,f11188])).
fof(f38536,plain,(
  ( ! [X243,X241,X242,X240] : (~p(s(bool,happ(s(fun('type.option.option'(bool),bool),X241),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X240)))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,'T_0')),'const.option.option_CASE_3'(s('type.option.option'(X242),'const.option.NONE_0'),s(fun('type.option.option'(bool),bool),X241),s(fun(X242,fun('type.option.option'(bool),bool)),X243)),'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X240)) ) | $spl18),
  inference(superposition,[],[f510,f11188])).
fof(f38567,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'T_0')))) | s(bool,X52) = s(bool,sK5(X52,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(fun(bool,bool),X53),s(fun(X54,fun(bool,bool)),X55)),bool)) | s(bool,'F_0') = s(bool,X52)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f38495,f27732])).
fof(f38495,plain,(
  ( ! [X54,X52,X55,X53] : (~p(s(bool,happ(s(fun(bool,bool),X53),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))))) | s(bool,X52) = s(bool,sK5(X52,'const.option.option_CASE_3'(s('type.option.option'(X54),'const.option.NONE_0'),s(fun(bool,bool),X53),s(fun(X54,fun(bool,bool)),X55)),bool)) | s(bool,'F_0') = s(bool,X52)) ) | $spl18),
  inference(superposition,[],[f510,f2767])).
fof(f38579,plain,(
  ( ! [X127,X130,X128,X126,X129] : (s(bool,'F_0') = s(bool,X130) | ~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,'F_0') = s(bool,sK5('F_0','const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(fun(bool,bool),X127),s(fun(X128,fun(bool,bool)),X129)),bool)) | s(bool,X126) = s(bool,X130)) ) | $spl18),
  inference(forward_demodulation,[],[f38511,f1267])).
fof(f38511,plain,(
  ( ! [X127,X130,X128,X126,X129] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,'F_0') = s(bool,sK5('F_0','const.option.option_CASE_3'(s('type.option.option'(X128),'const.option.NONE_0'),s(fun(bool,bool),X127),s(fun(X128,fun(bool,bool)),X129)),bool)) | s(bool,X126) = s(bool,X130) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X130)),bool))) ) | $spl18),
  inference(superposition,[],[f510,f3772])).
fof(f38590,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,'F_0') = s(bool,X198) | s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X200),'const.option.NONE_0'),s(fun(bool,bool),X199),s(fun(X200,fun(bool,bool)),X201)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X199),s(bool,X198))))) ) | $spl18),
  inference(forward_demodulation,[],[f38589,f1267])).
fof(f38589,plain,(
  ( ! [X198,X200,X199,X201] : (s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X200),'const.option.NONE_0'),s(fun(bool,bool),X199),s(fun(X200,fun(bool,bool)),X201)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X199),s(bool,X198)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X198)),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f38526,f1267])).
fof(f38526,plain,(
  ( ! [X198,X200,X199,X201] : (~p(s(bool,happ(s(fun(bool,bool),X199),s(bool,X198)))) | s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X200),'const.option.NONE_0'),s(fun(bool,bool),X199),s(fun(X200,fun(bool,bool)),X201)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X198)),bool))) ) | $spl18),
  inference(superposition,[],[f510,f11057])).
fof(f38595,plain,(
  ( ! [X218,X216,X215,X217,X214] : (s(bool,X214) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X214)),bool),'const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(fun(bool,bool),X216),s(fun(X217,fun(bool,bool)),X218)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X216),s(bool,X215)))) | s(bool,'F_0') = s(bool,X214) | s(bool,'F_0') = s(bool,X215)) ) | $spl18),
  inference(forward_demodulation,[],[f38530,f1267])).
fof(f38530,plain,(
  ( ! [X218,X216,X215,X217,X214] : (~p(s(bool,happ(s(fun(bool,bool),X216),s(bool,X215)))) | s(bool,sK4('const.option.SOME_1'(s(bool,X214)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X214)),bool),'const.option.option_CASE_3'(s('type.option.option'(X217),'const.option.NONE_0'),s(fun(bool,bool),X216),s(fun(X217,fun(bool,bool)),X218)),bool)) | s(bool,'F_0') = s(bool,X214) | s(bool,'F_0') = s(bool,X215)) ) | $spl18),
  inference(superposition,[],[f510,f3826])).
fof(f38596,plain,(
  ( ! [X222,X220,X219,X223,X221] : (s(bool,X219) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X219)),bool),'const.option.option_CASE_3'(s('type.option.option'(X221),'const.option.NONE_0'),s(fun(bool,bool),X220),s(fun(X221,fun(bool,bool)),X222)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X220),s(bool,'F_0')))) | s(bool,X219) = s(bool,X223) | s(bool,'F_0') = s(bool,X223)) ) | $spl18),
  inference(forward_demodulation,[],[f38531,f1267])).
fof(f38531,plain,(
  ( ! [X222,X220,X219,X223,X221] : (~p(s(bool,happ(s(fun(bool,bool),X220),s(bool,'F_0')))) | s(bool,sK4('const.option.SOME_1'(s(bool,X219)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X219)),bool),'const.option.option_CASE_3'(s('type.option.option'(X221),'const.option.NONE_0'),s(fun(bool,bool),X220),s(fun(X221,fun(bool,bool)),X222)),bool)) | s(bool,X219) = s(bool,X223) | s(bool,'F_0') = s(bool,X223)) ) | $spl18),
  inference(superposition,[],[f510,f3772])).
fof(f38600,plain,(
  ( ! [X231,X229,X230,X228] : (s(bool,'T_0') = s(bool,X228) | s(bool,X228) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X228)),bool),'const.option.option_CASE_3'(s('type.option.option'(X230),'const.option.NONE_0'),s(fun(bool,bool),X229),s(fun(X230,fun(bool,bool)),X231)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X229),s(bool,'F_0'))))) ) | $spl18),
  inference(forward_demodulation,[],[f38599,f1267])).
fof(f38599,plain,(
  ( ! [X231,X229,X230,X228] : (s(bool,X228) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X228)),bool),'const.option.option_CASE_3'(s('type.option.option'(X230),'const.option.NONE_0'),s(fun(bool,bool),X229),s(fun(X230,fun(bool,bool)),X231)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X229),s(bool,'F_0')))) | s(bool,X228) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f38533,f1267])).
fof(f38533,plain,(
  ( ! [X231,X229,X230,X228] : (~p(s(bool,happ(s(fun(bool,bool),X229),s(bool,'F_0')))) | s(bool,sK4('const.option.SOME_1'(s(bool,X228)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X228)),bool),'const.option.option_CASE_3'(s('type.option.option'(X230),'const.option.NONE_0'),s(fun(bool,bool),X229),s(fun(X230,fun(bool,bool)),X231)),bool)) | s(bool,X228) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl18),
  inference(superposition,[],[f510,f11057])).
fof(f39512,plain,(
  ( ! [X14,X12,X15,X13] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),X14),s(bool,X15),s(fun(X12,bool),X13))) | s('type.option.option'(X12),'const.option.NONE_0') = s('type.option.option'(X12),X14) | s(X12,sK4(X14,X12)) = s(X12,sK5(sK4(X14,X12),X13,X12))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f651,f3654])).
fof(f39519,plain,(
  ( ! [X47,X45,X48,X46,X44] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X44),X46),s(bool,X47),s(fun(X44,bool),X45))) | s('type.option.option'(X44),'const.option.NONE_0') = s('type.option.option'(X44),X46) | s(bool,X48) = s(bool,happ(s(fun(X44,bool),X45),s(X44,sK4(X46,X44)))) | s(bool,'F_0') = s(bool,X48)) ) | $spl18),
  inference(superposition,[],[f651,f3511])).
fof(f39520,plain,(
  ( ! [X52,X50,X53,X51,X49] : (s(bool,X52) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X49),X51),s(bool,X53),s(fun(X49,bool),X50))) | s('type.option.option'(X49),'const.option.NONE_0') = s('type.option.option'(X49),X51) | s(bool,'F_0') = s(bool,X52) | s(bool,'F_0') = s(bool,happ(s(fun(X49,bool),X50),s(X49,sK4(X51,X49))))) ) | $spl18),
  inference(superposition,[],[f651,f3511])).
fof(f39523,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X67) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),X66),s(bool,X68),s(fun(X64,bool),X65))) | s('type.option.option'(X64),'const.option.NONE_0') = s('type.option.option'(X64),X66) | s(bool,'F_0') = s(bool,happ(s(fun(X64,bool),X65),s(X64,sK4(X66,X64)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X67)),bool))) ) | $spl18),
  inference(superposition,[],[f651,f3772])).
fof(f39524,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X69),X71),s(bool,X73),s(fun(X69,bool),X70))) | s('type.option.option'(X69),'const.option.NONE_0') = s('type.option.option'(X69),X71) | s(bool,'F_0') = s(bool,X72) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X69,bool),X70),s(X69,sK4(X71,X69))))),bool))) ) | $spl18),
  inference(superposition,[],[f651,f3772])).
fof(f39525,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),X76),s(bool,X77),s(fun(X74,bool),X75))) | s('type.option.option'(X74),'const.option.NONE_0') = s('type.option.option'(X74),X76) | s(bool,X78) = s(bool,happ(s(fun(X74,bool),X75),s(X74,sK4(X76,X74)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X78)),bool))) ) | $spl18),
  inference(superposition,[],[f651,f3772])).
fof(f39526,plain,(
  ( ! [X80,X83,X81,X79,X82] : (s(bool,sK4('const.option.SOME_1'(s(bool,X82)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X79),X81),s(bool,X83),s(fun(X79,bool),X80))) | s('type.option.option'(X79),'const.option.NONE_0') = s('type.option.option'(X79),X81) | s(bool,'F_0') = s(bool,X82) | s(bool,'F_0') = s(bool,happ(s(fun(X79,bool),X80),s(X79,sK4(X81,X79))))) ) | $spl18),
  inference(superposition,[],[f651,f3826])).
fof(f39630,plain,(
  ( ! [X90,X88,X87,X91,X89] : (s(bool,X91) = s(bool,happ(s(fun(X87,bool),X90),s(X87,sK4(X88,X87)))) | s('type.option.option'(X87),'const.option.NONE_0') = s('type.option.option'(X87),X88) | s(bool,'F_0') = s(bool,X91) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X87),X88),s(bool,X89),s(fun(X87,bool),X90)))),bool))) ) | $spl18),
  inference(superposition,[],[f651,f3772])).
fof(f39632,plain,(
  ( ! [X101,X99,X97,X100,X98] : (s(bool,sK4('const.option.SOME_1'(s(bool,X101)),bool)) = s(bool,happ(s(fun(X97,bool),X100),s(X97,sK4(X98,X97)))) | s('type.option.option'(X97),'const.option.NONE_0') = s('type.option.option'(X97),X98) | s(bool,'F_0') = s(bool,X101) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),X98),s(bool,X99),s(fun(X97,bool),X100)))) ) | $spl18),
  inference(superposition,[],[f651,f3826])).
fof(f39660,plain,(
  ( ! [X144,X142,X140,X145,X143,X141] : (s(bool,'F_0') = s(bool,happ(s(fun(X140,bool),X145),s(X140,'const.option.option_CASE_3'(s('type.option.option'(X141),X143),s(X140,X144),s(fun(X141,X140),X142))))) | s(X140,happ(s(fun(X141,X140),X142),s(X141,sK4(X143,X141)))) = s(X140,sK5(happ(s(fun(X141,X140),X142),s(X141,sK4(X143,X141))),X145,X140)) | s('type.option.option'(X141),'const.option.NONE_0') = s('type.option.option'(X141),X143)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f651])).
fof(f39700,plain,(
  ( ! [X344,X346,X345,X347,X348] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X344),X346),s(bool,X347),s(fun(X344,bool),X345)))) | s(bool,X348) = s(bool,happ(s(fun(X344,bool),X345),s(X344,sK4(X346,X344)))) | s(bool,'F_0') = s(bool,X348) | s('type.option.option'(X344),'const.option.NONE_0') = s('type.option.option'(X344),X346)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3633,f651])).
fof(f39705,plain,(
  ( ! [X372,X370,X373,X369,X371] : (s(bool,X373) = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X369),X371),s(bool,X372),s(fun(X369,bool),X370)))),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X369,bool),X370),s(X369,sK4(X371,X369)))) | s(bool,'F_0') = s(bool,X373) | s('type.option.option'(X369),'const.option.NONE_0') = s('type.option.option'(X369),X371)) ) | $spl18),
  inference(superposition,[],[f3826,f651])).
fof(f39707,plain,(
  ( ! [X383,X379,X380,X382,X381] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X379),X381),s(bool,X382),s(fun(X379,bool),X380))) | s(bool,X383) = s(bool,happ(s(fun(X379,bool),X380),s(X379,sK4(X381,X379)))) | s(bool,'F_0') = s(bool,X383) | s('type.option.option'(X379),'const.option.NONE_0') = s('type.option.option'(X379),X381)) ) | $spl18),
  inference(superposition,[],[f3984,f651])).
fof(f39709,plain,(
  ( ! [X389,X391,X393,X390,X392] : (s(bool,X393) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X389),X391),s(bool,X392),s(fun(X389,bool),X390))) | s(bool,'T_0') = s(bool,happ(s(fun(X389,bool),X390),s(X389,sK4(X391,X389)))) | s(bool,'F_0') = s(bool,X393) | s('type.option.option'(X389),'const.option.NONE_0') = s('type.option.option'(X389),X391)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f651])).
fof(f39711,plain,(
  ( ! [X401,X403,X404,X400,X402] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X400),X402),s(bool,X403),s(fun(X400,bool),X401))) | s(bool,X404) = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X400,bool),X401),s(X400,sK4(X402,X400))))),bool)) | s(bool,'F_0') = s(bool,X404) | s('type.option.option'(X400),'const.option.NONE_0') = s('type.option.option'(X400),X402)) ) | $spl18),
  inference(superposition,[],[f4478,f651])).
fof(f39712,plain,(
  ( ! [X408,X405,X407,X409,X406] : (s(bool,X409) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X405),X407),s(bool,X408),s(fun(X405,bool),X406))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X409)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X405,bool),X406),s(X405,sK4(X407,X405)))) | s('type.option.option'(X405),'const.option.NONE_0') = s('type.option.option'(X405),X407)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4537,f651])).
fof(f39714,plain,(
  ( ! [X416,X418,X415,X417,X419] : (s(bool,X419) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X415),X417),s(bool,X418),s(fun(X415,bool),X416))) | s(bool,'T_0') = s(bool,happ(s(fun(X415,bool),X416),s(X415,sK4(X417,X415)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X419)),bool)) | s('type.option.option'(X415),'const.option.NONE_0') = s('type.option.option'(X415),X417)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4562,f651])).
fof(f39718,plain,(
  ( ! [X436,X438,X437,X439,X435] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X435),X437),s(bool,X438),s(fun(X435,bool),X436))) | s(bool,X439) = s(bool,happ(s(fun(X435,bool),X436),s(X435,sK4(X437,X435)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X439)),bool)) | s('type.option.option'(X435),'const.option.NONE_0') = s('type.option.option'(X435),X437)) ) | $spl18),
  inference(superposition,[],[f6977,f651])).
fof(f39719,plain,(
  ( ! [X441,X443,X444,X440,X442] : (s(bool,sK4('const.option.SOME_1'(s(bool,X444)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X440),X442),s(bool,X443),s(fun(X440,bool),X441))) | s(bool,X444) = s(bool,happ(s(fun(X440,bool),X441),s(X440,sK4(X442,X440)))) | s(bool,'F_0') = s(bool,happ(s(fun(X440,bool),X441),s(X440,sK4(X442,X440)))) | s('type.option.option'(X440),'const.option.NONE_0') = s('type.option.option'(X440),X442)) ) | $spl18),
  inference(superposition,[],[f7171,f651])).
fof(f39720,plain,(
  ( ! [X445,X447,X449,X446,X448] : (s(bool,X449) != s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X445),X447),s(bool,X448),s(fun(X445,bool),X446)))),bool)) | s(bool,X449) = s(bool,happ(s(fun(X445,bool),X446),s(X445,sK4(X447,X445)))) | s(bool,'F_0') = s(bool,X449) | s('type.option.option'(X445),'const.option.NONE_0') = s('type.option.option'(X445),X447)) ) | $spl18),
  inference(superposition,[],[f7171,f651])).
fof(f39722,plain,(
  ( ! [X455,X457,X454,X456] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X454),X456),s(bool,X457),s(fun(X454,bool),X455))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X454,bool),X455),s(X454,sK4(X456,X454))))),bool)) | s('type.option.option'(X454),'const.option.NONE_0') = s('type.option.option'(X454),X456)) ) | $spl18),
  inference(superposition,[],[f7415,f651])).
fof(f39723,plain,(
  ( ! [X461,X459,X460,X462,X458] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X458),X460),s(bool,X461),s(fun(X458,bool),X459)))) | s(bool,X462) != s(bool,happ(s(fun(X458,bool),X459),s(X458,sK4(X460,X458)))) | s(bool,'F_0') = s(bool,X462) | s('type.option.option'(X458),'const.option.NONE_0') = s('type.option.option'(X458),X460)) ) | $spl18),
  inference(superposition,[],[f7424,f651])).
fof(f39732,plain,(
  ( ! [X499,X496,X498,X495,X497] : (s(bool,X499) != s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X495),X497),s(bool,X498),s(fun(X495,bool),X496)))),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(X495,bool),X496),s(X495,sK4(X497,X495)))) | s(bool,'T_0') = s(bool,X499) | s('type.option.option'(X495),'const.option.NONE_0') = s('type.option.option'(X495),X497)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f10529,f651])).
fof(f39733,plain,(
  ( ! [X500,X502,X504,X501,X503] : (s(bool,sK4('const.option.SOME_1'(s(bool,X504)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X500),X502),s(bool,X503),s(fun(X500,bool),X501))) | s(bool,'F_0') = s(bool,X504) | s(bool,'T_0') = s(bool,happ(s(fun(X500,bool),X501),s(X500,sK4(X502,X500)))) | s('type.option.option'(X500),'const.option.NONE_0') = s('type.option.option'(X500),X502)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f10529,f651])).
fof(f39738,plain,(
  ( ! [X524,X522,X521,X523] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X521),X523),s(bool,X524),s(fun(X521,bool),X522))))) | s(bool,'F_0') = s(bool,happ(s(fun(X521,bool),X522),s(X521,sK4(X523,X521)))) | s('type.option.option'(X521),'const.option.NONE_0') = s('type.option.option'(X521),X523)) ) | $spl18),
  inference(superposition,[],[f11188,f651])).
fof(f39743,plain,(
  ( ! [X549,X547,X548,X550] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X547),X549),s(bool,X550),s(fun(X547,bool),X548)))) | s(bool,'F_0') = s(bool,happ(s(fun(X547,bool),X548),s(X547,sK4(X549,X547)))) | s('type.option.option'(X547),'const.option.NONE_0') = s('type.option.option'(X547),X549)) ) | $spl18),
  inference(superposition,[],[f36391,f651])).
fof(f39761,plain,(
  ( ! [X660,X662,X658,X661,X657,X659] : (s(bool,'F_0') = s(bool,happ(s(fun(X657,bool),'const.option.option_CASE_3'(s('type.option.option'(X658),X660),s(fun(X657,bool),X661),s(fun(X658,fun(X657,bool)),X659))),s(X657,X662))) | s(X657,X662) = s(X657,sK5(X662,happ(s(fun(X658,fun(X657,bool)),X659),s(X658,sK4(X660,X658))),X657)) | s('type.option.option'(X658),'const.option.NONE_0') = s('type.option.option'(X658),X660)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f651])).
fof(f39790,plain,(
  ( ! [X146,X144,X147,X145,X143,X148] : (s(bool,'F_0') = s(bool,happ(s(fun(X143,bool),X148),s(X143,happ(s(fun(X144,X143),X147),s(X144,sK4(X145,X144)))))) | s(X143,'const.option.option_CASE_3'(s('type.option.option'(X144),X145),s(X143,X146),s(fun(X144,X143),X147))) = s(X143,sK5('const.option.option_CASE_3'(s('type.option.option'(X144),X145),s(X143,X146),s(fun(X144,X143),X147)),X148,X143)) | s('type.option.option'(X144),'const.option.NONE_0') = s('type.option.option'(X144),X145)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f651])).
fof(f39838,plain,(
  ( ! [X333,X335,X332,X334,X336] : (~p(s(bool,happ(s(fun(X332,bool),X335),s(X332,sK4(X333,X332))))) | s(bool,X336) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X332),X333),s(bool,X334),s(fun(X332,bool),X335))) | s(bool,'F_0') = s(bool,X336) | s('type.option.option'(X332),'const.option.NONE_0') = s('type.option.option'(X332),X333)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3633,f651])).
fof(f39843,plain,(
  ( ! [X358,X360,X357,X359,X361] : (s(bool,X361) = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X357,bool),X360),s(X357,sK4(X358,X357))))),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X357),X358),s(bool,X359),s(fun(X357,bool),X360))) | s(bool,'F_0') = s(bool,X361) | s('type.option.option'(X357),'const.option.NONE_0') = s('type.option.option'(X357),X358)) ) | $spl18),
  inference(superposition,[],[f3826,f651])).
fof(f39846,plain,(
  ( ! [X372,X374,X376,X373,X375] : (s(bool,X376) != s(bool,happ(s(fun(X372,bool),X375),s(X372,sK4(X373,X372)))) | s(bool,'T_0') = s(bool,X376) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X372),X373),s(bool,X374),s(fun(X372,bool),X375))) | s('type.option.option'(X372),'const.option.NONE_0') = s('type.option.option'(X372),X373)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f651])).
fof(f39847,plain,(
  ( ! [X377,X379,X380,X378,X381] : (s(bool,X381) != s(bool,happ(s(fun(X377,bool),X380),s(X377,sK4(X378,X377)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X377),X378),s(bool,X379),s(fun(X377,bool),X380))) | s(bool,'F_0') = s(bool,X381) | s('type.option.option'(X377),'const.option.NONE_0') = s('type.option.option'(X377),X378)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f651])).
fof(f39848,plain,(
  ( ! [X383,X385,X387,X382,X384,X386] : (p(s(bool,happ(s(fun(X382,bool),X385),s(X382,sK4(X383,X382))))) | s(bool,X386) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X382),X383),s(bool,X384),s(fun(X382,bool),X385))) | s(bool,X386) = s(bool,X387) | s(bool,'F_0') = s(bool,X387) | s('type.option.option'(X382),'const.option.NONE_0') = s('type.option.option'(X382),X383)) ) | $spl18),
  inference(superposition,[],[f4340,f651])).
fof(f39850,plain,(
  ( ! [X397,X393,X395,X396,X394] : (s(bool,X397) != s(bool,happ(s(fun(X393,bool),X396),s(X393,sK4(X394,X393)))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X397)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X393),X394),s(bool,X395),s(fun(X393,bool),X396))) | s('type.option.option'(X393),'const.option.NONE_0') = s('type.option.option'(X393),X394)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4537,f651])).
fof(f39852,plain,(
  ( ! [X405,X407,X403,X404,X406] : (s(bool,X407) != s(bool,happ(s(fun(X403,bool),X406),s(X403,sK4(X404,X403)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X403),X404),s(bool,X405),s(fun(X403,bool),X406))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X407)),bool)) | s('type.option.option'(X403),'const.option.NONE_0') = s('type.option.option'(X403),X404)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4562,f651])).
fof(f39853,plain,(
  ( ! [X412,X408,X410,X409,X411] : (s(bool,X412) != s(bool,happ(s(fun(X408,bool),X411),s(X408,sK4(X409,X408)))) | s(bool,'T_0') = s(bool,X412) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X408),X409),s(bool,X410),s(fun(X408,bool),X411)))),bool)) | s('type.option.option'(X408),'const.option.NONE_0') = s('type.option.option'(X408),X409)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4562,f651])).
fof(f39857,plain,(
  ( ! [X428,X430,X432,X429,X431] : (s(bool,sK4('const.option.SOME_1'(s(bool,X432)),bool)) != s(bool,happ(s(fun(X428,bool),X431),s(X428,sK4(X429,X428)))) | s(bool,X432) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X428),X429),s(bool,X430),s(fun(X428,bool),X431))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X428),X429),s(bool,X430),s(fun(X428,bool),X431))) | s('type.option.option'(X428),'const.option.NONE_0') = s('type.option.option'(X428),X429)) ) | $spl18),
  inference(superposition,[],[f7171,f651])).
fof(f39858,plain,(
  ( ! [X436,X434,X437,X433,X435] : (s(bool,X437) != s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X433,bool),X436),s(X433,sK4(X434,X433))))),bool)) | s(bool,X437) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X433),X434),s(bool,X435),s(fun(X433,bool),X436))) | s(bool,'F_0') = s(bool,X437) | s('type.option.option'(X433),'const.option.NONE_0') = s('type.option.option'(X433),X434)) ) | $spl18),
  inference(superposition,[],[f7171,f651])).
fof(f39860,plain,(
  ( ! [X445,X443,X444,X442] : (s(bool,'F_0') != s(bool,happ(s(fun(X442,bool),X445),s(X442,sK4(X443,X442)))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X442),X443),s(bool,X444),s(fun(X442,bool),X445)))),bool)) | s('type.option.option'(X442),'const.option.NONE_0') = s('type.option.option'(X442),X443)) ) | $spl18),
  inference(superposition,[],[f7415,f651])).
fof(f39861,plain,(
  ( ! [X447,X449,X446,X448,X450] : (p(s(bool,happ(s(fun(X446,bool),X449),s(X446,sK4(X447,X446))))) | s(bool,X450) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X446),X447),s(bool,X448),s(fun(X446,bool),X449))) | s(bool,'F_0') = s(bool,X450) | s('type.option.option'(X446),'const.option.NONE_0') = s('type.option.option'(X446),X447)) ) | $spl18),
  inference(superposition,[],[f7424,f651])).
fof(f39870,plain,(
  ( ! [X484,X486,X485,X487,X483] : (s(bool,X487) != s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X483,bool),X486),s(X483,sK4(X484,X483))))),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X483),X484),s(bool,X485),s(fun(X483,bool),X486))) | s(bool,'T_0') = s(bool,X487) | s('type.option.option'(X483),'const.option.NONE_0') = s('type.option.option'(X483),X484)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f10529,f651])).
fof(f39871,plain,(
  ( ! [X492,X488,X490,X489,X491] : (s(bool,sK4('const.option.SOME_1'(s(bool,X492)),bool)) != s(bool,happ(s(fun(X488,bool),X491),s(X488,sK4(X489,X488)))) | s(bool,'F_0') = s(bool,X492) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X488),X489),s(bool,X490),s(fun(X488,bool),X491))) | s('type.option.option'(X488),'const.option.NONE_0') = s('type.option.option'(X488),X489)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f10529,f651])).
fof(f39876,plain,(
  ( ! [X509,X511,X512,X510] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X509,bool),X512),s(X509,sK4(X510,X509)))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X509),X510),s(bool,X511),s(fun(X509,bool),X512))) | s('type.option.option'(X509),'const.option.NONE_0') = s('type.option.option'(X509),X510)) ) | $spl18),
  inference(superposition,[],[f11188,f651])).
fof(f39881,plain,(
  ( ! [X536,X538,X537,X535] : (p(s(bool,happ(s(fun(X535,bool),X538),s(X535,sK4(X536,X535))))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X535),X536),s(bool,X537),s(fun(X535,bool),X538))) | s('type.option.option'(X535),'const.option.NONE_0') = s('type.option.option'(X535),X536)) ) | $spl18),
  inference(superposition,[],[f36391,f651])).
fof(f39899,plain,(
  ( ! [X639,X640,X636,X638,X641,X637] : (s(bool,'F_0') = s(bool,happ(s(fun(X636,bool),happ(s(fun(X637,fun(X636,bool)),X640),s(X637,sK4(X638,X637)))),s(X636,X641))) | s(X636,X641) = s(X636,sK5(X641,'const.option.option_CASE_3'(s('type.option.option'(X637),X638),s(fun(X636,bool),X639),s(fun(X637,fun(X636,bool)),X640)),X636)) | s('type.option.option'(X637),'const.option.NONE_0') = s('type.option.option'(X637),X638)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f651])).
fof(f39926,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X98),s(bool,X99),s(fun(X96,bool),X97))) | s('type.option.option'(X96),'const.option.NONE_0') = s('type.option.option'(X96),X98) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X96,bool),X97),s(X96,sK4(X98,X96))))),bool))) ) | $spl18),
  inference(forward_demodulation,[],[f39530,f1267])).
fof(f39530,plain,(
  ( ! [X99,X97,X98,X96] : (s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X96),X98),s(bool,X99),s(fun(X96,bool),X97))) | s('type.option.option'(X96),'const.option.NONE_0') = s('type.option.option'(X96),X98) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X96,bool),X97),s(X96,sK4(X98,X96))))),bool))) ) | $spl18),
  inference(superposition,[],[f651,f11057])).
fof(f39973,plain,(
  ( ! [X453,X451,X452,X450] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X450),X452),s(bool,X453),s(fun(X450,bool),X451))) | s(bool,'F_0') = s(bool,happ(s(fun(X450,bool),X451),s(X450,sK4(X452,X450)))) | s('type.option.option'(X450),'const.option.NONE_0') = s('type.option.option'(X450),X452)) ) | $spl18),
  inference(forward_demodulation,[],[f39721,f1267])).
fof(f39721,plain,(
  ( ! [X453,X451,X452,X450] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X450),X452),s(bool,X453),s(fun(X450,bool),X451))) | s(bool,'F_0') = s(bool,happ(s(fun(X450,bool),X451),s(X450,sK4(X452,X450)))) | s('type.option.option'(X450),'const.option.NONE_0') = s('type.option.option'(X450),X452)) ) | $spl18),
  inference(superposition,[],[f7183,f651])).
fof(f39998,plain,(
  ( ! [X441,X438,X440,X439] : (s(bool,'F_0') != s(bool,happ(s(fun(X438,bool),X441),s(X438,sK4(X439,X438)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X438),X439),s(bool,X440),s(fun(X438,bool),X441))) | s('type.option.option'(X438),'const.option.NONE_0') = s('type.option.option'(X438),X439)) ) | $spl18),
  inference(forward_demodulation,[],[f39859,f1267])).
fof(f39859,plain,(
  ( ! [X441,X438,X440,X439] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,happ(s(fun(X438,bool),X441),s(X438,sK4(X439,X438)))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X438),X439),s(bool,X440),s(fun(X438,bool),X441))) | s('type.option.option'(X438),'const.option.NONE_0') = s('type.option.option'(X438),X439)) ) | $spl18),
  inference(superposition,[],[f7183,f651])).
fof(f39740,plain,(
  ( ! [X532,X534,X530,X533,X535,X529,X531] : (s(bool,X533) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X529),X531),s(bool,X532),s(fun(X529,bool),X530))) | s(bool,happ(s(fun(X529,bool),X530),s(X529,sK4(X531,X529)))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X534),'const.option.NONE_0'),s(bool,X533),s(fun(X534,bool),X535))) | s('type.option.option'(X529),'const.option.NONE_0') = s('type.option.option'(X529),X531)) ) | $spl18),
  inference(superposition,[],[f23836,f651])).
fof(f4704,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,happ(s(fun(X7,bool),X8),s(X7,X9)))) | s(X7,sK5(X9,X8,X7)) = s(X7,sK5(sK5(X9,X8,X7),X8,X7))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f4644,f175])).
fof(f4644,plain,(
  ( ! [X8,X7,X9] : (p(s(bool,'F_0')) | ~p(s(bool,happ(s(fun(X7,bool),X8),s(X7,X9)))) | s(X7,sK5(X9,X8,X7)) = s(X7,sK5(sK5(X9,X8,X7),X8,X7))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f157,f3654])).
fof(f4705,plain,(
  ( ! [X28,X26,X29,X27] : (p(s(bool,X29)) | s(bool,X29) = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28))) | s(X26,X28) = s(X26,sK5(X28,X27,X26))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f4650,f175])).
fof(f4650,plain,(
  ( ! [X28,X26,X29,X27] : (p(s(bool,'F_0')) | p(s(bool,X29)) | s(bool,X29) = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28))) | s(X26,X28) = s(X26,sK5(X28,X27,X26))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f158,f3654])).
fof(f4950,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X44),'const.option.SOME_1'(s(X44,X45))),s(bool,X46),s(fun(X44,bool),X47))) | s(bool,'T_0') != s(bool,happ(s(fun(X44,bool),X47),s(X44,X45)))) ) | $spl0),
  inference(forward_demodulation,[],[f4922,f873])).
fof(f4922,plain,(
  ( ! [X47,X45,X46,X44] : (s(bool,'T_0') != s(bool,happ(s(fun(X44,bool),X47),s(X44,X45))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X44),'const.option.SOME_1'(s(X44,X45))),s(bool,X46),s(fun(X44,bool),X47)))) ) | $spl0),
  inference(superposition,[],[f2888,f164])).
fof(f5754,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X55,bool),X56),s(X55,X57))))) | s(bool,'T_0') = s(bool,X58) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl18)),
  inference(trivial_inequality_removal,[],[f5748])).
fof(f5748,plain,(
  ( ! [X57,X58,X56,X55] : (s(bool,'F_0') != s(bool,'F_0') | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X55,bool),X56),s(X55,X57))))) | s(bool,'T_0') = s(bool,X58) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f476,f3654])).
fof(f39717,plain,(
  ( ! [X432,X434,X431,X433] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X431),X433),s(bool,X434),s(fun(X431,bool),X432))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X431,bool),X432),s(X431,sK4(X433,X431))))),bool)) | s('type.option.option'(X431),'const.option.NONE_0') = s('type.option.option'(X431),X433)) ) | $spl0),
  inference(superposition,[],[f4952,f651])).
fof(f39741,plain,(
  ( ! [X540,X542,X536,X538,X541,X537,X539] : (s(bool,X540) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X536),X538),s(bool,X539),s(fun(X536,bool),X537))) | s(bool,X540) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X541),'const.option.NONE_0'),s(bool,happ(s(fun(X536,bool),X537),s(X536,sK4(X538,X536)))),s(fun(X541,bool),X542))) | s('type.option.option'(X536),'const.option.NONE_0') = s('type.option.option'(X536),X538)) ) | $spl18),
  inference(superposition,[],[f23836,f651])).
fof(f39864,plain,(
  ( ! [X461,X459,X460,X462] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X459,bool),X462),s(X459,sK4(X460,X459))))),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X459),X460),s(bool,X461),s(fun(X459,bool),X462))) | s('type.option.option'(X459),'const.option.NONE_0') = s('type.option.option'(X459),X460)) ) | $spl18),
  inference(superposition,[],[f7821,f651])).
fof(f23244,plain,(
  ( ! [X125,X124] : (s(bool,'T_0') != s(bool,X125) | ~p(s(bool,happ(s(fun(bool,bool),X124),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X124),s(bool,X125))))) ) | $spl0),
  inference(forward_demodulation,[],[f23185,f873])).
fof(f23185,plain,(
  ( ! [X125,X124] : (~p(s(bool,happ(s(fun(bool,bool),X124),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X124),s(bool,X125)))) | s(bool,X125) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f155,f873])).
fof(f39854,plain,(
  ( ! [X414,X416,X418,X413,X415,X417] : (s(bool,'T_0') != s(bool,happ(s(fun(X413,bool),X416),s(X413,sK4(X414,X413)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X417),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X413),X414),s(bool,X415),s(fun(X413,bool),X416))),s(fun(X417,bool),X418))) | s('type.option.option'(X413),'const.option.NONE_0') = s('type.option.option'(X413),X414)) ) | $spl0),
  inference(superposition,[],[f4949,f651])).
fof(f39794,plain,(
  ( ! [X154,X155,X153] : (s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X154),'const.option.NONE_0'),s(bool,X153),s(fun(X154,bool),X155))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1)) ) | $spl0),
  inference(superposition,[],[f950,f651])).
fof(f39716,plain,(
  ( ! [X428,X430,X426,X429,X425,X427] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X425),X427),s(bool,X428),s(fun(X425,bool),X426))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X429),'const.option.NONE_0'),s(bool,happ(s(fun(X425,bool),X426),s(X425,sK4(X427,X425)))),s(fun(X429,bool),X430))) | s('type.option.option'(X425),'const.option.NONE_0') = s('type.option.option'(X425),X427)) ) | $spl0),
  inference(superposition,[],[f4949,f651])).
fof(f39715,plain,(
  ( ! [X420,X422,X424,X421,X423] : (s(bool,X424) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X420),X422),s(bool,X423),s(fun(X420,bool),X421))) | s(bool,'T_0') = s(bool,X424) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X420,bool),X421),s(X420,sK4(X422,X420))))),bool)) | s('type.option.option'(X420),'const.option.NONE_0') = s('type.option.option'(X420),X422)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4562,f651])).
fof(f39708,plain,(
  ( ! [X385,X387,X388,X384,X386] : (s(bool,X388) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X384),X386),s(bool,X387),s(fun(X384,bool),X385))) | s(bool,'T_0') = s(bool,X388) | s(bool,'F_0') = s(bool,happ(s(fun(X384,bool),X385),s(X384,sK4(X386,X384)))) | s('type.option.option'(X384),'const.option.NONE_0') = s('type.option.option'(X384),X386)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f651])).
fof(f38525,plain,(
  ( ! [X196,X194,X192,X197,X195,X193] : (~p(s(bool,happ(s(fun(bool,bool),X195),s(bool,'F_0')))) | s(bool,happ(s(fun(X192,bool),X193),s(X192,X194))) = s(bool,sK5(happ(s(fun(X192,bool),X193),s(X192,X194)),'const.option.option_CASE_3'(s('type.option.option'(X196),'const.option.NONE_0'),s(fun(bool,bool),X195),s(fun(X196,fun(bool,bool)),X197)),bool)) | s(X192,X194) = s(X192,sK5(X194,X193,X192))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f510,f3654])).
fof(f37817,plain,(
  ( ! [X344,X341,X343,X339,X345,X340,X342] : (s(bool,'T_0') != s(bool,X343) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X344),'const.option.NONE_0'),s(bool,X343),s(fun(X344,bool),X345))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X339),'const.option.SOME_1'(s(X339,X340))),s(bool,X341),s(fun(X339,bool),X342))) | s(bool,'F_0') = s(bool,happ(s(fun(X339,bool),X342),s(X339,X340)))) ) | $spl18),
  inference(superposition,[],[f23836,f675])).
fof(f37672,plain,(
  ( ! [X189,X187,X188] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X187))))),s(bool,X188),s(fun('type.option.option'(bool),bool),X189))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X189),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s(bool,'F_0') = s(bool,X187)) ) | $spl18),
  inference(superposition,[],[f675,f11188])).
fof(f37671,plain,(
  ( ! [X185,X186,X184] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))),s(bool,X185),s(fun('type.option.option'(bool),bool),X186))) | s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X186),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184))))) | s(bool,'F_0') = s(bool,X184)) ) | $spl18),
  inference(superposition,[],[f675,f11188])).
fof(f37661,plain,(
  ( ! [X154,X152,X151,X153,X150] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X153),s(fun(bool,bool),X154))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X154),s(bool,happ(s(fun(X150,bool),X151),s(X150,X152))))) | s(X150,X152) = s(X150,sK5(X152,X151,X150))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f675,f3654])).
fof(f37903,plain,(
  ( ! [X142,X140,X143] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X143),s(bool,X140))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X142),s(fun(bool,bool),X143))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X140),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(forward_demodulation,[],[f37659,f162])).
fof(f37659,plain,(
  ( ! [X142,X140,X143,X141,X139] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X142),s(fun(bool,bool),X143))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X143),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X139),'const.option.NONE_0'),s(bool,X140),s(fun(X139,bool),X141))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X140),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f675,f950])).
fof(f37898,plain,(
  ( ! [X125,X126,X124] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X126),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X124))),s(bool,X125),s(fun(bool,bool),X126))) | s(bool,'F_0') = s(bool,X124)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f37654,f27732])).
fof(f37654,plain,(
  ( ! [X125,X126,X124] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X124))),s(bool,X125),s(fun(bool,bool),X126))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X126),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | s(bool,'F_0') = s(bool,X124)) ) | $spl18),
  inference(superposition,[],[f675,f2767])).
fof(f37653,plain,(
  ( ! [X123,X121,X122] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X122),s(fun(bool,bool),X123))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X123),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X121),s(fun(sK0,bool),sK2))))) | s(bool,'T_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f675,f882])).
fof(f37652,plain,(
  ( ! [X118,X116,X120,X119,X117] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X117),s(fun(bool,bool),X118))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X118),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X116),s(fun(sK0,bool),sK2))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X119),'const.option.NONE_0'),s(bool,X116),s(fun(X119,bool),X120)))) ) | $spl0),
  inference(superposition,[],[f675,f950])).
fof(f37649,plain,(
  ( ! [X107,X105,X108,X106] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X105))),s(bool,X106),s(fun(bool,bool),X107))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X107),s(bool,'F_0'))) | s(bool,X105) = s(bool,X108) | s(bool,'F_0') = s(bool,X108)) ) | $spl18),
  inference(superposition,[],[f675,f3511])).
fof(f37648,plain,(
  ( ! [X103,X101,X102,X104] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))),s(bool,X102),s(fun(bool,bool),X103))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X103),s(bool,'F_0'))) | s(bool,X101) = s(bool,X104) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X104)),bool))) ) | $spl18),
  inference(superposition,[],[f675,f3772])).
fof(f37639,plain,(
  ( ! [X70,X72,X71,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X71),s(fun(bool,bool),X72))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X72),s(bool,X70))) | s(bool,X70) = s(bool,X73) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X73)),bool))) ) | $spl18),
  inference(superposition,[],[f675,f3772])).
fof(f37634,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X51))),s(bool,X52),s(fun(bool,bool),X53))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X53),s(bool,X50))) | s(bool,'F_0') = s(bool,X51) | s(bool,'F_0') = s(bool,X50)) ) | $spl18),
  inference(superposition,[],[f675,f3511])).
fof(f37633,plain,(
  ( ! [X47,X48,X46,X49] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))),s(bool,X47),s(fun(bool,bool),X48))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X48),s(bool,X46))) | s(bool,X46) = s(bool,X49) | s(bool,'F_0') = s(bool,X49)) ) | $spl18),
  inference(superposition,[],[f675,f3511])).
fof(f37887,plain,(
  ( ! [X45,X43,X44] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))),s(bool,X44),s(fun(bool,bool),X45))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X45),s(bool,X43))) | s(bool,'F_0') = s(bool,X43)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f37632,f27732])).
fof(f37632,plain,(
  ( ! [X45,X43,X44] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))),s(bool,X44),s(fun(bool,bool),X45))) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X45),s(bool,X43))) | s(bool,'F_0') = s(bool,X43)) ) | $spl18),
  inference(superposition,[],[f675,f2767])).
fof(f36586,plain,(
  ( ! [X17,X16] : (p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X17,X16,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f36585,f111])).
fof(f36585,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X17,X16,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f36549,f27732])).
fof(f36549,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X17,X16,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) ) | $spl18),
  inference(superposition,[],[f606,f2767])).
fof(f36582,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,happ(s(fun(bool,bool),X96),s(bool,X95)))) | p(s(bool,happ(s(fun(bool,bool),X96),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X94)),bool),X96,bool)) | s(bool,'F_0') = s(bool,X94)) ) | $spl18),
  inference(subsumption_resolution,[],[f36534,f155])).
fof(f36534,plain,(
  ( ! [X94,X95,X96] : (~p(s(bool,happ(s(fun(bool,bool),X96),s(bool,X95)))) | p(s(bool,happ(s(fun(bool,bool),X96),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X94)),bool),X96,bool)) | s(bool,'F_0') = s(bool,X94) | s(bool,'F_0') = s(bool,X95)) ) | $spl18),
  inference(superposition,[],[f606,f3826])).
fof(f36580,plain,(
  ( ! [X88,X89] : (~p(s(bool,happ(s(fun(bool,bool),X89),s(bool,X88)))) | p(s(bool,happ(s(fun(bool,bool),X89),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),X89,bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f36531,f155])).
fof(f36531,plain,(
  ( ! [X88,X89] : (~p(s(bool,happ(s(fun(bool,bool),X89),s(bool,X88)))) | p(s(bool,happ(s(fun(bool,bool),X89),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),X89,bool)) | s(bool,'F_0') = s(bool,X88)) ) | $spl18),
  inference(superposition,[],[f606,f10594])).
fof(f36528,plain,(
  ( ! [X80,X78,X81,X79] : (~p(s(bool,happ(s(fun(bool,bool),X81),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X81),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X78),'const.option.NONE_0'),s(bool,X79),s(fun(X78,bool),X80)),X81,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X79),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f606,f950])).
fof(f36576,plain,(
  ( ! [X66,X65] : (s(bool,'T_0') = s(bool,X65) | ~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X65),s(fun(sK0,bool),sK2)),X66,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f36523,f162])).
fof(f36523,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X65),s(fun(sK0,bool),sK2)),X66,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X67),'const.option.NONE_0'),s(bool,X65),s(fun(X67,bool),X68)))) ) | $spl0),
  inference(superposition,[],[f606,f950])).
fof(f36575,plain,(
  ( ! [X54,X56,X55] : (s(bool,'F_0') = s(bool,X56) | ~p(s(bool,happ(s(fun(bool,bool),X55),s(bool,X54)))) | p(s(bool,happ(s(fun(bool,bool),X55),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('F_0',X55,bool)) | s(bool,X54) = s(bool,X56)) ) | $spl18),
  inference(forward_demodulation,[],[f36519,f1267])).
fof(f36519,plain,(
  ( ! [X54,X56,X55] : (~p(s(bool,happ(s(fun(bool,bool),X55),s(bool,X54)))) | p(s(bool,happ(s(fun(bool,bool),X55),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('F_0',X55,bool)) | s(bool,X54) = s(bool,X56) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X56)),bool))) ) | $spl18),
  inference(superposition,[],[f606,f3772])).
fof(f36567,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,X20)))) | p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X19,X21,bool)) | s(bool,'F_0') = s(bool,X19)) ) | $spl18),
  inference(subsumption_resolution,[],[f36506,f155])).
fof(f36506,plain,(
  ( ! [X21,X19,X20] : (~p(s(bool,happ(s(fun(bool,bool),X21),s(bool,X20)))) | p(s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X19,X21,bool)) | s(bool,'F_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X19)) ) | $spl18),
  inference(superposition,[],[f606,f3511])).
fof(f36566,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X14,X15,bool)) | s(bool,'F_0') = s(bool,X14)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f36504,f27732])).
fof(f36504,plain,(
  ( ! [X14,X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))))) | p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(X14,X15,bool)) | s(bool,'F_0') = s(bool,X14)) ) | $spl18),
  inference(superposition,[],[f606,f2767])).
fof(f26123,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (s(bool,'T_0') != s(bool,X158) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X155),'const.option.NONE_0'),s(bool,X156),s(fun(X155,bool),X157))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X159),'const.option.NONE_0'),s(bool,X158),s(fun(X159,bool),X160))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X156),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f23836,f950])).
fof(f26117,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') != s(bool,X132) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X131),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X133),'const.option.NONE_0'),s(bool,X132),s(fun(X133,bool),X134))) | s(bool,'T_0') = s(bool,X131)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f23836,f882])).
fof(f1255,plain,(
  ( ! [X10,X11,X9] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X9),'const.option.NONE_0'),s(bool,X10),s(fun(X9,bool),X11))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X10),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(subsumption_resolution,[],[f1206,f111])).
fof(f1206,plain,(
  ( ! [X10,X11,X9] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X9),'const.option.NONE_0'),s(bool,X10),s(fun(X9,bool),X11))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X10),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f124,f950])).
fof(f2107,plain,(
  ( ! [X22] : (s(bool,X22) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X22),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(subsumption_resolution,[],[f2091,f111])).
fof(f2091,plain,(
  ( ! [X22] : (~p(s(bool,'T_0')) | s(bool,X22) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X22),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f1257,f873])).
fof(f2920,plain,(
  ( ! [X54,X55,X53] : (s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,X55) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X53) = s(bool,X55)) ) | $spl0),
  inference(subsumption_resolution,[],[f2546,f111])).
fof(f2546,plain,(
  ( ! [X54,X55,X53] : (~p(s(bool,'T_0')) | s(bool,X53) = s(bool,X54) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,X55) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X53) = s(bool,X55)) ) | $spl0),
  inference(superposition,[],[f1257,f1809])).
fof(f3621,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,'T_0') = s(bool,happ(s(fun(X24,bool),X27),s(X24,X25))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))),s(bool,X26),s(fun(X24,bool),X27)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3502,f873])).
fof(f3502,plain,(
  ( ! [X26,X24,X27,X25] : (s(bool,happ(s(fun(X24,bool),X27),s(X24,X25))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X24),'const.option.SOME_1'(s(X24,X25))),s(bool,X26),s(fun(X24,bool),X27)))) ) | $spl18),
  inference(superposition,[],[f2767,f164])).
fof(f3622,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X28),X29),s(bool,X30),s(fun(X28,bool),X31))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X28,bool),bool),happ(s(fun(bool,fun(fun(X28,bool),bool)),happ(s(fun('type.option.option'(X28),fun(bool,fun(fun(X28,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X28),X29))),s(bool,X30))),s(fun(X28,bool),X31)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3503,f873])).
fof(f3503,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X28),X29),s(bool,X30),s(fun(X28,bool),X31))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X28,bool),bool),happ(s(fun(bool,fun(fun(X28,bool),bool)),happ(s(fun('type.option.option'(X28),fun(bool,fun(fun(X28,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X28),X29))),s(bool,X30))),s(fun(X28,bool),X31)))) ) | $spl18),
  inference(superposition,[],[f2767,f165])).
fof(f3654,plain,(
  ( ! [X43,X44,X42] : (s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44))) | s(X42,X44) = s(X42,sK5(X44,X43,X42))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f3653,f111])).
fof(f3653,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'T_0')) | s(X42,X44) = s(X42,sK5(X44,X43,X42)) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3548,f873])).
fof(f3548,plain,(
  ( ! [X43,X44,X42] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(X42,X44) = s(X42,sK5(X44,X43,X42)) | s(bool,'F_0') = s(bool,happ(s(fun(X42,bool),X43),s(X42,X44)))) ) | $spl18),
  inference(superposition,[],[f156,f2767])).
fof(f3657,plain,(
  ( ! [X54,X55] : (~p(s(bool,happ(s(fun(bool,bool),X55),s(bool,'T_0')))) | s(bool,X54) = s(bool,sK5(X54,X55,bool)) | s(bool,'F_0') = s(bool,X54)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3554,f873])).
fof(f3554,plain,(
  ( ! [X54,X55] : (~p(s(bool,happ(s(fun(bool,bool),X55),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))))) | s(bool,X54) = s(bool,sK5(X54,X55,bool)) | s(bool,'F_0') = s(bool,X54)) ) | $spl18),
  inference(superposition,[],[f156,f2767])).
fof(f3702,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0')))) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,X14)))) | s(bool,'F_0') = s(bool,sK5(X14,X15,bool))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f3690,f873])).
fof(f3690,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))))) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,X14)))) | s(bool,'F_0') = s(bool,sK5(X14,X15,bool))) ) | $spl18),
  inference(superposition,[],[f157,f2767])).
fof(f3738,plain,(
  ( ! [X28,X26,X27,X25] : (s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X25),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X26) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X27),'const.option.NONE_0'),s(bool,X25),s(fun(X27,bool),X28)))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f3720,f111])).
fof(f3720,plain,(
  ( ! [X28,X26,X27,X25] : (~p(s(bool,'T_0')) | s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X25),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X26) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X27),'const.option.NONE_0'),s(bool,X25),s(fun(X27,bool),X28)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3633,f950])).
fof(f3740,plain,(
  ( ! [X37,X35,X36,X34] : (s(bool,X37) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X35),s(fun(X34,bool),X36))) | s(bool,'F_0') = s(bool,X37) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X35),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f3724,f111])).
fof(f3724,plain,(
  ( ! [X37,X35,X36,X34] : (~p(s(bool,'T_0')) | s(bool,X37) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X35),s(fun(X34,bool),X36))) | s(bool,'F_0') = s(bool,X37) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X35),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3633,f950])).
fof(f3985,plain,(
  ( ! [X8,X7] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2))) | s(bool,X7) = s(bool,X8) | s(bool,'F_0') = s(bool,X8)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f873,f3511])).
fof(f4430,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X45)))) | s(bool,X43) != s(bool,X45) | s(bool,'F_0') = s(bool,X43)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4394,f873])).
fof(f4394,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))))) | p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X45)))) | s(bool,X43) != s(bool,X45) | s(bool,'F_0') = s(bool,X43)) ) | $spl18),
  inference(superposition,[],[f155,f2767])).
fof(f4433,plain,(
  ( ! [X92,X93,X91] : (s(bool,'T_0') != s(bool,X93) | ~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X91)))) | p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X93)))) | s(bool,'F_0') = s(bool,X91)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4407,f873])).
fof(f4407,plain,(
  ( ! [X92,X93,X91] : (~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X91)))) | p(s(bool,happ(s(fun(bool,bool),X92),s(bool,X93)))) | s(bool,X93) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X91)) ) | $spl18),
  inference(superposition,[],[f155,f2767])).
fof(f4437,plain,(
  ( ! [X26,X24,X27,X25] : (p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X27)))) | s(X24,X26) != s(X24,X27) | s(bool,'F_0') = s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f4436,f111])).
fof(f4436,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X27)))) | s(X24,X26) != s(X24,X27) | s(bool,'F_0') = s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4416,f873])).
fof(f4416,plain,(
  ( ! [X26,X24,X27,X25] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | p(s(bool,happ(s(fun(X24,bool),X25),s(X24,X27)))) | s(X24,X26) != s(X24,X27) | s(bool,'F_0') = s(bool,happ(s(fun(X24,bool),X25),s(X24,X26)))) ) | $spl18),
  inference(superposition,[],[f155,f2767])).
fof(f4535,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) != s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61))) | s(bool,'F_0') = s(bool,X62)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f164])).
fof(f4560,plain,(
  ( ! [X61,X59,X62,X60,X58] : (s(bool,X62) != s(bool,happ(s(fun(X58,bool),X61),s(X58,X59))) | s(bool,'T_0') = s(bool,X62) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.SOME_1'(s(X58,X59))),s(bool,X60),s(fun(X58,bool),X61)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f164])).
fof(f4561,plain,(
  ( ! [X66,X64,X67,X65,X63] : (s(bool,X67) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X63),X64),s(bool,X65),s(fun(X63,bool),X66))) | s(bool,'T_0') = s(bool,X67) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X63,bool),bool),happ(s(fun(bool,fun(fun(X63,bool),bool)),happ(s(fun('type.option.option'(X63),fun(bool,fun(fun(X63,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X63),X64))),s(bool,X65))),s(fun(X63,bool),X66)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f165])).
fof(f4603,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))) | s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f162])).
fof(f4604,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),happ(s(fun(X6,fun(X5,bool)),X9),s(X6,X7))),s(X5,X10))) | s(X5,X10) = s(X5,sK5(X10,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(fun(X5,bool),X8),s(fun(X6,fun(X5,bool)),X9)),X5))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f164])).
fof(f4605,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(fun(X11,bool),X14),s(fun(X12,fun(X11,bool)),X15))),s(X11,X16))) | s(X11,X16) = s(X11,sK5(X16,happ(s(fun(fun(X12,fun(X11,bool)),fun(X11,bool)),happ(s(fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool))),happ(s(fun('type.option.option'(X12),fun(fun(X11,bool),fun(fun(X12,fun(X11,bool)),fun(X11,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(fun(X11,bool),X14))),s(fun(X12,fun(X11,bool)),X15)),X11))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f165])).
fof(f4606,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X18),s(X17,X19))) | s(X17,X19) = s(X17,sK5(X19,sK4('const.option.SOME_1'(s(fun(X17,bool),X18)),fun(X17,bool)),X17))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f1267])).
fof(f4611,plain,(
  ( ! [X21,X20] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X21),s(bool,'F_0'))) | s(bool,X20) = s(bool,sK5(X20,X21,bool)) | s(bool,'T_0') = s(bool,X20)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f118])).
fof(f4612,plain,(
  ( ! [X24,X23,X22] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0'))) | s(bool,X22) = s(bool,sK5(X22,X23,bool)) | s(bool,X22) = s(bool,X24) | s(bool,'T_0') = s(bool,X24)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f213])).
fof(f4613,plain,(
  ( ! [X26,X27,X25] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X27),s(bool,X26))) | s(bool,X25) = s(bool,sK5(X25,X27,bool)) | s(bool,'T_0') = s(bool,X26) | s(bool,'T_0') = s(bool,X25)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f213])).
fof(f4617,plain,(
  ( ! [X37,X38,X36] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X37),s(bool,'F_0'))) | s(bool,X36) = s(bool,sK5(X36,X37,bool)) | s(bool,X36) = s(bool,X38) | s(bool,'F_0') = s(bool,X38)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3511])).
fof(f4618,plain,(
  ( ! [X39,X41,X40] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X41),s(bool,X40))) | s(bool,X39) = s(bool,sK5(X39,X41,bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3511])).
fof(f4621,plain,(
  ( ! [X50,X48,X49] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X49),s(bool,X48))) | s(bool,'T_0') = s(bool,sK5('T_0',X49,bool)) | s(bool,X48) = s(bool,X50) | s(bool,'T_0') = s(bool,X50)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f213])).
fof(f4632,plain,(
  ( ! [X78,X76,X79,X77] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X79),s(bool,'F_0'))) | s(bool,happ(s(fun(X76,bool),X77),s(X76,X78))) = s(bool,sK5(happ(s(fun(X76,bool),X77),s(X76,X78)),X79,bool)) | s(X76,X78) = s(X76,sK5(X78,X77,X76))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3654])).
fof(f4633,plain,(
  ( ! [X80,X81,X82] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(X80),bool),X82),s('type.option.option'(X80),X81))) | s('type.option.option'(X80),'const.option.SOME_1'(s(X80,sK4(X81,X80)))) = s('type.option.option'(X80),sK5('const.option.SOME_1'(s(X80,sK4(X81,X80))),X82,'type.option.option'(X80))) | s('type.option.option'(X80),'const.option.NONE_0') = s('type.option.option'(X80),X81)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f145])).
fof(f4676,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'F_0') != s(bool,X134) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f154,f3654])).
fof(f4678,plain,(
  ( ! [X142,X140,X143,X141,X139] : (~p(s(bool,happ(s(fun(bool,bool),X142),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X142),s(bool,X143)))) | s(bool,X143) != s(bool,happ(s(fun(X139,bool),X140),s(X139,X141))) | s(X139,X141) = s(X139,sK5(X141,X140,X139))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f155,f3654])).
fof(f4679,plain,(
  ( ! [X146,X144,X147,X145] : (~p(s(bool,happ(s(fun(bool,bool),X147),s(bool,'F_0')))) | s(bool,happ(s(fun(X144,bool),X145),s(X144,X146))) = s(bool,sK5(happ(s(fun(X144,bool),X145),s(X144,X146)),X147,bool)) | s(X144,X146) = s(X144,sK5(X146,X145,X144))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f156,f3654])).
fof(f4695,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X2) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0)) | s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,X2)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4607,f162])).
fof(f4607,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(X0,bool),X4),s(X0,X2))) | s(X0,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3))) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(X0,X2),s(fun(X1,X0),X3)),X4,X0))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f162])).
fof(f4696,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))) = s(X5,sK5('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5)) | s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7)))))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4608,f164])).
fof(f4608,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'F_0') = s(bool,happ(s(fun(X5,bool),X10),s(X5,happ(s(fun(X6,X5),X9),s(X6,X7))))) | s(X5,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9))) = s(X5,sK5('const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(X5,X8),s(fun(X6,X5),X9)),X10,X5))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f164])).
fof(f4697,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))) = s(X11,sK5(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11)) | s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15)))))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4609,f165])).
fof(f4609,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,'F_0') = s(bool,happ(s(fun(X11,bool),X16),s(X11,'const.option.option_CASE_3'(s('type.option.option'(X12),X13),s(X11,X14),s(fun(X12,X11),X15))))) | s(X11,happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15))) = s(X11,sK5(happ(s(fun(fun(X12,X11),X11),happ(s(fun(X11,fun(fun(X12,X11),X11)),happ(s(fun('type.option.option'(X12),fun(X11,fun(fun(X12,X11),X11))),'const.option.option_CASE_0'),s('type.option.option'(X12),X13))),s(X11,X14))),s(fun(X12,X11),X15)),X16,X11))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f165])).
fof(f4698,plain,(
  ( ! [X19,X17,X18] : (s(X17,X18) = s(X17,sK5(sK4('const.option.SOME_1'(s(X17,X18)),X17),X19,X17)) | s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,X18)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4610,f1267])).
fof(f4610,plain,(
  ( ! [X19,X17,X18] : (s(bool,'F_0') = s(bool,happ(s(fun(X17,bool),X19),s(X17,X18))) | s(X17,sK4('const.option.SOME_1'(s(X17,X18)),X17)) = s(X17,sK5(sK4('const.option.SOME_1'(s(X17,X18)),X17),X19,X17))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f1267])).
fof(f4699,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,'T_0'))) | s(bool,X34) = s(bool,sK5(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4616,f873])).
fof(f4616,plain,(
  ( ! [X35,X34] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | s(bool,X34) = s(bool,sK5(X34,X35,bool)) | s(bool,'F_0') = s(bool,X34)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f2767])).
fof(f4885,plain,(
  ( ! [X175,X173,X176,X174] : (s(bool,X174) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,X174),s(fun(X173,bool),X175)),X176,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X176),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X174)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4846,f162])).
fof(f4846,plain,(
  ( ! [X175,X173,X176,X174] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X176),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,X174),s(fun(X173,bool),X175))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X173),'const.option.NONE_0'),s(bool,X174),s(fun(X173,bool),X175)),X176,bool)) | s(bool,'F_0') = s(bool,X174)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f358])).
fof(f6876,plain,(
  ( ! [X229,X227,X228] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X229),s(bool,X228))) | s(bool,X227) = s(bool,sK5(X227,X229,bool)) | s(bool,'F_0') = s(bool,X228) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X227)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3772])).
fof(f6980,plain,(
  ( ! [X15,X16] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X15),s(fun(sK0,bool),sK2))) | s(bool,X15) = s(bool,X16) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X16)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f873,f3772])).
fof(f7104,plain,(
  ( ! [X198,X200,X199] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X199),s(bool,'F_0'))) | s(bool,X198) = s(bool,sK5(X198,X199,bool)) | s(bool,X198) = s(bool,X200) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X200)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3772])).
fof(f7303,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))),bool)) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl0 | $spl18)),
  inference(condensation,[],[f7302])).
fof(f7302,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'F_0') = s(bool,X75) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X72,bool),X73),s(X72,X74)))),bool)) | s(X72,X74) = s(X72,sK5(X74,X73,X72))) ) | ($spl0 | $spl18)),
  inference(duplicate_literal_removal,[],[f6677])).
fof(f6677,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'F_0') = s(bool,X75) | s(bool,'F_0') = s(bool,X75) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X72,bool),X73),s(X72,X74)))),bool)) | s(X72,X74) = s(X72,sK5(X74,X73,X72))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3772,f3654])).
fof(f7343,plain,(
  ( ! [X43,X44] : (s(bool,X44) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X43),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,'T_0') = s(bool,X43)) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f6743,f176])).
fof(f6743,plain,(
  ( ! [X43,X44] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X44) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X43),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X44)),bool)) | s(bool,'T_0') = s(bool,X43)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3772,f882])).
fof(f7346,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,X53) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X50),'const.option.NONE_0'),s(bool,X51),s(fun(X50,bool),X52))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X53)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X51),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f6746,f176])).
fof(f6746,plain,(
  ( ! [X52,X50,X53,X51] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X53) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X50),'const.option.NONE_0'),s(bool,X51),s(fun(X50,bool),X52))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X53)),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X51),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3772,f950])).
fof(f7487,plain,(
  ( ! [X149,X147,X148] : (s(bool,X147) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X147)),bool),X148,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X148),s(bool,'F_0'))) | s(bool,X147) = s(bool,X149) | s(bool,'F_0') = s(bool,X149)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f7162,f1267])).
fof(f7162,plain,(
  ( ! [X149,X147,X148] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X148),s(bool,'F_0'))) | s(bool,sK4('const.option.SOME_1'(s(bool,X147)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X147)),bool),X148,bool)) | s(bool,X147) = s(bool,X149) | s(bool,'F_0') = s(bool,X149)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3772])).
fof(f8047,plain,(
  ( ! [X112,X113] : (s(bool,X112) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X112)),bool),X113,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X113),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X112)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f7978,f1267])).
fof(f7978,plain,(
  ( ! [X112,X113] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X113),s(bool,'F_0'))) | s(bool,sK4('const.option.SOME_1'(s(bool,X112)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X112)),bool),X113,bool)) | s(bool,'T_0') = s(bool,X112)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f7320])).
fof(f9766,plain,(
  ( ! [X17,X16] : (s(bool,'F_0') = s(bool,sK5('F_0',X16,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f9765,f111])).
fof(f9765,plain,(
  ( ! [X17,X16] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,sK5('F_0',X16,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f9728,f873])).
fof(f9728,plain,(
  ( ! [X17,X16] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(bool,'F_0') = s(bool,sK5('F_0',X16,bool)) | s(bool,'T_0') = s(bool,X17) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X16),s(bool,X17)))) ) | $spl18),
  inference(superposition,[],[f513,f2767])).
fof(f10037,plain,(
  ( ! [X54,X55] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X55),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | s('type.option.option'(bool),X54) = s('type.option.option'(bool),sK5(X54,X55,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK4(X54,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X54)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f550])).
fof(f10069,plain,(
  ( ! [X54,X55] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X55),s('type.option.option'(bool),X54))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,'F_0')),X55,'type.option.option'(bool))) | s(bool,'T_0') = s(bool,sK4(X54,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X54)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f550])).
fof(f10151,plain,(
  ( ! [X138,X139] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X139),s(bool,'T_0'))) | s(bool,sK4(X138,bool)) = s(bool,sK5(sK4(X138,bool),X139,bool)) | s('type.option.option'(bool),X138) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X138)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f550])).
fof(f10739,plain,(
  ( ! [X227,X228,X226] : (s(bool,X226) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X226)),bool),X228,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X228),s(bool,X227))) | s(bool,'F_0') = s(bool,X226) | s(bool,'F_0') = s(bool,X227)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f10490,f1267])).
fof(f10490,plain,(
  ( ! [X227,X228,X226] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X228),s(bool,X227))) | s(bool,sK4('const.option.SOME_1'(s(bool,X226)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X226)),bool),X228,bool)) | s(bool,'F_0') = s(bool,X226) | s(bool,'F_0') = s(bool,X227)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f3826])).
fof(f11193,plain,(
  ( ! [X144,X143] : (s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),X144,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X144),s(bool,X143))) | s(bool,'F_0') = s(bool,X143)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f11011,f1267])).
fof(f11011,plain,(
  ( ! [X144,X143] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X144),s(bool,X143))) | s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'T_0')),bool),X144,bool)) | s(bool,'F_0') = s(bool,X143)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f10594])).
fof(f11237,plain,(
  ( ! [X103,X101,X102,X104] : (s('type.option.option'(bool),X104) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,sK4(X104,bool)) = s(bool,happ(s(fun(X101,bool),X102),s(X101,X103))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X104) | s(X101,X103) = s(X101,sK5(X103,X102,X101))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f551,f3654])).
fof(f11467,plain,(
  ( ! [X57,X58] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X58),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X57))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,'T_0')),X58,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X57)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f11188])).
fof(f11497,plain,(
  ( ! [X62,X63] : (s(bool,'F_0') = s(bool,happ(s(fun('type.option.option'(bool),bool),X63),s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X62))) = s('type.option.option'(bool),sK5('const.option.SOME_1'(s(bool,X62)),X63,'type.option.option'(bool))) | s(bool,'F_0') = s(bool,X62)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f11188])).
fof(f11554,plain,(
  ( ! [X103,X101,X102,X104] : (~p(s(bool,happ(s(fun(bool,bool),X104),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X104),s(bool,sK5(happ(s(fun(X101,bool),X102),s(X101,X103)),X104,bool)))) | s(X101,X103) = s(X101,sK5(X103,X102,X101))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f612,f3654])).
fof(f11591,plain,(
  ( ! [X35,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,sK5(X34,X35,bool)))) | s(bool,'F_0') = s(bool,X34)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f11529,f873])).
fof(f11529,plain,(
  ( ! [X35,X34] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X35),s(bool,sK5(X34,X35,bool)))) | s(bool,'F_0') = s(bool,X34)) ) | $spl18),
  inference(superposition,[],[f612,f2767])).
fof(f11606,plain,(
  ( ! [X24,X23,X22] : (s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),X23),s(X22,sK5(X24,X23,X22)))) | s(bool,'F_0') = s(bool,happ(s(fun(X22,bool),X23),s(X22,X24)))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f11605,f111])).
fof(f11605,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),X23),s(X22,sK5(X24,X23,X22)))) | s(bool,'F_0') = s(bool,happ(s(fun(X22,bool),X23),s(X22,X24)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f11574,f873])).
fof(f11574,plain,(
  ( ! [X24,X23,X22] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(bool,'T_0') = s(bool,happ(s(fun(X22,bool),X23),s(X22,sK5(X24,X23,X22)))) | s(bool,'F_0') = s(bool,happ(s(fun(X22,bool),X23),s(X22,X24)))) ) | $spl18),
  inference(superposition,[],[f612,f2767])).
fof(f12329,plain,(
  ( ! [X191,X190] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X191),s(bool,'T_0'))) | s(bool,X190) = s(bool,sK5(X190,X191,bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X190)),bool))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f11955,f1267])).
fof(f11955,plain,(
  ( ! [X191,X190] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X191),s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)))) | s(bool,X190) = s(bool,sK5(X190,X191,bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X190)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f11057])).
fof(f12591,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) | s(bool,X176) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X177),'const.option.NONE_0'),s(bool,happ(s(fun(X173,bool),X174),s(X173,X175))),s(fun(X177,bool),X178))) | s(X173,X175) = s(X173,sK5(X175,X174,X173))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f442,f3654])).
fof(f12647,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) | s(bool,happ(s(fun(X173,bool),X174),s(X173,X175))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X177),'const.option.NONE_0'),s(bool,X176),s(fun(X177,bool),X178))) | s(X173,X175) = s(X173,sK5(X175,X174,X173))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f442,f3654])).
fof(f13341,plain,(
  ( ! [X185,X182,X186,X184,X183,X181] : (~p(s(bool,happ(s(fun(bool,bool),X184),s(bool,'F_0')))) | s(bool,happ(s(fun(X181,bool),X182),s(X181,X183))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X185),'const.option.NONE_0'),s(bool,happ(s(fun(X181,bool),X182),s(X181,X183))),s(fun(X185,bool),X186)),X184,bool)) | s(X181,X183) = s(X181,sK5(X183,X182,X181))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f524,f3654])).
fof(f13395,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X147,bool),X148)),X146,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X146),s(bool,X145)))) | s(bool,'F_0') = s(bool,X145)) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f13333,f873])).
fof(f13333,plain,(
  ( ! [X146,X147,X145,X148] : (~p(s(bool,happ(s(fun(bool,bool),X146),s(bool,X145)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))),s(fun(X147,bool),X148)),X146,bool)) | s(bool,'F_0') = s(bool,X145)) ) | $spl18),
  inference(superposition,[],[f524,f2767])).
fof(f13525,plain,(
  ( ! [X118,X116,X114,X117,X115] : (s(bool,X118) != s(bool,happ(s(fun(X114,bool),X117),s(X114,X115))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.SOME_1'(s(X114,X115))),s(bool,X116),s(fun(X114,bool),X117)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4537,f164])).
fof(f13526,plain,(
  ( ! [X123,X121,X122,X120,X119] : (s(bool,X123) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X119),X120),s(bool,X121),s(fun(X119,bool),X122))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X123)),bool)) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X119,bool),bool),happ(s(fun(bool,fun(fun(X119,bool),bool)),happ(s(fun('type.option.option'(X119),fun(bool,fun(fun(X119,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X119),X120))),s(bool,X121))),s(fun(X119,bool),X122)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4537,f165])).
fof(f23363,plain,(
  ( ! [X111,X109,X112,X110,X113] : (s(bool,X113) != s(bool,happ(s(fun(X109,bool),X112),s(X109,X110))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.SOME_1'(s(X109,X110))),s(bool,X111),s(fun(X109,bool),X112))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X113)),bool))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4562,f164])).
fof(f23837,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,X115) != s(bool,happ(s(fun(X111,bool),X114),s(X111,X112))) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.SOME_1'(s(X111,X112))),s(bool,X113),s(fun(X111,bool),X114))) | s(bool,'F_0') = s(bool,X115)) ) | $spl18),
  inference(forward_demodulation,[],[f23746,f1267])).
fof(f23746,plain,(
  ( ! [X111,X114,X112,X115,X113] : (s(bool,X115) != s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X111,bool),X114),s(X111,X112)))),bool)) | s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X111),'const.option.SOME_1'(s(X111,X112))),s(bool,X113),s(fun(X111,bool),X114))) | s(bool,'F_0') = s(bool,X115)) ) | $spl18),
  inference(superposition,[],[f7171,f164])).
fof(f23944,plain,(
  ( ! [X109,X107,X110,X108,X106] : (s(bool,sK4('const.option.SOME_1'(s(bool,X110)),bool)) != s(bool,happ(s(fun(X106,bool),X109),s(X106,X107))) | s(bool,'F_0') = s(bool,X110) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X106),'const.option.SOME_1'(s(X106,X107))),s(bool,X108),s(fun(X106,bool),X109)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f10529,f164])).
fof(f25630,plain,(
  ( ! [X118,X116,X120,X119,X117] : (s(bool,sK4('const.option.SOME_1'(s(bool,X120)),bool)) != s(bool,happ(s(fun(X116,bool),X119),s(X116,X117))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.SOME_1'(s(X116,X117))),s(bool,X118),s(fun(X116,bool),X119))) | s(bool,'T_0') = s(bool,X120)) ) | $spl18),
  inference(superposition,[],[f7634,f164])).
fof(f25631,plain,(
  ( ! [X125,X123,X121,X124,X122] : (s(bool,sK4('const.option.SOME_1'(s(bool,X125)),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X121),X122),s(bool,X123),s(fun(X121,bool),X124))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X121,bool),bool),happ(s(fun(bool,fun(fun(X121,bool),bool)),happ(s(fun('type.option.option'(X121),fun(bool,fun(fun(X121,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X121),X122))),s(bool,X123))),s(fun(X121,bool),X124))) | s(bool,'T_0') = s(bool,X125)) ) | $spl18),
  inference(superposition,[],[f7634,f165])).
fof(f25876,plain,(
  ( ! [X123,X121,X124,X122,X120] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,happ(s(fun(X120,bool),X121),s(X120,X122))),s(fun(X123,bool),X124))) | s(X120,X122) = s(X120,sK5(X122,X121,X120))) ) | ($spl0 | $spl18)),
  inference(trivial_inequality_removal,[],[f25857])).
fof(f25857,plain,(
  ( ! [X123,X121,X124,X122,X120] : (s(bool,'F_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,happ(s(fun(X120,bool),X121),s(X120,X122))),s(fun(X123,bool),X124))) | s(X120,X122) = s(X120,sK5(X122,X121,X120))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f7677,f3654])).
fof(f26074,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,'F_0') != s(bool,X164) | s(bool,X164) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,happ(s(fun(X161,bool),X162),s(X161,X163))),s(fun(X165,bool),X166))) | s(X161,X163) = s(X161,sK5(X163,X162,X161))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f23836,f3654])).
fof(f26124,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,'F_0') != s(bool,X164) | s(bool,happ(s(fun(X161,bool),X162),s(X161,X163))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,X164),s(fun(X165,bool),X166))) | s(X161,X163) = s(X161,sK5(X163,X162,X161))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f23836,f3654])).
fof(f11236,plain,(
  ( ! [X99,X97,X100,X98] : (s('type.option.option'(bool),X100) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK4(X100,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),'const.option.NONE_0'),s(bool,X98),s(fun(X97,bool),X99))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X100) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X98),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f551,f950])).
fof(f12646,plain,(
  ( ! [X167,X171,X169,X172,X170,X168] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X170))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X167),'const.option.NONE_0'),s(bool,X168),s(fun(X167,bool),X169))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X171),'const.option.NONE_0'),s(bool,X170),s(fun(X171,bool),X172))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X168),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f442,f950])).
fof(f26136,plain,(
  ( ! [X218,X216,X220,X215,X219,X217,X221] : (s(bool,X219) != s(bool,happ(s(fun(X215,bool),X218),s(X215,X216))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X220),'const.option.NONE_0'),s(bool,X219),s(fun(X220,bool),X221))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X215),'const.option.SOME_1'(s(X215,X216))),s(bool,X217),s(fun(X215,bool),X218)))) ) | $spl18),
  inference(superposition,[],[f23836,f164])).
fof(f26137,plain,(
  ( ! [X222,X227,X225,X223,X228,X226,X224] : (s(bool,X226) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X222),X223),s(bool,X224),s(fun(X222,bool),X225))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X227),'const.option.NONE_0'),s(bool,X226),s(fun(X227,bool),X228))) = s(bool,happ(s(fun(fun(X222,bool),bool),happ(s(fun(bool,fun(fun(X222,bool),bool)),happ(s(fun('type.option.option'(X222),fun(bool,fun(fun(X222,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X222),X223))),s(bool,X224))),s(fun(X222,bool),X225)))) ) | $spl18),
  inference(superposition,[],[f23836,f165])).
fof(f951,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X6,bool),X9),s(X6,X7))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | $spl0),
  inference(superposition,[],[f882,f164])).
fof(f4711,plain,(
  ( ! [X80,X81,X82] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X80,bool),X81),s(X80,X82))),s(fun(sK0,bool),sK2))) | s(X80,X82) = s(X80,sK5(X82,X81,X80))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f4664,f175])).
fof(f4664,plain,(
  ( ! [X80,X81,X82] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X80,bool),X81),s(X80,X82))),s(fun(sK0,bool),sK2))) | s(X80,X82) = s(X80,sK5(X82,X81,X80))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f1254,f3654])).
fof(f26116,plain,(
  ( ! [X127,X125,X130,X128,X126,X129] : (s(bool,'T_0') != s(bool,X126) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X125),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(bool,X126),s(fun(X127,bool),X128))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X129),'const.option.NONE_0'),s(bool,X125),s(fun(X129,bool),X130)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f23836,f950])).
fof(f27737,plain,(
  ( ! [X158,X156,X159,X160] : (s(bool,X158) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X159),'const.option.NONE_0'),s(bool,X156),s(fun(X159,bool),X160))) | s(bool,'T_0') != s(bool,X158) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X156),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f26073,f162])).
fof(f26073,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (s(bool,'T_0') != s(bool,X158) | s(bool,X158) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X159),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X155),'const.option.NONE_0'),s(bool,X156),s(fun(X155,bool),X157))),s(fun(X159,bool),X160))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X156),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f23836,f950])).
fof(f26067,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') != s(bool,X132) | s(bool,X132) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X133),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X131),s(fun(sK0,bool),sK2))),s(fun(X133,bool),X134))) | s(bool,'T_0') = s(bool,X131)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f23836,f882])).
fof(f26066,plain,(
  ( ! [X127,X125,X130,X128,X126,X129] : (s(bool,'T_0') != s(bool,X126) | s(bool,X126) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X127),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X125),s(fun(sK0,bool),sK2))),s(fun(X127,bool),X128))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X129),'const.option.NONE_0'),s(bool,X125),s(fun(X129,bool),X130)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f23836,f950])).
fof(f25698,plain,(
  ( ! [X37,X36] : (s(bool,X37) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X36) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl18),
  inference(superposition,[],[f7634,f2767])).
fof(f27732,plain,(
  s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | ($spl0 | $spl18)),
  inference(global_subsumption,[],[f27731,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12665,f12662,f12609,f12583,f12560,f11255,f11250,f11248,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f8907,f8595,f8592,f5756,f5312,f5311,f5308,f5284,f5283,f5280,f5121,f5118,f5096,f5068,f5067,f5064,f4890,f4881,f4876,f4834,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f9764,f12660,f12606,f12604,f12601,f11247,f11245,f10186,f10163,f10156,f10141,f10057,f10051,f10027,f13354,f11565,f10062,f10061,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f1129,f8870,f9681,f1130,f8871,f9682,f13308,f11524,f8872,f8869,f512,f13351,f13309,f11601,f11562,f11552,f11548,f11525,f10144,f4884,f2038,f1970,f1634,f1128,f921,f13332,f13327,f13310,f11546,f11541,f11526,f10143,f9683,f9680,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f1111,f1091,f11589,f13302,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f8593,f5309,f5281,f5065,f4950,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f951,f675,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f8594,f5310,f5282,f5066,f4951,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f12657,f12646,f12645,f11236,f11235,f2580,f2478,f1639,f1493,f1031,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985])).
fof(f27731,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X19) | s(bool,'F_0') = s(bool,sK4(X19,bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f25329,f551])).
fof(f25329,plain,(
  ( ! [X19] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),X19) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X19) | s(bool,'F_0') = s(bool,sK4(X19,bool))) ) | $spl18),
  inference(superposition,[],[f550,f2767])).
fof(f985,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X6,bool),X9),s(X6,X7))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | $spl0),
  inference(superposition,[],[f977,f164])).
fof(f1016,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,happ(s(fun(X6,bool),X9),s(X6,X7))) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X6,bool),X9),s(X6,X7))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | $spl0),
  inference(superposition,[],[f994,f164])).
fof(f1088,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(X130),X131),s(bool,X132),s(fun(X130,bool),X133))) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X130),X131),s(bool,X132),s(fun(X130,bool),X133))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X130,bool),bool),happ(s(fun(bool,fun(fun(X130,bool),bool)),happ(s(fun('type.option.option'(X130),fun(bool,fun(fun(X130,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X130),X131))),s(bool,X132))),s(fun(X130,bool),X133)))) ) | $spl0),
  inference(superposition,[],[f994,f165])).
fof(f1086,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X121),X122),s(bool,X123),s(fun(X121,bool),X124))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X121,bool),bool),happ(s(fun(bool,fun(fun(X121,bool),bool)),happ(s(fun('type.option.option'(X121),fun(bool,fun(fun(X121,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X121),X122))),s(bool,X123))),s(fun(X121,bool),X124)))) ) | $spl0),
  inference(superposition,[],[f977,f165])).
fof(f1085,plain,(
  ( ! [X118,X120,X119,X117] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X117),X118),s(bool,X119),s(fun(X117,bool),X120))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X117,bool),bool),happ(s(fun(bool,fun(fun(X117,bool),bool)),happ(s(fun('type.option.option'(X117),fun(bool,fun(fun(X117,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X117),X118))),s(bool,X119))),s(fun(X117,bool),X120)))) ) | $spl0),
  inference(superposition,[],[f882,f165])).
fof(f13397,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,'T_0') = s(bool,X152) | ~p(s(bool,happ(s(fun(bool,bool),X153),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X152),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X154),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X152),s(fun(sK0,bool),sK2))),s(fun(X154,bool),X155)),X153,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f13335,f162])).
fof(f13335,plain,(
  ( ! [X156,X154,X152,X157,X155,X153] : (~p(s(bool,happ(s(fun(bool,bool),X153),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X152),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X154),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X152),s(fun(sK0,bool),sK2))),s(fun(X154,bool),X155)),X153,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(bool,X152),s(fun(X156,bool),X157)))) ) | $spl0),
  inference(superposition,[],[f524,f950])).
fof(f13259,plain,(
  ( ! [X70,X72,X71,X73] : (s(bool,X71) = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X70),s(fun(sK0,bool),sK2)))),bool)) | s(bool,'F_0') = s(bool,X71) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X70),s(fun(X72,bool),X73)))) ) | ($spl0 | $spl18)),
  inference(trivial_inequality_removal,[],[f13231])).
fof(f13231,plain,(
  ( ! [X70,X72,X71,X73] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X71) = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X70),s(fun(sK0,bool),sK2)))),bool)) | s(bool,'F_0') = s(bool,X71) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X70),s(fun(X72,bool),X73)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4478,f950])).
fof(f13258,plain,(
  ( ! [X74,X75] : (s(bool,X75) = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X74),s(fun(sK0,bool),sK2)))),bool)) | s(bool,'F_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X74)) ) | ($spl0 | $spl18)),
  inference(trivial_inequality_removal,[],[f13232])).
fof(f13232,plain,(
  ( ! [X74,X75] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X75) = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X74),s(fun(sK0,bool),sK2)))),bool)) | s(bool,'F_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X74)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4478,f882])).
fof(f12643,plain,(
  ( ! [X156,X154,X157,X155] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X155))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X154),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(bool,X155),s(fun(X156,bool),X157))) | s(bool,'T_0') = s(bool,X154)) ) | $spl0),
  inference(superposition,[],[f442,f882])).
fof(f12642,plain,(
  ( ! [X152,X151,X149,X153,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X148),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(bool,X149),s(fun(X150,bool),X151))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X148),s(fun(X152,bool),X153)))) ) | $spl0),
  inference(superposition,[],[f442,f950])).
fof(f12587,plain,(
  ( ! [X156,X154,X157,X155] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X155))) | s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X154),s(fun(sK0,bool),sK2))),s(fun(X156,bool),X157))) | s(bool,'T_0') = s(bool,X154)) ) | $spl0),
  inference(superposition,[],[f442,f882])).
fof(f12586,plain,(
  ( ! [X152,X151,X149,X153,X150,X148] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s(bool,X149) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X148),s(fun(sK0,bool),sK2))),s(fun(X150,bool),X151))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X148),s(fun(X152,bool),X153)))) ) | $spl0),
  inference(superposition,[],[f442,f950])).
fof(f11553,plain,(
  ( ! [X99,X97,X100,X98] : (~p(s(bool,happ(s(fun(bool,bool),X100),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X100),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X97),'const.option.NONE_0'),s(bool,X98),s(fun(X97,bool),X99)),X100,bool)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X98),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f612,f950])).
fof(f11233,plain,(
  ( ! [X90,X91] : (s('type.option.option'(bool),X91) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK4(X91,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X90),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X91) | s(bool,'T_0') = s(bool,X90)) ) | $spl0),
  inference(superposition,[],[f551,f882])).
fof(f11232,plain,(
  ( ! [X88,X87,X89,X86] : (s('type.option.option'(bool),X87) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK4(X87,bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X86),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X87) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.NONE_0'),s(bool,X86),s(fun(X88,bool),X89)))) ) | $spl0),
  inference(superposition,[],[f551,f950])).
fof(f5224,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X59),s(fun(sK0,bool),sK2))),s(fun(X60,bool),X61))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X59),s(fun(X62,bool),X63)))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f5208])).
fof(f5208,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X59),s(fun(sK0,bool),sK2))),s(fun(X60,bool),X61))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X59),s(fun(X62,bool),X63)))) ) | $spl0),
  inference(superposition,[],[f4949,f950])).
fof(f5223,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X64),s(fun(sK0,bool),sK2))),s(fun(X65,bool),X66))) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f5209])).
fof(f5209,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X64),s(fun(sK0,bool),sK2))),s(fun(X65,bool),X66))) | s(bool,'T_0') = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f4949,f882])).
fof(f4997,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X27),s(fun(sK0,bool),sK2)))),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X28),'const.option.NONE_0'),s(bool,X27),s(fun(X28,bool),X29)))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f4981])).
fof(f4981,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X27),s(fun(sK0,bool),sK2)))),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X28),'const.option.NONE_0'),s(bool,X27),s(fun(X28,bool),X29)))) ) | $spl0),
  inference(superposition,[],[f4952,f950])).
fof(f4996,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X30),s(fun(sK0,bool),sK2)))),bool)) | s(bool,'T_0') = s(bool,X30)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f4982])).
fof(f4982,plain,(
  ( ! [X30] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X30),s(fun(sK0,bool),sK2)))),bool)) | s(bool,'T_0') = s(bool,X30)) ) | $spl0),
  inference(superposition,[],[f4952,f882])).
fof(f4703,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X73) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X73),s(fun(X72,bool),X74)),X75,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X75),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X73),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(forward_demodulation,[],[f4631,f162])).
fof(f4631,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X75),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X73),s(fun(X72,bool),X74))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X73),s(fun(X72,bool),X74)),X75,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X73),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f950])).
fof(f4628,plain,(
  ( ! [X68,X67] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X68),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X67),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X67),s(fun(sK0,bool),sK2)),X68,bool)) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f882])).
fof(f4627,plain,(
  ( ! [X66,X64,X65,X63] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X64),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X63),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X63),s(fun(sK0,bool),sK2)),X64,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,X63),s(fun(X65,bool),X66)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3654,f950])).
fof(f4338,plain,(
  ( ! [X47,X46] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X46),s(fun(sK0,bool),sK2)))) | s(bool,X46) = s(bool,X47) | s(bool,'F_0') = s(bool,X47)) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f3999,f176])).
fof(f3999,plain,(
  ( ! [X47,X46] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X46),s(fun(sK0,bool),sK2)))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X46) = s(bool,X47) | s(bool,'F_0') = s(bool,X47)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f874,f3511])).
fof(f1263,plain,(
  ( ! [X80,X78,X79,X77] : (s(bool,X78) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.NONE_0'),s(bool,X78),s(fun(X77,bool),X79)),X80,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X78),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(forward_demodulation,[],[f1225,f162])).
fof(f1225,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,happ(s(fun(bool,bool),X80),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.NONE_0'),s(bool,X78),s(fun(X77,bool),X79))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(X77),'const.option.NONE_0'),s(bool,X78),s(fun(X77,bool),X79)),X80,bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X78),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f156,f950])).
fof(f1262,plain,(
  ( ! [X76,X75,X73] : (s(bool,X73) != s(bool,X76) | ~p(s(bool,happ(s(fun(bool,bool),X75),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X75),s(bool,X76)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X73),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(forward_demodulation,[],[f1224,f162])).
fof(f1224,plain,(
  ( ! [X76,X74,X72,X75,X73] : (~p(s(bool,happ(s(fun(bool,bool),X75),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X75),s(bool,X76)))) | s(bool,X76) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,X73),s(fun(X72,bool),X74))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X73),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f155,f950])).
fof(f1259,plain,(
  ( ! [X45,X43,X46,X44] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X46),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X43),'const.option.NONE_0'),s(bool,X44),s(fun(X43,bool),X45))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X44),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(subsumption_resolution,[],[f1216,f111])).
fof(f1216,plain,(
  ( ! [X45,X43,X46,X44] : (~p(s(bool,'T_0')) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X46),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X43),'const.option.NONE_0'),s(bool,X44),s(fun(X43,bool),X45))) | s(bool,'T_0') = s(bool,X46) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X44),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f978,f950])).
fof(f1257,plain,(
  ( ! [X26,X24] : (~p(s(bool,X26)) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X24),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(forward_demodulation,[],[f1256,f162])).
fof(f1256,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,X26)) | s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X23),'const.option.NONE_0'),s(bool,X24),s(fun(X23,bool),X25))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X24),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(subsumption_resolution,[],[f1210,f111])).
fof(f1210,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | ~p(s(bool,X26)) | s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X23),'const.option.NONE_0'),s(bool,X24),s(fun(X23,bool),X25))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X24),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f161,f950])).
fof(f1254,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(forward_demodulation,[],[f1231,f162])).
fof(f1231,plain,(
  ( ! [X4,X5,X3] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s(bool,X4),s(fun(X3,bool),X5)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(trivial_inequality_removal,[],[f1204])).
fof(f1204,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,'T_0') | p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s(bool,X4),s(fun(X3,bool),X5)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f120,f950])).
fof(f1251,plain,(
  ( ! [X54,X56,X55,X53] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X53),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X54) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X55),'const.option.NONE_0'),s(bool,X53),s(fun(X55,bool),X56)))) ) | $spl0),
  inference(subsumption_resolution,[],[f1190,f111])).
fof(f1190,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X53),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X54) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X55),'const.option.NONE_0'),s(bool,X53),s(fun(X55,bool),X56)))) ) | $spl0),
  inference(superposition,[],[f978,f950])).
fof(f1195,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,'T_0') != s(bool,X72) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X71),s(fun(sK0,bool),sK2))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.NONE_0'),s(bool,X71),s(fun(X73,bool),X74)))) ) | $spl0),
  inference(superposition,[],[f154,f950])).
fof(f1041,plain,(
  ( ! [X6,X5] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X5),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) ) | $spl0),
  inference(subsumption_resolution,[],[f1036,f111])).
fof(f1036,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X5),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) ) | $spl0),
  inference(superposition,[],[f978,f882])).
fof(f1002,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,happ(s(fun(bool,bool),X22),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X22),s(bool,X23)))) | s(bool,X23) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X21),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f155,f882])).
fof(f984,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s(bool,X4),s(fun(X3,bool),X5)))) ) | $spl0),
  inference(superposition,[],[f977,f162])).
fof(f978,plain,(
  ( ! [X10,X11] : (~p(s(bool,X11)) | s(bool,X11) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X10),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X10)) ) | $spl0),
  inference(subsumption_resolution,[],[f961,f111])).
fof(f961,plain,(
  ( ! [X10,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X11)) | s(bool,X11) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X10),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X10)) ) | $spl0),
  inference(superposition,[],[f161,f882])).
fof(f968,plain,(
  ( ! [X23,X22] : (~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X22),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X22),s(fun(sK0,bool),sK2)),X23,bool)) | s(bool,'T_0') = s(bool,X22)) ) | $spl0),
  inference(superposition,[],[f156,f882])).
fof(f966,plain,(
  ( ! [X19,X18] : (s(bool,'T_0') != s(bool,X19) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))))) | s(bool,'T_0') = s(bool,X18)) ) | $spl0),
  inference(superposition,[],[f154,f882])).
fof(f874,plain,(
  ( ! [X0] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2)))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f168,f118])).
fof(f26091,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X10) != s(bool,X11) | s(bool,X9) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X11),s(fun(X12,bool),X13))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl18),
  inference(superposition,[],[f23836,f213])).
fof(f26090,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X4) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(bool,X5),s(fun(X6,bool),X7))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl18),
  inference(superposition,[],[f23836,f213])).
fof(f26058,plain,(
  ( ! [X92,X90,X88,X91,X89] : (s(bool,X88) != s(bool,X89) | s(bool,X89) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X90),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X90,bool),X91))) | s(bool,X88) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) ) | $spl18),
  inference(superposition,[],[f23836,f213])).
fof(f26041,plain,(
  ( ! [X12,X10,X13,X11,X9] : (s(bool,X10) != s(bool,X11) | s(bool,X11) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X9),s(fun(X12,bool),X13))) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X9)) ) | $spl18),
  inference(superposition,[],[f23836,f213])).
fof(f26040,plain,(
  ( ! [X6,X4,X8,X7,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.NONE_0'),s(bool,X4),s(fun(X6,bool),X7))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) ) | $spl18),
  inference(superposition,[],[f23836,f213])).
fof(f11601,plain,(
  ( ! [X87,X86] : (s(bool,'T_0') = s(bool,X86) | ~p(s(bool,happ(s(fun(bool,bool),X87),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X87),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X86),s(fun(sK0,bool),sK2)),X87,bool))))) ) | $spl0),
  inference(forward_demodulation,[],[f11549,f162])).
fof(f11549,plain,(
  ( ! [X88,X87,X89,X86] : (~p(s(bool,happ(s(fun(bool,bool),X87),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X87),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X86),s(fun(sK0,bool),sK2)),X87,bool)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.NONE_0'),s(bool,X86),s(fun(X88,bool),X89)))) ) | $spl0),
  inference(superposition,[],[f612,f950])).
fof(f11315,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f11138,f213])).
fof(f11138,plain,(
  ( ! [X107] : (s(bool,X107) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X107)) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f10887,f977])).
fof(f10887,plain,(
  ( ! [X107] : (s(bool,X107) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X107) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X107),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f994,f10594])).
fof(f5184,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X2),'const.option.NONE_0'),s(bool,X1),s(fun(X2,bool),X3))) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f4949,f213])).
fof(f4957,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f4952,f213])).
fof(f4952,plain,(
  ( ! [X52] : (s(bool,'T_0') != s(bool,X52) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X52)),bool))) ) | $spl0),
  inference(forward_demodulation,[],[f4924,f873])).
fof(f4924,plain,(
  ( ! [X52] : (s(bool,'T_0') != s(bool,X52) | s(bool,sK4('const.option.SOME_1'(s(bool,X52)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f2888,f1267])).
fof(f4949,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') != s(bool,X42) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),'const.option.NONE_0'),s(bool,X42),s(fun(X41,bool),X43)))) ) | $spl0),
  inference(forward_demodulation,[],[f4921,f873])).
fof(f4921,plain,(
  ( ! [X43,X41,X42] : (s(bool,'T_0') != s(bool,X42) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),'const.option.NONE_0'),s(bool,X42),s(fun(X41,bool),X43)))) ) | $spl0),
  inference(superposition,[],[f2888,f162])).
fof(f3730,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f3711,f111])).
fof(f3711,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f3633,f213])).
fof(f2275,plain,(
  ( ! [X66,X65] : (s(bool,X65) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X65) | s(bool,X66) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X65),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X66)) ) | $spl0),
  inference(superposition,[],[f994,f1809])).
fof(f2616,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,X0) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(condensation,[],[f2594])).
fof(f2594,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(equality_factoring,[],[f1809])).
fof(f2921,plain,(
  ( ! [X72] : (s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X72)) ) | $spl0),
  inference(subsumption_resolution,[],[f2555,f111])).
fof(f2555,plain,(
  ( ! [X72] : (~p(s(bool,'T_0')) | s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X72)) ) | $spl0),
  inference(superposition,[],[f175,f1809])).
fof(f2630,plain,(
  ( ! [X35,X34] : (s(bool,X34) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X35) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X34) = s(bool,X35)) ) | $spl0),
  inference(trivial_inequality_removal,[],[f2539])).
fof(f2539,plain,(
  ( ! [X35,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X34) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X35) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X34) = s(bool,X35)) ) | $spl0),
  inference(superposition,[],[f894,f1809])).
fof(f2111,plain,(
  ( ! [X30,X33,X31,X32] : (s(bool,X33) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X31),s(fun(X30,bool),X32))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X33),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X31),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(subsumption_resolution,[],[f2095,f111])).
fof(f2095,plain,(
  ( ! [X30,X33,X31,X32] : (~p(s(bool,'T_0')) | s(bool,X33) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X31),s(fun(X30,bool),X32))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X33),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X31),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f1257,f950])).
fof(f2109,plain,(
  ( ! [X28,X27] : (s(bool,X28) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X27),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X28),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X27)) ) | $spl0),
  inference(subsumption_resolution,[],[f2093,f111])).
fof(f2093,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | s(bool,X28) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X27),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X28),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X27)) ) | $spl0),
  inference(superposition,[],[f1257,f882])).
fof(f2108,plain,(
  ( ! [X26,X24,X23,X25] : (s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X23),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X24),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X25),'const.option.NONE_0'),s(bool,X23),s(fun(X25,bool),X26)))) ) | $spl0),
  inference(subsumption_resolution,[],[f2092,f111])).
fof(f2092,plain,(
  ( ! [X26,X24,X23,X25] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X23),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X24),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X25),'const.option.NONE_0'),s(bool,X23),s(fun(X25,bool),X26)))) ) | $spl0),
  inference(superposition,[],[f1257,f950])).
fof(f2100,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X1),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(subsumption_resolution,[],[f2083,f111])).
fof(f2083,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X1),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f1257,f213])).
fof(f1260,plain,(
  ( ! [X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X65))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) | s(bool,'T_0') != s(bool,X67) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X65),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(forward_demodulation,[],[f1222,f162])).
fof(f1222,plain,(
  ( ! [X66,X64,X67,X65] : (s(bool,'T_0') != s(bool,X67) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X67))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.NONE_0'),s(bool,X65),s(fun(X64,bool),X66))))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X65),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f154,f950])).
fof(f1220,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X59))) | s(bool,X59) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X56),'const.option.NONE_0'),s(bool,X57),s(fun(X56,bool),X58))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X57),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(superposition,[],[f153,f950])).
fof(f950,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.NONE_0'),s(bool,X4),s(fun(X3,bool),X5)))) ) | $spl0),
  inference(superposition,[],[f882,f162])).
fof(f42178,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60 | $spl95)),
  inference(global_subsumption,[],[f39941,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42116,plain,(
  ( ! [X50] : (s(bool,X50) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f36708,f41639])).
fof(f42090,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f42089,f41673])).
fof(f42089,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f124,f41673])).
fof(f42063,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(duplicate_literal_removal,[],[f42062])).
fof(f42062,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f42061])).
fof(f42061,plain,(
  ( ! [X109,X107,X108] : (s(bool,X107) = s(bool,X109) | s(bool,'F_0') = s(bool,X108) | s(bool,'F_0') = s(bool,X107)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f3900,f41639])).
fof(f42042,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f42041])).
fof(f42041,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f42040])).
fof(f42040,plain,(
  ( ! [X94,X95,X96] : (s(bool,X94) = s(bool,X95) | s(bool,X94) = s(bool,X96) | s(bool,'F_0') = s(bool,X96)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f4058,f41639])).
fof(f41977,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f41976])).
fof(f41976,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f7171,f41655])).
fof(f41974,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f7183,f41655])).
fof(f41966,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(duplicate_literal_removal,[],[f41965])).
fof(f41965,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f41964])).
fof(f41964,plain,(
  ( ! [X78,X76,X77] : (s(bool,'F_0') = s(bool,X77) | s(bool,X76) = s(bool,X78) | s(bool,'F_0') = s(bool,X78)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f7592,f41655])).
fof(f41960,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f41959])).
fof(f41959,plain,(
  ( ! [X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f7819,f41673])).
fof(f41955,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f9646,f41655])).
fof(f41911,plain,(
  ( ! [X528,X530,X524,X529,X525,X527] : (s(bool,X528) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X529),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X529,bool),X530))) | s(bool,X528) != s(bool,happ(s(fun(X524,bool),X527),s(X524,sK4(X525,X524)))) | s('type.option.option'(X524),'const.option.NONE_0') = s('type.option.option'(X524),X525)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f41673,f39879])).
fof(f41948,plain,(
  ( ! [X173,X171,X172] : (s(X171,sK4(X173,X171)) = s(X171,sK5(sK4(X173,X171),X172,X171)) | s('type.option.option'(X171),'const.option.NONE_0') = s('type.option.option'(X171),X173)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f41908,f111])).
fof(f41908,plain,(
  ( ! [X173,X171,X172] : (~p(s(bool,'T_0')) | s(X171,sK4(X173,X171)) = s(X171,sK5(sK4(X173,X171),X172,X171)) | s('type.option.option'(X171),'const.option.NONE_0') = s('type.option.option'(X171),X173)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f41673,f39666])).
fof(f41946,plain,(
  ( ! [X156,X154,X152,X157,X153] : (s(X152,sK4(X154,X152)) = s(X152,sK5('const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(X152,sK4(X154,X152)),s(fun(X156,X152),X157)),X153,X152)) | s('type.option.option'(X152),'const.option.NONE_0') = s('type.option.option'(X152),X154)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f41907,f111])).
fof(f41907,plain,(
  ( ! [X156,X154,X152,X157,X153] : (~p(s(bool,'T_0')) | s(X152,sK4(X154,X152)) = s(X152,sK5('const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(X152,sK4(X154,X152)),s(fun(X156,X152),X157)),X153,X152)) | s('type.option.option'(X152),'const.option.NONE_0') = s('type.option.option'(X152),X154)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f41673,f39662])).
fof(f41944,plain,(
  ( ! [X146,X151,X147,X150,X148] : (s(X146,sK4(X148,X146)) = s(X146,sK5(sK4(X148,X146),'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(fun(X146,bool),X147),s(fun(X150,fun(X146,bool)),X151)),X146)) | s('type.option.option'(X146),'const.option.NONE_0') = s('type.option.option'(X146),X148)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f41906,f111])).
fof(f41906,plain,(
  ( ! [X146,X151,X147,X150,X148] : (~p(s(bool,'T_0')) | s(X146,sK4(X148,X146)) = s(X146,sK5(sK4(X148,X146),'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(fun(X146,bool),X147),s(fun(X150,fun(X146,bool)),X151)),X146)) | s('type.option.option'(X146),'const.option.NONE_0') = s('type.option.option'(X146),X148)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f41673,f39661])).
fof(f41942,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(fun(X112,bool),X115) = s(fun(X112,bool),sK5(X115,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(fun(X112,bool),bool),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114))),s(fun(X116,fun(fun(X112,bool),bool)),X117)),fun(X112,bool)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f41905,f111])).
fof(f41905,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | s(fun(X112,bool),X115) = s(fun(X112,bool),sK5(X115,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(fun(X112,bool),bool),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114))),s(fun(X116,fun(fun(X112,bool),bool)),X117)),fun(X112,bool)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f41673,f38558])).
fof(f41940,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f41904,f111])).
fof(f41904,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f41673,f13377])).
fof(f41936,plain,(
  ( ! [X70,X72,X71,X73] : (s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f41898,f111])).
fof(f41898,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,'T_0')) | s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f41673,f1074])).
fof(f41919,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(duplicate_literal_removal,[],[f41684])).
fof(f41684,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f41673,f10154])).
fof(f41673,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f41672])).
fof(f41672,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f9649,f41655])).
fof(f41660,plain,(
  ( ! [X109,X108] : (s(bool,X109) = s(bool,sK4(X108,bool)) | s('type.option.option'(bool),X108) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X108)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f10139,f41639])).
fof(f41657,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f41656])).
fof(f41656,plain,(
  ( ! [X315,X316,X318,X317] : (s(fun(X315,bool),X316) = s(fun(X315,bool),X317) | s(bool,'F_0') = s(bool,X318) | s(bool,'F_0') = s(bool,g(s(X315,sK6(X316,X317,bool,X315))))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f10397,f41655])).
fof(f41655,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654])).
fof(f41654,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,X1) = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f41653])).
fof(f41653,plain,(
  ( ! [X185,X186,X184] : (s(bool,X186) = s(bool,sK4('const.option.SOME_1'(s(bool,X184)),bool)) | s(bool,'F_0') = s(bool,X184) | s(bool,'F_0') = s(bool,X185)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f10478,f41639])).
fof(f41651,plain,(
  ( ! [X0,X1] : (s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'F_0') = s(bool,X1)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569])).
fof(f41644,plain,(
  ( ! [X107,X105,X106] : (s('type.option.option'(bool),X107) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X106))) | s(bool,sK4(X107,bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X105)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X107) | s(bool,'F_0') = s(bool,X106)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238])).
fof(f11239,plain,(
  ( ! [X109,X108] : (s('type.option.option'(bool),X109) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,sK4(X109,bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,X108)),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X109) | s(bool,X108) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f551,f8191])).
fof(f11263,plain,(
  ( ! [X62,X63] : (s('type.option.option'(bool),X63) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X62) = s(bool,sK4(X63,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X63) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f11222,f1267])).
fof(f11222,plain,(
  ( ! [X62,X63] : (s('type.option.option'(bool),X63) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X62) = s(bool,sK4(X63,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X63) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X62)),bool))) ) | $spl40),
  inference(superposition,[],[f551,f8191])).
fof(f11268,plain,(
  ( ! [X116,X115] : (s(bool,'F_0') = s(bool,sK4(X116,bool)) | s('type.option.option'(bool),X116) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X116) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X115)),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f11242,f1267])).
fof(f11242,plain,(
  ( ! [X116,X115] : (s('type.option.option'(bool),X116) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115))) | s(bool,sK4(X116,bool)) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X116) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X115)),bool))) ) | $spl40),
  inference(superposition,[],[f551,f8191])).
fof(f41639,plain,(
  ( ! [X19,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638])).
fof(f41638,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X18)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X18))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511])).
fof(f41614,plain,(
  ( ! [X118,X119] : (s(bool,X119) = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool)) | s(bool,X118) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f11829,f39956])).
fof(f41610,plain,(
  ( ! [X30,X28,X31,X29] : (s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.NONE_0'),s(bool,X28),s(fun(X30,bool),X31))) | s(bool,'T_0') = s(bool,X28)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12560,f39956])).
fof(f41609,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X57) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s(bool,X56),s(fun(X58,bool),X59))) | s(bool,X56) = s(bool,X60) | s(bool,'F_0') = s(bool,X60)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12566,f39956])).
fof(f41608,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,X87) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.NONE_0'),s(bool,X86),s(fun(X88,bool),X89))) | s(bool,X86) = s(bool,X90) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X90)),bool))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12572,f39956])).
fof(f41603,plain,(
  ( ! [X59,X57,X60,X58,X56] : (s(bool,X56) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X58),'const.option.NONE_0'),s(bool,X57),s(fun(X58,bool),X59))) | s(bool,X56) = s(bool,X60) | s(bool,'F_0') = s(bool,X60)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12622,f39956])).
fof(f41602,plain,(
  ( ! [X90,X88,X87,X89,X86] : (s(bool,X86) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),'const.option.NONE_0'),s(bool,X87),s(fun(X88,bool),X89))) | s(bool,X86) = s(bool,X90) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X90)),bool))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12628,f39956])).
fof(f41601,plain,(
  ( ! [X198,X196,X200,X199,X197] : (s(bool,sK4('const.option.SOME_1'(s(bool,X196)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X198),'const.option.NONE_0'),s(bool,X197),s(fun(X198,bool),X199))) | s(bool,X196) = s(bool,X200) | s(bool,'F_0') = s(bool,X200)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12652,f39956])).
fof(f12694,plain,(
  ( ! [X204,X202,X203,X201] : (s(bool,X202) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X203),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X203,bool),X204))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X201)),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f12597,f1267])).
fof(f12597,plain,(
  ( ! [X204,X202,X203,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s(bool,X202) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X203),'const.option.NONE_0'),s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X203,bool),X204))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X201)),bool))) ) | $spl40),
  inference(superposition,[],[f442,f8191])).
fof(f41600,plain,(
  ( ! [X103,X101,X102,X100] : (s(bool,X100) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.NONE_0'),s(bool,X101),s(fun(X102,bool),X103))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X100)),bool))) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12703,f39956])).
fof(f41599,plain,(
  ( ! [X182,X180,X181,X179] : (s(bool,'T_0') = s(bool,X179) | s(bool,sK4('const.option.SOME_1'(s(bool,X179)),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X181),'const.option.NONE_0'),s(bool,X180),s(fun(X181,bool),X182)))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12709,f39956])).
fof(f12711,plain,(
  ( ! [X204,X202,X203,X201] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X203),'const.option.NONE_0'),s(bool,X202),s(fun(X203,bool),X204))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X201)),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f12653,f1267])).
fof(f12653,plain,(
  ( ! [X204,X202,X203,X201] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X201))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X202))) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X203),'const.option.NONE_0'),s(bool,X202),s(fun(X203,bool),X204))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X201)),bool))) ) | $spl40),
  inference(superposition,[],[f442,f8191])).
fof(f23834,plain,(
  ( ! [X105,X106] : (s(bool,X106) != s(bool,sK4('const.option.SOME_1'(s(bool,X105)),bool)) | s(bool,X106) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X105)) ) | ($spl18 | $spl40)),
  inference(subsumption_resolution,[],[f23744,f9630])).
fof(f23744,plain,(
  ( ! [X105,X106] : (s(bool,X106) != s(bool,sK4('const.option.SOME_1'(s(bool,X105)),bool)) | s(bool,X106) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X106) | s(bool,'T_0') = s(bool,X105)) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f7171,f7684])).
fof(f26179,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,X198) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X199),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X199,bool),X200))) | s(bool,X197) != s(bool,X198) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X197)),bool))) ) | ($spl18 | $spl40)),
  inference(forward_demodulation,[],[f26082,f1267])).
fof(f26082,plain,(
  ( ! [X198,X200,X199,X197] : (s(bool,X197) != s(bool,X198) | s(bool,X198) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X199),'const.option.NONE_0'),s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)),s(fun(X199,bool),X200))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X197)),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f23836,f8191])).
fof(f26186,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,'F_0') != s(bool,X73) | s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),'const.option.NONE_0'),s(bool,X73),s(fun(X74,bool),X75))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X72)),bool))) ) | ($spl18 | $spl40)),
  inference(forward_demodulation,[],[f26104,f1267])).
fof(f26104,plain,(
  ( ! [X74,X72,X75,X73] : (s(bool,X73) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X74),'const.option.NONE_0'),s(bool,X73),s(fun(X74,bool),X75))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X72)),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f23836,f8191])).
fof(f29114,plain,(
  ( ! [X143] : (s('type.option.option'(bool),X143) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X143) | s(bool,'T_0') = s(bool,sK4(X143,bool))) ) | $spl40),
  inference(forward_demodulation,[],[f28965,f1267])).
fof(f28965,plain,(
  ( ! [X143] : (s('type.option.option'(bool),X143) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X143) | s(bool,'T_0') = s(bool,sK4(X143,bool))) ) | $spl40),
  inference(superposition,[],[f145,f7684])).
fof(f38593,plain,(
  ( ! [X208,X206,X209,X207] : (s(bool,'T_0') = s(bool,X206) | s(bool,'F_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.NONE_0'),s(fun(bool,bool),X207),s(fun(X208,fun(bool,bool)),X209)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X207),s(bool,X206))))) ) | $spl40),
  inference(forward_demodulation,[],[f38592,f1267])).
fof(f38592,plain,(
  ( ! [X208,X206,X209,X207] : (s(bool,'F_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.NONE_0'),s(fun(bool,bool),X207),s(fun(X208,fun(bool,bool)),X209)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X207),s(bool,X206)))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X206)),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f38528,f1267])).
fof(f38528,plain,(
  ( ! [X208,X206,X209,X207] : (~p(s(bool,happ(s(fun(bool,bool),X207),s(bool,X206)))) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.NONE_0'),s(fun(bool,bool),X207),s(fun(X208,fun(bool,bool)),X209)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X206)),bool))) ) | $spl40),
  inference(superposition,[],[f510,f8191])).
fof(f38598,plain,(
  ( ! [X227,X225,X226,X224] : (s(bool,'F_0') = s(bool,X224) | s(bool,X224) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X224)),bool),'const.option.option_CASE_3'(s('type.option.option'(X226),'const.option.NONE_0'),s(fun(bool,bool),X225),s(fun(X226,fun(bool,bool)),X227)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X225),s(bool,'T_0'))))) ) | $spl40),
  inference(forward_demodulation,[],[f38597,f1267])).
fof(f38597,plain,(
  ( ! [X227,X225,X226,X224] : (s(bool,X224) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X224)),bool),'const.option.option_CASE_3'(s('type.option.option'(X226),'const.option.NONE_0'),s(fun(bool,bool),X225),s(fun(X226,fun(bool,bool)),X227)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X225),s(bool,'T_0')))) | s(bool,X224) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f38532,f1267])).
fof(f38532,plain,(
  ( ! [X227,X225,X226,X224] : (~p(s(bool,happ(s(fun(bool,bool),X225),s(bool,'T_0')))) | s(bool,sK4('const.option.SOME_1'(s(bool,X224)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X224)),bool),'const.option.option_CASE_3'(s('type.option.option'(X226),'const.option.NONE_0'),s(fun(bool,bool),X225),s(fun(X226,fun(bool,bool)),X227)),bool)) | s(bool,X224) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f510,f8191])).
fof(f41319,plain,(
  ( ! [X249,X246,X247,X245] : (s(bool,X249) = s(bool,happ(s(fun(X245,bool),X246),s(X245,sK4(X247,X245)))) | s(bool,'T_0') = s(bool,X249) | s('type.option.option'(X245),'const.option.NONE_0') = s('type.option.option'(X245),X247)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f39680,f39956])).
fof(f39924,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),X90),s(bool,X91),s(fun(X88,bool),X89))) | s('type.option.option'(X88),'const.option.NONE_0') = s('type.option.option'(X88),X90) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X88,bool),X89),s(X88,sK4(X90,X88))))),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f39528,f1267])).
fof(f39528,plain,(
  ( ! [X90,X88,X91,X89] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X88),X90),s(bool,X91),s(fun(X88,bool),X89))) | s('type.option.option'(X88),'const.option.NONE_0') = s('type.option.option'(X88),X90) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X88,bool),X89),s(X88,sK4(X90,X88))))),bool))) ) | $spl40),
  inference(superposition,[],[f651,f8191])).
fof(f39951,plain,(
  ( ! [X109,X107,X108,X106] : (s(bool,'F_0') = s(bool,happ(s(fun(X106,bool),X109),s(X106,sK4(X107,X106)))) | s('type.option.option'(X106),'const.option.NONE_0') = s('type.option.option'(X106),X107) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X106),X107),s(bool,X108),s(fun(X106,bool),X109)))),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f39634,f1267])).
fof(f39634,plain,(
  ( ! [X109,X107,X108,X106] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(X106,bool),X109),s(X106,sK4(X107,X106)))) | s('type.option.option'(X106),'const.option.NONE_0') = s('type.option.option'(X106),X107) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X106),X107),s(bool,X108),s(fun(X106,bool),X109)))),bool))) ) | $spl40),
  inference(superposition,[],[f651,f8191])).
fof(f39956,plain,(
  ( ! [X269] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X269)))) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f5763,f6543,f6597,f6648,f8632,f8657,f8950,f8963,f9392,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f550,f125,f19956,f20033,f20536,f20537,f20034,f19655,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1426,f1397,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f1427,f1398,f1100,f1099,f1074,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12711,f12710,f12703,f12694,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11603,f11602,f11567,f11565,f11562,f11552,f11524,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11239,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9779,f9764,f9683,f9682,f9681,f9680,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9369,f9268,f9195,f9117,f8907,f8872,f8871,f8870,f8869,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8191,f7684,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f29114,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36527,f36581,f36539,f36540,f36541,f36542,f36584,f36610,f36708,f36723,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38593,f38598,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39924,f39936,f39937,f39538,f39938,f39540,f39939,f39615,f39951,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684])).
fof(f39978,plain,(
  ( ! [X484,X486,X485,X483] : (s(bool,'F_0') = s(bool,happ(s(fun(X483,bool),X484),s(X483,sK4(X485,X483)))) | s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X483),X485),s(bool,X486),s(fun(X483,bool),X484)))),bool)) | s('type.option.option'(X483),'const.option.NONE_0') = s('type.option.option'(X483),X485)) ) | $spl40),
  inference(forward_demodulation,[],[f39729,f1267])).
fof(f39729,plain,(
  ( ! [X484,X486,X485,X483] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X483),X485),s(bool,X486),s(fun(X483,bool),X484)))),bool)) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,happ(s(fun(X483,bool),X484),s(X483,sK4(X485,X483)))) | s('type.option.option'(X483),'const.option.NONE_0') = s('type.option.option'(X483),X485)) ) | $spl40),
  inference(superposition,[],[f9551,f651])).
fof(f40003,plain,(
  ( ! [X472,X474,X471,X473] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X471),X472),s(bool,X473),s(fun(X471,bool),X474))) | s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X471,bool),X474),s(X471,sK4(X472,X471))))),bool)) | s('type.option.option'(X471),'const.option.NONE_0') = s('type.option.option'(X471),X472)) ) | $spl40),
  inference(forward_demodulation,[],[f39867,f1267])).
fof(f39867,plain,(
  ( ! [X472,X474,X471,X473] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X471,bool),X474),s(X471,sK4(X472,X471))))),bool)) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X471),X472),s(bool,X473),s(fun(X471,bool),X474))) | s('type.option.option'(X471),'const.option.NONE_0') = s('type.option.option'(X471),X472)) ) | $spl40),
  inference(superposition,[],[f9551,f651])).
fof(f39993,plain,(
  ( ! [X237,X235,X233,X236,X234] : (s(bool,X237) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X233),X234),s(bool,X235),s(fun(X233,bool),X236))) | s(bool,'T_0') = s(bool,X237) | s('type.option.option'(X233),'const.option.NONE_0') = s('type.option.option'(X233),X234)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f39818,f39956])).
fof(f39818,plain,(
  ( ! [X237,X235,X233,X236,X234] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X233,bool),X236),s(X233,sK4(X234,X233)))))) | s(bool,X237) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X233),X234),s(bool,X235),s(fun(X233,bool),X236))) | s(bool,'T_0') = s(bool,X237) | s('type.option.option'(X233),'const.option.NONE_0') = s('type.option.option'(X233),X234)) )),
  inference(superposition,[],[f436,f651])).
fof(f39965,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.SOME_1'(s(X64,X65))),s(bool,X66),s(fun(X64,bool),X67))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(trivial_inequality_removal,[],[f39961])).
fof(f39961,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.SOME_1'(s(X64,X65))),s(bool,X66),s(fun(X64,bool),X67))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f39956,f5065])).
fof(f39966,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72))) | s(bool,'T_0') = s(bool,X73)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(trivial_inequality_removal,[],[f39957])).
fof(f39957,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72))) | s(bool,'T_0') = s(bool,X73)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f39956,f5066])).
fof(f39269,plain,(
  ( ! [X306,X305,X307] : (~p(s(bool,happ(s(fun(bool,bool),X307),s(bool,X306)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X307),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X305),s(fun(sK0,bool),sK2)),X307,bool)))) | s(bool,'F_0') = s(bool,X306)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f612,f37162])).
fof(f39253,plain,(
  ( ! [X243,X244,X242] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X243))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X244))) | s(bool,X244) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X242),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X243)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f153,f37162])).
fof(f39470,plain,(
  ( ! [X78,X79,X77] : (~p(s(bool,happ(s(fun(bool,bool),X79),s(bool,X78)))) | p(s(bool,happ(s(fun(bool,bool),X79),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X77),s(fun(sK0,bool),sK2)),X79,bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f39192,f155])).
fof(f39192,plain,(
  ( ! [X78,X79,X77] : (~p(s(bool,happ(s(fun(bool,bool),X79),s(bool,X78)))) | p(s(bool,happ(s(fun(bool,bool),X79),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X77),s(fun(sK0,bool),sK2)),X79,bool)) | s(bool,'F_0') = s(bool,X78)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f606,f37162])).
fof(f39136,plain,(
  ( ! [X380,X382,X381] : (s(bool,X382) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X381),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X380))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X382))) | s(bool,'F_0') = s(bool,X380)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f154,f37162])).
fof(f39093,plain,(
  ( ! [X208,X206,X209,X207,X205] : (s(bool,X207) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X206),s(fun(sK0,bool),sK2))) | s(bool,X207) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X208),'const.option.NONE_0'),s(bool,X205),s(fun(X208,bool),X209))) | s(bool,'F_0') = s(bool,X205)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f37162])).
fof(f39092,plain,(
  ( ! [X204,X202,X200,X203,X201] : (s(bool,X202) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X201),s(fun(sK0,bool),sK2))) | s(bool,X200) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X203),'const.option.NONE_0'),s(bool,X202),s(fun(X203,bool),X204))) | s(bool,'F_0') = s(bool,X200)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f37162])).
fof(f38934,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X124),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X121),'const.option.NONE_0'),s(bool,X122),s(fun(X121,bool),X123)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f37162,f162])).
fof(f38792,plain,(
  ( ! [X196,X197] : (~p(s(bool,happ(s(fun(bool,bool),X197),s(bool,X196)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X197),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X196),s(fun(sK0,bool),sK2)),X197,bool)))) | s(bool,'F_0') = s(bool,X196)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f612,f36755])).
fof(f38776,plain,(
  ( ! [X149,X150] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X150))) | s(bool,X150) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X149),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X149)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f153,f36755])).
fof(f38857,plain,(
  ( ! [X47,X46] : (~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X46)))) | p(s(bool,happ(s(fun(bool,bool),X47),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X46),s(fun(sK0,bool),sK2)),X47,bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f38716,f155])).
fof(f38716,plain,(
  ( ! [X47,X46] : (~p(s(bool,happ(s(fun(bool,bool),X47),s(bool,X46)))) | p(s(bool,happ(s(fun(bool,bool),X47),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X46),s(fun(sK0,bool),sK2)),X47,bool)) | s(bool,'F_0') = s(bool,X46)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f606,f36755])).
fof(f38659,plain,(
  ( ! [X72,X71,X73] : (s(bool,X72) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X72),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X71),'const.option.NONE_0'),s(bool,X72),s(fun(X71,bool),X73)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f36755,f162])).
fof(f38585,plain,(
  ( ! [X167,X169,X166,X168] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X168),'const.option.NONE_0'),s(fun(bool,bool),X167),s(fun(X168,fun(bool,bool)),X169)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X167),s(bool,X166)))) | s(bool,'F_0') = s(bool,X166)) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f38520,f1238])).
fof(f38520,plain,(
  ( ! [X167,X169,X166,X168] : (~p(s(bool,happ(s(fun(bool,bool),X167),s(bool,X166)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X168),'const.option.NONE_0'),s(fun(bool,bool),X167),s(fun(X168,fun(bool,bool)),X169)),bool)) | s(bool,'F_0') = s(bool,X166)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f510,f36756])).
fof(f37089,plain,(
  ( ! [X178,X179] : (~p(s(bool,happ(s(fun(bool,bool),X179),s(bool,X178)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X179),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X179,bool)))) | s(bool,'F_0') = s(bool,X178)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f612,f36756])).
fof(f37295,plain,(
  ( ! [X146,X147] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X147,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X147),s(bool,X146)))) | s(bool,'F_0') = s(bool,X146)) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f37079,f1238])).
fof(f37079,plain,(
  ( ! [X146,X147] : (~p(s(bool,happ(s(fun(bool,bool),X147),s(bool,X146)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X147,bool)) | s(bool,'F_0') = s(bool,X146)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f156,f36756])).
fof(f37074,plain,(
  ( ! [X136,X135] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X135))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X136))) | s(bool,X136) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X135)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f153,f36756])).
fof(f37265,plain,(
  ( ! [X45,X46] : (~p(s(bool,happ(s(fun(bool,bool),X46),s(bool,X45)))) | p(s(bool,happ(s(fun(bool,bool),X46),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X46,bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f37021,f155])).
fof(f37021,plain,(
  ( ! [X45,X46] : (~p(s(bool,happ(s(fun(bool,bool),X46),s(bool,X45)))) | p(s(bool,happ(s(fun(bool,bool),X46),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X46,bool)) | s(bool,'F_0') = s(bool,X45)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f606,f36756])).
fof(f36971,plain,(
  ( ! [X185,X184] : (s(bool,X185) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X184))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X185))) | s(bool,'F_0') = s(bool,X184)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f154,f36756])).
fof(f36936,plain,(
  ( ! [X123,X121,X122,X120] : (s(bool,X121) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X121) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.NONE_0'),s(bool,X120),s(fun(X122,bool),X123))) | s(bool,'F_0') = s(bool,X120)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f36756])).
fof(f36935,plain,(
  ( ! [X118,X116,X119,X117] : (s(bool,X117) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X116) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(bool,X117),s(fun(X118,bool),X119))) | s(bool,'F_0') = s(bool,X116)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f36756])).
fof(f37162,plain,(
  ( ! [X0,X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f27731,f25698,f27735,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1426,f1397,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f1427,f1398,f1100,f1099,f1074,f26138,f26137,f26136,f26135,f1639,f1493,f26200,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25809,f25808,f25724,f25631,f25630,f25629,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12696,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161])).
fof(f37161,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X2) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f27731,f25698,f27735,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1426,f1397,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f1427,f1398,f1100,f1099,f1074,f26138,f26137,f26136,f26135,f1639,f1493,f26200,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25809,f25808,f25724,f25631,f25630,f25629,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12696,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833])).
fof(f36833,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f36756,f213])).
fof(f36829,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,X66),s(fun(X65,bool),X67)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f36756,f162])).
fof(f36723,plain,(
  ( ! [X78] : (~p(s(bool,happ(s(fun(bool,bool),X78),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X78),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X78,bool))))) ) | $spl10),
  inference(superposition,[],[f612,f1238])).
fof(f36708,plain,(
  ( ! [X50] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X50))) | s(bool,X50) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | $spl10),
  inference(superposition,[],[f153,f1238])).
fof(f36757,plain,(
  ( ! [X8] : (s(bool,X8) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X8)),bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f36629,f176])).
fof(f36629,plain,(
  ( ! [X8] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X8) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X8)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f1238,f3772])).
fof(f36756,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X2)) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f36623,f176])).
fof(f36623,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X2)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f1238,f3511])).
fof(f36755,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X10),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X10)) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f36754,f1267])).
fof(f36754,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X10),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X10)),bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f36618,f176])).
fof(f36618,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X10),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X10)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f1238,f3772])).
fof(f36610,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl10),
  inference(superposition,[],[f1238,f213])).
fof(f36581,plain,(
  ( ! [X90,X91] : (s(bool,'T_0') = s(bool,X90) | ~p(s(bool,happ(s(fun(bool,bool),X91),s(bool,X90)))) | p(s(bool,happ(s(fun(bool,bool),X91),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),X91,bool))) ) | $spl40),
  inference(forward_demodulation,[],[f36532,f1267])).
fof(f36532,plain,(
  ( ! [X90,X91] : (~p(s(bool,happ(s(fun(bool,bool),X91),s(bool,X90)))) | p(s(bool,happ(s(fun(bool,bool),X91),s(bool,'F_0')))) | s(bool,'T_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),X91,bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X90)),bool))) ) | $spl40),
  inference(superposition,[],[f606,f8191])).
fof(f8192,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f7684,f3772])).
fof(f8295,plain,(
  ( ! [X121,X120] : (s(bool,X121) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X120))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X121))) | s(bool,'T_0') = s(bool,X120)) ) | $spl40),
  inference(superposition,[],[f154,f7684])).
fof(f8366,plain,(
  ( ! [X92,X91] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X91))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) | s(bool,X92) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X91)) ) | $spl40),
  inference(superposition,[],[f153,f7684])).
fof(f8554,plain,(
  ( ! [X103,X102] : (s(bool,'F_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),X103,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X103),s(bool,X102)))) | s(bool,'T_0') = s(bool,X102)) ) | $spl40),
  inference(forward_demodulation,[],[f8371,f1267])).
fof(f8371,plain,(
  ( ! [X103,X102] : (~p(s(bool,happ(s(fun(bool,bool),X103),s(bool,X102)))) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),X103,bool)) | s(bool,'T_0') = s(bool,X102)) ) | $spl40),
  inference(superposition,[],[f156,f7684])).
fof(f8947,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f8191,f3772])).
fof(f8948,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,X3)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X4)),bool)) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,X5)) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f8191,f3511])).
fof(f9117,plain,(
  ( ! [X132,X133] : (s(bool,X133) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X132))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X133))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X132)),bool))) ) | $spl40),
  inference(superposition,[],[f154,f8191])).
fof(f9195,plain,(
  ( ! [X103,X104] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X104))) | s(bool,X104) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X103)),bool))) ) | $spl40),
  inference(superposition,[],[f153,f8191])).
fof(f9268,plain,(
  ( ! [X97,X98] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,X98) = s(bool,sK4('const.option.SOME_1'(s(bool,X97)),bool)) | s(bool,X97) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f153,f8191])).
fof(f9369,plain,(
  ( ! [X59,X57,X58] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X58),s(fun(X57,bool),X59))) | s(bool,'T_0') = s(bool,X58)) ) | $spl40),
  inference(forward_demodulation,[],[f9368,f1267])).
fof(f9368,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,X58) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X58),s(fun(X57,bool),X59)))) ) | $spl40),
  inference(forward_demodulation,[],[f9017,f1267])).
fof(f9017,plain,(
  ( ! [X59,X57,X58] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X58)),bool)) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X57),'const.option.NONE_0'),s(bool,X58),s(fun(X57,bool),X59)))) ) | $spl40),
  inference(superposition,[],[f8191,f162])).
fof(f9374,plain,(
  ( ! [X14,X15] : (s(bool,X14) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X15) = s(bool,sK4('const.option.SOME_1'(s(bool,X14)),bool)) | s(bool,'F_0') = s(bool,X15)) ) | ($spl18 | $spl40)),
  inference(subsumption_resolution,[],[f9029,f176])).
fof(f9029,plain,(
  ( ! [X14,X15] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X14) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X15) = s(bool,sK4('const.option.SOME_1'(s(bool,X14)),bool)) | s(bool,'F_0') = s(bool,X15)) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f8191,f3511])).
fof(f9375,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X27) = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X27)),bool))) ) | ($spl18 | $spl40)),
  inference(subsumption_resolution,[],[f9035,f176])).
fof(f9035,plain,(
  ( ! [X26,X27] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X26) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X27) = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X27)),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f8191,f3772])).
fof(f9442,plain,(
  ( ! [X76,X74,X75] : (s(bool,X74) = s(bool,X75) | s(bool,X75) = s(bool,X76) | s(bool,'F_0') = s(bool,X76) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X74)),bool))) ) | ($spl18 | $spl40)),
  inference(subsumption_resolution,[],[f9441,f175])).
fof(f9441,plain,(
  ( ! [X76,X74,X75] : (p(s(bool,'F_0')) | s(bool,X74) = s(bool,X75) | s(bool,X75) = s(bool,X76) | s(bool,'F_0') = s(bool,X76) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X74)),bool))) ) | ($spl18 | $spl40)),
  inference(forward_demodulation,[],[f9081,f1267])).
fof(f9081,plain,(
  ( ! [X76,X74,X75] : (p(s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) | s(bool,X74) = s(bool,X75) | s(bool,X75) = s(bool,X76) | s(bool,'F_0') = s(bool,X76) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X74)),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f4340,f8191])).
fof(f9468,plain,(
  ( ! [X128,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X129))) | s(bool,X128) = s(bool,X129) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X128)),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f9115,f1267])).
fof(f9115,plain,(
  ( ! [X128,X129] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X129))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X128) = s(bool,X129) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X128)),bool))) ) | $spl40),
  inference(superposition,[],[f153,f8191])).
fof(f9475,plain,(
  ( ! [X165,X163,X164] : (s(bool,'F_0') != s(bool,f(s(X163,sK6(X164,X165,bool,X163)))) | s(fun(X163,bool),X164) = s(fun(X163,bool),X165) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,g(s(X163,sK6(X164,X165,bool,X163))))),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f9128,f1267])).
fof(f9128,plain,(
  ( ! [X165,X163,X164] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,f(s(X163,sK6(X164,X165,bool,X163)))) | s(fun(X163,bool),X164) = s(fun(X163,bool),X165) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,g(s(X163,sK6(X164,X165,bool,X163))))),bool))) ) | $spl40),
  inference(superposition,[],[f163,f8191])).
fof(f9482,plain,(
  ( ! [X177] : (s('type.option.option'(bool),X177) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X177) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK4(X177,bool))),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f9132,f1267])).
fof(f9132,plain,(
  ( ! [X177] : (s('type.option.option'(bool),X177) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X177) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK4(X177,bool))),bool))) ) | $spl40),
  inference(superposition,[],[f145,f8191])).
fof(f9487,plain,(
  ( ! [X182,X183,X181] : (s(X183,f(s(bool,'F_0'))) != s(X183,g(s(bool,'F_0'))) | s(fun(bool,X183),X181) = s(fun(bool,X183),X182) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK6(X181,X182,X183,bool))),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f9135,f1267])).
fof(f9135,plain,(
  ( ! [X182,X183,X181] : (s(X183,f(s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)))) != s(X183,g(s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(fun(bool,X183),X181) = s(fun(bool,X183),X182) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,sK6(X181,X182,X183,bool))),bool))) ) | $spl40),
  inference(superposition,[],[f163,f8191])).
fof(f9561,plain,(
  ( ! [X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(subsumption_resolution,[],[f9266,f150])).
fof(f9266,plain,(
  ( ! [X95] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95))) | s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f145,f8191])).
fof(f9562,plain,(
  ( ! [X101,X102] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) | s(bool,'T_0') != s(bool,X102) | s(bool,X101) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f9270,f1267])).
fof(f9270,plain,(
  ( ! [X101,X102] : (s(bool,'T_0') != s(bool,X102) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,X101)),bool)))) | s(bool,X101) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f154,f8191])).
fof(f9567,plain,(
  ( ! [X109,X108] : (s(bool,'F_0') = s(bool,X108) | s(bool,X108) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X108)),bool),X109,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X109),s(bool,'T_0'))))) ) | $spl40),
  inference(forward_demodulation,[],[f9566,f1267])).
fof(f9566,plain,(
  ( ! [X109,X108] : (s(bool,X108) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X108)),bool),X109,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X109),s(bool,'T_0')))) | s(bool,X108) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f9273,f1267])).
fof(f9273,plain,(
  ( ! [X109,X108] : (~p(s(bool,happ(s(fun(bool,bool),X109),s(bool,'T_0')))) | s(bool,sK4('const.option.SOME_1'(s(bool,X108)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X108)),bool),X109,bool)) | s(bool,X108) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f156,f8191])).
fof(f9630,plain,(
  ( ! [X32] : (s(bool,'F_0') != s(bool,X32) | s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f9551,f1267])).
fof(f9644,plain,(
  ( ! [X10,X11] : (s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X10) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | ($spl18 | $spl40)),
  inference(subsumption_resolution,[],[f9578,f1267])).
fof(f9578,plain,(
  ( ! [X10,X11] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X10) = s(bool,X11) | s(bool,'F_0') = s(bool,X11)) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f9551,f3511])).
fof(f9648,plain,(
  ( ! [X23,X22] : (s(bool,X22) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X22) = s(bool,X23) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X23)),bool))) ) | ($spl18 | $spl40)),
  inference(subsumption_resolution,[],[f9584,f1267])).
fof(f9584,plain,(
  ( ! [X23,X22] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X22) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X22) = s(bool,X23) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X23)),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f9551,f3772])).
fof(f9649,plain,(
  ( ! [X26,X27] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | ($spl18 | $spl40)),
  inference(subsumption_resolution,[],[f9587,f7597])).
fof(f9587,plain,(
  ( ! [X26,X27] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X26) = s(bool,X27) | s(bool,'T_0') = s(bool,X27)) ) | $spl40),
  inference(superposition,[],[f9551,f213])).
fof(f9776,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X2)),bool))) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f9630,f3772])).
fof(f9777,plain,(
  ( ! [X4,X5,X3] : (s(bool,X3) != s(bool,X4) | s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,X3) = s(bool,X5) | s(bool,'F_0') = s(bool,X5)) ) | ($spl18 | $spl40)),
  inference(superposition,[],[f9630,f3511])).
fof(f9779,plain,(
  ( ! [X10,X9] : (s(bool,X9) != s(bool,X10) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X9)) ) | $spl40),
  inference(superposition,[],[f9630,f118])).
fof(f11602,plain,(
  ( ! [X109,X108] : (s(bool,'F_0') = s(bool,X108) | ~p(s(bool,happ(s(fun(bool,bool),X109),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X109),s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X108)),bool),X109,bool))))) ) | $spl40),
  inference(forward_demodulation,[],[f11556,f1267])).
fof(f11556,plain,(
  ( ! [X109,X108] : (~p(s(bool,happ(s(fun(bool,bool),X109),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X109),s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X108)),bool),X109,bool)))) | s(bool,X108) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | $spl40),
  inference(superposition,[],[f612,f8191])).
fof(f11603,plain,(
  ( ! [X116,X115] : (s(bool,'T_0') = s(bool,X115) | ~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,X115)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X116),s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),X116,bool))))) ) | $spl40),
  inference(forward_demodulation,[],[f11559,f1267])).
fof(f11559,plain,(
  ( ! [X116,X115] : (~p(s(bool,happ(s(fun(bool,bool),X116),s(bool,X115)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X116),s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),X116,bool)))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X115)),bool))) ) | $spl40),
  inference(superposition,[],[f612,f8191])).
fof(f12703,plain,(
  ( ! [X103,X101,X102,X100] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) | s(bool,X100) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.NONE_0'),s(bool,X101),s(fun(X102,bool),X103))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X100)),bool))) ) | $spl40),
  inference(forward_demodulation,[],[f12631,f1267])).
fof(f12631,plain,(
  ( ! [X103,X101,X102,X100] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X100) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X102),'const.option.NONE_0'),s(bool,X101),s(fun(X102,bool),X103))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X100)),bool))) ) | $spl40),
  inference(superposition,[],[f442,f8191])).
fof(f26578,plain,(
  ( ! [X302,X301,X303] : (~p(s(bool,happ(s(fun(bool,bool),X303),s(bool,X302)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X303),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X301),s(fun(sK0,bool),sK2)),X303,bool)))) | s(bool,'F_0') = s(bool,X302)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f612,f24473])).
fof(f26564,plain,(
  ( ! [X249,X250,X248] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X249))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X250))) | s(bool,X250) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X248),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X249)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f153,f24473])).
fof(f26447,plain,(
  ( ! [X374,X373,X375] : (s(bool,X375) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X374),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X373))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X375))) | s(bool,'F_0') = s(bool,X373)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f154,f24473])).
fof(f26409,plain,(
  ( ! [X218,X220,X219,X217,X221] : (s(bool,X219) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X218),s(fun(sK0,bool),sK2))) | s(bool,X219) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X220),'const.option.NONE_0'),s(bool,X217),s(fun(X220,bool),X221))) | s(bool,'F_0') = s(bool,X217)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f24473])).
fof(f26408,plain,(
  ( ! [X212,X216,X215,X213,X214] : (s(bool,X214) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X213),s(fun(sK0,bool),sK2))) | s(bool,X212) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X215),'const.option.NONE_0'),s(bool,X214),s(fun(X215,bool),X216))) | s(bool,'F_0') = s(bool,X212)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f24473])).
fof(f26244,plain,(
  ( ! [X121,X118,X120,X119] : (s(bool,X119) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X121),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X118),'const.option.NONE_0'),s(bool,X119),s(fun(X118,bool),X120)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f24473,f162])).
fof(f26107,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,X85) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X84) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X86),'const.option.NONE_0'),s(bool,X85),s(fun(X86,bool),X87))) | s(bool,'F_0') = s(bool,X84)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f20051])).
fof(f26057,plain,(
  ( ! [X87,X85,X86,X84] : (s(bool,X85) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X85) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X86),'const.option.NONE_0'),s(bool,X84),s(fun(X86,bool),X87))) | s(bool,'F_0') = s(bool,X84)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f20051])).
fof(f25957,plain,(
  ( ! [X101,X100] : (~p(s(bool,happ(s(fun(bool,bool),X101),s(bool,X100)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X101),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X101,bool)))) | s(bool,'F_0') = s(bool,X100)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f612,f20051])).
fof(f25952,plain,(
  ( ! [X90,X89] : (~p(s(bool,happ(s(fun(bool,bool),X90),s(bool,X89)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X90),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X89),s(fun(sK0,bool),sK2)),X90,bool)))) | s(bool,'F_0') = s(bool,X89)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f612,f22069])).
fof(f24873,plain,(
  ( ! [X140,X141] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X141))) | s(bool,X141) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X140),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X140)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f153,f22069])).
fof(f24896,plain,(
  ( ! [X30,X29] : (s(bool,'F_0') = s(bool,X29) | s(bool,X30) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X29),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X30)),bool))) ) | ($spl10 | $spl18)),
  inference(duplicate_literal_removal,[],[f24777])).
fof(f24777,plain,(
  ( ! [X30,X29] : (s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,X29) | s(bool,X30) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X29),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X30)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f22069,f3772])).
fof(f24899,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2)))) ) | ($spl10 | $spl18)),
  inference(duplicate_literal_removal,[],[f24765])).
fof(f24765,plain,(
  ( ! [X7] : (s(bool,'F_0') = s(bool,X7) | s(bool,'F_0') = s(bool,X7) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f22069,f118])).
fof(f24758,plain,(
  ( ! [X76,X74,X75,X73] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),X74),s(bool,X75),s(fun(X73,bool),X76))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),X74),s(bool,X75),s(fun(X73,bool),X76))),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X73,bool),bool),happ(s(fun(bool,fun(fun(X73,bool),bool)),happ(s(fun('type.option.option'(X73),fun(bool,fun(fun(X73,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X73),X74))),s(bool,X75))),s(fun(X73,bool),X76)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f22069,f165])).
fof(f24757,plain,(
  ( ! [X70,X72,X71,X69] : (s(bool,happ(s(fun(X69,bool),X72),s(X69,X70))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X69,bool),X72),s(X69,X70))),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X69),'const.option.SOME_1'(s(X69,X70))),s(bool,X71),s(fun(X69,bool),X72)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f22069,f164])).
fof(f24756,plain,(
  ( ! [X68,X66,X67] : (s(bool,X67) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X67),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.NONE_0'),s(bool,X67),s(fun(X66,bool),X68)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f22069,f162])).
fof(f24603,plain,(
  ( ! [X147,X148] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X148,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X148),s(bool,X147)))) | s(bool,'F_0') = s(bool,X147)) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f24387,f1238])).
fof(f24387,plain,(
  ( ! [X147,X148] : (~p(s(bool,happ(s(fun(bool,bool),X148),s(bool,X147)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X148,bool)) | s(bool,'F_0') = s(bool,X147)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f156,f20051])).
fof(f24382,plain,(
  ( ! [X136,X137] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X136))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X137))) | s(bool,X137) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X136)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f153,f20051])).
fof(f24278,plain,(
  ( ! [X177,X176] : (s(bool,X177) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X176))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X177))) | s(bool,'F_0') = s(bool,X176)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f154,f20051])).
fof(f24473,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X19)) ) | ($spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13273,f13194,f12713,f12705,f12696,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11436,f11397,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11188,f11057,f10999,f10915,f10734,f10602,f10594,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5068,f5067,f5064,f5031,f4881,f4876,f4834,f4787,f4478,f4475,f4340,f4076,f4073,f4060,f4058,f4011,f3986,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1030,f1027,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20033,f20536,f20537,f20034,f20051,f12342,f6883,f9764,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10141,f10057,f10051,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f8870,f9681,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11530,f11524,f8872,f8869,f8046,f7486,f4062,f512,f13351,f13309,f11562,f11552,f11525,f10144,f4884,f1634,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f1111,f1091,f11589,f13302,f786,f11521,f1098,f11522,f13415,f13303,f13300,f12287,f11604,f11590,f11587,f11523,f11520,f11437,f10227,f8593,f7678,f6748,f6712,f5309,f5281,f5065,f4788,f4476,f4358,f3824,f3770,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4789,f4477,f3825,f3771,f1427,f1398,f1100,f1099,f1074,f1062,f12709,f12657,f12652,f12649,f12645,f11235,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f1639,f1493,f1031,f21886,f22069,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f24135,f24139,f24472])).
fof(f24472,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,X18) | s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X19)) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f24471,f1267])).
fof(f24471,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X19) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X18)),bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f24147,f176])).
fof(f24147,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X18)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f20051,f3772])).
fof(f24139,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f20051,f213])).
fof(f24135,plain,(
  ( ! [X66,X67,X65] : (s(bool,X66) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,X66),s(fun(X65,bool),X67)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f20051,f162])).
fof(f22069,plain,(
  ( ! [X161] : (s(bool,X161) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X161),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X161)) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f22068,f1267])).
fof(f22068,plain,(
  ( ! [X161] : (s(bool,X161) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X161),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X161)),bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f21211,f176])).
fof(f21211,plain,(
  ( ! [X161] : (s(bool,X161) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X161),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X161)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f1238,f3772])).
fof(f21886,plain,(
  ( ! [X53] : (s(bool,X53) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X53)),bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f20933,f176])).
fof(f20933,plain,(
  ( ! [X53] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X53) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X53)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f3772,f1238])).
fof(f20051,plain,(
  ( ! [X23] : (s(bool,X23) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X23)) ) | ($spl10 | $spl18)),
  inference(trivial_inequality_removal,[],[f20009])).
fof(f20009,plain,(
  ( ! [X23] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X23) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X23)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f3984,f1238])).
fof(f20034,plain,(
  ( ! [X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X32))) | s(bool,X32) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | $spl10),
  inference(superposition,[],[f153,f1238])).
fof(f20537,plain,(
  ( ! [X35,X36] : (s(bool,'T_0') != s(bool,X36) | ~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X35),s(bool,X36))))) ) | $spl10),
  inference(forward_demodulation,[],[f20037,f1238])).
fof(f20037,plain,(
  ( ! [X35,X36] : (~p(s(bool,happ(s(fun(bool,bool),X35),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X35),s(bool,X36)))) | s(bool,X36) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | $spl10),
  inference(superposition,[],[f155,f1238])).
fof(f20536,plain,(
  ( ! [X37] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X37,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'T_0'))))) ) | $spl10),
  inference(forward_demodulation,[],[f20038,f1238])).
fof(f20038,plain,(
  ( ! [X37] : (~p(s(bool,happ(s(fun(bool,bool),X37),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X37,bool))) ) | $spl10),
  inference(superposition,[],[f156,f1238])).
fof(f20033,plain,(
  ( ! [X31] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))) | s(bool,X31) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | $spl10),
  inference(superposition,[],[f153,f1238])).
fof(f19956,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl10),
  inference(superposition,[],[f1238,f213])).
fof(f12990,plain,(
  ( ! [X154,X155] : (~p(s(bool,happ(s(fun(bool,bool),X155),s(bool,X154)))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X155),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X155,bool)))) | s(bool,'F_0') = s(bool,X154)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f612,f6631])).
fof(f13183,plain,(
  ( ! [X127,X126] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X127,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,'F_0') = s(bool,X126)) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f12981,f1238])).
fof(f12981,plain,(
  ( ! [X127,X126] : (~p(s(bool,happ(s(fun(bool,bool),X127),s(bool,X126)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X127,bool)) | s(bool,'F_0') = s(bool,X126)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f156,f6631])).
fof(f12976,plain,(
  ( ! [X116,X115] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X115))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X116))) | s(bool,X116) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X115)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f153,f6631])).
fof(f12882,plain,(
  ( ! [X158,X159] : (s(bool,X159) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X158))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X159))) | s(bool,'F_0') = s(bool,X158)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f154,f6631])).
fof(f13062,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X19)) ) | ($spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f2767,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f1363,f3501,f3504,f3505,f3511,f3552,f3595,f3769,f3772,f3798,f3823,f3826,f3900,f3902,f3915,f3918,f3984,f3986,f4011,f4340,f4058,f4060,f4073,f4076,f4446,f4475,f4478,f4787,f4876,f4834,f4881,f5031,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5717,f5763,f5762,f5760,f5758,f5756,f560,f1003,f4884,f1634,f4401,f4396,f4013,f3917,f3904,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f4395,f4075,f4062,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f4476,f4358,f3824,f3770,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f4477,f3825,f3771,f1427,f1398,f1100,f1099,f1074,f1062,f4069,f3911,f1639,f1493,f1031,f1238,f6543,f6631,f6597,f6648,f7320,f7313,f7341,f6711,f6712,f6713,f6715,f6716,f7344,f7345,f6748,f6749,f6750,f7359,f6865,f6867,f6877,f6881,f6883,f7414,f7415,f7424,f7426,f7428,f6956,f6958,f6968,f6972,f6974,f6977,f6978,f6979,f6981,f7024,f7210,f7093,f7095,f7105,f7109,f7111,f7482,f7483,f7151,f7486,f7183,f7171,f7584,f7592,f7597,f7668,f7677,f7678,f7679,f7631,f7634,f7683,f7685,f7818,f7819,f7821,f8042,f7966,f8046,f8069,f8592,f8593,f8594,f8595,f8655,f8657,f8784,f8785,f8787,f8869,f8870,f8871,f8872,f8906,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9977,f9978,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f10569,f10226,f10227,f10228,f10594,f10602,f10649,f10386,f10397,f10734,f10478,f10738,f5309,f5281,f5065,f5310,f5282,f5066,f11057,f11106,f10915,f11188,f10999,f11192,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11213,f11214,f11217,f11218,f11219,f11226,f11227,f11235,f11238,f11240,f11241,f11245,f11246,f11247,f11248,f11249,f11250,f11397,f11511,f11503,f11436,f11437,f11438,f11447,f11454,f11456,f11458,f11459,f11465,f11476,f11515,f11484,f11486,f11488,f11489,f11495,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11530,f11531,f11541,f11600,f11546,f11547,f11551,f11552,f11555,f11557,f11558,f11561,f11562,f11563,f11564,f11565,f11566,f11567,f11604,f11613,f12110,f12111,f11720,f12174,f12197,f12199,f11829,f12207,f11840,f12287,f12295,f12297,f12320,f11943,f12326,f12330,f12337,f12342,f12033,f12388,f12394,f12560,f12561,f12562,f12566,f12567,f12570,f12572,f12578,f12580,f12581,f12583,f12696,f12601,f12602,f12603,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12622,f12623,f12626,f12627,f12628,f12705,f12634,f12636,f12637,f12645,f12709,f12649,f12652,f12713,f12657,f12658,f12659,f12660,f12661,f12662,f12665,f12749,f12753,f13061])).
fof(f13061,plain,(
  ( ! [X19,X18] : (s(bool,'F_0') = s(bool,X18) | s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X19)) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f13060,f1267])).
fof(f13060,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X19) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X18)),bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f12761,f176])).
fof(f12761,plain,(
  ( ! [X19,X18] : (s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X18),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X19) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X18)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f6631,f3772])).
fof(f12753,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f6631,f213])).
fof(f12749,plain,(
  ( ! [X68,X66,X67] : (s(bool,X67) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.NONE_0'),s(bool,X67),s(fun(X66,bool),X68)))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f6631,f162])).
fof(f11551,plain,(
  ( ! [X92] : (~p(s(bool,happ(s(fun(bool,bool),X92),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X92),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X92,bool))))) ) | $spl10),
  inference(superposition,[],[f612,f1238])).
fof(f9392,plain,(
  ( ! [X30,X31] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X30)),bool))) ) | $spl40),
  inference(subsumption_resolution,[],[f9056,f1267])).
fof(f9056,plain,(
  ( ! [X30,X31] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,X31) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X30)),bool))) ) | $spl40),
  inference(superposition,[],[f476,f8191])).
fof(f8963,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool))) ) | $spl40),
  inference(superposition,[],[f8191,f8191])).
fof(f8950,plain,(
  ( ! [X10,X9] : (s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,X9)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X10)),bool)) | s(bool,'T_0') = s(bool,X9)) ) | $spl40),
  inference(superposition,[],[f8191,f118])).
fof(f7426,plain,(
  ( ! [X118] : (s(bool,'F_0') = s(bool,X118) | s(bool,X118) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X118),s(fun(sK0,bool),sK2)))) ) | ($spl10 | $spl18)),
  inference(forward_demodulation,[],[f7425,f1267])).
fof(f7425,plain,(
  ( ! [X118] : (s(bool,X118) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X118),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f6927,f176])).
fof(f6927,plain,(
  ( ! [X118] : (s(bool,X118) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X118),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f1238,f3772])).
fof(f7344,plain,(
  ( ! [X45] : (s(bool,X45) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X45)),bool))) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f6744,f176])).
fof(f6744,plain,(
  ( ! [X45] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X45) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X45)),bool))) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f3772,f1238])).
fof(f6648,plain,(
  ( ! [X32] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X32,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,'T_0'))))) ) | $spl10),
  inference(forward_demodulation,[],[f6601,f1238])).
fof(f6601,plain,(
  ( ! [X32] : (~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X32,bool))) ) | $spl10),
  inference(superposition,[],[f156,f1238])).
fof(f6597,plain,(
  ( ! [X28] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X28))) | s(bool,X28) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | $spl10),
  inference(superposition,[],[f153,f1238])).
fof(f6631,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X2)) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f6554,f176])).
fof(f6554,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X2)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f1238,f3511])).
fof(f6543,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl10),
  inference(superposition,[],[f1238,f213])).
fof(f1363,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0'))))) ) | $spl10),
  inference(forward_demodulation,[],[f1340,f1238])).
fof(f1340,plain,(
  ( ! [X15] : (~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X15,bool))) ) | $spl10),
  inference(superposition,[],[f156,f1238])).
fof(f1563,plain,(
  ( ! [X14,X13] : (s(bool,X13) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X13),s(fun(sK0,bool),sK2))) | s(bool,X13) = s(bool,X14) | s(bool,'T_0') = s(bool,X14)) ) | $spl10),
  inference(superposition,[],[f1238,f213])).
fof(f1335,plain,(
  ( ! [X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X9) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | $spl10),
  inference(superposition,[],[f153,f1238])).
fof(f42176,plain,(
  $false | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42175,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42175,plain,(
  ( ! [X3] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3)))) ) | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f42174,f111])).
fof(f42174,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3)))) ) | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f170,f41673])).
fof(f42173,plain,(
  $false | ($spl7 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f173,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f173,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) | $spl7),
  inference(cnf_transformation,[],[f173_D])).
fof(f173_D,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f42172,plain,(
  $false | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42171,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42171,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f42170,f111])).
fof(f42170,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f841,f41673])).
fof(f841,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(X0,sK0))))) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | $spl2),
  inference(superposition,[],[f170,f145])).
fof(f42169,plain,(
  $false | ($spl7 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f867,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f867,plain,(
  s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),sK1))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))))) | $spl7),
  inference(unit_resulting_resolution,[],[f173,f153])).
fof(f42168,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42167,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42167,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f42166,f41673])).
fof(f42166,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f894,f41639])).
fof(f42165,plain,(
  $false | ($spl7 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f925,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f925,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),sK1))))) != s('type.option.option'('type.option.option'('type.option.option'(sK0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))))))) | $spl7),
  inference(unit_resulting_resolution,[],[f867,f153])).
fof(f42164,plain,(
  $false | ($spl7 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f1149,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f1149,plain,(
  s('type.option.option'('type.option.option'('type.option.option'('type.option.option'(sK0)))),'const.option.SOME_1'(s('type.option.option'('type.option.option'('type.option.option'(sK0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),sK1))))))) != s('type.option.option'('type.option.option'('type.option.option'('type.option.option'(sK0)))),'const.option.SOME_1'(s('type.option.option'('type.option.option'('type.option.option'(sK0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))))))))) | $spl7),
  inference(unit_resulting_resolution,[],[f925,f153])).
fof(f42161,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42160,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42160,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f42159,f41673])).
fof(f42159,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f42158])).
fof(f42158,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f42157])).
fof(f42157,plain,(
  ( ! [X17,X15,X16] : (s(bool,X16) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X17) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X15) = s(bool,X17)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f2490,f41639])).
fof(f42156,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42155,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42155,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f42154,f41673])).
fof(f42154,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(duplicate_literal_removal,[],[f42153])).
fof(f42153,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f42152])).
fof(f42152,plain,(
  ( ! [X109,X107,X108] : (s(bool,X107) = s(bool,X108) | s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X107) = s(bool,X109)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f2568,f41639])).
fof(f42151,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42150,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42150,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f42149,f41673])).
fof(f42149,plain,(
  ( ! [X154,X152,X155,X153] : (s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f2580,f41673])).
fof(f42148,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42147,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42147,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X180) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X179,f(s(bool,'T_0'))) != s(X179,g(s(bool,'T_0'))) | s(fun(bool,X179),X177) = s(fun(bool,X179),X178) | s(bool,X180) = s(bool,sK6(X177,X178,X179,bool))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f2587,f41673])).
fof(f42142,plain,(
  $false | ($spl10 | $spl18 | $spl22 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42141,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42141,plain,(
  ( ! [X54] : (s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X54) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2)))) ) | ($spl10 | $spl18 | $spl22 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f2886,f41673])).
fof(f42140,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42139,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42139,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f42138,f41673])).
fof(f42138,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f2888,f41673])).
fof(f42137,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42136,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42136,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f42135,f41673])).
fof(f42135,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f42134])).
fof(f42134,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f42133,f41673])).
fof(f42133,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f2916,f41673])).
fof(f42132,plain,(
  $false | ($spl0 | $spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42131,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42131,plain,(
  ( ! [X101,X102] : (s(bool,X102) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X101) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X101) | s(bool,X102) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(X101,sK0))))) ) | ($spl0 | $spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f2925,f41673])).
fof(f2925,plain,(
  ( ! [X101,X102] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X101) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X101) | s(bool,X102) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X102) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(X101,sK0))))) ) | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f2565,f111])).
fof(f2565,plain,(
  ( ! [X101,X102] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X101) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X101) | s(bool,X102) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X102) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(X101,sK0))))) ) | ($spl0 | $spl2)),
  inference(superposition,[],[f841,f1809])).
fof(f42117,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090,f42116])).
fof(f42107,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42106,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090])).
fof(f42106,plain,(
  ( ! [X140,X139] : (s(bool,X140) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X139),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f38172,f41639])).
fof(f38172,plain,(
  ( ! [X140,X139] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140))) | s(bool,X140) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X139),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f153,f37904])).
fof(f37904,plain,(
  ( ! [X140] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X140),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27735,f27736,f26066,f26067,f26165,f27737,f26116,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f26138,f26137,f26136,f26135,f12646,f11236,f1639,f1493,f26200,f26177,f26158,f26134,f26126,f26125,f26124,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26074,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25876,f25809,f25808,f25724,f25631,f25630,f25629,f23945,f23944,f23943,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f23364,f23363,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f10156,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903])).
fof(f37300,plain,(
  ( ! [X182,X181] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X182,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X182),s(bool,X181))) | s(bool,'F_0') = s(bool,X181)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f37091,f1238])).
fof(f37091,plain,(
  ( ! [X182,X181] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X182),s(bool,X181))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X182,bool)) | s(bool,'F_0') = s(bool,X181)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f36756])).
fof(f36795,plain,(
  ( ! [X79] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X79,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X79),s(bool,'T_0')))) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f36725,f1238])).
fof(f36725,plain,(
  ( ! [X79] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X79),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X79,bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f1238])).
fof(f36577,plain,(
  ( ! [X66,X65] : (~p(s(bool,happ(s(fun(bool,bool),X66),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X65),s(fun(sK0,bool),sK2)),X66,bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27735,f27736,f26066,f26067,f26165,f27737,f26116,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f26138,f26137,f26136,f26135,f12646,f11236,f1639,f1493,f26200,f26177,f26158,f26134,f26126,f26125,f26124,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26074,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25876,f25809,f25808,f25724,f25631,f25630,f25629,f23945,f23944,f23943,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f23364,f23363,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f10156,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576])).
fof(f26819,plain,(
  ( ! [X308,X306,X307] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X306),s(fun(sK0,bool),sK2)),X308,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X308),s(bool,X307))) | s(bool,'F_0') = s(bool,X307)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f26580,f24934])).
fof(f26580,plain,(
  ( ! [X308,X306,X307] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X308),s(bool,X307))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X306),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X306),s(fun(sK0,bool),sK2)),X308,bool)) | s(bool,'F_0') = s(bool,X307)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f24473])).
fof(f26815,plain,(
  ( ! [X265,X264,X266] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X264),s(fun(sK0,bool),sK2)),X266,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X266),s(bool,X265)))) | s(bool,'F_0') = s(bool,X265)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f26569,f24934])).
fof(f26569,plain,(
  ( ! [X265,X264,X266] : (~p(s(bool,happ(s(fun(bool,bool),X266),s(bool,X265)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X264),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X264),s(fun(sK0,bool),sK2)),X266,bool)) | s(bool,'F_0') = s(bool,X265)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f156,f24473])).
fof(f26746,plain,(
  ( ! [X269,X268] : (s(bool,X269) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X268),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X269)) ) | ($spl0 | $spl10 | $spl18)),
  inference(subsumption_resolution,[],[f26745,f176])).
fof(f26745,plain,(
  ( ! [X269,X268] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X269) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X268),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X269)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f26411,f873])).
fof(f26411,plain,(
  ( ! [X269,X268] : (s(bool,X269) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X268),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X269) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3215,f24473])).
fof(f26162,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X123,bool),X124))) | s(bool,X121) != s(bool,X122) | s(bool,'F_0') = s(bool,X121)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f26065,f24934])).
fof(f26065,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X121) != s(bool,X122) | s(bool,X122) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X123),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X121),s(fun(sK0,bool),sK2))),s(fun(X123,bool),X124))) | s(bool,'F_0') = s(bool,X121)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f23836,f22069])).
fof(f25951,plain,(
  ( ! [X88,X87] : (~p(s(bool,happ(s(fun(bool,bool),X88),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X88),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X87),s(fun(sK0,bool),sK2)),X88,bool))))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f612,f24934])).
fof(f25291,plain,(
  ( ! [X173,X174] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X173),s(fun(sK0,bool),sK2)),X174,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X174),s(bool,'T_0')))) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f25219,f24934])).
fof(f25219,plain,(
  ( ! [X173,X174] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X174),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X173),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X173),s(fun(sK0,bool),sK2)),X174,bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f24934])).
fof(f25287,plain,(
  ( ! [X144,X145] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X144),s(fun(sK0,bool),sK2)),X145,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X145),s(bool,'T_0'))))) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f25209,f24934])).
fof(f25209,plain,(
  ( ! [X144,X145] : (~p(s(bool,happ(s(fun(bool,bool),X145),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X144),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X144),s(fun(sK0,bool),sK2)),X145,bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f156,f24934])).
fof(f25204,plain,(
  ( ! [X134,X133] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(bool,X134) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X133),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f153,f24934])).
fof(f25040,plain,(
  ( ! [X180,X181] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X180),s(fun(sK0,bool),sK2)),X181,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X181),s(bool,X180))) | s(bool,'F_0') = s(bool,X180)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f24888,f24934])).
fof(f24888,plain,(
  ( ! [X180,X181] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X181),s(bool,X180))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X180),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X180),s(fun(sK0,bool),sK2)),X181,bool)) | s(bool,'F_0') = s(bool,X180)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f22069])).
fof(f25036,plain,(
  ( ! [X152,X151] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X151),s(fun(sK0,bool),sK2)),X152,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))) | s(bool,'F_0') = s(bool,X151)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f24878,f24934])).
fof(f24878,plain,(
  ( ! [X152,X151] : (~p(s(bool,happ(s(fun(bool,bool),X152),s(bool,X151)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X151),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X151),s(fun(sK0,bool),sK2)),X152,bool)) | s(bool,'F_0') = s(bool,X151)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f156,f22069])).
fof(f24984,plain,(
  ( ! [X30,X29] : (s(bool,X30) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X29),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X30)),bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f21886,f22069,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896])).
fof(f24949,plain,(
  ( ! [X68,X67] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X67),s(fun(sK0,bool),sK2)),X68,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X68),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X67)) ) | ($spl0 | $spl10 | $spl18)),
  inference(backward_demodulation,[],[f24934,f4628])).
fof(f24948,plain,(
  ( ! [X66,X64,X65,X63] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X63),s(fun(sK0,bool),sK2)),X64,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X64),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,X63),s(fun(X65,bool),X66)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(backward_demodulation,[],[f24934,f4627])).
fof(f24937,plain,(
  ( ! [X23,X22] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X22),s(fun(sK0,bool),sK2)),X23,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X23),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,X22)) ) | ($spl0 | $spl10 | $spl18)),
  inference(backward_demodulation,[],[f24934,f968])).
fof(f24934,plain,(
  ( ! [X7] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f21886,f22069,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899])).
fof(f24607,plain,(
  ( ! [X177,X176] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X177,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X177),s(bool,X176))) | s(bool,'F_0') = s(bool,X176)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f24397,f1238])).
fof(f24397,plain,(
  ( ! [X177,X176] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X177),s(bool,X176))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X177,bool)) | s(bool,'F_0') = s(bool,X176)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f20051])).
fof(f20534,plain,(
  ( ! [X56] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X56,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X56),s(bool,'T_0')))) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f20048,f1238])).
fof(f20048,plain,(
  ( ! [X56] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X56),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X56,bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f1238])).
fof(f13187,plain,(
  ( ! [X158,X157] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X158,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X158),s(bool,X157))) | s(bool,'F_0') = s(bool,X157)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f12992,f1238])).
fof(f12992,plain,(
  ( ! [X158,X157] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X158),s(bool,X157))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X158,bool)) | s(bool,'F_0') = s(bool,X157)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f6631])).
fof(f6649,plain,(
  ( ! [X44] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X44,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0')))) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f6608,f1238])).
fof(f6608,plain,(
  ( ! [X44] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X44),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X44,bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f1238])).
fof(f5626,plain,(
  ( ! [X107,X106] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X107,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X107),s(bool,X106))) | s(bool,'F_0') = s(bool,X106)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f5502,f1238])).
fof(f5502,plain,(
  ( ! [X107,X106] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X107),s(bool,X106))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X107,bool)) | s(bool,'F_0') = s(bool,X106)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f3737])).
fof(f5625,plain,(
  ( ! [X88,X87] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X88,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X88),s(bool,X87)))) | s(bool,'F_0') = s(bool,X87)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f5495,f1238])).
fof(f5495,plain,(
  ( ! [X88,X87] : (~p(s(bool,happ(s(fun(bool,bool),X88),s(bool,X87)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X88,bool)) | s(bool,'F_0') = s(bool,X87)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f156,f3737])).
fof(f5490,plain,(
  ( ! [X76,X77] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X76))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X77))) | s(bool,X77) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X76)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f153,f3737])).
fof(f5428,plain,(
  ( ! [X101,X102] : (s(bool,X102) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) | s(bool,'F_0') = s(bool,X101)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f154,f3737])).
fof(f5584,plain,(
  ( ! [X72] : (s(bool,X72) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X72)) ) | ($spl0 | $spl10 | $spl18)),
  inference(subsumption_resolution,[],[f5413,f977])).
fof(f5413,plain,(
  ( ! [X72] : (s(bool,X72) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X72) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X72),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f994,f3737])).
fof(f5349,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3737,f213])).
fof(f5348,plain,(
  ( ! [X52] : (s(bool,X52) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X52)),bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3737,f1267])).
fof(f5345,plain,(
  ( ! [X43,X41,X42] : (s(bool,X42) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X41),'const.option.NONE_0'),s(bool,X42),s(fun(X41,bool),X43)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3737,f162])).
fof(f4700,plain,(
  ( ! [X62] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X62,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0')))) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f4626,f1238])).
fof(f4626,plain,(
  ( ! [X62] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X62),s(bool,'T_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X62,bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f1238])).
fof(f3737,plain,(
  ( ! [X24] : (s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X24)) ) | ($spl0 | $spl10 | $spl18)),
  inference(subsumption_resolution,[],[f3719,f111])).
fof(f3719,plain,(
  ( ! [X24] : (~p(s(bool,'T_0')) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X24)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3633,f1238])).
fof(f2492,plain,(
  ( ! [X21,X22] : (s(bool,X21) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X21),s(fun(sK0,bool),sK2))) | s(bool,X22) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X21) = s(bool,X22)) ) | ($spl0 | $spl10)),
  inference(superposition,[],[f1238,f1809])).
fof(f2110,plain,(
  ( ! [X29] : (s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X29),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10)),
  inference(subsumption_resolution,[],[f2094,f111])).
fof(f2094,plain,(
  ( ! [X29] : (~p(s(bool,'T_0')) | s(bool,X29) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X29),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10)),
  inference(superposition,[],[f1257,f1238])).
fof(f42097,plain,(
  $false | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42096,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090])).
fof(f42096,plain,(
  ( ! [X700,X702,X701,X703] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,'const.option.option_CASE_3'(s('type.option.option'(X700),X702),s(sK0,X703),s(fun(X700,sK0),X701))))) | s('type.option.option'(X700),'const.option.NONE_0') = s('type.option.option'(X700),X702)) ) | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f42095,f111])).
fof(f42095,plain,(
  ( ! [X700,X702,X701,X703] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,'const.option.option_CASE_3'(s('type.option.option'(X700),X702),s(sK0,X703),s(fun(X700,sK0),X701))))) | s('type.option.option'(X700),'const.option.NONE_0') = s('type.option.option'(X700),X702)) ) | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f39767,f41673])).
fof(f39767,plain,(
  ( ! [X700,X702,X701,X703] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,'const.option.option_CASE_3'(s('type.option.option'(X700),X702),s(sK0,X703),s(fun(X700,sK0),X701))))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,happ(s(fun(X700,sK0),X701),s(X700,sK4(X702,X700))))))) | s('type.option.option'(X700),'const.option.NONE_0') = s('type.option.option'(X700),X702)) ) | $spl2),
  inference(superposition,[],[f170,f651])).
fof(f42094,plain,(
  $false | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42093,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090])).
fof(f42093,plain,(
  ( ! [X679,X680,X682] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(X679,sK0),X682),s(X679,sK4(X680,X679)))))) | s('type.option.option'(X679),'const.option.NONE_0') = s('type.option.option'(X679),X680)) ) | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f42092,f111])).
fof(f42092,plain,(
  ( ! [X679,X680,X682] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(X679,sK0),X682),s(X679,sK4(X680,X679)))))) | s('type.option.option'(X679),'const.option.NONE_0') = s('type.option.option'(X679),X680)) ) | ($spl2 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f39905,f41673])).
fof(f39905,plain,(
  ( ! [X681,X679,X680,X682] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,happ(s(fun(X679,sK0),X682),s(X679,sK4(X680,X679)))))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,'const.option.option_CASE_3'(s('type.option.option'(X679),X680),s(sK0,X681),s(fun(X679,sK0),X682)))))) | s('type.option.option'(X679),'const.option.NONE_0') = s('type.option.option'(X679),X680)) ) | $spl2),
  inference(superposition,[],[f170,f651])).
fof(f42091,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063,f42090])).
fof(f42088,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f42087,f111])).
fof(f42087,plain,(
  ~p(s(bool,'T_0')) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f175,f41673])).
fof(f42086,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f427,f41639])).
fof(f42085,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(trivial_inequality_removal,[],[f42084])).
fof(f42084,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(forward_demodulation,[],[f1027,f41673])).
fof(f42080,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f42079,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063])).
fof(f42079,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(condensation,[],[f42078])).
fof(f42078,plain,(
  ( ! [X47,X46] : (s(bool,X46) = s(bool,X47) | s(bool,'F_0') = s(bool,X46)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f3655,f41639])).
fof(f42064,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042,f42063])).
fof(f42043,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977,f42042])).
fof(f41978,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974,f41977])).
fof(f41975,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966,f41974])).
fof(f41967,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960,f41966])).
fof(f41961,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955,f41960])).
fof(f41956,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10144,f10143,f10141,f10139,f10062,f10061,f10044,f10030,f10029,f9977,f9779,f9777,f9776,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41955])).
fof(f41954,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41951,f41953])).
fof(f41953,plain,(
  ( ! [X191,X193] : (s('type.option.option'(X191),'const.option.NONE_0') = s('type.option.option'(X191),X193)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(subsumption_resolution,[],[f41913,f111])).
fof(f41913,plain,(
  ( ! [X191,X193] : (~p(s(bool,'T_0')) | s('type.option.option'(X191),'const.option.NONE_0') = s('type.option.option'(X191),X193)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(backward_demodulation,[],[f41673,f41506])).
fof(f41951,plain,(
  ( ! [X166,X170,X168] : (s(X166,X170) != s(X166,sK4(X168,X166)) | s('type.option.option'(X166),'const.option.NONE_0') = s('type.option.option'(X166),X168)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(subsumption_resolution,[],[f41912,f111])).
fof(f41912,plain,(
  ( ! [X166,X170,X168] : (~p(s(bool,'T_0')) | s(X166,X170) != s(X166,sK4(X168,X166)) | s('type.option.option'(X166),'const.option.NONE_0') = s('type.option.option'(X166),X168)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(backward_demodulation,[],[f41673,f41500])).
fof(f41934,plain,(
  ( ! [X492] : (s(bool,'F_0') = s(bool,X492)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(subsumption_resolution,[],[f41881,f41673])).
fof(f41881,plain,(
  ( ! [X492] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X492)),bool)) | s(bool,'F_0') = s(bool,X492)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(backward_demodulation,[],[f41673,f41523])).
fof(f41931,plain,(
  ( ! [X437] : (s(bool,'F_0') = s(bool,X437)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(subsumption_resolution,[],[f41879,f41655])).
fof(f41879,plain,(
  ( ! [X437] : (s(bool,X437) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X437)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(backward_demodulation,[],[f41673,f41519])).
fof(f41873,plain,(
  ( ! [X540,X542,X536,X538,X541,X537,X539] : (s(bool,X540) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X541),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X541,bool),X542))) | s(bool,X540) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X536),X538),s(bool,X539),s(fun(X536,bool),X537))) | s('type.option.option'(X536),'const.option.NONE_0') = s('type.option.option'(X536),X538)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(backward_demodulation,[],[f41673,f41384])).
fof(f41523,plain,(
  ( ! [X492] : (s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X492)),bool)) | s(bool,'F_0') = s(bool,X492)) ) | ($spl0 | $spl18 | $spl40 | $spl54)),
  inference(global_subsumption,[],[f41522,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f7677,f7320,f550,f125,f23835,f23836,f26040,f26041,f26058,f26090,f26091,f27731,f25698,f27735,f1426,f1427,f26137,f26136,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25809,f25808,f25724,f25631,f25630,f25629,f23838,f23837,f23834,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12711,f12710,f12709,f12705,f12703,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f29114,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39612,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39765,f39771,f39773,f39782,f39783,f39786,f39798,f39816,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007])).
fof(f41504,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,X2),s(fun(X0,bool),X3))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) ) | ($spl18 | $spl40 | $spl54)),
  inference(condensation,[],[f41503])).
fof(f41503,plain,(
  ( ! [X101,X99,X97,X100,X98] : (s('type.option.option'(X97),'const.option.NONE_0') = s('type.option.option'(X97),X98) | s(bool,'F_0') = s(bool,X101) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X97),X98),s(bool,X99),s(fun(X97,bool),X100)))) ) | ($spl18 | $spl40 | $spl54)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f7677,f7320,f550,f125,f23835,f23836,f26040,f26041,f26058,f26090,f26091,f27731,f25698,f27735,f1426,f1427,f26137,f26136,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25809,f25808,f25724,f25631,f25630,f25629,f23838,f23837,f23834,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12711,f12710,f12709,f12705,f12703,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f29114,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39612,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39765,f39771,f39773,f39782,f39783,f39786,f39798,f39816,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f41320,f41322,f41497,f41500,f41367])).
fof(f41311,plain,(
  ( ! [X28,X26,X29,X27] : (s(X26,X28) = s(X26,sK5(X28,X27,X26)) | s(bool,X29) = s(bool,happ(s(fun(X26,bool),X27),s(X26,X28)))) ) | ($spl0 | $spl10 | $spl18 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27735,f27736,f26066,f26067,f26165,f27737,f26116,f4711,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f26138,f26137,f26136,f26135,f12646,f11236,f1639,f1493,f26200,f26177,f26158,f26134,f26126,f26125,f26124,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26074,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25876,f25809,f25808,f25724,f25631,f25630,f25629,f23945,f23944,f23943,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f23364,f23363,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f10156,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f38007,f37836,f37838,f37839,f38010,f38235,f38172,f38187,f38567,f38496,f38497,f38579,f38580,f38583,f38585,f38587,f38588,f38525,f38590,f38595,f38596,f38600,f38535,f38536,f38558,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39512,f39513,f39514,f39515,f39519,f39520,f39523,f39524,f39525,f39526,f39926,f39931,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39630,f39632,f39953,f39641,f39643,f39652,f39653,f39656,f39658,f39660,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39969,f39700,f39705,f39707,f39708,f39709,f39710,f39711,f39712,f39713,f39714,f39715,f39716,f39718,f39719,f39720,f39973,f39722,f39723,f39726,f39732,f39733,f39738,f39740,f39743,f39749,f39750,f39751,f39759,f39761,f39765,f39771,f39773,f39782,f39783,f39786,f39788,f39790,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39994,f39838,f39843,f39845,f39846,f39847,f39848,f39849,f39850,f39851,f39852,f39853,f39854,f39855,f39856,f39857,f39858,f39998,f39860,f39861,f39870,f39871,f39876,f39878,f39879,f39881,f39887,f39888,f39889,f39897,f39899,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705])).
fof(f41310,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X55,bool),X56),s(X55,X57))))) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl10 | $spl18 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27735,f27736,f26066,f26067,f26165,f27737,f26116,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f26138,f26137,f26136,f26135,f12646,f11236,f1639,f1493,f26200,f26177,f26158,f26134,f26126,f26125,f26124,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26074,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25876,f25809,f25808,f25724,f25631,f25630,f25629,f23945,f23944,f23943,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f23364,f23363,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f10156,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f38007,f37836,f37838,f37839,f38010,f38235,f38172,f38187,f38567,f38496,f38497,f38579,f38580,f38583,f38585,f38587,f38588,f38525,f38590,f38595,f38596,f38600,f38535,f38536,f38558,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39512,f39513,f39514,f39515,f39519,f39520,f39523,f39524,f39525,f39526,f39926,f39931,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39630,f39632,f39953,f39641,f39643,f39652,f39653,f39656,f39658,f39660,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39969,f39700,f39705,f39707,f39708,f39709,f39710,f39711,f39712,f39713,f39714,f39715,f39716,f39718,f39719,f39720,f39973,f39722,f39723,f39726,f39732,f39733,f39738,f39740,f39743,f39749,f39750,f39751,f39759,f39761,f39765,f39771,f39773,f39782,f39783,f39786,f39788,f39790,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39994,f39838,f39843,f39845,f39846,f39847,f39848,f39849,f39850,f39851,f39852,f39853,f39854,f39855,f39856,f39857,f39858,f39998,f39860,f39861,f39870,f39871,f39876,f39878,f39879,f39881,f39887,f39888,f39889,f39897,f39899,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754])).
fof(f39994,plain,(
  ( ! [X296,X298,X297,X299] : (s(bool,'T_0') != s(bool,happ(s(fun(X296,bool),X299),s(X296,sK4(X297,X296)))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X296),X297),s(bool,X298),s(fun(X296,bool),X299))) | s('type.option.option'(X296),'const.option.NONE_0') = s('type.option.option'(X296),X297)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f39830,f37904])).
fof(f39830,plain,(
  ( ! [X296,X298,X297,X299] : (s(bool,happ(s(fun(X296,bool),X299),s(X296,sK4(X297,X296)))) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X296,bool),X299),s(X296,sK4(X297,X296)))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X296),X297),s(bool,X298),s(fun(X296,bool),X299))) | s('type.option.option'(X296),'const.option.NONE_0') = s('type.option.option'(X296),X297)) ) | $spl0),
  inference(superposition,[],[f994,f651])).
fof(f39969,plain,(
  ( ! [X308,X310,X309,X311] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X308),X310),s(bool,X311),s(fun(X308,bool),X309))) | s(bool,'T_0') = s(bool,happ(s(fun(X308,bool),X309),s(X308,sK4(X310,X308)))) | s('type.option.option'(X308),'const.option.NONE_0') = s('type.option.option'(X308),X310)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f39692,f37904])).
fof(f39692,plain,(
  ( ! [X308,X310,X309,X311] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(X308),X310),s(bool,X311),s(fun(X308,bool),X309))) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(X308),X310),s(bool,X311),s(fun(X308,bool),X309))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,happ(s(fun(X308,bool),X309),s(X308,sK4(X310,X308)))) | s('type.option.option'(X308),'const.option.NONE_0') = s('type.option.option'(X308),X310)) ) | $spl0),
  inference(superposition,[],[f994,f651])).
fof(f39506,plain,(
  ( ! [X315,X316,X314] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X314),s(fun(sK0,bool),sK2)),X316,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X316),s(bool,X315))) | s(bool,'F_0') = s(bool,X315)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f39272,f37904])).
fof(f39272,plain,(
  ( ! [X315,X316,X314] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X316),s(bool,X315))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X314),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X314),s(fun(sK0,bool),sK2)),X316,bool)) | s(bool,'F_0') = s(bool,X315)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f37162])).
fof(f39502,plain,(
  ( ! [X292,X294,X296,X293,X295] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X292),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X295),'const.option.NONE_0'),s(fun(bool,bool),X294),s(fun(X295,fun(bool,bool)),X296)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X294),s(bool,X293)))) | s(bool,'F_0') = s(bool,X293)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f39266,f37904])).
fof(f39266,plain,(
  ( ! [X292,X294,X296,X293,X295] : (~p(s(bool,happ(s(fun(bool,bool),X294),s(bool,X293)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X292),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X292),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X295),'const.option.NONE_0'),s(fun(bool,bool),X294),s(fun(X295,fun(bool,bool)),X296)),bool)) | s(bool,'F_0') = s(bool,X293)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f510,f37162])).
fof(f39499,plain,(
  ( ! [X259,X260,X258] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X258),s(fun(sK0,bool),sK2)),X260,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X260),s(bool,X259)))) | s(bool,'F_0') = s(bool,X259)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f39258,f37904])).
fof(f39258,plain,(
  ( ! [X259,X260,X258] : (~p(s(bool,happ(s(fun(bool,bool),X260),s(bool,X259)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X258),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X258),s(fun(sK0,bool),sK2)),X260,bool)) | s(bool,'F_0') = s(bool,X259)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f156,f37162])).
fof(f38894,plain,(
  ( ! [X202,X203] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X202),s(fun(sK0,bool),sK2)),X203,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X203),s(bool,X202))) | s(bool,'F_0') = s(bool,X202)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f38795,f37904])).
fof(f38795,plain,(
  ( ! [X202,X203] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X203),s(bool,X202))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X202),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X202),s(fun(sK0,bool),sK2)),X203,bool)) | s(bool,'F_0') = s(bool,X202)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3654,f36755])).
fof(f38890,plain,(
  ( ! [X189,X187,X188,X186] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X186),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X188),'const.option.NONE_0'),s(fun(bool,bool),X187),s(fun(X188,fun(bool,bool)),X189)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X187),s(bool,X186)))) | s(bool,'F_0') = s(bool,X186)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f38789,f37904])).
fof(f38789,plain,(
  ( ! [X189,X187,X188,X186] : (~p(s(bool,happ(s(fun(bool,bool),X187),s(bool,X186)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X186),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X186),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X188),'const.option.NONE_0'),s(fun(bool,bool),X187),s(fun(X188,fun(bool,bool)),X189)),bool)) | s(bool,'F_0') = s(bool,X186)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f510,f36755])).
fof(f38887,plain,(
  ( ! [X161,X160] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X160),s(fun(sK0,bool),sK2)),X161,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X161),s(bool,X160)))) | s(bool,'F_0') = s(bool,X160)) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f38781,f37904])).
fof(f38781,plain,(
  ( ! [X161,X160] : (~p(s(bool,happ(s(fun(bool,bool),X161),s(bool,X160)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X160),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X160),s(fun(sK0,bool),sK2)),X161,bool)) | s(bool,'F_0') = s(bool,X160)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f156,f36755])).
fof(f38580,plain,(
  ( ! [X146,X147,X145,X148] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X145),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(fun(bool,bool),X146),s(fun(X147,fun(bool,bool)),X148)),bool)) | ~p(s(bool,happ(s(fun(bool,bool),X146),s(bool,'T_0'))))) ) | ($spl0 | $spl10 | $spl18)),
  inference(forward_demodulation,[],[f38515,f37904])).
fof(f38515,plain,(
  ( ! [X146,X147,X145,X148] : (~p(s(bool,happ(s(fun(bool,bool),X146),s(bool,'T_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X145),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X145),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X147),'const.option.NONE_0'),s(fun(bool,bool),X146),s(fun(X147,fun(bool,bool)),X148)),bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f510,f37904])).
fof(f38187,plain,(
  ( ! [X182,X183] : (~p(s(bool,happ(s(fun(bool,bool),X183),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,happ(s(fun(bool,bool),X183),s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X182),s(fun(sK0,bool),sK2)),X183,bool))))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f612,f37904])).
fof(f38235,plain,(
  ( ! [X26,X25] : (s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X25),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(subsumption_resolution,[],[f38087,f176])).
fof(f38087,plain,(
  ( ! [X26,X25] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X25),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f37904,f3772])).
fof(f37957,plain,(
  ( ! [X64,X63] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X63),s(fun(sK0,bool),sK2)),X64,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X64),s(bool,'T_0')))) ) | ($spl0 | $spl10 | $spl18)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27735,f27736,f26066,f26067,f26165,f27737,f26116,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f26138,f26137,f26136,f26135,f12646,f11236,f1639,f1493,f26200,f26177,f26158,f26134,f26126,f26125,f26124,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26074,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25876,f25809,f25808,f25724,f25631,f25630,f25629,f23945,f23944,f23943,f23838,f23837,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f23364,f23363,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f10156,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918])).
fof(f37918,plain,(
  ( ! [X66,X64,X65,X63] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X63),s(fun(sK0,bool),sK2)),X64,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X64),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,X63),s(fun(X65,bool),X66)))) ) | ($spl0 | $spl10 | $spl18)),
  inference(backward_demodulation,[],[f37904,f4627])).
fof(f8555,plain,(
  ( ! [X121,X122] : (s(bool,'F_0') = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),X122,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X122),s(bool,X121))) | s(bool,'T_0') = s(bool,X121)) ) | ($spl0 | $spl18 | $spl40)),
  inference(forward_demodulation,[],[f8378,f1267])).
fof(f8378,plain,(
  ( ! [X121,X122] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X122),s(bool,X121))) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,'F_0')),bool),X122,bool)) | s(bool,'T_0') = s(bool,X121)) ) | ($spl0 | $spl18 | $spl40)),
  inference(superposition,[],[f3654,f7684])).
fof(f9474,plain,(
  ( ! [X158,X159] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X159),s(bool,'F_0'))) | s(bool,X158) = s(bool,sK5(X158,X159,bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X158)),bool))) ) | ($spl0 | $spl18 | $spl40)),
  inference(forward_demodulation,[],[f9127,f1267])).
fof(f9127,plain,(
  ( ! [X158,X159] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X159),s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)))) | s(bool,X158) = s(bool,sK5(X158,X159,bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X158)),bool))) ) | ($spl0 | $spl18 | $spl40)),
  inference(superposition,[],[f3654,f8191])).
fof(f9569,plain,(
  ( ! [X127,X128] : (s(bool,'F_0') = s(bool,X127) | s(bool,X127) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X127)),bool),X128,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X128),s(bool,'T_0')))) ) | ($spl0 | $spl18 | $spl40)),
  inference(forward_demodulation,[],[f9568,f1267])).
fof(f9568,plain,(
  ( ! [X127,X128] : (s(bool,X127) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X127)),bool),X128,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X128),s(bool,'T_0'))) | s(bool,X127) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl18 | $spl40)),
  inference(forward_demodulation,[],[f9280,f1267])).
fof(f9280,plain,(
  ( ! [X127,X128] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X128),s(bool,'T_0'))) | s(bool,sK4('const.option.SOME_1'(s(bool,X127)),bool)) = s(bool,sK5(sK4('const.option.SOME_1'(s(bool,X127)),bool),X128,bool)) | s(bool,X127) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl18 | $spl40)),
  inference(superposition,[],[f3654,f8191])).
fof(f19752,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl18 | $spl40)),
  inference(global_subsumption,[],[f19316,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1426,f1397,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f1427,f1398,f1100,f1099,f1074,f1639,f1493,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12709,f12705,f12696,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124])).
fof(f19316,plain,(
  ( ! [X19] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X19)) ) | ($spl0 | $spl18 | $spl40)),
  inference(forward_demodulation,[],[f19315,f873])).
fof(f19315,plain,(
  ( ! [X19] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X19)) ) | ($spl0 | $spl18 | $spl40)),
  inference(subsumption_resolution,[],[f19242,f7821])).
fof(f19242,plain,(
  ( ! [X19] : (s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X19) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X19)),bool))) ) | ($spl0 | $spl40)),
  inference(superposition,[],[f3215,f8191])).
fof(f12444,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | ($spl0 | $spl18 | $spl40)),
  inference(superposition,[],[f11381,f213])).
fof(f11381,plain,(
  ( ! [X55] : (s(bool,X55) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X55)),bool))) ) | ($spl0 | $spl18 | $spl40)),
  inference(subsumption_resolution,[],[f11307,f7597])).
fof(f11307,plain,(
  ( ! [X55] : (s(bool,X55) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X55)),bool))) ) | ($spl0 | $spl18 | $spl40)),
  inference(superposition,[],[f11138,f8191])).
fof(f41952,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936,f41940,f41942,f41944,f41946,f41948,f41911,f41951])).
fof(f41950,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936,f41940,f41942,f41944,f41946,f41948,f41911])).
fof(f41949,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936,f41940,f41942,f41944,f41946,f41948])).
fof(f41947,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936,f41940,f41942,f41944,f41946])).
fof(f41945,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936,f41940,f41942,f41944])).
fof(f41943,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936,f41940,f41942])).
fof(f41941,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936,f41940])).
fof(f41937,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934,f41936])).
fof(f41935,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931,f41934])).
fof(f41933,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(subsumption_resolution,[],[f41880,f41673])).
fof(f41880,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(backward_demodulation,[],[f41673,f41521])).
fof(f41932,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27736,f26066,f26067,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26124,f26094,f26074,f26044,f25876,f25631,f25630,f23944,f23837,f23702,f23701,f23636,f23363,f19752,f13526,f13525,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12647,f12628,f12622,f12591,f12572,f12566,f12560,f12329,f12297,f12295,f12287,f12110,f11829,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11503,f11497,f11489,f11488,f11467,f11459,f11458,f11438,f11437,f11436,f11397,f11237,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10044,f10037,f10030,f10029,f9977,f9779,f9777,f9776,f9766,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38235,f38172,f38187,f38580,f38583,f38585,f38525,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f10751,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f41313,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682,f41318,f39681,f41319,f39679,f39670,f39660,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f39512,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38567,f38536,f38535,f38497,f38496,f38010,f38007,f41320,f41322,f41497,f41500,f41367,f41504,f41505,f41506,f41507,f41508,f41513,f41384,f41514,f41517,f41518,f41519,f41520,f41521,f41522,f41523,f37303,f37302,f41547,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26165,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23945,f23943,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f23364,f41583,f41584,f13532,f13524,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f41605,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651,f10529,f41652,f41654,f41655,f41657,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f41660,f10059,f10057,f10051,f10045,f10042,f10038,f10027,f10025,f9978,f9764,f41673,f41919,f41873,f41931])).
fof(f41930,plain,(
  $false | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(subsumption_resolution,[],[f41874,f111])).
fof(f41874,plain,(
  ~p(s(bool,'T_0')) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(backward_demodulation,[],[f41673,f41497])).
fof(f2757,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,X18)) ) | $spl16),
  inference(cnf_transformation,[],[f2757_D])).
fof(f2757_D,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,X18)) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f41652,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X1)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f10529,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602,f41650,f10594,f10569,f41651])).
fof(f41650,plain,(
  ( ! [X45,X46] : (s(bool,'F_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X46)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11503,f11489,f11488,f11459,f11458,f11438,f11437,f11436,f11397,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720,f41615,f11515,f11511,f41638,f41639,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f41644,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f41646,f10602])).
fof(f41647,plain,(
  ( ! [X114] : (s(bool,X114) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | $spl112),
  inference(cnf_transformation,[],[f41647_D])).
fof(f41647_D,plain,(
  ( ! [X114] : (s(bool,X114) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f41646,plain,(
  ( ! [X114,X113] : (s(bool,X114) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,X113)) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f10999,f41639])).
fof(f26717,plain,(
  ( ! [X135] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X135)),bool))) ) | $spl66),
  inference(cnf_transformation,[],[f26717_D])).
fof(f26717_D,plain,(
  ( ! [X135] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X135)),bool))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f41615,plain,(
  ( ! [X2,X1] : (s(bool,'T_0') = s(bool,X2) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X1)),bool))) ) | ($spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f1363,f3511,f3798,f3984,f4446,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f7677,f7320,f550,f125,f19956,f20033,f20536,f20537,f20034,f20051,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24756,f24757,f24758,f24899,f24896,f24873,f25952,f25957,f26040,f26041,f26057,f26058,f26090,f26091,f26107,f26244,f26709,f26408,f26409,f26447,f26564,f26578,f19655,f27731,f25698,f1426,f1427,f26137,f26136,f26094,f26044,f25631,f25630,f23837,f23702,f23701,f23636,f13394,f13356,f13354,f13353,f13352,f13351,f13332,f13315,f13314,f13308,f12709,f12703,f12652,f12628,f12622,f12572,f12566,f12560,f12297,f12295,f12287,f12110,f11829,f11603,f11602,f11600,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11552,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11495,f11489,f11488,f11486,f11484,f11476,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11268,f11263,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11192,f11188,f11057,f10999,f10915,f10738,f10734,f10602,f10594,f10569,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8554,f8366,f8295,f8192,f8191,f8069,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7486,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5068,f5067,f5066,f5065,f5064,f5031,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4478,f4477,f4476,f4475,f4401,f4396,f4395,f4358,f4340,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1062,f1031,f1030,f1027,f1000,f999,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f36391,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36567,f36575,f36522,f36578,f36527,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36610,f36755,f36756,f36757,f36708,f36723,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f37836,f37838,f37839,f38585,f38659,f38857,f38776,f38792,f38934,f39092,f39093,f39136,f39470,f39253,f39269,f39510,f39920,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39612,f39614,f39615,f39641,f39643,f39652,f39653,f39656,f39680,f39684,f39966,f39967,f39965,f39968,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39798,f39800,f39801,f39816,f39993,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39897,f39889,f39888,f39887,f39881,f39876,f39861,f39860,f39858,f39857,f39856,f39849,f39848,f39845,f39843,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39788,f39759,f39751,f39750,f39749,f39743,f39738,f39723,f39722,f39720,f39719,f39718,f39711,f39710,f39707,f39705,f39687,f39686,f39683,f39682,f39681,f41319,f39679,f39670,f39658,f39632,f39630,f39526,f39525,f39524,f39523,f39520,f39519,f39513,f38600,f38598,f38596,f38595,f38593,f38590,f38588,f38587,f38579,f38536,f38535,f38497,f38496,f38007,f37303,f37302,f29114,f27735,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26089,f26084,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26039,f25809,f25808,f25724,f25629,f23838,f23834,f23791,f23703,f23700,f23638,f23637,f23635,f23584,f13273,f13253,f13194,f12713,f12711,f12710,f41599,f12705,f41600,f12696,f12694,f12665,f12662,f12660,f12659,f12658,f12657,f41601,f12649,f12645,f12637,f12636,f41602,f12627,f12626,f12623,f41603,f12609,f12606,f12604,f12603,f12602,f12601,f12583,f12581,f12580,f41608,f12570,f12567,f41609,f41610,f12394,f12388,f12342,f12337,f12330,f12326,f12320,f12207,f12199,f12197,f12033,f11943,f11840,f41614,f11720])).
fof(f41606,plain,(
  ( ! [X175,X173,X174] : (s(X173,X175) = s(X173,sK5(X175,X174,X173))) ) | $spl108),
  inference(cnf_transformation,[],[f41606_D])).
fof(f41606_D,plain,(
  ( ! [X175,X173,X174] : (s(X173,X175) = s(X173,sK5(X175,X174,X173))) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f41607,plain,(
  ( ! [X177,X178,X176] : (s(bool,X176) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X177),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X177,bool),X178)))) ) | $spl110),
  inference(cnf_transformation,[],[f41607_D])).
fof(f41607_D,plain,(
  ( ! [X177,X178,X176] : (s(bool,X176) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X177),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X177,bool),X178)))) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f41605,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (s(bool,X176) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X177),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X177,bool),X178))) | s(X173,X175) = s(X173,sK5(X175,X174,X173))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl54 | $spl60)),
  inference(forward_demodulation,[],[f41604,f41320])).
fof(f41604,plain,(
  ( ! [X177,X175,X173,X178,X176,X174] : (s(bool,X176) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X177),'const.option.NONE_0'),s(bool,happ(s(fun(X173,bool),X174),s(X173,X175))),s(fun(X177,bool),X178))) | s(X173,X175) = s(X173,sK5(X175,X174,X173))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f12591,f39956])).
fof(f41317,plain,(
  ( ! [X385,X384,X386] : (s(bool,'F_0') = s(bool,happ(s(fun(X384,bool),X385),s(X384,sK4(X386,X384)))) | s('type.option.option'(X384),'const.option.NONE_0') = s('type.option.option'(X384),X386)) ) | $spl106),
  inference(cnf_transformation,[],[f41317_D])).
fof(f41317_D,plain,(
  ( ! [X385,X384,X386] : (s(bool,'F_0') = s(bool,happ(s(fun(X384,bool),X385),s(X384,sK4(X386,X384)))) | s('type.option.option'(X384),'const.option.NONE_0') = s('type.option.option'(X384),X386)) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f41318,plain,(
  ( ! [X255,X257,X259,X256] : (s(bool,'T_0') = s(bool,X259) | s('type.option.option'(X255),'const.option.NONE_0') = s('type.option.option'(X255),X257) | s(bool,'F_0') = s(bool,happ(s(fun(X255,bool),X256),s(X255,sK4(X257,X255))))) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8632,f8655,f8657,f8658,f8950,f8963,f9392,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11381,f11315,f11551,f12111,f12174,f12444,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f7677,f7320,f873,f550,f125,f19316,f19956,f20033,f20534,f20536,f20537,f20034,f20051,f11601,f21886,f22069,f23835,f23836,f24135,f24139,f24472,f24473,f24278,f24382,f24603,f24607,f24756,f24757,f24758,f24899,f24934,f24937,f24948,f24949,f24896,f24984,f24873,f25036,f25040,f25204,f25287,f25291,f25951,f25952,f25957,f26040,f26041,f26057,f26058,f26162,f26090,f26091,f26107,f26244,f26709,f26606,f26602,f26716,f26408,f26409,f26746,f26447,f26564,f26815,f26578,f26819,f19655,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4338,f4627,f4628,f4703,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13258,f13259,f13397,f1085,f1086,f1088,f1016,f985,f27731,f27732,f25698,f27735,f27736,f26066,f26067,f26165,f27737,f26116,f4711,f1426,f951,f1427,f26137,f26136,f12646,f11236,f26200,f26199,f26186,f26179,f26177,f26158,f26134,f26126,f26125,f26124,f26122,f26102,f26101,f26100,f26099,f26096,f26095,f26094,f26089,f26084,f26074,f26063,f26061,f26060,f26052,f26051,f26049,f26046,f26045,f26044,f26039,f25876,f25809,f25808,f25724,f25631,f25630,f25629,f23945,f23944,f23943,f23838,f23837,f23834,f23791,f23703,f23702,f23701,f23700,f23638,f23637,f23636,f23635,f23584,f23364,f23363,f19752,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13253,f13194,f12713,f12711,f12710,f12709,f12705,f12703,f12700,f12696,f12694,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11603,f11602,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11268,f11263,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11239,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9779,f9777,f9776,f9766,f9764,f9683,f9682,f9681,f9680,f9649,f9648,f9646,f9644,f9630,f9569,f9567,f9562,f9561,f9551,f9487,f9482,f9475,f9474,f9468,f9442,f9375,f9374,f9369,f9268,f9195,f9117,f8948,f8947,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8643,f8595,f8594,f8593,f8592,f8555,f8554,f8366,f8295,f8192,f8191,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7684,f7679,f7678,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f26117,f26123,f36391,f29114,f10156,f1238,f36562,f36563,f36564,f36565,f36500,f36501,f36566,f36567,f36575,f36522,f36576,f36577,f36578,f36527,f36528,f36580,f36581,f36582,f36539,f36540,f36541,f36542,f36584,f36586,f36610,f36755,f36756,f36757,f36708,f36723,f36795,f36829,f36833,f37161,f37162,f36935,f36936,f36971,f37265,f37074,f37295,f37089,f37300,f37302,f37303,f37318,f37319,f37320,f37321,f37322,f37323,f37324,f37325,f37326,f37327,f37328,f37329,f37627,f37628,f37629,f37887,f37633,f37634,f37639,f37646,f37648,f37649,f37651,f37652,f37653,f37898,f37903,f37904,f37918,f37957,f37661,f37671,f37672,f37673,f37676,f37696,f37979,f37765,f37817,f37824,f38007,f37836,f37838,f37839,f38010,f38235,f38172,f38187,f38567,f38496,f38497,f38579,f38580,f38583,f38585,f38587,f38588,f38525,f38590,f38593,f38595,f38596,f38598,f38600,f38535,f38536,f38659,f38857,f38776,f38887,f38890,f38792,f38894,f38934,f39092,f39093,f39136,f39470,f39253,f39499,f39502,f39269,f39506,f39510,f39920,f39512,f39513,f39514,f39515,f39519,f39520,f39523,f39524,f39525,f39526,f39936,f39937,f39538,f39938,f39540,f39939,f39607,f39608,f39609,f39610,f39907,f39612,f39613,f39614,f39615,f39630,f39632,f39641,f39643,f39652,f39653,f39656,f39658,f39660,f39670,f39679,f39680,f39681,f39684,f39966,f39967,f39965,f39968,f39969,f39708,f39715,f39716,f39765,f39771,f39773,f39782,f39783,f39786,f39791,f39792,f39793,f39794,f39989,f39795,f39906,f39797,f39798,f39799,f39800,f39801,f39816,f39993,f39994,f39854,f39903,f38537,f13355,f11566,f1003,f560,f38491,f13309,f11525,f1634,f38509,f38492,f23244,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f39895,f39894,f39891,f693,f778,f11588,f13301,f39896,f39754,f39892,f39890,f39758,f39757,f39756,f39753,f39752,f13302,f11589,f1111,f1091,f39864,f39741,f39717,f39787,f39785,f39784,f39776,f786,f11521,f38564,f39657,f39655,f39654,f39646,f38565,f11522,f1098,f39775,f39645,f38602,f38566,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f41310,f4950,f4705,f41311,f4704,f2080,f2061,f2042,f1967,f1397,f612,f610,f524,f510,f157,f156,f155,f39879,f39855,f39811,f39809,f39807,f39806,f39726,f39678,f39673,f39671,f39669,f39668,f39666,f39665,f39663,f39662,f39661,f38558,f13377,f11613,f4951,f1398,f1100,f1099,f1074,f39878,f39740,f26138,f26135,f1639,f1493,f40003,f39998,f39978,f39973,f39956,f39953,f39951,f39931,f39926,f39924,f39899,f39897,f39889,f39888,f39887,f39881,f39876,f39871,f39870,f39861,f39860,f39858,f39857,f39856,f39853,f39852,f39851,f39850,f39849,f39848,f39847,f39846,f39845,f39843,f39838,f39825,f39824,f39821,f39820,f39819,f39817,f39808,f39790,f39788,f39761,f39759,f39751,f39750,f39749,f39743,f39738,f39733,f39732,f39723,f39722,f39720,f39719,f39718,f41314,f39714,f39713,f39712,f39711,f39710,f39709,f41316,f39707,f39705,f39700,f39687,f39686,f39683,f39682])).
fof(f41316,plain,(
  ( ! [X385,X388,X384,X386] : (s(bool,'T_0') = s(bool,X388) | s(bool,'F_0') = s(bool,happ(s(fun(X384,bool),X385),s(X384,sK4(X386,X384)))) | s('type.option.option'(X384),'const.option.NONE_0') = s('type.option.option'(X384),X386)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f39708,f39993])).
fof(f41315,plain,(
  ( ! [X420,X422,X421] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X420,bool),X421),s(X420,sK4(X422,X420))))),bool)) | s('type.option.option'(X420),'const.option.NONE_0') = s('type.option.option'(X420),X422)) ) | $spl104),
  inference(cnf_transformation,[],[f41315_D])).
fof(f41315_D,plain,(
  ( ! [X420,X422,X421] : (s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X420,bool),X421),s(X420,sK4(X422,X420))))),bool)) | s('type.option.option'(X420),'const.option.NONE_0') = s('type.option.option'(X420),X422)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f41314,plain,(
  ( ! [X420,X422,X424,X421] : (s(bool,'T_0') = s(bool,X424) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,happ(s(fun(X420,bool),X421),s(X420,sK4(X422,X420))))),bool)) | s('type.option.option'(X420),'const.option.NONE_0') = s('type.option.option'(X420),X422)) ) | ($spl0 | $spl10 | $spl18 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f39715,f39993])).
fof(f41301,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f40144,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246,f41248,f41258,f41263,f41265])).
fof(f41265,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X93,X95) = s(X93,sK5(X95,X94,X93)) | s(bool,X96) = s(bool,happ(s(fun(X93,bool),X94),s(X93,X95)))) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f40077,f40171])).
fof(f40077,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(X93,X95) = s(X93,sK5(X95,X94,X93)) | s(bool,X96) = s(bool,happ(s(fun(X93,bool),X94),s(X93,X95)))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2924])).
fof(f41263,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl94)),
  inference(condensation,[],[f41262])).
fof(f41262,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f41261,f40171])).
fof(f41261,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f41260,f40171])).
fof(f41260,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f40074,f40171])).
fof(f40074,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2916])).
fof(f41258,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f41257,f40171])).
fof(f41257,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40073,f40171])).
fof(f40073,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,X79)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2888])).
fof(f41248,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X180) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X179,f(s(bool,'T_0'))) != s(X179,g(s(bool,'T_0'))) | s(fun(bool,X179),X177) = s(fun(bool,X179),X178) | s(bool,X180) = s(bool,sK6(X177,X178,X179,bool))) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f40068,f40171])).
fof(f40068,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X180) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(X179,f(s(bool,'T_0'))) != s(X179,g(s(bool,'T_0'))) | s(fun(bool,X179),X177) = s(fun(bool,X179),X178) | s(bool,X180) = s(bool,sK6(X177,X178,X179,bool))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2587])).
fof(f41246,plain,(
  ( ! [X171,X170] : (s(bool,X171) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),X170) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170) | s(bool,X171) = s(bool,sK4(X170,bool))) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f40067,f40171])).
fof(f40067,plain,(
  ( ! [X171,X170] : (s(bool,X171) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),X170) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170) | s(bool,X171) = s(bool,sK4(X170,bool))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2584])).
fof(f41244,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f41243,f40171])).
fof(f41243,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40066,f40171])).
fof(f40066,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,f(s(X152,sK6(X153,X154,bool,X152)))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2580])).
fof(f41241,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f41240,f40171])).
fof(f41240,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40065,f40171])).
fof(f40065,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,X114) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2570])).
fof(f41238,plain,(
  ( ! [X109,X107,X108] : (s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X107) = s(bool,X108) | s(bool,X107) = s(bool,X109)) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f40064,f40171])).
fof(f40064,plain,(
  ( ! [X109,X107,X108] : (s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X107) = s(bool,X108) | s(bool,X107) = s(bool,X109)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2568])).
fof(f41236,plain,(
  ( ! [X80,X81,X79] : (s(bool,X81) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X79) != s(bool,X80) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X79) = s(bool,X81)) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f40063,f40171])).
fof(f40063,plain,(
  ( ! [X80,X81,X79] : (s(bool,X81) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X79) != s(bool,X80) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X79) = s(bool,X81)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2516])).
fof(f41228,plain,(
  ( ! [X246,X244,X248,X247,X245] : (s('type.option.option'(X244),'const.option.SOME_1'(s(X244,sK4(X245,X244)))) = s('type.option.option'(X244),sK5('const.option.SOME_1'(s(X244,sK4(X245,X244))),'const.option.option_CASE_3'(s('type.option.option'(X247),'const.option.NONE_0'),s(fun('type.option.option'(X244),bool),X246),s(fun(X247,fun('type.option.option'(X244),bool)),X248)),'type.option.option'(X244))) | s('type.option.option'(X244),'const.option.NONE_0') = s('type.option.option'(X244),X245)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40939,f111])).
fof(f40939,plain,(
  ( ! [X246,X244,X248,X247,X245] : (~p(s(bool,'T_0')) | s('type.option.option'(X244),'const.option.SOME_1'(s(X244,sK4(X245,X244)))) = s('type.option.option'(X244),sK5('const.option.SOME_1'(s(X244,sK4(X245,X244))),'const.option.option_CASE_3'(s('type.option.option'(X247),'const.option.NONE_0'),s(fun('type.option.option'(X244),bool),X246),s(fun(X247,fun('type.option.option'(X244),bool)),X248)),'type.option.option'(X244))) | s('type.option.option'(X244),'const.option.NONE_0') = s('type.option.option'(X244),X245)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f38537])).
fof(f41226,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))) = s('type.option.option'(X241),sK5('const.option.option_CASE_3'(s('type.option.option'(X244),'const.option.NONE_0'),s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))),s(fun(X244,'type.option.option'(X241)),X245)),X243,'type.option.option'(X241))) | s('type.option.option'(X241),'const.option.NONE_0') = s('type.option.option'(X241),X242)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40938,f111])).
fof(f40938,plain,(
  ( ! [X243,X241,X244,X242,X245] : (~p(s(bool,'T_0')) | s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))) = s('type.option.option'(X241),sK5('const.option.option_CASE_3'(s('type.option.option'(X244),'const.option.NONE_0'),s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))),s(fun(X244,'type.option.option'(X241)),X245)),X243,'type.option.option'(X241))) | s('type.option.option'(X241),'const.option.NONE_0') = s('type.option.option'(X241),X242)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f13355])).
fof(f41224,plain,(
  ( ! [X24,X23,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40935,f111])).
fof(f40935,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f560])).
fof(f41222,plain,(
  ( ! [X613,X615,X609,X611,X616,X612,X614,X610] : (s(X609,X614) = s(X609,sK5('const.option.option_CASE_3'(s('type.option.option'(X615),'const.option.NONE_0'),s(X609,X614),s(fun(X615,X609),X616)),'const.option.option_CASE_3'(s('type.option.option'(X610),X611),s(fun(X609,bool),X612),s(fun(X610,fun(X609,bool)),X613)),X609)) | s('type.option.option'(X610),'const.option.NONE_0') = s('type.option.option'(X610),X611)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40915,f111])).
fof(f40915,plain,(
  ( ! [X613,X615,X609,X611,X616,X612,X614,X610] : (~p(s(bool,'T_0')) | s(X609,X614) = s(X609,sK5('const.option.option_CASE_3'(s('type.option.option'(X615),'const.option.NONE_0'),s(X609,X614),s(fun(X615,X609),X616)),'const.option.option_CASE_3'(s('type.option.option'(X610),X611),s(fun(X609,bool),X612),s(fun(X610,fun(X609,bool)),X613)),X609)) | s('type.option.option'(X610),'const.option.NONE_0') = s('type.option.option'(X610),X611)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39895])).
fof(f41220,plain,(
  ( ! [X606,X602,X605,X607,X601,X603,X608,X604] : (s(X601,X606) = s(X601,sK5(X606,'const.option.option_CASE_3'(s('type.option.option'(X607),'const.option.NONE_0'),s(fun(X601,bool),'const.option.option_CASE_3'(s('type.option.option'(X602),X603),s(fun(X601,bool),X604),s(fun(X602,fun(X601,bool)),X605))),s(fun(X607,fun(X601,bool)),X608)),X601)) | s('type.option.option'(X602),'const.option.NONE_0') = s('type.option.option'(X602),X603)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40914,f111])).
fof(f40914,plain,(
  ( ! [X606,X602,X605,X607,X601,X603,X608,X604] : (~p(s(bool,'T_0')) | s(X601,X606) = s(X601,sK5(X606,'const.option.option_CASE_3'(s('type.option.option'(X607),'const.option.NONE_0'),s(fun(X601,bool),'const.option.option_CASE_3'(s('type.option.option'(X602),X603),s(fun(X601,bool),X604),s(fun(X602,fun(X601,bool)),X605))),s(fun(X607,fun(X601,bool)),X608)),X601)) | s('type.option.option'(X602),'const.option.NONE_0') = s('type.option.option'(X602),X603)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39894])).
fof(f41218,plain,(
  ( ! [X588,X584,X586,X585,X587,X583] : (s(X583,X588) = s(X583,sK5(X588,'const.option.option_CASE_3'(s('type.option.option'(X584),X585),s(fun(X583,bool),X586),s(fun(X584,fun(X583,bool)),X587)),X583)) | s('type.option.option'(X584),'const.option.NONE_0') = s('type.option.option'(X584),X585)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40913,f111])).
fof(f40913,plain,(
  ( ! [X588,X584,X586,X585,X587,X583] : (~p(s(bool,'T_0')) | s(X583,X588) = s(X583,sK5(X588,'const.option.option_CASE_3'(s('type.option.option'(X584),X585),s(fun(X583,bool),X586),s(fun(X584,fun(X583,bool)),X587)),X583)) | s('type.option.option'(X584),'const.option.NONE_0') = s('type.option.option'(X584),X585)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39891])).
fof(f41216,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40912,f111])).
fof(f40912,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,'T_0')) | s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f693])).
fof(f41212,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s(X7,X12) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40909,f111])).
fof(f40909,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | s(X7,X12) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f13301])).
fof(f41208,plain,(
  ( ! [X633,X635,X631,X636,X632,X630,X637] : (s(X630,X635) = s(X630,sK5('const.option.option_CASE_3'(s('type.option.option'(X636),'const.option.NONE_0'),s(X630,X635),s(fun(X636,X630),X637)),happ(s(fun(X631,fun(X630,bool)),X632),s(X631,sK4(X633,X631))),X630)) | s('type.option.option'(X631),'const.option.NONE_0') = s('type.option.option'(X631),X633)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40904,f111])).
fof(f40904,plain,(
  ( ! [X633,X635,X631,X636,X632,X630,X637] : (~p(s(bool,'T_0')) | s(X630,X635) = s(X630,sK5('const.option.option_CASE_3'(s('type.option.option'(X636),'const.option.NONE_0'),s(X630,X635),s(fun(X636,X630),X637)),happ(s(fun(X631,fun(X630,bool)),X632),s(X631,sK4(X633,X631))),X630)) | s('type.option.option'(X631),'const.option.NONE_0') = s('type.option.option'(X631),X633)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39757])).
fof(f41206,plain,(
  ( ! [X629,X625,X627,X623,X628,X624,X622] : (s(X622,X627) = s(X622,sK5(X627,'const.option.option_CASE_3'(s('type.option.option'(X628),'const.option.NONE_0'),s(fun(X622,bool),happ(s(fun(X623,fun(X622,bool)),X624),s(X623,sK4(X625,X623)))),s(fun(X628,fun(X622,bool)),X629)),X622)) | s('type.option.option'(X623),'const.option.NONE_0') = s('type.option.option'(X623),X625)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40903,f111])).
fof(f40903,plain,(
  ( ! [X629,X625,X627,X623,X628,X624,X622] : (~p(s(bool,'T_0')) | s(X622,X627) = s(X622,sK5(X627,'const.option.option_CASE_3'(s('type.option.option'(X628),'const.option.NONE_0'),s(fun(X622,bool),happ(s(fun(X623,fun(X622,bool)),X624),s(X623,sK4(X625,X623)))),s(fun(X628,fun(X622,bool)),X629)),X622)) | s('type.option.option'(X623),'const.option.NONE_0') = s('type.option.option'(X623),X625)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39756])).
fof(f41204,plain,(
  ( ! [X606,X609,X605,X607,X604] : (s(X604,X609) = s(X604,sK5(X609,happ(s(fun(X605,fun(X604,bool)),X606),s(X605,sK4(X607,X605))),X604)) | s('type.option.option'(X605),'const.option.NONE_0') = s('type.option.option'(X605),X607)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40902,f111])).
fof(f40902,plain,(
  ( ! [X606,X609,X605,X607,X604] : (~p(s(bool,'T_0')) | s(X604,X609) = s(X604,sK5(X609,happ(s(fun(X605,fun(X604,bool)),X606),s(X605,sK4(X607,X605))),X604)) | s('type.option.option'(X605),'const.option.NONE_0') = s('type.option.option'(X605),X607)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39753])).
fof(f41200,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,X20) = s(X15,sK5('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40900,f111])).
fof(f40900,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X15,X20) = s(X15,sK5('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f13302])).
fof(f41196,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40897,f111])).
fof(f40897,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (~p(s(bool,'T_0')) | s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f1091])).
fof(f41193,plain,(
  ( ! [X111,X118,X116,X114,X112,X117,X115,X113] : (s(X111,'const.option.option_CASE_3'(s('type.option.option'(X112),X113),s(X111,X114),s(fun(X112,X111),X115))) = s(X111,sK5('const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(X111,'const.option.option_CASE_3'(s('type.option.option'(X112),X113),s(X111,X114),s(fun(X112,X111),X115))),s(fun(X117,X111),X118)),X116,X111)) | s('type.option.option'(X112),'const.option.NONE_0') = s('type.option.option'(X112),X113)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40891,f111])).
fof(f40891,plain,(
  ( ! [X111,X118,X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | s(X111,'const.option.option_CASE_3'(s('type.option.option'(X112),X113),s(X111,X114),s(fun(X112,X111),X115))) = s(X111,sK5('const.option.option_CASE_3'(s('type.option.option'(X117),'const.option.NONE_0'),s(X111,'const.option.option_CASE_3'(s('type.option.option'(X112),X113),s(X111,X114),s(fun(X112,X111),X115))),s(fun(X117,X111),X118)),X116,X111)) | s('type.option.option'(X112),'const.option.NONE_0') = s('type.option.option'(X112),X113)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39785])).
fof(f41191,plain,(
  ( ! [X103,X109,X107,X105,X110,X108,X106,X104] : (s(X103,'const.option.option_CASE_3'(s('type.option.option'(X104),X105),s(X103,X106),s(fun(X104,X103),X107))) = s(X103,sK5('const.option.option_CASE_3'(s('type.option.option'(X104),X105),s(X103,X106),s(fun(X104,X103),X107)),'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.NONE_0'),s(fun(X103,bool),X108),s(fun(X109,fun(X103,bool)),X110)),X103)) | s('type.option.option'(X104),'const.option.NONE_0') = s('type.option.option'(X104),X105)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40890,f111])).
fof(f40890,plain,(
  ( ! [X103,X109,X107,X105,X110,X108,X106,X104] : (~p(s(bool,'T_0')) | s(X103,'const.option.option_CASE_3'(s('type.option.option'(X104),X105),s(X103,X106),s(fun(X104,X103),X107))) = s(X103,sK5('const.option.option_CASE_3'(s('type.option.option'(X104),X105),s(X103,X106),s(fun(X104,X103),X107)),'const.option.option_CASE_3'(s('type.option.option'(X109),'const.option.NONE_0'),s(fun(X103,bool),X108),s(fun(X109,fun(X103,bool)),X110)),X103)) | s('type.option.option'(X104),'const.option.NONE_0') = s('type.option.option'(X104),X105)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39784])).
fof(f41189,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (s(X45,'const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49))) = s(X45,sK5('const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49)),X50,X45)) | s('type.option.option'(X46),'const.option.NONE_0') = s('type.option.option'(X46),X47)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40889,f111])).
fof(f40889,plain,(
  ( ! [X47,X45,X50,X48,X46,X49] : (~p(s(bool,'T_0')) | s(X45,'const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49))) = s(X45,sK5('const.option.option_CASE_3'(s('type.option.option'(X46),X47),s(X45,X48),s(fun(X46,X45),X49)),X50,X45)) | s('type.option.option'(X46),'const.option.NONE_0') = s('type.option.option'(X46),X47)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39776])).
fof(f41187,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40888,f111])).
fof(f40888,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f786])).
fof(f41185,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X7,bool),X12),s(fun(X13,fun(X7,bool)),X14)),X7))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40886,f111])).
fof(f40886,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | s(X7,happ(s(fun(X8,X7),X11),s(X8,X9))) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(X7,X10),s(fun(X8,X7),X11)),'const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(fun(X7,bool),X12),s(fun(X13,fun(X7,bool)),X14)),X7))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f38564])).
fof(f41183,plain,(
  ( ! [X111,X109,X114,X110,X108,X115,X113] : (s(X108,happ(s(fun(X109,X108),X110),s(X109,sK4(X111,X109)))) = s(X108,sK5('const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(X108,happ(s(fun(X109,X108),X110),s(X109,sK4(X111,X109)))),s(fun(X114,X108),X115)),X113,X108)) | s('type.option.option'(X109),'const.option.NONE_0') = s('type.option.option'(X109),X111)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40884,f111])).
fof(f40884,plain,(
  ( ! [X111,X109,X114,X110,X108,X115,X113] : (~p(s(bool,'T_0')) | s(X108,happ(s(fun(X109,X108),X110),s(X109,sK4(X111,X109)))) = s(X108,sK5('const.option.option_CASE_3'(s('type.option.option'(X114),'const.option.NONE_0'),s(X108,happ(s(fun(X109,X108),X110),s(X109,sK4(X111,X109)))),s(fun(X114,X108),X115)),X113,X108)) | s('type.option.option'(X109),'const.option.NONE_0') = s('type.option.option'(X109),X111)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39655])).
fof(f41181,plain,(
  ( ! [X103,X101,X107,X105,X102,X100,X106] : (s(X100,happ(s(fun(X101,X100),X102),s(X101,sK4(X103,X101)))) = s(X100,sK5(happ(s(fun(X101,X100),X102),s(X101,sK4(X103,X101))),'const.option.option_CASE_3'(s('type.option.option'(X106),'const.option.NONE_0'),s(fun(X100,bool),X105),s(fun(X106,fun(X100,bool)),X107)),X100)) | s('type.option.option'(X101),'const.option.NONE_0') = s('type.option.option'(X101),X103)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40883,f111])).
fof(f40883,plain,(
  ( ! [X103,X101,X107,X105,X102,X100,X106] : (~p(s(bool,'T_0')) | s(X100,happ(s(fun(X101,X100),X102),s(X101,sK4(X103,X101)))) = s(X100,sK5(happ(s(fun(X101,X100),X102),s(X101,sK4(X103,X101))),'const.option.option_CASE_3'(s('type.option.option'(X106),'const.option.NONE_0'),s(fun(X100,bool),X105),s(fun(X106,fun(X100,bool)),X107)),X100)) | s('type.option.option'(X101),'const.option.NONE_0') = s('type.option.option'(X101),X103)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39654])).
fof(f41179,plain,(
  ( ! [X47,X45,X43,X44,X42] : (s(X42,happ(s(fun(X43,X42),X44),s(X43,sK4(X45,X43)))) = s(X42,sK5(happ(s(fun(X43,X42),X44),s(X43,sK4(X45,X43))),X47,X42)) | s('type.option.option'(X43),'const.option.NONE_0') = s('type.option.option'(X43),X45)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40882,f111])).
fof(f40882,plain,(
  ( ! [X47,X45,X43,X44,X42] : (~p(s(bool,'T_0')) | s(X42,happ(s(fun(X43,X42),X44),s(X43,sK4(X45,X43)))) = s(X42,sK5(happ(s(fun(X43,X42),X44),s(X43,sK4(X45,X43))),X47,X42)) | s('type.option.option'(X43),'const.option.NONE_0') = s('type.option.option'(X43),X45)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39646])).
fof(f41177,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))) = s(X15,sK5(happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(fun(X15,bool),X20),s(fun(X21,fun(X15,bool)),X22)),X15))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40881,f111])).
fof(f40881,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X15,'const.option.option_CASE_3'(s('type.option.option'(X16),X17),s(X15,X18),s(fun(X16,X15),X19))) = s(X15,sK5(happ(s(fun(fun(X16,X15),X15),happ(s(fun(X15,fun(fun(X16,X15),X15)),happ(s(fun('type.option.option'(X16),fun(X15,fun(fun(X16,X15),X15))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(X15,X18))),s(fun(X16,X15),X19)),'const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(fun(X15,bool),X20),s(fun(X21,fun(X15,bool)),X22)),X15))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f38565])).
fof(f41175,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40879,f111])).
fof(f40879,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,'T_0')) | s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f1098])).
fof(f41173,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(X23,X24) = s(X23,sK5(sK4('const.option.SOME_1'(s(X23,X24)),X23),'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(fun(X23,bool),X25),s(fun(X26,fun(X23,bool)),X27)),X23))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40875,f111])).
fof(f40875,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,'T_0')) | s(X23,X24) = s(X23,sK5(sK4('const.option.SOME_1'(s(X23,X24)),X23),'const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(fun(X23,bool),X25),s(fun(X26,fun(X23,bool)),X27)),X23))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f38566])).
fof(f41171,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(X23,X25) = s(X23,sK5('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK4('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40873,f111])).
fof(f40873,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,'T_0')) | s(X23,X25) = s(X23,sK5('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK4('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f13303])).
fof(f41169,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,X4) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40872,f111])).
fof(f40872,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f13300])).
fof(f41161,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40861,f111])).
fof(f40861,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f2061])).
fof(f41159,plain,(
  ( ! [X90,X88,X89] : (s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40860,f111])).
fof(f40860,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'T_0')) | s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f2042])).
fof(f41155,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40855,f111])).
fof(f40855,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f524])).
fof(f41153,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40854,f111])).
fof(f40854,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f510])).
fof(f41149,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40852,f111])).
fof(f40852,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f156])).
fof(f41143,plain,(
  ( ! [X173,X171,X172] : (s(X171,sK4(X173,X171)) = s(X171,sK5(sK4(X173,X171),X172,X171)) | s('type.option.option'(X171),'const.option.NONE_0') = s('type.option.option'(X171),X173)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40837,f111])).
fof(f40837,plain,(
  ( ! [X173,X171,X172] : (~p(s(bool,'T_0')) | s(X171,sK4(X173,X171)) = s(X171,sK5(sK4(X173,X171),X172,X171)) | s('type.option.option'(X171),'const.option.NONE_0') = s('type.option.option'(X171),X173)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39666])).
fof(f41139,plain,(
  ( ! [X156,X154,X152,X157,X153] : (s(X152,sK4(X154,X152)) = s(X152,sK5('const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(X152,sK4(X154,X152)),s(fun(X156,X152),X157)),X153,X152)) | s('type.option.option'(X152),'const.option.NONE_0') = s('type.option.option'(X152),X154)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40834,f111])).
fof(f40834,plain,(
  ( ! [X156,X154,X152,X157,X153] : (~p(s(bool,'T_0')) | s(X152,sK4(X154,X152)) = s(X152,sK5('const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(X152,sK4(X154,X152)),s(fun(X156,X152),X157)),X153,X152)) | s('type.option.option'(X152),'const.option.NONE_0') = s('type.option.option'(X152),X154)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39662])).
fof(f41137,plain,(
  ( ! [X146,X151,X147,X150,X148] : (s(X146,sK4(X148,X146)) = s(X146,sK5(sK4(X148,X146),'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(fun(X146,bool),X147),s(fun(X150,fun(X146,bool)),X151)),X146)) | s('type.option.option'(X146),'const.option.NONE_0') = s('type.option.option'(X146),X148)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40833,f111])).
fof(f40833,plain,(
  ( ! [X146,X151,X147,X150,X148] : (~p(s(bool,'T_0')) | s(X146,sK4(X148,X146)) = s(X146,sK5(sK4(X148,X146),'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(fun(X146,bool),X147),s(fun(X150,fun(X146,bool)),X151)),X146)) | s('type.option.option'(X146),'const.option.NONE_0') = s('type.option.option'(X146),X148)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39661])).
fof(f41135,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(fun(X112,bool),X115) = s(fun(X112,bool),sK5(X115,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(fun(X112,bool),bool),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114))),s(fun(X116,fun(fun(X112,bool),bool)),X117)),fun(X112,bool)))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40832,f111])).
fof(f40832,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | s(fun(X112,bool),X115) = s(fun(X112,bool),sK5(X115,'const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(fun(X112,bool),bool),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114))),s(fun(X116,fun(fun(X112,bool),bool)),X117)),fun(X112,bool)))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f38558])).
fof(f41133,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40831,f111])).
fof(f40831,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f13377])).
fof(f41129,plain,(
  ( ! [X70,X72,X71,X73] : (s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40825,f111])).
fof(f40825,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,'T_0')) | s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f1074])).
fof(f41120,plain,(
  ( ! [X184,X183] : (s('type.option.option'(X183),'const.option.NONE_0') = s('type.option.option'(X183),X184)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f41119,f111])).
fof(f41119,plain,(
  ( ! [X184,X183] : (~p(s(bool,'T_0')) | s('type.option.option'(X183),'const.option.NONE_0') = s('type.option.option'(X183),X184)) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f41118,f40171])).
fof(f41118,plain,(
  ( ! [X186,X184,X183] : (~p(s(bool,happ(s(fun(X183,bool),X186),s(X183,sK4(X184,X183))))) | s('type.option.option'(X183),'const.option.NONE_0') = s('type.option.option'(X183),X184)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40773,f40171])).
fof(f40773,plain,(
  ( ! [X185,X186,X184,X183] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X183),X184),s(bool,X185),s(fun(X183,bool),X186))) | ~p(s(bool,happ(s(fun(X183,bool),X186),s(X183,sK4(X184,X183))))) | s('type.option.option'(X183),'const.option.NONE_0') = s('type.option.option'(X183),X184)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39808])).
fof(f41116,plain,(
  ( ! [X197,X195] : (s('type.option.option'(X195),'const.option.NONE_0') = s('type.option.option'(X195),X197)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f41115,f111])).
fof(f41115,plain,(
  ( ! [X197,X195] : (~p(s(bool,'T_0')) | s('type.option.option'(X195),'const.option.NONE_0') = s('type.option.option'(X195),X197)) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f41114,f40171])).
fof(f41114,plain,(
  ( ! [X198,X196,X197,X195] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X195),X197),s(bool,X198),s(fun(X195,bool),X196)))) | s('type.option.option'(X195),'const.option.NONE_0') = s('type.option.option'(X195),X197)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40738,f40171])).
fof(f40738,plain,(
  ( ! [X198,X196,X197,X195] : (s(bool,'T_0') != s(bool,happ(s(fun(X195,bool),X196),s(X195,sK4(X197,X195)))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X195),X197),s(bool,X198),s(fun(X195,bool),X196)))) | s('type.option.option'(X195),'const.option.NONE_0') = s('type.option.option'(X195),X197)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39670])).
fof(f40970,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | ($spl0 | $spl94)),
  inference(duplicate_literal_removal,[],[f40434])).
fof(f40434,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f10154])).
fof(f41043,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl0 | $spl94)),
  inference(forward_demodulation,[],[f41042,f40171])).
fof(f41042,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4(X112,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40430,f40171])).
fof(f40430,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X113) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4(X112,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f10141])).
fof(f40429,plain,(
  ( ! [X109,X108] : (s('type.option.option'(bool),X108) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X109) = s(bool,sK4(X108,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X108)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f10139])).
fof(f41006,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40291,f154])).
fof(f40291,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f5756])).
fof(f41004,plain,(
  ( ! [X13] : (s(bool,'F_0') = s(bool,X13)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40276,f40171])).
fof(f40276,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X13),s(fun(X12,bool),X14))) | s(bool,'F_0') = s(bool,X13)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f4876])).
fof(f40974,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40172,f40171])).
fof(f40172,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f124])).
fof(f40171,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40024,f162])).
fof(f40024,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,X1),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f994])).
fof(f40023,plain,(
  ( ! [X14,X15] : (s(bool,X15) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,X14),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X15))) | s(bool,'T_0') = s(bool,X14)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f964])).
fof(f40019,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X15,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X15),s(bool,'T_0'))))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f921])).
fof(f40018,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f894])).
fof(f40170,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,X0),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40017,f4949])).
fof(f40017,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f39942,f882])).
fof(f40144,plain,(
  ( ! [X140,X139] : (s(bool,X140) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,X139),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X140)))) ) | ($spl0 | $spl10 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f39942,f38172])).
fof(f41288,plain,(
  $false | ($spl0 | $spl60 | $spl94)),
  inference(global_subsumption,[],[f41287,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246,f41248,f41258,f41263,f41265])).
fof(f41287,plain,(
  ( ! [X33] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X33) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl60 | $spl94)),
  inference(forward_demodulation,[],[f40114,f40171])).
fof(f40114,plain,(
  ( ! [X33] : (s(bool,X33) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))) ) | ($spl60 | $spl94)),
  inference(backward_demodulation,[],[f39942,f19655])).
fof(f41280,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f41279,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246,f41248,f41258,f41263,f41265])).
fof(f41279,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl18 | $spl94)),
  inference(condensation,[],[f41278])).
fof(f41278,plain,(
  ( ! [X59,X58] : (s(bool,X58) = s(bool,X59) | s(bool,'F_0') = s(bool,X59)) ) | ($spl0 | $spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40090,f162])).
fof(f40090,plain,(
  ( ! [X59,X58] : (s(bool,X58) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,X58),s(fun(sK0,bool),sK2))) | s(bool,X58) = s(bool,X59) | s(bool,'F_0') = s(bool,X59)) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f39942,f4339])).
fof(f41266,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246,f41248,f41258,f41263,f41265])).
fof(f41264,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246,f41248,f41258,f41263])).
fof(f41259,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246,f41248,f41258])).
fof(f41254,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f41253,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246,f41248])).
fof(f41253,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl18 | $spl94)),
  inference(forward_demodulation,[],[f41252,f40171])).
fof(f41252,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40071,f23836])).
fof(f40071,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1)) ) | ($spl18 | $spl94)),
  inference(backward_demodulation,[],[f39942,f2767])).
fof(f41249,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246,f41248])).
fof(f41247,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244,f41246])).
fof(f41245,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241,f41244])).
fof(f41242,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238,f41241])).
fof(f41239,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236,f41238])).
fof(f41237,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228,f41236])).
fof(f41230,plain,(
  $false | ($spl0 | $spl7 | $spl94)),
  inference(global_subsumption,[],[f40029,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228])).
fof(f40029,plain,(
  s('type.option.option'('type.option.option'('type.option.option'('type.option.option'(sK0)))),'const.option.SOME_1'(s('type.option.option'('type.option.option'('type.option.option'(sK0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'('type.option.option'(sK0)))),'const.option.SOME_1'(s('type.option.option'('type.option.option'('type.option.option'(sK0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))))))))) | ($spl7 | $spl94)),
  inference(backward_demodulation,[],[f39942,f1149])).
fof(f41229,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226,f41228])).
fof(f41227,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224,f41226])).
fof(f41225,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222,f41224])).
fof(f41223,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220,f41222])).
fof(f41221,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218,f41220])).
fof(f41219,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216,f41218])).
fof(f41217,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212,f41216])).
fof(f41213,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208,f41212])).
fof(f41209,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206,f41208])).
fof(f41207,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204,f41206])).
fof(f41205,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200,f41204])).
fof(f41201,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196,f41200])).
fof(f41197,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193,f41196])).
fof(f41195,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f40895,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193])).
fof(f40895,plain,(
  ( ! [X540,X542,X536,X538,X541,X537,X539] : (s(bool,X540) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X541),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X541,bool),X542))) | s(bool,X540) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X536),X538),s(bool,X539),s(fun(X536,bool),X537))) | s('type.option.option'(X536),'const.option.NONE_0') = s('type.option.option'(X536),X538)) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39741])).
fof(f41194,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191,f41193])).
fof(f41192,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189,f41191])).
fof(f41190,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187,f41189])).
fof(f41188,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185,f41187])).
fof(f41186,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183,f41185])).
fof(f41184,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181,f41183])).
fof(f41182,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179,f41181])).
fof(f41180,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177,f41179])).
fof(f41178,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175,f41177])).
fof(f41176,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173,f41175])).
fof(f41174,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171,f41173])).
fof(f41172,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169,f41171])).
fof(f41170,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161,f41169])).
fof(f41168,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f41167,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161])).
fof(f41167,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40866,f154])).
fof(f40866,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,'T_0') = s(bool,X58) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f5754])).
fof(f41166,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f41165,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161])).
fof(f41165,plain,(
  ( ! [X8,X7,X9] : (s(X7,sK5(X9,X8,X7)) = s(X7,sK5(sK5(X9,X8,X7),X8,X7))) ) | ($spl0 | $spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40863,f111])).
fof(f40863,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | s(X7,sK5(X9,X8,X7)) = s(X7,sK5(sK5(X9,X8,X7),X8,X7))) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f4704])).
fof(f41162,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159,f41161])).
fof(f41160,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155,f41159])).
fof(f41156,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153,f41155])).
fof(f41154,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149,f41153])).
fof(f41150,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143,f41149])).
fof(f41148,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f40850,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143])).
fof(f40850,plain,(
  ( ! [X528,X530,X524,X529,X525,X527] : (s(bool,X528) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X529),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X529,bool),X530))) | s(bool,X528) != s(bool,happ(s(fun(X524,bool),X527),s(X524,sK4(X525,X524)))) | s('type.option.option'(X524),'const.option.NONE_0') = s('type.option.option'(X524),X525)) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39879])).
fof(f41144,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139,f41143])).
fof(f41140,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137,f41139])).
fof(f41138,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135,f41137])).
fof(f41136,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133,f41135])).
fof(f41134,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129,f41133])).
fof(f41130,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120,f41129])).
fof(f41122,plain,(
  $false | ($spl0 | $spl10 | $spl40 | $spl42 | $spl60 | $spl94)),
  inference(global_subsumption,[],[f40810,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120])).
fof(f40810,plain,(
  ( ! [X269] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X269)))) ) | ($spl0 | $spl10 | $spl40 | $spl42 | $spl60 | $spl94)),
  inference(backward_demodulation,[],[f40171,f39956])).
fof(f41121,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116,f41120])).
fof(f41117,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970,f41116])).
fof(f41098,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f41097,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970])).
fof(f41097,plain,(
  ( ! [X208,X206,X207,X205] : (s(bool,X206) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X207),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X207,bool),X208))) | s('type.option.option'(bool),X205) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X205)) ) | ($spl0 | $spl18 | $spl94)),
  inference(forward_demodulation,[],[f41096,f40171])).
fof(f41096,plain,(
  ( ! [X208,X206,X207,X205] : (s('type.option.option'(bool),X205) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X206) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X207),'const.option.NONE_0'),s(bool,sK4(X205,bool)),s(fun(X207,bool),X208))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X205)) ) | ($spl0 | $spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40639,f40171])).
fof(f40639,plain,(
  ( ! [X208,X206,X207,X205] : (s('type.option.option'(bool),X205) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X206) | s(bool,X206) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X207),'const.option.NONE_0'),s(bool,sK4(X205,bool)),s(fun(X207,bool),X208))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X205)) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f26084])).
fof(f41095,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f41094,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970])).
fof(f41094,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,X164) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X165,bool),X166))) | s(X161,X163) = s(X161,sK5(X163,X162,X161))) ) | ($spl0 | $spl18 | $spl94)),
  inference(forward_demodulation,[],[f41093,f40171])).
fof(f41093,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,X164) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,happ(s(fun(X161,bool),X162),s(X161,X163))),s(fun(X165,bool),X166))) | s(X161,X163) = s(X161,sK5(X163,X162,X161))) ) | ($spl0 | $spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40638,f40171])).
fof(f40638,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,'T_0') != s(bool,X164) | s(bool,X164) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,happ(s(fun(X161,bool),X162),s(X161,X163))),s(fun(X165,bool),X166))) | s(X161,X163) = s(X161,sK5(X163,X162,X161))) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f26074])).
fof(f41090,plain,(
  $false | ($spl0 | $spl18 | $spl40 | $spl94)),
  inference(subsumption_resolution,[],[f40603,f40171])).
fof(f40603,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl18 | $spl40 | $spl94)),
  inference(backward_demodulation,[],[f40171,f19752])).
fof(f41066,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f41065,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970])).
fof(f41065,plain,(
  ( ! [X123,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40530,f12174])).
fof(f40530,plain,(
  ( ! [X123,X122] : (s(bool,'T_0') != s(bool,X123) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f12207])).
fof(f41064,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f41063,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970])).
fof(f41063,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40527,f1282])).
fof(f40527,plain,(
  ( ! [X10] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f12110])).
fof(f41061,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f40523,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970])).
fof(f40523,plain,(
  ( ! [X118,X119] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool)) | s(bool,X118) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f11829])).
fof(f41051,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043,f40970])).
fof(f41044,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429,f41043])).
fof(f41041,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006,f40429])).
fof(f41038,plain,(
  $false | ($spl0 | $spl18 | $spl40 | $spl94)),
  inference(global_subsumption,[],[f41037,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006])).
fof(f41037,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl18 | $spl40 | $spl94)),
  inference(subsumption_resolution,[],[f40400,f40171])).
fof(f40400,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl18 | $spl40 | $spl94)),
  inference(backward_demodulation,[],[f40171,f9646])).
fof(f41035,plain,(
  $false | ($spl0 | $spl40 | $spl94)),
  inference(global_subsumption,[],[f41034,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006])).
fof(f41034,plain,(
  ( ! [X32] : (s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl40 | $spl94)),
  inference(subsumption_resolution,[],[f41033,f40171])).
fof(f41033,plain,(
  ( ! [X32] : (s(bool,'T_0') != s(bool,X32) | s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl40 | $spl94)),
  inference(forward_demodulation,[],[f40398,f40171])).
fof(f40398,plain,(
  ( ! [X32] : (s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') != s(bool,X32)) ) | ($spl0 | $spl40 | $spl94)),
  inference(backward_demodulation,[],[f40171,f9630])).
fof(f41032,plain,(
  $false | ($spl0 | $spl18 | $spl40 | $spl94)),
  inference(global_subsumption,[],[f41031,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006])).
fof(f41031,plain,(
  ( ! [X101,X102] : (s(bool,X101) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102)))) ) | ($spl0 | $spl18 | $spl40 | $spl94)),
  inference(subsumption_resolution,[],[f40395,f12174])).
fof(f40395,plain,(
  ( ! [X101,X102] : (s(bool,X101) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) | s(bool,'T_0') != s(bool,X102)) ) | ($spl0 | $spl40 | $spl94)),
  inference(backward_demodulation,[],[f40171,f9562])).
fof(f41030,plain,(
  $false | ($spl0 | $spl40 | $spl94)),
  inference(global_subsumption,[],[f41029,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006])).
fof(f41029,plain,(
  ( ! [X95] : (s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl40 | $spl94)),
  inference(subsumption_resolution,[],[f40394,f1282])).
fof(f40394,plain,(
  ( ! [X95] : (s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95)))) ) | ($spl0 | $spl40 | $spl94)),
  inference(backward_demodulation,[],[f40171,f9561])).
fof(f41026,plain,(
  $false | ($spl0 | $spl40 | $spl94)),
  inference(global_subsumption,[],[f40383,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006])).
fof(f40383,plain,(
  ( ! [X97,X98] : (s(bool,X97) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,X98) = s(bool,sK4('const.option.SOME_1'(s(bool,X97)),bool))) ) | ($spl0 | $spl40 | $spl94)),
  inference(backward_demodulation,[],[f40171,f9268])).
fof(f41024,plain,(
  $false | ($spl0 | $spl42 | $spl94)),
  inference(global_subsumption,[],[f41023,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006])).
fof(f41023,plain,(
  ( ! [X38] : (s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38)))) ) | ($spl0 | $spl42 | $spl94)),
  inference(forward_demodulation,[],[f40367,f40171])).
fof(f40367,plain,(
  ( ! [X38] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl42 | $spl94)),
  inference(backward_demodulation,[],[f40171,f8643])).
fof(f41007,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004,f41006])).
fof(f41005,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974,f41004])).
fof(f40997,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f40996,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974])).
fof(f40996,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl18 | $spl94)),
  inference(forward_demodulation,[],[f40995,f40171])).
fof(f40995,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl18 | $spl94)),
  inference(subsumption_resolution,[],[f40263,f40171])).
fof(f40263,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') != s(bool,X134) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f4676])).
fof(f40994,plain,(
  $false | ($spl0 | $spl18 | $spl94)),
  inference(global_subsumption,[],[f40262,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974])).
fof(f40262,plain,(
  ( ! [X125,X123,X126,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,X126) = s(bool,happ(s(fun(X123,bool),X124),s(X123,X125))) | s(X123,X125) = s(X123,sK5(X125,X124,X123))) ) | ($spl0 | $spl18 | $spl94)),
  inference(backward_demodulation,[],[f40171,f4674])).
fof(f40976,plain,(
  $false | ($spl0 | $spl94)),
  inference(subsumption_resolution,[],[f40173,f111])).
fof(f40173,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f175])).
fof(f40975,plain,(
  $false | ($spl0 | $spl94)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794,f39989,f39795,f39906,f39797,f39806,f39807,f39808,f39809,f39811,f39816,f39817,f39819,f39820,f39821,f39824,f39825,f39854,f39855,f39887,f39888,f39889,f39890,f39891,f39892,f39894,f39895,f39896,f39897,f39903,f39942,f40170,f40018,f40019,f40023,f40171,f40974])).
fof(f40973,plain,(
  $false | ($spl0 | $spl94)),
  inference(trivial_inequality_removal,[],[f40175])).
fof(f40175,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f427])).
fof(f40972,plain,(
  $false | ($spl0 | $spl94)),
  inference(trivial_inequality_removal,[],[f40186])).
fof(f40186,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl0 | $spl94)),
  inference(backward_demodulation,[],[f40171,f1027])).
fof(f39942,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | $spl94),
  inference(cnf_transformation,[],[f39942_D])).
fof(f39942_D,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f39945,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | $spl98),
  inference(cnf_transformation,[],[f39945_D])).
fof(f39945_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f39801,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | $spl10),
  inference(superposition,[],[f1238,f651])).
fof(f39943,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'F_0') = s(bool,X15)) ) | $spl96),
  inference(cnf_transformation,[],[f39943_D])).
fof(f39943_D,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'F_0') = s(bool,X15)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f39800,plain,(
  ( ! [X160] : (s(bool,X160) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'F_0') = s(bool,X160) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f36756,f651])).
fof(f39799,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | ($spl0 | $spl18)),
  inference(superposition,[],[f27732,f651])).
fof(f39798,plain,(
  ( ! [X159] : (s(bool,X159) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'F_0') = s(bool,X159) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1)) ) | $spl18),
  inference(superposition,[],[f2767,f651])).
fof(f39990,plain,(
  ( ! [X156] : (s(bool,X156) != s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'T_0') = s(bool,X156)) ) | $spl102),
  inference(cnf_transformation,[],[f39990_D])).
fof(f39990_D,plain,(
  ( ! [X156] : (s(bool,X156) != s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'T_0') = s(bool,X156)) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f39797,plain,(
  ( ! [X158] : (s(bool,X158) != s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'T_0') = s(bool,X158) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1)) ) | $spl0),
  inference(superposition,[],[f3215,f651])).
fof(f39906,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | $spl0),
  inference(condensation,[],[f39796])).
fof(f39796,plain,(
  ( ! [X157] : (s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'T_0') = s(bool,X157) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1)) ) | $spl0),
  inference(superposition,[],[f882,f651])).
fof(f39795,plain,(
  ( ! [X156] : (s(bool,X156) != s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'T_0') = s(bool,X156) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1)) ) | $spl0),
  inference(superposition,[],[f994,f651])).
fof(f39989,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | $spl0),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f4949,f4952,f4957,f5124,f5184,f5763,f8657,f9993,f10046,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f873,f550,f125,f11601,f23244,f874,f966,f968,f977,f978,f984,f1002,f1041,f1195,f1251,f1254,f1257,f1259,f1262,f1263,f4996,f4997,f5223,f5224,f11232,f11233,f11553,f12586,f12587,f12642,f12643,f13397,f1085,f1086,f1088,f1016,f985,f27736,f560,f1003,f11566,f13355,f13309,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f4950,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1074,f12646,f11236,f1639,f1493,f13356,f13354,f13351,f13332,f13308,f12665,f12662,f12660,f12657,f12645,f12609,f12606,f12604,f12601,f12583,f12560,f11567,f11565,f11562,f11552,f11548,f11524,f11255,f11250,f11248,f11247,f11245,f11235,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10154,f10144,f10143,f10141,f10139,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10030,f10029,f10027,f10025,f9764,f9683,f9682,f9681,f9680,f8907,f8872,f8871,f8870,f8869,f8595,f8594,f8593,f8592,f5756,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f4890,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f3215,f2924,f2920,f2919,f2916,f2888,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1062,f1031,f1030,f1027,f1000,f999,f921,f894,f675,f606,f513,f512,f477,f476,f437,f436,f427,f358,f175,f124,f10156,f36562,f36563,f36564,f36565,f36500,f36501,f36522,f36576,f36527,f36528,f36539,f36540,f36541,f36542,f36584,f37318,f37319,f37320,f37321,f37322,f37627,f37628,f37629,f37646,f37651,f37652,f37653,f37903,f37673,f37676,f37696,f37979,f37765,f37824,f38007,f37836,f37838,f37839,f38564,f38565,f38566,f38491,f38492,f38509,f38587,f38588,f38537,f38602,f38558,f39510,f39920,f39513,f39514,f39515,f39936,f39937,f39538,f39938,f39540,f39939,f39610,f39907,f39641,f39643,f39645,f39646,f39652,f39653,f39654,f39655,f39656,f39657,f39658,f39661,f39662,f39663,f39665,f39666,f39668,f39669,f39670,f39671,f39673,f39678,f39679,f39680,f39681,f39682,f39683,f39684,f39686,f39687,f39716,f39717,f39749,f39750,f39751,f39752,f39753,f39754,f39756,f39757,f39758,f39759,f39765,f39771,f39773,f39775,f39776,f39782,f39783,f39784,f39785,f39786,f39787,f39788,f39794])).
fof(f39793,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f37904,f651])).
fof(f39792,plain,(
  ( ! [X151] : (s(bool,X151) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'F_0') = s(bool,X151) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f36755,f651])).
fof(f39791,plain,(
  ( ! [X150] : (s(bool,X150) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s(bool,'F_0') = s(bool,X150) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f37162,f651])).
fof(f10751,plain,(
  ( ! [X68,X66,X69,X67] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.SOME_1'(s(X66,X67))),s(bool,X68),s(fun(X66,bool),X69)))) ) | $spl54),
  inference(cnf_transformation,[],[f10751_D])).
fof(f10751_D,plain,(
  ( ! [X68,X66,X69,X67] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.SOME_1'(s(X66,X67))),s(bool,X68),s(fun(X66,bool),X69)))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f39968,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.SOME_1'(s(X66,X67))),s(bool,X68),s(fun(X66,bool),X69))) | s(bool,'T_0') = s(bool,X70)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f39963,f5756])).
fof(f39963,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.SOME_1'(s(X66,X67))),s(bool,X68),s(fun(X66,bool),X69))) | s(bool,'T_0') = s(bool,X70)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f39956,f5309])).
fof(f10749,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X71,bool),bool),happ(s(fun(bool,fun(fun(X71,bool),bool)),happ(s(fun('type.option.option'(X71),fun(bool,fun(fun(X71,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X71),X72))),s(bool,X73))),s(fun(X71,bool),X74)))) ) | $spl52),
  inference(cnf_transformation,[],[f10749_D])).
fof(f10749_D,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X71,bool),bool),happ(s(fun(bool,fun(fun(X71,bool),bool)),happ(s(fun('type.option.option'(X71),fun(bool,fun(fun(X71,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X71),X72))),s(bool,X73))),s(fun(X71,bool),X74)))) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f39967,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X71,bool),bool),happ(s(fun(bool,fun(fun(X71,bool),bool)),happ(s(fun('type.option.option'(X71),fun(bool,fun(fun(X71,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X71),X72))),s(bool,X73))),s(fun(X71,bool),X74))) | s(bool,'T_0') = s(bool,X75)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(subsumption_resolution,[],[f39959,f5756])).
fof(f39959,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X71,bool),bool),happ(s(fun(bool,fun(fun(X71,bool),bool)),happ(s(fun('type.option.option'(X71),fun(bool,fun(fun(X71,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X71),X72))),s(bool,X73))),s(fun(X71,bool),X74))) | s(bool,'T_0') = s(bool,X75)) ) | ($spl10 | $spl40 | $spl42 | $spl60)),
  inference(backward_demodulation,[],[f39956,f5310])).
fof(f39615,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | $spl10),
  inference(superposition,[],[f651,f1238])).
fof(f39614,plain,(
  ( ! [X23] : (s(bool,X23) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | s(bool,'F_0') = s(bool,X23)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f651,f36756])).
fof(f39613,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | ($spl0 | $spl18)),
  inference(superposition,[],[f651,f27732])).
fof(f39612,plain,(
  ( ! [X22] : (s(bool,X22) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | s(bool,'F_0') = s(bool,X22)) ) | $spl18),
  inference(superposition,[],[f651,f2767])).
fof(f39907,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | $spl0),
  inference(condensation,[],[f39611])).
fof(f39611,plain,(
  ( ! [X21] : (s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | s(bool,'T_0') = s(bool,X21)) ) | $spl0),
  inference(superposition,[],[f651,f882])).
fof(f39946,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X19),'const.option.NONE_0'),s(bool,X18),s(fun(X19,bool),X20)))) ) | $spl100),
  inference(cnf_transformation,[],[f39946_D])).
fof(f39946_D,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X19),'const.option.NONE_0'),s(bool,X18),s(fun(X19,bool),X20)))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f39610,plain,(
  ( ! [X19,X20,X18] : (s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X19),'const.option.NONE_0'),s(bool,X18),s(fun(X19,bool),X20)))) ) | $spl0),
  inference(superposition,[],[f651,f950])).
fof(f39609,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f651,f37904])).
fof(f39608,plain,(
  ( ! [X16] : (s(bool,X16) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | s(bool,'F_0') = s(bool,X16)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f651,f36755])).
fof(f39607,plain,(
  ( ! [X15] : (s(bool,X15) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0)))) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),sK1) | s(bool,'F_0') = s(bool,X15)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f651,f37162])).
fof(f37348,plain,(
  ( ! [X34] : (s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X34)),bool))) ) | $spl92),
  inference(cnf_transformation,[],[f37348_D])).
fof(f37348_D,plain,(
  ( ! [X34] : (s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X34)),bool))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f37334,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool))) ) | $spl72),
  inference(cnf_transformation,[],[f37334_D])).
fof(f37334_D,plain,(
  ( ! [X0,X1] : (s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f37336,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | $spl75),
  inference(cnf_transformation,[],[f37336_D])).
fof(f37336_D,plain,(
  s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f37329,plain,(
  ( ! [X33,X34,X32] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X32) = s(fun(bool,bool),X33) | s(bool,'T_0') = s(bool,sK6(X32,X33,bool,bool)) | s(bool,X34) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X34)),bool))) ) | $spl18),
  inference(superposition,[],[f1030,f3772])).
fof(f37347,plain,(
  s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) | $spl90),
  inference(cnf_transformation,[],[f37347_D])).
fof(f37347_D,plain,(
  s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool)) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f37344,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X17)) ) | $spl86),
  inference(cnf_transformation,[],[f37344_D])).
fof(f37344_D,plain,(
  ( ! [X17] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X17)) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f37328,plain,(
  ( ! [X30,X31,X29] : (s(bool,X29) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X30) = s(fun(bool,bool),X31) | s(bool,'T_0') = s(bool,sK6(X30,X31,bool,bool)) | s(bool,'F_0') = s(bool,X29) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,g(s(bool,'F_0')))),bool))) ) | $spl18),
  inference(superposition,[],[f1030,f3772])).
fof(f37343,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | $spl84),
  inference(cnf_transformation,[],[f37343_D])).
fof(f37343_D,plain,(
  s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f37345,plain,(
  ( ! [X26] : (s(bool,X26) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool))) ) | $spl88),
  inference(cnf_transformation,[],[f37345_D])).
fof(f37345_D,plain,(
  ( ! [X26] : (s(bool,X26) != s(bool,f(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f37327,plain,(
  ( ! [X28,X26,X27] : (s(bool,X26) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X27) = s(fun(bool,bool),X28) | s(bool,'T_0') = s(bool,sK6(X27,X28,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X26)),bool))) ) | $spl18),
  inference(superposition,[],[f1030,f3772])).
fof(f37341,plain,(
  ( ! [X16] : (s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) | $spl82),
  inference(cnf_transformation,[],[f37341_D])).
fof(f37341_D,plain,(
  ( ! [X16] : (s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f37326,plain,(
  ( ! [X24,X23,X25] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X23) = s(fun(bool,bool),X24) | s(bool,'T_0') = s(bool,sK6(X23,X24,bool,bool)) | s(bool,X25) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X25)) ) | $spl18),
  inference(superposition,[],[f1030,f3511])).
fof(f37325,plain,(
  ( ! [X21,X22,X20] : (s(bool,X20) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X21) = s(fun(bool,bool),X22) | s(bool,'T_0') = s(bool,sK6(X21,X22,bool,bool)) | s(bool,'F_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X20)) ) | $spl18),
  inference(superposition,[],[f1030,f3511])).
fof(f37324,plain,(
  ( ! [X19,X17,X18] : (s(bool,X17) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X18) = s(fun(bool,bool),X19) | s(bool,'T_0') = s(bool,sK6(X18,X19,bool,bool)) | s(bool,'F_0') = s(bool,X17) | s(bool,'F_0') = s(bool,g(s(bool,'F_0')))) ) | $spl18),
  inference(superposition,[],[f1030,f3511])).
fof(f37323,plain,(
  ( ! [X14,X15,X16] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X14) = s(fun(bool,bool),X15) | s(bool,'T_0') = s(bool,sK6(X14,X15,bool,bool)) | s(bool,X16) = s(bool,g(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X16)) ) | $spl18),
  inference(superposition,[],[f1030,f3511])).
fof(f37337,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) | $spl76),
  inference(cnf_transformation,[],[f37337_D])).
fof(f37337_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f37339,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | $spl79),
  inference(cnf_transformation,[],[f37339_D])).
fof(f37339_D,plain,(
  s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) <=> ~$spl79),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl79])])).
fof(f37322,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X11) = s(fun(bool,bool),X12) | s(bool,'T_0') = s(bool,sK6(X11,X12,bool,bool)) | s(bool,X13) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f1030,f213])).
fof(f37333,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | $spl70),
  inference(cnf_transformation,[],[f37333_D])).
fof(f37333_D,plain,(
  s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f37340,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) | $spl80),
  inference(cnf_transformation,[],[f37340_D])).
fof(f37340_D,plain,(
  ( ! [X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X5)) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f37321,plain,(
  ( ! [X10,X8,X9] : (s(bool,X8) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X9) = s(fun(bool,bool),X10) | s(bool,'T_0') = s(bool,sK6(X9,X10,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f1030,f213])).
fof(f37320,plain,(
  ( ! [X6,X7,X5] : (s(bool,X5) != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X6) = s(fun(bool,bool),X7) | s(bool,'T_0') = s(bool,sK6(X6,X7,bool,bool)) | s(bool,'T_0') = s(bool,X5) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1030,f213])).
fof(f37319,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X2) = s(fun(bool,bool),X3) | s(bool,'T_0') = s(bool,sK6(X2,X3,bool,bool)) | s(bool,X4) = s(bool,g(s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f1030,f213])).
fof(f37318,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') != s(bool,f(s(bool,'F_0'))) | s(fun(bool,bool),X0) = s(fun(bool,bool),X1) | s(bool,'T_0') = s(bool,sK6(X0,X1,bool,bool)) | s(bool,'T_0') = s(bool,g(s(bool,'F_0')))) )),
  inference(superposition,[],[f1030,f118])).
fof(f36377,plain,(
  ( ! [X49] : (s(bool,X49) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool))) ) | $spl68),
  inference(cnf_transformation,[],[f36377_D])).
fof(f36377_D,plain,(
  ( ! [X49] : (s(bool,X49) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f36304,plain,(
  ( ! [X48,X49] : (s(bool,X49) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool))) ) | ($spl0 | $spl11 | $spl18)),
  inference(duplicate_literal_removal,[],[f36274])).
fof(f36274,plain,(
  ( ! [X48,X49] : (s(bool,X49) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X48) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X49)),bool)) | s(bool,'T_0') = s(bool,X48)) ) | ($spl0 | $spl11 | $spl18)),
  inference(superposition,[],[f4562,f28055])).
fof(f28055,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl11),
  inference(trivial_inequality_removal,[],[f28046])).
fof(f28046,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl11),
  inference(superposition,[],[f1237,f213])).
fof(f1237,plain,(
  s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | $spl11),
  inference(cnf_transformation,[],[f1237_D])).
fof(f1237_D,plain,(
  s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) <=> ~$spl11),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl11])])).
fof(f27728,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f1237,f26823])).
fof(f26823,plain,(
  ( ! [X131] : (s(bool,'T_0') = s(bool,X131)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f26822,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f1968,f3511,f3798,f3984,f4446,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5978,f6066,f6032,f6212,f6215,f6216,f6293,f6354,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f9993,f10046,f10649,f11106,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13273,f13194,f12713,f12705,f12696,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11495,f11486,f11484,f11476,f11465,f11456,f11454,f11447,f11436,f11397,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11188,f11057,f10999,f10915,f10734,f10602,f10594,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7483,f7482,f7428,f7424,f7415,f7359,f7345,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7095,f7093,f7024,f6981,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5068,f5067,f5064,f5031,f4881,f4876,f4834,f4787,f4478,f4475,f4340,f4076,f4073,f4060,f4058,f4011,f3986,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3595,f3552,f3505,f3504,f3501,f2767,f2004,f1280,f1030,f1027,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f13595,f12342,f6883,f9764,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10141,f10057,f10051,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f8870,f9681,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11530,f11524,f8872,f8869,f8046,f7486,f4062,f512,f13351,f13309,f11562,f11552,f11525,f10144,f4884,f1634,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f1111,f1091,f11589,f13302,f786,f11521,f1098,f11522,f13415,f13303,f13300,f12287,f11604,f11590,f11587,f11523,f11520,f11437,f10227,f8593,f7678,f6748,f6712,f5309,f5281,f5065,f4788,f4476,f4358,f3824,f3770,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4789,f4477,f3825,f3771,f1427,f1398,f1100,f1099,f1074,f1062,f12709,f12657,f12652,f12649,f12645,f11235,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f1639,f1493,f1031,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f25724,f25629,f25630,f25631,f25808,f25809,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138])).
fof(f19747,plain,(
  ( ! [X114,X113] : (s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X114,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X114),s(bool,X113)))) | s(bool,'T_0') = s(bool,X113)) ) | ($spl11 | $spl18)),
  inference(forward_demodulation,[],[f19574,f14609])).
fof(f19574,plain,(
  ( ! [X114,X113] : (~p(s(bool,happ(s(fun(bool,bool),X114),s(bool,X113)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X114,bool)) | s(bool,'T_0') = s(bool,X113)) ) | $spl11),
  inference(superposition,[],[f156,f13688])).
fof(f19569,plain,(
  ( ! [X103,X102] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X103))) | s(bool,X103) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X102)) ) | $spl11),
  inference(superposition,[],[f153,f13688])).
fof(f19482,plain,(
  ( ! [X132,X133] : (s(bool,X133) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X132))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X133))) | s(bool,'T_0') = s(bool,X132)) ) | $spl11),
  inference(superposition,[],[f154,f13688])).
fof(f19371,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl11),
  inference(superposition,[],[f13688,f213])).
fof(f19370,plain,(
  ( ! [X61] : (s(bool,X61) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X61)),bool))) ) | $spl11),
  inference(superposition,[],[f13688,f1267])).
fof(f19367,plain,(
  ( ! [X52,X50,X51] : (s(bool,X51) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X50),'const.option.NONE_0'),s(bool,X51),s(fun(X50,bool),X52)))) ) | $spl11),
  inference(superposition,[],[f13688,f162])).
fof(f18413,plain,(
  ( ! [X76,X77] : (s(bool,X76) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X76) = s(bool,X77) | s(bool,'F_0') = s(bool,X77)) ) | ($spl11 | $spl18)),
  inference(subsumption_resolution,[],[f18378,f175])).
fof(f18378,plain,(
  ( ! [X76,X77] : (p(s(bool,'F_0')) | s(bool,X76) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X76) = s(bool,X77) | s(bool,'F_0') = s(bool,X77)) ) | ($spl11 | $spl18)),
  inference(superposition,[],[f4340,f14609])).
fof(f15975,plain,(
  ( ! [X27] : (s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X27,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'F_0'))))) ) | ($spl11 | $spl18)),
  inference(forward_demodulation,[],[f15939,f14609])).
fof(f15939,plain,(
  ( ! [X27] : (~p(s(bool,happ(s(fun(bool,bool),X27),s(bool,'F_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X27,bool))) ) | ($spl11 | $spl18)),
  inference(superposition,[],[f156,f14609])).
fof(f15935,plain,(
  ( ! [X23] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X23))) | s(bool,X23) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl11 | $spl18)),
  inference(superposition,[],[f153,f14609])).
fof(f15879,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl11 | $spl18)),
  inference(superposition,[],[f14609,f213])).
fof(f13660,plain,(
  ( ! [X2,X3] : (s(bool,X2) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X2),s(fun(sK0,bool),sK2))) | s(bool,X2) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) ) | $spl11),
  inference(superposition,[],[f1237,f213])).
fof(f14615,plain,(
  ( ! [X11] : (s(bool,X11) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X11),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X11)) ) | ($spl11 | $spl18)),
  inference(subsumption_resolution,[],[f14614,f176])).
fof(f14614,plain,(
  ( ! [X11] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X11) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X11),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X11)) ) | ($spl11 | $spl18)),
  inference(forward_demodulation,[],[f13668,f1267])).
fof(f13668,plain,(
  ( ! [X11] : (s(bool,X11) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X11),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X11) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl18)),
  inference(superposition,[],[f1237,f3772])).
fof(f13688,plain,(
  ( ! [X5] : (s(bool,X5) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X5)) ) | $spl11),
  inference(trivial_inequality_removal,[],[f13675])).
fof(f13675,plain,(
  ( ! [X5] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X5) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X5)) ) | $spl11),
  inference(superposition,[],[f1237,f213])).
fof(f14609,plain,(
  s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | ($spl11 | $spl18)),
  inference(subsumption_resolution,[],[f13686,f1267])).
fof(f13686,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | ($spl11 | $spl18)),
  inference(superposition,[],[f1237,f10594])).
fof(f14608,plain,(
  s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))),bool)) | ($spl11 | $spl18)),
  inference(subsumption_resolution,[],[f13687,f1267])).
fof(f13687,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))),bool)) | ($spl11 | $spl18)),
  inference(superposition,[],[f1237,f11057])).
fof(f13659,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl11),
  inference(superposition,[],[f1237,f213])).
fof(f13655,plain,(
  s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | ($spl11 | $spl18)),
  inference(unit_resulting_resolution,[],[f175,f176,f1237,f4340])).
fof(f13658,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))))) | $spl11),
  inference(unit_resulting_resolution,[],[f1237,f153])).
fof(f6354,plain,(
  ( ! [X80,X79] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X79))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X80) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X79)) ) | $spl11),
  inference(superposition,[],[f153,f5692])).
fof(f6293,plain,(
  ( ! [X92,X93] : (s(bool,X93) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X92))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X93))) | s(bool,'T_0') = s(bool,X92)) ) | $spl11),
  inference(superposition,[],[f154,f5692])).
fof(f6216,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl11),
  inference(superposition,[],[f5692,f213])).
fof(f6215,plain,(
  ( ! [X50] : (s(bool,X50) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X50)),bool))) ) | $spl11),
  inference(superposition,[],[f5692,f1267])).
fof(f6212,plain,(
  ( ! [X39,X41,X40] : (s(bool,X40) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X39),'const.option.NONE_0'),s(bool,X40),s(fun(X39,bool),X41)))) ) | $spl11),
  inference(superposition,[],[f5692,f162])).
fof(f6032,plain,(
  ( ! [X30] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X30))) | s(bool,X30) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl11 | $spl18)),
  inference(superposition,[],[f153,f5668])).
fof(f6066,plain,(
  ( ! [X26,X27] : (s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27)) ) | ($spl11 | $spl18)),
  inference(subsumption_resolution,[],[f6028,f175])).
fof(f6028,plain,(
  ( ! [X26,X27] : (p(s(bool,'F_0')) | s(bool,X26) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X26) = s(bool,X27) | s(bool,'F_0') = s(bool,X27)) ) | ($spl11 | $spl18)),
  inference(superposition,[],[f4340,f5668])).
fof(f5978,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | ($spl11 | $spl18)),
  inference(superposition,[],[f5668,f213])).
fof(f5692,plain,(
  ( ! [X2] : (s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl11),
  inference(trivial_inequality_removal,[],[f5683])).
fof(f5683,plain,(
  ( ! [X2] : (s(bool,'T_0') != s(bool,'T_0') | s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl11),
  inference(superposition,[],[f1237,f213])).
fof(f5672,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) ) | $spl11),
  inference(superposition,[],[f1237,f213])).
fof(f5668,plain,(
  s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | ($spl11 | $spl18)),
  inference(unit_resulting_resolution,[],[f175,f176,f1237,f4340])).
fof(f5671,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))))) | $spl11),
  inference(unit_resulting_resolution,[],[f1237,f153])).
fof(f26822,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X131),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X133),'const.option.NONE_0'),s(bool,X132),s(fun(X133,bool),X134))) | s(bool,'T_0') = s(bool,X131)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117])).
fof(f26821,plain,(
  ( ! [X158,X156,X159,X157,X155,X160] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X156),s(fun(sK0,bool),sK2))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(X155),'const.option.NONE_0'),s(bool,X156),s(fun(X155,bool),X157))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X159),'const.option.NONE_0'),s(bool,X158),s(fun(X159,bool),X160)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123])).
fof(f19751,plain,(
  ( ! [X142,X143] : (s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X143,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X143),s(bool,X142))) | s(bool,'T_0') = s(bool,X142)) ) | ($spl0 | $spl11 | $spl18)),
  inference(forward_demodulation,[],[f19584,f14609])).
fof(f19584,plain,(
  ( ! [X142,X143] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X143),s(bool,X142))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X143,bool)) | s(bool,'T_0') = s(bool,X142)) ) | ($spl0 | $spl11 | $spl18)),
  inference(superposition,[],[f3654,f13688])).
fof(f18209,plain,(
  ( ! [X75] : (s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X75,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X75),s(bool,'F_0')))) ) | ($spl0 | $spl11 | $spl18)),
  inference(forward_demodulation,[],[f18096,f14609])).
fof(f18096,plain,(
  ( ! [X75] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X75),s(bool,'F_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X75,bool))) ) | ($spl0 | $spl11 | $spl18)),
  inference(superposition,[],[f3654,f14609])).
fof(f13635,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(fun(sK0,bool),bool),happ(s(fun(bool,fun(fun(sK0,bool),bool)),happ(s(fun('type.option.option'(sK0),fun(bool,fun(fun(sK0,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(sK0),sK1))),s(bool,'T_0'))),s(fun(sK0,bool),sK2))) | ($spl0 | $spl11 | $spl18)),
  inference(unit_resulting_resolution,[],[f165,f1237,f4326])).
fof(f6477,plain,(
  ( ! [X105,X104] : (s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X105,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X105),s(bool,X104))) | s(bool,'T_0') = s(bool,X104)) ) | ($spl0 | $spl11 | $spl18)),
  inference(forward_demodulation,[],[f6364,f5668])).
fof(f6364,plain,(
  ( ! [X105,X104] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X105),s(bool,X104))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X105,bool)) | s(bool,'T_0') = s(bool,X104)) ) | ($spl0 | $spl11 | $spl18)),
  inference(superposition,[],[f3654,f5692])).
fof(f6069,plain,(
  ( ! [X45] : (s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X45,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X45),s(bool,'F_0')))) ) | ($spl0 | $spl11 | $spl18)),
  inference(forward_demodulation,[],[f6042,f5668])).
fof(f6042,plain,(
  ( ! [X45] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X45),s(bool,'F_0'))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)),X45,bool))) ) | ($spl0 | $spl11 | $spl18)),
  inference(superposition,[],[f3654,f5668])).
fof(f5653,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun(fun(sK0,bool),bool),happ(s(fun(bool,fun(fun(sK0,bool),bool)),happ(s(fun('type.option.option'(sK0),fun(bool,fun(fun(sK0,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(sK0),sK1))),s(bool,'T_0'))),s(fun(sK0,bool),sK2))) | ($spl0 | $spl11 | $spl18)),
  inference(unit_resulting_resolution,[],[f165,f1237,f4326])).
fof(f27726,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58 | $spl60)),
  inference(global_subsumption,[],[f27725,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696,f27700,f27702,f27704,f27708,f27710])).
fof(f27710,plain,(
  ( ! [X24,X23,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27473,f111])).
fof(f27473,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f560])).
fof(f27708,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))) = s('type.option.option'(X241),sK5('const.option.option_CASE_3'(s('type.option.option'(X244),'const.option.NONE_0'),s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))),s(fun(X244,'type.option.option'(X241)),X245)),X243,'type.option.option'(X241))) | s('type.option.option'(X241),'const.option.NONE_0') = s('type.option.option'(X241),X242)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27470,f111])).
fof(f27470,plain,(
  ( ! [X243,X241,X244,X242,X245] : (~p(s(bool,'T_0')) | s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))) = s('type.option.option'(X241),sK5('const.option.option_CASE_3'(s('type.option.option'(X244),'const.option.NONE_0'),s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))),s(fun(X244,'type.option.option'(X241)),X245)),X243,'type.option.option'(X241))) | s('type.option.option'(X241),'const.option.NONE_0') = s('type.option.option'(X241),X242)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f13355])).
fof(f27704,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27452,f111])).
fof(f27452,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (~p(s(bool,'T_0')) | s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f1091])).
fof(f27702,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,X20) = s(X15,sK5('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27450,f111])).
fof(f27450,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X15,X20) = s(X15,sK5('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f13302])).
fof(f27700,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27449,f111])).
fof(f27449,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,'T_0')) | s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f693])).
fof(f27696,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s(X7,X12) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27446,f111])).
fof(f27446,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | s(X7,X12) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f13301])).
fof(f27694,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27445,f111])).
fof(f27445,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f786])).
fof(f27692,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27443,f111])).
fof(f27443,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,'T_0')) | s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f1098])).
fof(f27690,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(X23,X25) = s(X23,sK5('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK4('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27440,f111])).
fof(f27440,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,'T_0')) | s(X23,X25) = s(X23,sK5('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK4('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f13303])).
fof(f27688,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,X4) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27439,f111])).
fof(f27439,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f13300])).
fof(f27686,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27433,f154])).
fof(f27433,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,'T_0') = s(bool,X58) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f5754])).
fof(f27684,plain,(
  ( ! [X8,X7,X9] : (s(X7,sK5(X9,X8,X7)) = s(X7,sK5(sK5(X9,X8,X7),X8,X7))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27429,f111])).
fof(f27429,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | s(X7,sK5(X9,X8,X7)) = s(X7,sK5(sK5(X9,X8,X7),X8,X7))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f4704])).
fof(f27680,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27427,f111])).
fof(f27427,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2061])).
fof(f27678,plain,(
  ( ! [X90,X88,X89] : (s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27426,f111])).
fof(f27426,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'T_0')) | s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2042])).
fof(f27674,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27420,f111])).
fof(f27420,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f524])).
fof(f27672,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27419,f111])).
fof(f27419,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f510])).
fof(f27668,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27417,f111])).
fof(f27417,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f156])).
fof(f27666,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27415,f111])).
fof(f27415,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f13377])).
fof(f27662,plain,(
  ( ! [X70,X72,X71,X73] : (s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27409,f111])).
fof(f27409,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,'T_0')) | s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f1074])).
fof(f27655,plain,(
  ( ! [X208,X206,X207,X205] : (s(bool,X206) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X207),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X207,bool),X208))) | s('type.option.option'(bool),X205) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X205)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(forward_demodulation,[],[f27654,f26823])).
fof(f27654,plain,(
  ( ! [X208,X206,X207,X205] : (s('type.option.option'(bool),X205) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,X206) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X207),'const.option.NONE_0'),s(bool,sK4(X205,bool)),s(fun(X207,bool),X208))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X205)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27380,f26823])).
fof(f27380,plain,(
  ( ! [X208,X206,X207,X205] : (s('type.option.option'(bool),X205) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X206) | s(bool,X206) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X207),'const.option.NONE_0'),s(bool,sK4(X205,bool)),s(fun(X207,bool),X208))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X205)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f26084])).
fof(f27652,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,X164) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,'T_0'),s(fun(X165,bool),X166))) | s(X161,X163) = s(X161,sK5(X163,X162,X161))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(forward_demodulation,[],[f27651,f26823])).
fof(f27651,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,X164) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,happ(s(fun(X161,bool),X162),s(X161,X163))),s(fun(X165,bool),X166))) | s(X161,X163) = s(X161,sK5(X163,X162,X161))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27379,f26823])).
fof(f27379,plain,(
  ( ! [X165,X163,X161,X166,X164,X162] : (s(bool,'T_0') != s(bool,X164) | s(bool,X164) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X165),'const.option.NONE_0'),s(bool,happ(s(fun(X161,bool),X162),s(X161,X163))),s(fun(X165,bool),X166))) | s(X161,X163) = s(X161,sK5(X163,X162,X161))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f26074])).
fof(f27622,plain,(
  ( ! [X123,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27269,f12174])).
fof(f27269,plain,(
  ( ! [X123,X122] : (s(bool,'T_0') != s(bool,X123) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f12207])).
fof(f27620,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27266,f1282])).
fof(f27266,plain,(
  ( ! [X10] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f12110])).
fof(f27262,plain,(
  ( ! [X118,X119] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool)) | s(bool,X118) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f11829])).
fof(f27500,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(duplicate_literal_removal,[],[f27169])).
fof(f27169,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f10154])).
fof(f27600,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(forward_demodulation,[],[f27599,f26823])).
fof(f27599,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4(X112,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27165,f26823])).
fof(f27165,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X113) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4(X112,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f10141])).
fof(f27164,plain,(
  ( ! [X109,X108] : (s('type.option.option'(bool),X108) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X109) = s(bool,sK4(X108,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X108)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f10139])).
fof(f27562,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27016,f154])).
fof(f27016,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f5756])).
fof(f27560,plain,(
  ( ! [X13] : (s(bool,'F_0') = s(bool,X13)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f26990,f26823])).
fof(f26990,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X13),s(fun(X12,bool),X14))) | s(bool,'F_0') = s(bool,X13)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f4876])).
fof(f27552,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(forward_demodulation,[],[f27551,f26823])).
fof(f27551,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f26975,f26823])).
fof(f26975,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') != s(bool,X134) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f4676])).
fof(f26974,plain,(
  ( ! [X125,X123,X126,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,X126) = s(bool,happ(s(fun(X123,bool),X124),s(X123,X125))) | s(X123,X125) = s(X123,sK5(X125,X124,X123))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f4674])).
fof(f26889,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X93,X95) = s(X93,sK5(X95,X94,X93)) | s(bool,X96) = s(bool,happ(s(fun(X93,bool),X94),s(X93,X95)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2924])).
fof(f27525,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(condensation,[],[f27524])).
fof(f27524,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27523,f26823])).
fof(f27523,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(forward_demodulation,[],[f26886,f26823])).
fof(f26886,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2916])).
fof(f27521,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f26885,f26823])).
fof(f26885,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,X79)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2888])).
fof(f26880,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X180) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X179,f(s(bool,'T_0'))) != s(X179,g(s(bool,'T_0'))) | s(fun(bool,X179),X177) = s(fun(bool,X179),X178) | s(bool,X180) = s(bool,sK6(X177,X178,X179,bool))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2587])).
fof(f26879,plain,(
  ( ! [X171,X170] : (s(bool,X171) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),X170) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170) | s(bool,X171) = s(bool,sK4(X170,bool))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2584])).
fof(f27514,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f26878,f26823])).
fof(f26878,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,f(s(X152,sK6(X153,X154,bool,X152)))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2580])).
fof(f27512,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f26877,f26823])).
fof(f26877,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,X114) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2570])).
fof(f26876,plain,(
  ( ! [X109,X107,X108] : (s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X107) = s(bool,X108) | s(bool,X107) = s(bool,X109)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2568])).
fof(f26875,plain,(
  ( ! [X80,X81,X79] : (s(bool,X81) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X79) != s(bool,X80) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X79) = s(bool,X81)) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2516])).
fof(f26839,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f894])).
fof(f27504,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f26824,f26823])).
fof(f26824,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f124])).
fof(f27725,plain,(
  ( ! [X33] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,X33) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl11 | $spl18 | $spl58 | $spl60)),
  inference(forward_demodulation,[],[f19655,f26823])).
fof(f27715,plain,(
  $false | ($spl0 | $spl2 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f27714,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696,f27700,f27702,f27704,f27708,f27710])).
fof(f27714,plain,(
  ( ! [X3] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3)))) ) | ($spl0 | $spl2 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27475,f111])).
fof(f27475,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3)))) ) | ($spl0 | $spl2 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f170])).
fof(f27713,plain,(
  $false | ($spl0 | $spl2 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f27712,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696,f27700,f27702,f27704,f27708,f27710])).
fof(f27712,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | ($spl0 | $spl2 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f27474,f111])).
fof(f27474,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | ($spl0 | $spl2 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f841])).
fof(f27711,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696,f27700,f27702,f27704,f27708,f27710])).
fof(f27709,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696,f27700,f27702,f27704,f27708])).
fof(f27705,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696,f27700,f27702,f27704])).
fof(f27703,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696,f27700,f27702])).
fof(f27701,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696,f27700])).
fof(f27697,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694,f27696])).
fof(f27695,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692,f27694])).
fof(f27693,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690,f27692])).
fof(f27691,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688,f27690])).
fof(f27689,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686,f27688])).
fof(f27687,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684,f27686])).
fof(f27685,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680,f27684])).
fof(f27681,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678,f27680])).
fof(f27679,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674,f27678])).
fof(f27675,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672,f27674])).
fof(f27673,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668,f27672])).
fof(f27669,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666,f27668])).
fof(f27667,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662,f27666])).
fof(f27663,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655,f27662])).
fof(f27656,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652,f27655])).
fof(f27653,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622,f27652])).
fof(f27647,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(subsumption_resolution,[],[f27343,f26823])).
fof(f27343,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(backward_demodulation,[],[f26823,f19752])).
fof(f27623,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620,f27622])).
fof(f27621,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262,f27620])).
fof(f27618,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500,f27262])).
fof(f27608,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600,f27500])).
fof(f27601,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164,f27600])).
fof(f27598,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562,f27164])).
fof(f27595,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(global_subsumption,[],[f27594,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562])).
fof(f27594,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(subsumption_resolution,[],[f27135,f26823])).
fof(f27135,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(backward_demodulation,[],[f26823,f9646])).
fof(f27592,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(global_subsumption,[],[f27591,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562])).
fof(f27591,plain,(
  ( ! [X32] : (s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(subsumption_resolution,[],[f27590,f26823])).
fof(f27590,plain,(
  ( ! [X32] : (s(bool,'T_0') != s(bool,X32) | s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(forward_demodulation,[],[f27133,f26823])).
fof(f27133,plain,(
  ( ! [X32] : (s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') != s(bool,X32)) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(backward_demodulation,[],[f26823,f9630])).
fof(f27589,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(global_subsumption,[],[f27588,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562])).
fof(f27588,plain,(
  ( ! [X101,X102] : (s(bool,X101) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102)))) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(subsumption_resolution,[],[f27130,f12174])).
fof(f27130,plain,(
  ( ! [X101,X102] : (s(bool,X101) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) | s(bool,'T_0') != s(bool,X102)) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(backward_demodulation,[],[f26823,f9562])).
fof(f27587,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(global_subsumption,[],[f27586,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562])).
fof(f27586,plain,(
  ( ! [X95] : (s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(subsumption_resolution,[],[f27129,f1282])).
fof(f27129,plain,(
  ( ! [X95] : (s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95)))) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(backward_demodulation,[],[f26823,f9561])).
fof(f27583,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(global_subsumption,[],[f27118,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562])).
fof(f27118,plain,(
  ( ! [X97,X98] : (s(bool,X97) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,X98) = s(bool,sK4('const.option.SOME_1'(s(bool,X97)),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl40 | $spl58)),
  inference(backward_demodulation,[],[f26823,f9268])).
fof(f27581,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl42 | $spl58)),
  inference(global_subsumption,[],[f27580,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562])).
fof(f27580,plain,(
  ( ! [X38] : (s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38)))) ) | ($spl0 | $spl11 | $spl18 | $spl42 | $spl58)),
  inference(forward_demodulation,[],[f27102,f26823])).
fof(f27102,plain,(
  ( ! [X38] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl0 | $spl11 | $spl18 | $spl42 | $spl58)),
  inference(backward_demodulation,[],[f26823,f8643])).
fof(f27563,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560,f27562])).
fof(f27561,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552,f27560])).
fof(f27553,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974,f27552])).
fof(f27550,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889,f26974])).
fof(f27528,plain,(
  $false | ($spl0 | $spl2 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f26890,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889])).
fof(f26890,plain,(
  ( ! [X101,X102] : (s(bool,X102) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X101) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X101) | s(bool,X102) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(X101,sK0))))) ) | ($spl0 | $spl2 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2925])).
fof(f27527,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525,f26889])).
fof(f27526,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521,f27525])).
fof(f27522,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880,f27521])).
fof(f27520,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl22 | $spl58)),
  inference(global_subsumption,[],[f26884,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880])).
fof(f26884,plain,(
  ( ! [X54] : (s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X54) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl11 | $spl18 | $spl22 | $spl58)),
  inference(backward_demodulation,[],[f26823,f2886])).
fof(f27517,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879,f26880])).
fof(f27516,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514,f26879])).
fof(f27515,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512,f27514])).
fof(f27513,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876,f27512])).
fof(f27511,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875,f26876])).
fof(f27510,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839,f26875])).
fof(f27507,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504,f26839])).
fof(f27506,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(subsumption_resolution,[],[f26826,f111])).
fof(f26826,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f175])).
fof(f27505,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f1968,f3511,f3730,f3798,f4326,f3984,f4446,f4661,f4949,f4952,f4957,f5124,f5184,f5671,f5668,f5672,f5692,f5763,f5760,f5758,f5653,f5978,f6066,f6032,f6069,f6212,f6215,f6216,f6373,f6293,f6354,f6477,f7414,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f1237,f13658,f13655,f13659,f14608,f14609,f13688,f14615,f13660,f13635,f13532,f13524,f13273,f13194,f12713,f12705,f12700,f12696,f12682,f12665,f12662,f12659,f12658,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12603,f12602,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12329,f12326,f12320,f12207,f12199,f12197,f12110,f12033,f11943,f11829,f11720,f11515,f11511,f11503,f11497,f11495,f11486,f11484,f11476,f11467,f11465,f11456,f11454,f11447,f11436,f11397,f11260,f11255,f11250,f11248,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11188,f11057,f10999,f10915,f10739,f10734,f10602,f10594,f10529,f10478,f10386,f10226,f10185,f10180,f10176,f10175,f10174,f10173,f10154,f10139,f10059,f10045,f10042,f10038,f10025,f9978,f9977,f8907,f8787,f8785,f8784,f8595,f8592,f8069,f8042,f7966,f7819,f7818,f7677,f7668,f7634,f7631,f7592,f7591,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7210,f7183,f7171,f7151,f7111,f7109,f7104,f7095,f7093,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6958,f6956,f6876,f6867,f6865,f6750,f6716,f6715,f6711,f5762,f5756,f5717,f5312,f5311,f5308,f5284,f5283,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5064,f5031,f4890,f4881,f4876,f4834,f4787,f4758,f4701,f4699,f4698,f4674,f4618,f4617,f4613,f4612,f4611,f4562,f4559,f4537,f4534,f4478,f4475,f4340,f4339,f4076,f4073,f4060,f4058,f4011,f3986,f3985,f3918,f3915,f3902,f3900,f3826,f3823,f3772,f3769,f3740,f3738,f3677,f3662,f3661,f3655,f3654,f3633,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2570,f2568,f2516,f2490,f2485,f2482,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2004,f1809,f1561,f1280,f1255,f1030,f1027,f984,f977,f894,f873,f550,f477,f476,f437,f436,f427,f358,f175,f125,f124,f15879,f15935,f15975,f18209,f18413,f19367,f19370,f19371,f19604,f19482,f19569,f19747,f19751,f13595,f12342,f6883,f9766,f9764,f7033,f4625,f4623,f4621,f10569,f13253,f12660,f12606,f12604,f12601,f12337,f11840,f11247,f11245,f11241,f11240,f11238,f10186,f10163,f10156,f10151,f10141,f10069,f10057,f10051,f10037,f10027,f6881,f13354,f11565,f10062,f10061,f13352,f11563,f11489,f11488,f13353,f11564,f11459,f11458,f13356,f11567,f10044,f10030,f10029,f560,f1003,f11566,f13355,f4633,f1129,f8870,f9681,f1130,f8871,f9682,f13314,f13308,f12295,f11558,f11557,f11554,f11530,f11524,f8872,f8869,f8047,f8046,f7487,f7486,f4062,f512,f13351,f13309,f11601,f11591,f11562,f11552,f11548,f11525,f10144,f4885,f4884,f4702,f3657,f2038,f1970,f1634,f1128,f921,f13395,f13394,f13332,f13327,f13315,f13310,f12297,f11600,f11561,f11555,f11547,f11546,f11541,f11531,f11526,f11192,f10738,f10143,f9683,f9680,f8906,f4433,f4430,f4401,f4396,f4395,f4075,f4013,f3917,f3904,f3702,f3679,f1644,f1633,f1587,f1586,f1562,f1498,f1488,f1487,f1000,f999,f606,f513,f693,f778,f11588,f13301,f4604,f1111,f1091,f11589,f13302,f4605,f786,f11521,f4696,f1098,f11522,f4697,f13525,f13415,f13341,f13303,f13300,f12591,f12287,f11606,f11604,f11590,f11587,f11523,f11520,f11437,f11237,f10227,f8593,f7678,f7303,f6748,f6712,f5754,f5309,f5281,f5065,f4950,f4788,f4711,f4705,f4704,f4695,f4679,f4678,f4676,f4632,f4606,f4603,f4560,f4535,f4476,f4437,f4358,f3824,f3770,f3621,f2080,f2061,f2042,f1967,f1426,f1397,f985,f951,f675,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f13259,f13258,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f4703,f4628,f4627,f4338,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13526,f13377,f11613,f11438,f10228,f8594,f7679,f6749,f6713,f5310,f5282,f5066,f4951,f4789,f4641,f4561,f4536,f4477,f3825,f3771,f3622,f1427,f1398,f1100,f1099,f1088,f1086,f1085,f1074,f1062,f12709,f12657,f12652,f12649,f12647,f12646,f12645,f12643,f12642,f11236,f11235,f1259,f12330,f10397,f7105,f6968,f6877,f4069,f3911,f3658,f2580,f2478,f1639,f1493,f1031,f23363,f23364,f23584,f23635,f23636,f23637,f23638,f23791,f23700,f23701,f23702,f23703,f23835,f23836,f23837,f23838,f23943,f23944,f23945,f25724,f25629,f25630,f25631,f25808,f25809,f25876,f26039,f26040,f26041,f26044,f26045,f26046,f26049,f26051,f26052,f26158,f26058,f26060,f26061,f26063,f26074,f26177,f26084,f26089,f26090,f26091,f26094,f26095,f26096,f26099,f26100,f26101,f26102,f26122,f26124,f26125,f26126,f26200,f26134,f26135,f26136,f26137,f26138,f26123,f26821,f26117,f26822,f26823,f27504])).
fof(f27503,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(trivial_inequality_removal,[],[f26828])).
fof(f26828,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f427])).
fof(f27502,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(trivial_inequality_removal,[],[f26843])).
fof(f26843,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl0 | $spl11 | $spl18 | $spl58)),
  inference(backward_demodulation,[],[f26823,f1027])).
fof(f26710,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X55)) ) | $spl62),
  inference(cnf_transformation,[],[f26710_D])).
fof(f26710_D,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X55)) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f26716,plain,(
  ( ! [X136,X135,X137] : (s(bool,X137) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X136),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X137) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X135)),bool))) ) | ($spl0 | $spl10 | $spl18)),
  inference(subsumption_resolution,[],[f26376,f7415])).
fof(f26376,plain,(
  ( ! [X136,X135,X137] : (s(bool,X137) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X136),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X137) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X135)),bool)) | s(bool,'F_0') = s(bool,X135)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f4562,f24473])).
fof(f26715,plain,(
  ( ! [X127,X128] : (s(bool,X128) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X127),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X128)),bool))) ) | $spl64),
  inference(cnf_transformation,[],[f26715_D])).
fof(f26715_D,plain,(
  ( ! [X127,X128] : (s(bool,X128) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X127),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X128)),bool))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f26602,plain,(
  ( ! [X127,X128,X126] : (s(bool,X128) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X127),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X128)),bool)) | s(bool,'F_0') = s(bool,X126)) ) | ($spl0 | $spl10 | $spl18)),
  inference(duplicate_literal_removal,[],[f26373])).
fof(f26373,plain,(
  ( ! [X127,X128,X126] : (s(bool,X128) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X127),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X128)),bool)) | s(bool,'F_0') = s(bool,X126) | s(bool,'F_0') = s(bool,X126)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f4537,f24473])).
fof(f26606,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X114),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X115) | s(bool,'F_0') = s(bool,X113)) ) | ($spl0 | $spl10 | $spl18)),
  inference(duplicate_literal_removal,[],[f26369])).
fof(f26369,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X114),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X115) | s(bool,'F_0') = s(bool,X113) | s(bool,'F_0') = s(bool,X113)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f4326,f24473])).
fof(f10650,plain,(
  ( ! [X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53)))) ) | $spl48),
  inference(cnf_transformation,[],[f10650_D])).
fof(f10650_D,plain,(
  ( ! [X53] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53)))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f26709,plain,(
  ( ! [X54,X55,X53] : (s(bool,X55) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'T_0') = s(bool,X55)) ) | ($spl10 | $spl18)),
  inference(subsumption_resolution,[],[f26348,f154])).
fof(f26348,plain,(
  ( ! [X54,X55,X53] : (s(bool,X55) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X53)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f477,f24473])).
fof(f20526,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420,f20502,f20367,f20505,f20378,f20033,f20034])).
fof(f20378,plain,(
  ( ! [X218,X220,X219,X217] : (s(bool,X218) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X219),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X219,bool),X220))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X218))) | s('type.option.option'(bool),X217) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X217)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f12601])).
fof(f20505,plain,(
  ( ! [X12] : (s('type.option.option'(bool),X12) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20368,f175])).
fof(f20368,plain,(
  ( ! [X12] : (p(s(bool,'F_0')) | s('type.option.option'(bool),X12) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X12)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f10163])).
fof(f20367,plain,(
  ( ! [X90,X88,X89] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X89),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X89,bool),X90))) | s('type.option.option'(bool),X88) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X88)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f10156])).
fof(f20502,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20365,f5756])).
fof(f20365,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s(bool,'T_0') != s(bool,X113) | s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f10141])).
fof(f20420,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.SOME_1'(s(X64,X65))),s(bool,X66),s(fun(X64,bool),X67))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(trivial_inequality_removal,[],[f20215])).
fof(f20215,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.SOME_1'(s(X64,X65))),s(bool,X66),s(fun(X64,bool),X67))) | s(bool,'T_0') = s(bool,X68)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f5065])).
fof(f20480,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20193,f20102])).
fof(f20193,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f985])).
fof(f20476,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20184,f20102])).
fof(f20184,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'F_0') != s(bool,happ(s(fun(X6,bool),X9),s(X6,X7))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f1016])).
fof(f20180,plain,(
  ( ! [X156,X154,X157,X155] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X156),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X156,bool),X157))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X155))) | s(bool,'T_0') = s(bool,X154)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f12587])).
fof(f20179,plain,(
  ( ! [X152,X151,X149,X153,X150,X148] : (s(bool,X149) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X150),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X150,bool),X151))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X149))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X152),'const.option.NONE_0'),s(bool,X148),s(fun(X152,bool),X153)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f12586])).
fof(f20423,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(condensation,[],[f20175])).
fof(f20175,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X60,bool),X61))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X59),s(fun(X62,bool),X63)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f5224])).
fof(f20424,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(condensation,[],[f20174])).
fof(f20174,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X65,bool),X66))) | s(bool,'T_0') = s(bool,X64)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f5223])).
fof(f20463,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.NONE_0'),s(bool,X71),s(fun(X73,bool),X74)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20162,f5756])).
fof(f20162,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,'T_0') != s(bool,X72) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.NONE_0'),s(bool,X71),s(fun(X73,bool),X74)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f1195])).
fof(f20461,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20427,f977])).
fof(f20427,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(condensation,[],[f20161])).
fof(f20161,plain,(
  ( ! [X6,X5] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f1041])).
fof(f20457,plain,(
  ( ! [X19,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'T_0') = s(bool,X18)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20157,f5756])).
fof(f20157,plain,(
  ( ! [X19,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'T_0') != s(bool,X19) | s(bool,'T_0') = s(bool,X18)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f966])).
fof(f20455,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20156,f175])).
fof(f20156,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f874])).
fof(f20452,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429])).
fof(f20429,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72))) | s(bool,'T_0') = s(bool,X73)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(trivial_inequality_removal,[],[f20145])).
fof(f20145,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72))) | s(bool,'T_0') = s(bool,X73)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f5066])).
fof(f20447,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X121,bool),bool),happ(s(fun(bool,fun(fun(X121,bool),bool)),happ(s(fun('type.option.option'(X121),fun(bool,fun(fun(X121,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X121),X122))),s(bool,X123))),s(fun(X121,bool),X124)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20132,f20102])).
fof(f20132,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X121,bool),bool),happ(s(fun(bool,fun(fun(X121,bool),bool)),happ(s(fun('type.option.option'(X121),fun(bool,fun(fun(X121,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X121),X122))),s(bool,X123))),s(fun(X121,bool),X124)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f1086])).
fof(f20437,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(trivial_inequality_removal,[],[f20103])).
fof(f20103,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f1031])).
fof(f20102,plain,(
  ( ! [X22] : (s(bool,'F_0') = s(bool,X22)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20101,f111])).
fof(f20101,plain,(
  ( ! [X22] : (~p(s(bool,'T_0')) | s(bool,'F_0') = s(bool,X22)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20008,f6442])).
fof(f20008,plain,(
  ( ! [X22] : (~p(s(bool,'T_0')) | s(bool,X22) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X22)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f3633,f1238])).
fof(f20525,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420,f20502,f20367,f20505,f20378,f20033])).
fof(f20522,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(subsumption_resolution,[],[f20521,f19752])).
fof(f20521,plain,(
  s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(forward_demodulation,[],[f20520,f1238])).
fof(f20520,plain,(
  s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(subsumption_resolution,[],[f20024,f20102])).
fof(f20024,plain,(
  s(bool,'F_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | ($spl10 | $spl40)),
  inference(superposition,[],[f9551,f1238])).
fof(f20514,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f20513,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420,f20502,f20367,f20505,f20378])).
fof(f20513,plain,(
  ( ! [X182,X183,X181] : (s(X183,f(s(bool,'F_0'))) != s(X183,g(s(bool,'F_0'))) | s(fun(bool,X183),X181) = s(fun(bool,X183),X182)) ) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(subsumption_resolution,[],[f20386,f19752])).
fof(f20386,plain,(
  ( ! [X182,X183,X181] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(X183,f(s(bool,'F_0'))) != s(X183,g(s(bool,'F_0'))) | s(fun(bool,X183),X181) = s(fun(bool,X183),X182)) ) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(backward_demodulation,[],[f20102,f9487])).
fof(f20511,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f20510,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420,f20502,f20367,f20505,f20378])).
fof(f20510,plain,(
  ( ! [X111,X112] : (s(bool,X112) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X111) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X111)) ) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(subsumption_resolution,[],[f20382,f9630])).
fof(f20382,plain,(
  ( ! [X111,X112] : (s(bool,X112) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X112) | s('type.option.option'(bool),X111) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X111)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f13253])).
fof(f20509,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420,f20502,f20367,f20505,f20378])).
fof(f20506,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420,f20502,f20367,f20505])).
fof(f20504,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420,f20502,f20367])).
fof(f20503,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420,f20502])).
fof(f20501,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f20500,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420])).
fof(f20500,plain,(
  ( ! [X177] : (s('type.option.option'(bool),X177) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X177)) ) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(subsumption_resolution,[],[f20359,f19752])).
fof(f20359,plain,(
  ( ! [X177] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),X177) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X177)) ) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(backward_demodulation,[],[f20102,f9482])).
fof(f20485,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480,f20420])).
fof(f20481,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476,f20480])).
fof(f20477,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180,f20476])).
fof(f20473,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f20472,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180])).
fof(f20472,plain,(
  ( ! [X74,X75] : (s(bool,X75) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X74)) ) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(subsumption_resolution,[],[f20181,f9630])).
fof(f20181,plain,(
  ( ! [X74,X75] : (s(bool,X75) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'F_0') = s(bool,X75) | s(bool,'T_0') = s(bool,X74)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f13258])).
fof(f20471,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179,f20180])).
fof(f20470,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423,f20179])).
fof(f20469,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424,f20423])).
fof(f20468,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463,f20424])).
fof(f20467,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(global_subsumption,[],[f20466,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463])).
fof(f20466,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X28),'const.option.NONE_0'),s(bool,X27),s(fun(X28,bool),X29)))) ) | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(subsumption_resolution,[],[f20173,f19752])).
fof(f20173,plain,(
  ( ! [X28,X29,X27] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X28),'const.option.NONE_0'),s(bool,X27),s(fun(X28,bool),X29)))) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f4997])).
fof(f20465,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38 | $spl40)),
  inference(subsumption_resolution,[],[f20425,f19752])).
fof(f20425,plain,(
  s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(condensation,[],[f20172])).
fof(f20172,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X30)) ) | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(backward_demodulation,[],[f20102,f4996])).
fof(f20464,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461,f20463])).
fof(f20462,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457,f20461])).
fof(f20458,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455,f20457])).
fof(f20456,plain,(
  $false | ($spl0 | $spl10 | $spl18 | $spl38)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1335,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1563,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2110,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f2275,f2492,f1968,f1363,f3511,f3730,f3737,f3798,f4326,f3984,f4446,f4700,f4661,f4949,f4952,f4957,f5124,f5184,f5345,f5348,f5349,f5513,f5584,f5428,f5490,f5625,f5626,f5763,f5760,f5758,f6543,f6631,f6597,f6648,f6649,f7344,f7414,f7426,f7584,f7597,f7683,f7685,f7821,f8655,f8657,f8658,f9993,f10046,f10649,f11106,f11028,f11138,f11254,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11246,f11249,f11315,f11551,f12111,f12174,f12561,f12562,f12578,f12605,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12661,f12749,f12753,f13061,f13062,f12882,f12976,f13183,f12990,f13187,f13530,f560,f1003,f11566,f13355,f13309,f11601,f11525,f1634,f13327,f13310,f11546,f11541,f11526,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1111,f1091,f11589,f13302,f693,f778,f11588,f13301,f786,f11521,f1098,f11522,f13415,f13303,f13300,f11604,f11590,f11587,f11523,f11520,f5754,f4950,f4711,f4705,f4704,f2080,f2061,f2042,f1967,f1426,f1397,f951,f612,f610,f524,f510,f157,f156,f155,f1016,f13397,f12587,f12586,f11553,f11233,f11232,f5224,f5223,f4997,f4996,f1263,f1262,f1257,f1254,f1251,f1195,f1041,f1002,f978,f968,f966,f874,f13377,f11613,f4951,f1427,f1398,f1100,f1099,f1088,f1085,f1074,f12646,f12643,f12642,f11236,f1259,f1639,f1493,f13532,f13526,f13525,f13524,f13395,f13394,f13356,f13354,f13353,f13352,f13351,f13341,f13332,f13315,f13314,f13308,f13273,f13259,f13258,f13253,f13194,f12713,f12709,f12705,f12700,f12696,f12682,f12665,f12662,f12660,f12659,f12658,f12657,f12652,f12649,f12647,f12645,f12637,f12636,f12628,f12627,f12626,f12623,f12622,f12609,f12606,f12604,f12603,f12602,f12601,f12591,f12583,f12581,f12580,f12572,f12570,f12567,f12566,f12560,f12394,f12388,f12342,f12337,f12330,f12329,f12326,f12320,f12297,f12295,f12287,f12207,f12199,f12197,f12110,f12033,f11943,f11840,f11829,f11720,f11606,f11600,f11591,f11567,f11565,f11564,f11563,f11562,f11561,f11558,f11557,f11555,f11554,f11552,f11548,f11547,f11531,f11530,f11524,f11515,f11511,f11503,f11497,f11495,f11489,f11488,f11486,f11484,f11476,f11467,f11465,f11459,f11458,f11456,f11454,f11447,f11438,f11437,f11436,f11397,f11260,f11255,f11250,f11248,f11247,f11245,f11241,f11240,f11238,f11237,f11235,f11227,f11226,f11219,f11218,f11217,f11214,f11213,f11193,f11192,f11188,f11057,f10999,f10915,f10739,f10738,f10734,f10602,f10594,f10569,f10529,f10478,f10397,f10386,f10228,f10227,f10226,f10186,f10185,f10180,f10176,f10175,f10174,f10173,f10163,f10156,f10154,f10151,f10144,f10143,f10141,f10139,f10069,f10062,f10061,f10059,f10057,f10051,f10045,f10044,f10042,f10038,f10037,f10030,f10029,f10027,f10025,f9978,f9977,f9766,f9764,f9683,f9682,f9681,f9680,f8907,f8906,f8872,f8871,f8870,f8869,f8787,f8785,f8784,f8595,f8594,f8593,f8592,f8069,f8047,f8046,f8042,f7966,f7819,f7818,f7679,f7678,f7677,f7668,f7634,f7631,f7592,f7591,f7487,f7486,f7483,f7482,f7447,f7445,f7430,f7429,f7428,f7427,f7424,f7415,f7359,f7346,f7345,f7343,f7342,f7341,f7320,f7313,f7303,f7210,f7183,f7171,f7151,f7111,f7109,f7105,f7104,f7095,f7093,f7033,f7024,f6982,f6981,f6980,f6979,f6978,f6977,f6974,f6972,f6968,f6958,f6956,f6883,f6881,f6877,f6876,f6867,f6865,f6750,f6749,f6748,f6716,f6715,f6713,f6712,f6711,f6442,f5762,f5756,f5717,f5312,f5311,f5310,f5309,f5308,f5284,f5283,f5282,f5281,f5280,f5122,f5121,f5118,f5096,f5068,f5067,f5066,f5065,f5064,f5031,f4890,f4885,f4884,f4881,f4876,f4834,f4789,f4788,f4787,f4758,f4703,f4702,f4701,f4699,f4698,f4697,f4696,f4695,f4679,f4678,f4676,f4674,f4641,f4633,f4632,f4628,f4627,f4625,f4623,f4621,f4618,f4617,f4613,f4612,f4611,f4606,f4605,f4604,f4603,f4562,f4561,f4560,f4559,f4537,f4536,f4535,f4534,f4478,f4477,f4476,f4475,f4437,f4433,f4430,f4401,f4396,f4395,f4358,f4340,f4339,f4338,f4076,f4075,f4073,f4069,f4062,f4060,f4058,f4013,f4011,f3986,f3985,f3918,f3917,f3915,f3911,f3904,f3902,f3900,f3826,f3825,f3824,f3823,f3772,f3771,f3770,f3769,f3740,f3738,f3702,f3679,f3677,f3662,f3661,f3658,f3657,f3655,f3654,f3633,f3622,f3621,f3595,f3552,f3505,f3504,f3501,f3215,f2924,f2920,f2919,f2916,f2888,f2767,f2752,f2587,f2584,f2580,f2570,f2568,f2516,f2490,f2485,f2482,f2478,f2468,f2399,f2397,f2288,f2249,f2246,f2229,f2228,f2227,f2224,f2159,f2156,f2107,f2038,f2004,f1970,f1809,f1562,f1561,f1280,f1255,f1130,f1129,f1128,f1086,f1062,f1031,f1030,f1027,f1000,f999,f985,f984,f977,f921,f894,f873,f675,f606,f550,f513,f512,f477,f476,f437,f436,f427,f358,f175,f125,f124,f1238,f19956,f20102,f20437,f20447,f20429,f20452,f20455])).
fof(f20100,plain,(
  $false | ($spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20099,f176])).
fof(f20099,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl10 | $spl18 | $spl38)),
  inference(condensation,[],[f20098])).
fof(f20098,plain,(
  ( ! [X21] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X21)) ) | ($spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20007,f6442])).
fof(f20007,plain,(
  ( ! [X21] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X21) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X21)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f3511,f1238])).
fof(f20097,plain,(
  $false | ($spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20096,f176])).
fof(f20096,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl10 | $spl18 | $spl38)),
  inference(condensation,[],[f20095])).
fof(f20095,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X18)) ) | ($spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20004,f6442])).
fof(f20004,plain,(
  ( ! [X18] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X18) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X18)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f3511,f1238])).
fof(f20083,plain,(
  $false | ($spl10 | $spl38)),
  inference(subsumption_resolution,[],[f20082,f176])).
fof(f20082,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl10 | $spl38)),
  inference(subsumption_resolution,[],[f19978,f6442])).
fof(f19978,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | $spl10),
  inference(superposition,[],[f118,f1238])).
fof(f20079,plain,(
  $false | ($spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20078,f176])).
fof(f20078,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl10 | $spl18 | $spl38)),
  inference(condensation,[],[f20077])).
fof(f20077,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X5)) ) | ($spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f19970,f6442])).
fof(f19970,plain,(
  ( ! [X5] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X5) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X5)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f1238,f3511])).
fof(f20076,plain,(
  $false | ($spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f20075,f176])).
fof(f20075,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl10 | $spl18 | $spl38)),
  inference(condensation,[],[f20074])).
fof(f20074,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,'F_0') = s(bool,X2)) ) | ($spl10 | $spl18 | $spl38)),
  inference(subsumption_resolution,[],[f19967,f6442])).
fof(f19967,plain,(
  ( ! [X2] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X2) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X2)) ) | ($spl10 | $spl18)),
  inference(superposition,[],[f1238,f3511])).
fof(f20073,plain,(
  $false | ($spl10 | $spl38)),
  inference(subsumption_resolution,[],[f20072,f176])).
fof(f20072,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl10 | $spl38)),
  inference(subsumption_resolution,[],[f19964,f6442])).
fof(f19964,plain,(
  s(bool,'T_0') = s(bool,'F_0') | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | $spl10),
  inference(superposition,[],[f1238,f118])).
fof(f19655,plain,(
  ( ! [X33] : (s(bool,X33) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))) ) | $spl60),
  inference(cnf_transformation,[],[f19655_D])).
fof(f19655_D,plain,(
  ( ! [X33] : (s(bool,X33) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33)))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f19604,plain,(
  ( ! [X33,X32] : (s(bool,X33) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,'T_0') = s(bool,X32)) ) | $spl11),
  inference(duplicate_literal_removal,[],[f19415])).
fof(f19415,plain,(
  ( ! [X33,X32] : (s(bool,X33) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X33))) | s(bool,'T_0') = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) ) | $spl11),
  inference(superposition,[],[f477,f13688])).
fof(f14588,plain,(
  $false | ($spl2 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f14587,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567,f14569,f14573,f14575,f14577,f14581,f14583])).
fof(f14583,plain,(
  ( ! [X24,X23,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14349,f111])).
fof(f14349,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f560])).
fof(f14581,plain,(
  ( ! [X243,X241,X244,X242,X245] : (s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))) = s('type.option.option'(X241),sK5('const.option.option_CASE_3'(s('type.option.option'(X244),'const.option.NONE_0'),s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))),s(fun(X244,'type.option.option'(X241)),X245)),X243,'type.option.option'(X241))) | s('type.option.option'(X241),'const.option.NONE_0') = s('type.option.option'(X241),X242)) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14346,f111])).
fof(f14346,plain,(
  ( ! [X243,X241,X244,X242,X245] : (~p(s(bool,'T_0')) | s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))) = s('type.option.option'(X241),sK5('const.option.option_CASE_3'(s('type.option.option'(X244),'const.option.NONE_0'),s('type.option.option'(X241),'const.option.SOME_1'(s(X241,sK4(X242,X241)))),s(fun(X244,'type.option.option'(X241)),X245)),X243,'type.option.option'(X241))) | s('type.option.option'(X241),'const.option.NONE_0') = s('type.option.option'(X241),X242)) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f13355])).
fof(f14577,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14328,f111])).
fof(f14328,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (~p(s(bool,'T_0')) | s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f1091])).
fof(f14575,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (s(X15,X20) = s(X15,sK5('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14326,f111])).
fof(f14326,plain,(
  ( ! [X21,X19,X17,X15,X22,X20,X18,X16] : (~p(s(bool,'T_0')) | s(X15,X20) = s(X15,sK5('const.option.option_CASE_3'(s('type.option.option'(X21),'const.option.NONE_0'),s(X15,X20),s(fun(X21,X15),X22)),happ(s(fun(fun(X16,fun(X15,bool)),fun(X15,bool)),happ(s(fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool))),happ(s(fun('type.option.option'(X16),fun(fun(X15,bool),fun(fun(X16,fun(X15,bool)),fun(X15,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X16),X17))),s(fun(X15,bool),X18))),s(fun(X16,fun(X15,bool)),X19)),X15))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f13302])).
fof(f14573,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14325,f111])).
fof(f14325,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,'T_0')) | s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f693])).
fof(f14569,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (s(X7,X12) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14322,f111])).
fof(f14322,plain,(
  ( ! [X14,X12,X10,X8,X7,X13,X11,X9] : (~p(s(bool,'T_0')) | s(X7,X12) = s(X7,sK5('const.option.option_CASE_3'(s('type.option.option'(X13),'const.option.NONE_0'),s(X7,X12),s(fun(X13,X7),X14)),'const.option.option_CASE_3'(s('type.option.option'(X8),'const.option.SOME_1'(s(X8,X9))),s(fun(X7,bool),X10),s(fun(X8,fun(X7,bool)),X11)),X7))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f13301])).
fof(f14567,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14321,f111])).
fof(f14321,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f786])).
fof(f14565,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14319,f111])).
fof(f14319,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,'T_0')) | s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f1098])).
fof(f14563,plain,(
  ( ! [X26,X24,X23,X27,X25] : (s(X23,X25) = s(X23,sK5('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK4('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14316,f111])).
fof(f14316,plain,(
  ( ! [X26,X24,X23,X27,X25] : (~p(s(bool,'T_0')) | s(X23,X25) = s(X23,sK5('const.option.option_CASE_3'(s('type.option.option'(X26),'const.option.NONE_0'),s(X23,X25),s(fun(X26,X23),X27)),sK4('const.option.SOME_1'(s(fun(X23,bool),X24)),fun(X23,bool)),X23))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f13303])).
fof(f14561,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(X0,X4) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14315,f111])).
fof(f14315,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK5('const.option.option_CASE_3'(s('type.option.option'(X5),'const.option.NONE_0'),s(X0,X4),s(fun(X5,X0),X6)),'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f13300])).
fof(f14553,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14303,f111])).
fof(f14303,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2061])).
fof(f14551,plain,(
  ( ! [X90,X88,X89] : (s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14302,f111])).
fof(f14302,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'T_0')) | s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2042])).
fof(f14547,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14296,f111])).
fof(f14296,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f524])).
fof(f14545,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14295,f111])).
fof(f14295,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f510])).
fof(f14541,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14293,f111])).
fof(f14293,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f156])).
fof(f14539,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14273,f111])).
fof(f14273,plain,(
  ( ! [X116,X114,X112,X117,X115,X113] : (~p(s(bool,'T_0')) | s(fun(X112,bool),X115) = s(fun(X112,bool),sK5('const.option.option_CASE_3'(s('type.option.option'(X116),'const.option.NONE_0'),s(fun(X112,bool),X115),s(fun(X116,fun(X112,bool)),X117)),happ(s(fun(bool,fun(fun(X112,bool),bool)),happ(s(fun('type.option.option'(X112),fun(bool,fun(fun(X112,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X112),X113))),s(bool,X114)),fun(X112,bool)))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f13377])).
fof(f14535,plain,(
  ( ! [X70,X72,X71,X73] : (s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14265,f111])).
fof(f14265,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,'T_0')) | s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f1074])).
fof(f14384,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | ($spl11 | $spl34)),
  inference(duplicate_literal_removal,[],[f14080])).
fof(f14080,plain,(
  ( ! [X105] : (s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),X105) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X105)) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f10154])).
fof(f14488,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) | s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl11 | $spl34)),
  inference(forward_demodulation,[],[f14487,f13723])).
fof(f14487,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4(X112,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14076,f13723])).
fof(f14076,plain,(
  ( ! [X112,X113] : (s('type.option.option'(bool),X112) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s(bool,'T_0') != s(bool,X113) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,sK4(X112,bool)))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X112)) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f10141])).
fof(f14075,plain,(
  ( ! [X109,X108] : (s('type.option.option'(bool),X108) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X109))) | s(bool,X109) = s(bool,sK4(X108,bool)) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X108)) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f10139])).
fof(f14449,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0)))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f13925,f154])).
fof(f13925,plain,(
  ( ! [X0] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X0)) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f5756])).
fof(f14447,plain,(
  ( ! [X13] : (s(bool,'F_0') = s(bool,X13)) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f13899,f13723])).
fof(f13899,plain,(
  ( ! [X14,X12,X13] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(bool,X13),s(fun(X12,bool),X14))) | s(bool,'F_0') = s(bool,X13)) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f4876])).
fof(f14388,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f13724,f13723])).
fof(f13724,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f124])).
fof(f13723,plain,(
  ( ! [X1] : (s(bool,'T_0') = s(bool,X1)) ) | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659])).
fof(f14587,plain,(
  ( ! [X3] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3)))) ) | ($spl2 | $spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14351,f111])).
fof(f14351,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3)))) ) | ($spl2 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f170])).
fof(f14586,plain,(
  $false | ($spl2 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f14585,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567,f14569,f14573,f14575,f14577,f14581,f14583])).
fof(f14585,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | ($spl2 | $spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14350,f111])).
fof(f14350,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | ($spl2 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f841])).
fof(f14584,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567,f14569,f14573,f14575,f14577,f14581,f14583])).
fof(f14582,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567,f14569,f14573,f14575,f14577,f14581])).
fof(f14578,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567,f14569,f14573,f14575,f14577])).
fof(f14576,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567,f14569,f14573,f14575])).
fof(f14574,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567,f14569,f14573])).
fof(f14570,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567,f14569])).
fof(f14568,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565,f14567])).
fof(f14566,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563,f14565])).
fof(f14564,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561,f14563])).
fof(f14562,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553,f14561])).
fof(f14560,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(global_subsumption,[],[f14559,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553])).
fof(f14559,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(subsumption_resolution,[],[f14309,f154])).
fof(f14309,plain,(
  ( ! [X57,X58,X56,X55] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X58))) | s(bool,'T_0') = s(bool,X58) | s(X55,X57) = s(X55,sK5(X57,X56,X55))) ) | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(backward_demodulation,[],[f13723,f5754])).
fof(f14558,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(global_subsumption,[],[f14557,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553])).
fof(f14557,plain,(
  ( ! [X8,X7,X9] : (s(X7,sK5(X9,X8,X7)) = s(X7,sK5(sK5(X9,X8,X7),X8,X7))) ) | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(subsumption_resolution,[],[f14305,f111])).
fof(f14305,plain,(
  ( ! [X8,X7,X9] : (~p(s(bool,'T_0')) | s(X7,sK5(X9,X8,X7)) = s(X7,sK5(sK5(X9,X8,X7),X8,X7))) ) | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(backward_demodulation,[],[f13723,f4704])).
fof(f14554,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551,f14553])).
fof(f14552,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547,f14551])).
fof(f14548,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545,f14547])).
fof(f14546,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541,f14545])).
fof(f14542,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539,f14541])).
fof(f14540,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535,f14539])).
fof(f14536,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384,f14535])).
fof(f14511,plain,(
  $false | ($spl11 | $spl18 | $spl34)),
  inference(global_subsumption,[],[f14510,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384])).
fof(f14510,plain,(
  ( ! [X123,X122] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl18 | $spl34)),
  inference(subsumption_resolution,[],[f14180,f12174])).
fof(f14180,plain,(
  ( ! [X123,X122] : (s(bool,'T_0') != s(bool,X123) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X122))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X123))) | s(bool,X122) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl18 | $spl34)),
  inference(backward_demodulation,[],[f13723,f12207])).
fof(f14509,plain,(
  $false | ($spl11 | $spl18 | $spl34)),
  inference(global_subsumption,[],[f14508,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384])).
fof(f14508,plain,(
  ( ! [X10] : (s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl18 | $spl34)),
  inference(subsumption_resolution,[],[f14177,f1282])).
fof(f14177,plain,(
  ( ! [X10] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl18 | $spl34)),
  inference(backward_demodulation,[],[f13723,f12110])).
fof(f14506,plain,(
  $false | ($spl11 | $spl18 | $spl34)),
  inference(global_subsumption,[],[f14173,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384])).
fof(f14173,plain,(
  ( ! [X118,X119] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X119))) | s(bool,X119) = s(bool,sK4('const.option.SOME_1'(s(bool,X118)),bool)) | s(bool,X118) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl18 | $spl34)),
  inference(backward_demodulation,[],[f13723,f11829])).
fof(f14496,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488,f14384])).
fof(f14489,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075,f14488])).
fof(f14486,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449,f14075])).
fof(f14483,plain,(
  $false | ($spl11 | $spl18 | $spl34 | $spl40)),
  inference(global_subsumption,[],[f14482,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449])).
fof(f14482,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | ($spl11 | $spl18 | $spl34 | $spl40)),
  inference(subsumption_resolution,[],[f14046,f13723])).
fof(f14046,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,X0)),bool)) | s(bool,'F_0') = s(bool,X0)) ) | ($spl11 | $spl18 | $spl34 | $spl40)),
  inference(backward_demodulation,[],[f13723,f9646])).
fof(f14480,plain,(
  $false | ($spl11 | $spl34 | $spl40)),
  inference(global_subsumption,[],[f14479,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449])).
fof(f14479,plain,(
  ( ! [X32] : (s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl34 | $spl40)),
  inference(subsumption_resolution,[],[f14478,f13723])).
fof(f14478,plain,(
  ( ! [X32] : (s(bool,'T_0') != s(bool,X32) | s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl34 | $spl40)),
  inference(forward_demodulation,[],[f14044,f13723])).
fof(f14044,plain,(
  ( ! [X32] : (s(bool,X32) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'F_0') != s(bool,X32)) ) | ($spl11 | $spl34 | $spl40)),
  inference(backward_demodulation,[],[f13723,f9630])).
fof(f14477,plain,(
  $false | ($spl11 | $spl18 | $spl34 | $spl40)),
  inference(global_subsumption,[],[f14476,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449])).
fof(f14476,plain,(
  ( ! [X101,X102] : (s(bool,X101) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102)))) ) | ($spl11 | $spl18 | $spl34 | $spl40)),
  inference(subsumption_resolution,[],[f14041,f12174])).
fof(f14041,plain,(
  ( ! [X101,X102] : (s(bool,X101) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X101))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X102))) | s(bool,'T_0') != s(bool,X102)) ) | ($spl11 | $spl34 | $spl40)),
  inference(backward_demodulation,[],[f13723,f9562])).
fof(f14475,plain,(
  $false | ($spl11 | $spl34 | $spl40)),
  inference(global_subsumption,[],[f14474,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449])).
fof(f14474,plain,(
  ( ! [X95] : (s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool))) ) | ($spl11 | $spl34 | $spl40)),
  inference(subsumption_resolution,[],[f14040,f1282])).
fof(f14040,plain,(
  ( ! [X95] : (s(bool,X95) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X95)))) ) | ($spl11 | $spl34 | $spl40)),
  inference(backward_demodulation,[],[f13723,f9561])).
fof(f14471,plain,(
  $false | ($spl11 | $spl34 | $spl40)),
  inference(global_subsumption,[],[f14029,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449])).
fof(f14029,plain,(
  ( ! [X97,X98] : (s(bool,X97) = s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X98))) | s(bool,X98) = s(bool,sK4('const.option.SOME_1'(s(bool,X97)),bool))) ) | ($spl11 | $spl34 | $spl40)),
  inference(backward_demodulation,[],[f13723,f9268])).
fof(f14469,plain,(
  $false | ($spl11 | $spl34 | $spl42)),
  inference(global_subsumption,[],[f14468,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449])).
fof(f14468,plain,(
  ( ! [X38] : (s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38)))) ) | ($spl11 | $spl34 | $spl42)),
  inference(forward_demodulation,[],[f14013,f13723])).
fof(f14013,plain,(
  ( ! [X38] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool))) ) | ($spl11 | $spl34 | $spl42)),
  inference(backward_demodulation,[],[f13723,f8643])).
fof(f14466,plain,(
  $false | ($spl11 | $spl18 | $spl34)),
  inference(subsumption_resolution,[],[f13988,f13723])).
fof(f13988,plain,(
  s(bool,'T_0') != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | ($spl11 | $spl18 | $spl34)),
  inference(backward_demodulation,[],[f13723,f7597])).
fof(f14450,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447,f14449])).
fof(f14448,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388,f14447])).
fof(f14440,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(global_subsumption,[],[f14439,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f14439,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(forward_demodulation,[],[f14438,f13723])).
fof(f14438,plain,(
  ( ! [X134,X132,X133,X131] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(subsumption_resolution,[],[f13883,f13723])).
fof(f13883,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') != s(bool,X134) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X134))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X131,bool),X132),s(X131,X133))))) | s(X131,X133) = s(X131,sK5(X133,X132,X131))) ) | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(backward_demodulation,[],[f13723,f4676])).
fof(f14437,plain,(
  $false | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(global_subsumption,[],[f13882,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13882,plain,(
  ( ! [X125,X123,X126,X124] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X126))) | s(bool,X126) = s(bool,happ(s(fun(X123,bool),X124),s(X123,X125))) | s(X123,X125) = s(X123,sK5(X125,X124,X123))) ) | ($spl0 | $spl11 | $spl18 | $spl34)),
  inference(backward_demodulation,[],[f13723,f4674])).
fof(f14415,plain,(
  $false | ($spl0 | $spl2 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f13795,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13795,plain,(
  ( ! [X101,X102] : (s(bool,X102) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X101) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X101) | s(bool,X102) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(X101,sK0))))) ) | ($spl0 | $spl2 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2925])).
fof(f14414,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f13794,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13794,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X93,X95) = s(X93,sK5(X95,X94,X93)) | s(bool,X96) = s(bool,happ(s(fun(X93,bool),X94),s(X93,X95)))) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2924])).
fof(f14413,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f14412,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f14412,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl11 | $spl34)),
  inference(condensation,[],[f14411])).
fof(f14411,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl11 | $spl34)),
  inference(subsumption_resolution,[],[f14410,f13723])).
fof(f14410,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl11 | $spl34)),
  inference(forward_demodulation,[],[f13791,f13723])).
fof(f13791,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2916])).
fof(f14409,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f14408,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f14408,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl11 | $spl34)),
  inference(subsumption_resolution,[],[f13790,f13723])).
fof(f13790,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,X79)) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2888])).
fof(f14407,plain,(
  $false | ($spl11 | $spl22 | $spl34)),
  inference(global_subsumption,[],[f13789,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13789,plain,(
  ( ! [X54] : (s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X54) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2)))) ) | ($spl11 | $spl22 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2886])).
fof(f14406,plain,(
  $false | ($spl11 | $spl20 | $spl34)),
  inference(global_subsumption,[],[f14405,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f14405,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl11 | $spl20 | $spl34)),
  inference(forward_demodulation,[],[f14404,f13723])).
fof(f14404,plain,(
  ( ! [X49] : (s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl11 | $spl20 | $spl34)),
  inference(subsumption_resolution,[],[f13788,f13723])).
fof(f13788,plain,(
  ( ! [X49] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X49),s(fun(sK0,bool),sK2))) | s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | ($spl11 | $spl20 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2884])).
fof(f14401,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f13784,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13784,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X180) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X179,f(s(bool,'T_0'))) != s(X179,g(s(bool,'T_0'))) | s(fun(bool,X179),X177) = s(fun(bool,X179),X178) | s(bool,X180) = s(bool,sK6(X177,X178,X179,bool))) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2587])).
fof(f14400,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f13783,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13783,plain,(
  ( ! [X171,X170] : (s(bool,X171) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),X170) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170) | s(bool,X171) = s(bool,sK4(X170,bool))) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2584])).
fof(f14399,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f14398,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f14398,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl11 | $spl34)),
  inference(subsumption_resolution,[],[f13782,f13723])).
fof(f13782,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,f(s(X152,sK6(X153,X154,bool,X152)))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2580])).
fof(f14397,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f14396,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f14396,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl11 | $spl34)),
  inference(subsumption_resolution,[],[f13781,f13723])).
fof(f13781,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,X114) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2570])).
fof(f14395,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f13780,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13780,plain,(
  ( ! [X109,X107,X108] : (s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X107) = s(bool,X108) | s(bool,X107) = s(bool,X109)) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2568])).
fof(f14394,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f13779,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13779,plain,(
  ( ! [X80,X81,X79] : (s(bool,X81) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X79) != s(bool,X80) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X79) = s(bool,X81)) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f2516])).
fof(f14391,plain,(
  $false | ($spl0 | $spl11 | $spl34)),
  inference(global_subsumption,[],[f13739,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f13739,plain,(
  ( ! [X3] : (s(bool,X3) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X3)))) ) | ($spl0 | $spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f894])).
fof(f14390,plain,(
  $false | ($spl11 | $spl34)),
  inference(subsumption_resolution,[],[f13726,f111])).
fof(f13726,plain,(
  ~p(s(bool,'T_0')) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f175])).
fof(f14389,plain,(
  $false | ($spl11 | $spl34)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f550,f1027,f1030,f1280,f2004,f1968,f4787,f4876,f4834,f4881,f5064,f5067,f5068,f5280,f5283,f5284,f5308,f5311,f5312,f5671,f5672,f5692,f5763,f5756,f560,f1003,f4884,f1634,f1644,f1633,f1587,f1586,f1498,f1488,f1487,f1000,f513,f999,f606,f512,f693,f778,f1111,f1091,f786,f1098,f4788,f2080,f2061,f2042,f1967,f1426,f1397,f675,f612,f610,f524,f510,f157,f156,f155,f4789,f1427,f1398,f1100,f1099,f1074,f1062,f1639,f1493,f1031,f6212,f6215,f6216,f6293,f6354,f5578,f8592,f8593,f8594,f8595,f8657,f8869,f8870,f8871,f8872,f8907,f9680,f9681,f9682,f9683,f9764,f10173,f10174,f10175,f10176,f9993,f10180,f10025,f10027,f10029,f10030,f10038,f10042,f10044,f10045,f10046,f10051,f10057,f10059,f10061,f10062,f10163,f10185,f10186,f10154,f10139,f10141,f10143,f10144,f5309,f5281,f5065,f5310,f5282,f5066,f11254,f11255,f11256,f11257,f11258,f11259,f11203,f11204,f11205,f11206,f11208,f11209,f11235,f11245,f11246,f11247,f11248,f11249,f11250,f11587,f11588,f11589,f11590,f11520,f11521,f11522,f11523,f11524,f11525,f11526,f11541,f11546,f11552,f11562,f11565,f11566,f11567,f11604,f11613,f12560,f12561,f12562,f12578,f12583,f12601,f12604,f12605,f12606,f12609,f12610,f12612,f12613,f12614,f12615,f12617,f12618,f12634,f12645,f12657,f12660,f12661,f12662,f12665,f13300,f13301,f13302,f13303,f13308,f13309,f13310,f13327,f13332,f13351,f13354,f13355,f13356,f13415,f13377,f1237,f13658,f13659,f13723,f14388])).
fof(f14387,plain,(
  $false | ($spl11 | $spl34)),
  inference(trivial_inequality_removal,[],[f13728])).
fof(f13728,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f427])).
fof(f14386,plain,(
  $false | ($spl11 | $spl34)),
  inference(trivial_inequality_removal,[],[f13746])).
fof(f13746,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl11 | $spl34)),
  inference(backward_demodulation,[],[f13723,f1027])).
fof(f13595,plain,(
  ( ! [X41] : (s(bool,X41) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X41)),bool))) ) | $spl58),
  inference(cnf_transformation,[],[f13595_D])).
fof(f13595_D,plain,(
  ( ! [X41] : (s(bool,X41) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X41)),bool))) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f13530,plain,(
  ( ! [X41,X40] : (s(bool,X41) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'F_0') = s(bool,X40)) ) | ($spl0 | $spl10 | $spl18)),
  inference(duplicate_literal_removal,[],[f13494])).
fof(f13494,plain,(
  ( ! [X41,X40] : (s(bool,X41) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X41)),bool)) | s(bool,'F_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X40)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f4537,f6631])).
fof(f11107,plain,(
  ( ! [X35] : (s(bool,X35) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X35)) ) | $spl56),
  inference(cnf_transformation,[],[f11107_D])).
fof(f11107_D,plain,(
  ( ! [X35] : (s(bool,X35) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X35)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f11028,plain,(
  ( ! [X76,X77] : (s(bool,X77) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X77) | s(bool,'F_0') = s(bool,X76)) ) | ($spl0 | $spl18)),
  inference(duplicate_literal_removal,[],[f10864])).
fof(f10864,plain,(
  ( ! [X76,X77] : (s(bool,X77) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s(bool,'T_0') = s(bool,X77) | s(bool,'F_0') = s(bool,X76) | s(bool,'F_0') = s(bool,X76)) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f4326,f10594])).
fof(f11106,plain,(
  ( ! [X35,X34] : (s(bool,X35) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X35)) ) | $spl18),
  inference(subsumption_resolution,[],[f10840,f154])).
fof(f10840,plain,(
  ( ! [X35,X34] : (s(bool,X35) != s(bool,sK4('const.option.SOME_1'(s(bool,'T_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X35) | s(bool,'F_0') = s(bool,X34)) ) | $spl18),
  inference(superposition,[],[f477,f10594])).
fof(f10750,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.SOME_1'(s(X66,X67))),s(bool,X68),s(fun(X66,bool),X69))) | s(bool,'T_0') = s(bool,X70)) ) | $spl48),
  inference(subsumption_resolution,[],[f10745,f5756])).
fof(f10745,plain,(
  ( ! [X70,X68,X66,X69,X67] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X70))) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X66),'const.option.SOME_1'(s(X66,X67))),s(bool,X68),s(fun(X66,bool),X69))) | s(bool,'T_0') = s(bool,X70)) ) | $spl48),
  inference(backward_demodulation,[],[f10650,f5309])).
fof(f10748,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s(bool,'F_0') = s(bool,happ(s(fun(fun(X71,bool),bool),happ(s(fun(bool,fun(fun(X71,bool),bool)),happ(s(fun('type.option.option'(X71),fun(bool,fun(fun(X71,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X71),X72))),s(bool,X73))),s(fun(X71,bool),X74))) | s(bool,'T_0') = s(bool,X75)) ) | $spl48),
  inference(subsumption_resolution,[],[f10742,f5756])).
fof(f10742,plain,(
  ( ! [X74,X72,X71,X75,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X75))) | s(bool,'F_0') = s(bool,happ(s(fun(fun(X71,bool),bool),happ(s(fun(bool,fun(fun(X71,bool),bool)),happ(s(fun('type.option.option'(X71),fun(bool,fun(fun(X71,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X71),X72))),s(bool,X73))),s(fun(X71,bool),X74))) | s(bool,'T_0') = s(bool,X75)) ) | $spl48),
  inference(backward_demodulation,[],[f10650,f5310])).
fof(f10651,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,sK4('const.option.SOME_1'(s(bool,X54)),bool)) | s(bool,'F_0') = s(bool,X54) | s(bool,'T_0') = s(bool,X55)) ) | $spl50),
  inference(cnf_transformation,[],[f10651_D])).
fof(f10651_D,plain,(
  ( ! [X54,X55] : (s(bool,X55) != s(bool,sK4('const.option.SOME_1'(s(bool,X54)),bool)) | s(bool,'F_0') = s(bool,X54) | s(bool,'T_0') = s(bool,X55)) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f10649,plain,(
  ( ! [X54,X55,X53] : (s(bool,X55) != s(bool,sK4('const.option.SOME_1'(s(bool,X54)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X54)) ) | $spl18),
  inference(subsumption_resolution,[],[f10314,f154])).
fof(f10314,plain,(
  ( ! [X54,X55,X53] : (s(bool,X55) != s(bool,sK4('const.option.SOME_1'(s(bool,X54)),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X53))) | s(bool,'T_0') = s(bool,X55) | s(bool,'F_0') = s(bool,X54) | s(bool,'F_0') = s(bool,X53)) ) | $spl18),
  inference(superposition,[],[f477,f3826])).
fof(f8659,plain,(
  ( ! [X72,X71,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))))) | s(X71,X73) = s(X71,sK5(X73,X72,X71))) ) | $spl46),
  inference(cnf_transformation,[],[f8659_D])).
fof(f8659_D,plain,(
  ( ! [X72,X71,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))))) | s(X71,X73) = s(X71,sK5(X73,X72,X71))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f8658,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))))) | s(bool,'T_0') = s(bool,X74) | s(X71,X73) = s(X71,sK5(X73,X72,X71))) ) | ($spl0 | $spl18)),
  inference(subsumption_resolution,[],[f8623,f118])).
fof(f8623,plain,(
  ( ! [X74,X72,X71,X73] : (s(bool,'F_0') != s(bool,X74) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,happ(s(fun(X71,bool),X72),s(X71,X73))))) | s(bool,'T_0') = s(bool,X74) | s(X71,X73) = s(X71,sK5(X73,X72,X71))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f477,f3654])).
fof(f8656,plain,(
  ( ! [X36,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X36)),bool)) | s(bool,X34) = s(bool,X36)) ) | $spl44),
  inference(cnf_transformation,[],[f8656_D])).
fof(f8656_D,plain,(
  ( ! [X36,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X36)),bool)) | s(bool,X34) = s(bool,X36)) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f8655,plain,(
  ( ! [X35,X36,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl18),
  inference(subsumption_resolution,[],[f8608,f118])).
fof(f8608,plain,(
  ( ! [X35,X36,X34] : (s(bool,'F_0') != s(bool,X35) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X35) | s(bool,X34) = s(bool,X36) | s(bool,'F_0') = s(bool,sK4('const.option.SOME_1'(s(bool,X36)),bool))) ) | $spl18),
  inference(superposition,[],[f477,f3772])).
fof(f8643,plain,(
  ( ! [X38] : (s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38)))) ) | $spl42),
  inference(cnf_transformation,[],[f8643_D])).
fof(f8643_D,plain,(
  ( ! [X38] : (s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f8632,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,'T_0') = s(bool,X37)) ) | $spl40),
  inference(duplicate_literal_removal,[],[f8574])).
fof(f8574,plain,(
  ( ! [X37,X38] : (s(bool,X38) != s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X38))) | s(bool,'T_0') = s(bool,X37) | s(bool,'T_0') = s(bool,X37)) ) | $spl40),
  inference(superposition,[],[f477,f7684])).
fof(f7684,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl40),
  inference(cnf_transformation,[],[f7684_D])).
fof(f7684_D,plain,(
  ( ! [X4] : (s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X4)) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f7685,plain,(
  ( ! [X10,X9] : (s(bool,'F_0') = s(bool,X9) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl18),
  inference(subsumption_resolution,[],[f7652,f118])).
fof(f7652,plain,(
  ( ! [X10,X9] : (s(bool,'T_0') != s(bool,X9) | s(bool,'F_0') = s(bool,X9) | s(bool,X10) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X10)) ) | $spl18),
  inference(superposition,[],[f7183,f213])).
fof(f7683,plain,(
  ( ! [X4,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl18),
  inference(subsumption_resolution,[],[f7649,f118])).
fof(f7649,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') != s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X4) = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X4)) ) | $spl18),
  inference(superposition,[],[f7183,f213])).
fof(f6442,plain,(
  ( ! [X61] : (s(bool,X61) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X61)) ) | $spl38),
  inference(cnf_transformation,[],[f6442_D])).
fof(f6442_D,plain,(
  ( ! [X61] : (s(bool,X61) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X61)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f6373,plain,(
  ( ! [X61,X60] : (s(bool,X61) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,X61)) ) | ($spl0 | $spl11 | $spl18)),
  inference(duplicate_literal_removal,[],[f6273])).
fof(f6273,plain,(
  ( ! [X61,X60] : (s(bool,X61) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X60) | s(bool,'F_0') = s(bool,X61) | s(bool,'T_0') = s(bool,X60)) ) | ($spl0 | $spl11 | $spl18)),
  inference(superposition,[],[f4326,f5692])).
fof(f5961,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940,f5944,f5946,f5921,f5920,f5919,f5952,f5956,f5916])).
fof(f5916,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.SOME_1'(s(X64,X65))),s(bool,X66),s(fun(X64,bool),X67))) | s(bool,'T_0') = s(bool,X68)) ) | $spl32),
  inference(trivial_inequality_removal,[],[f5853])).
fof(f5853,plain,(
  ( ! [X68,X66,X64,X67,X65] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X68) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X64),'const.option.SOME_1'(s(X64,X65))),s(bool,X66),s(fun(X64,bool),X67))) | s(bool,'T_0') = s(bool,X68)) ) | $spl32),
  inference(backward_demodulation,[],[f5577,f5065])).
fof(f5956,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | ($spl0 | $spl32)),
  inference(subsumption_resolution,[],[f5831,f5577])).
fof(f5831,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f985])).
fof(f5952,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | ($spl0 | $spl32)),
  inference(subsumption_resolution,[],[f5822,f5577])).
fof(f5822,plain,(
  ( ! [X6,X8,X7,X9] : (s(bool,'F_0') != s(bool,happ(s(fun(X6,bool),X9),s(X6,X7))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X7))),s(bool,X8),s(fun(X6,bool),X9)))) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f1016])).
fof(f5919,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl32)),
  inference(condensation,[],[f5821])).
fof(f5821,plain,(
  ( ! [X61,X59,X62,X60,X63] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X60),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X60,bool),X61))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X62),'const.option.NONE_0'),s(bool,X59),s(fun(X62,bool),X63)))) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f5224])).
fof(f5920,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X0,bool),X1)))) ) | ($spl0 | $spl32)),
  inference(condensation,[],[f5820])).
fof(f5820,plain,(
  ( ! [X66,X64,X65] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X65),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X65,bool),X66))) | s(bool,'T_0') = s(bool,X64)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f5223])).
fof(f5921,plain,(
  s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | ($spl0 | $spl32)),
  inference(condensation,[],[f5818])).
fof(f5818,plain,(
  ( ! [X30] : (s(bool,'T_0') = s(bool,sK4('const.option.SOME_1'(s(bool,'F_0')),bool)) | s(bool,'T_0') = s(bool,X30)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f4996])).
fof(f5946,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.NONE_0'),s(bool,X71),s(fun(X73,bool),X74)))) ) | ($spl0 | $spl32)),
  inference(subsumption_resolution,[],[f5808,f5756])).
fof(f5808,plain,(
  ( ! [X74,X72,X71,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X72))) | s(bool,'T_0') != s(bool,X72) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X73),'const.option.NONE_0'),s(bool,X71),s(fun(X73,bool),X74)))) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f1195])).
fof(f5944,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl32)),
  inference(subsumption_resolution,[],[f5923,f977])).
fof(f5923,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl32)),
  inference(condensation,[],[f5807])).
fof(f5807,plain,(
  ( ! [X6,X5] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f1041])).
fof(f5940,plain,(
  ( ! [X19,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'T_0') = s(bool,X18)) ) | ($spl0 | $spl32)),
  inference(subsumption_resolution,[],[f5803,f5756])).
fof(f5803,plain,(
  ( ! [X19,X18] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X19))) | s(bool,'T_0') != s(bool,X19) | s(bool,'T_0') = s(bool,X18)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f966])).
fof(f5938,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl32)),
  inference(subsumption_resolution,[],[f5802,f175])).
fof(f5802,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,X0)) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f874])).
fof(f5937,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72)))) ) | $spl32),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f1064,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1629,f1631,f1643,f1645,f2000,f2002,f2119,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f999,f1000,f1027,f1030,f1031,f1062,f1280,f2004,f1639,f1493,f1074,f1099,f1398,f1427,f155,f1968,f156,f157,f510,f524,f612,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f5064,f5065,f5066,f5067,f5068,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5924])).
fof(f5924,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72))) | s(bool,'T_0') = s(bool,X73)) ) | $spl32),
  inference(trivial_inequality_removal,[],[f5799])).
fof(f5799,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | s(bool,X73) = s(bool,happ(s(fun(fun(X69,bool),bool),happ(s(fun(bool,fun(fun(X69,bool),bool)),happ(s(fun('type.option.option'(X69),fun(bool,fun(fun(X69,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X69),X70))),s(bool,X71))),s(fun(X69,bool),X72))) | s(bool,'T_0') = s(bool,X73)) ) | $spl32),
  inference(backward_demodulation,[],[f5577,f5066])).
fof(f5932,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X121,bool),bool),happ(s(fun(bool,fun(fun(X121,bool),bool)),happ(s(fun('type.option.option'(X121),fun(bool,fun(fun(X121,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X121),X122))),s(bool,X123))),s(fun(X121,bool),X124)))) ) | ($spl0 | $spl32)),
  inference(subsumption_resolution,[],[f5786,f5577])).
fof(f5786,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X121,bool),bool),happ(s(fun(bool,fun(fun(X121,bool),bool)),happ(s(fun('type.option.option'(X121),fun(bool,fun(fun(X121,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X121),X122))),s(bool,X123))),s(fun(X121,bool),X124)))) ) | ($spl0 | $spl32)),
  inference(backward_demodulation,[],[f5577,f1086])).
fof(f5928,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) ) | $spl32),
  inference(trivial_inequality_removal,[],[f5775])).
fof(f5775,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,'F_0') | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK6(X1,X2,bool,X0))))) ) | $spl32),
  inference(backward_demodulation,[],[f5577,f1031])).
fof(f5957,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940,f5944,f5946,f5921,f5920,f5919,f5952,f5956])).
fof(f5953,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940,f5944,f5946,f5921,f5920,f5919,f5952])).
fof(f5951,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940,f5944,f5946,f5921,f5920,f5919])).
fof(f5950,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940,f5944,f5946,f5921,f5920])).
fof(f5948,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940,f5944,f5946,f5921])).
fof(f5947,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940,f5944,f5946])).
fof(f5945,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940,f5944])).
fof(f5941,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938,f5940])).
fof(f5939,plain,(
  $false | ($spl0 | $spl32)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f782,f783,f168,f882,f950,f964,f994,f1015,f1064,f1153,f1154,f1193,f1220,f1260,f1267,f1282,f1396,f1415,f1425,f1483,f1485,f1497,f1499,f1560,f1584,f1964,f1965,f1966,f1629,f1631,f1643,f1645,f2000,f2002,f2100,f2108,f2109,f2111,f2119,f2728,f2713,f2707,f2698,f2697,f2652,f2643,f2642,f2630,f2629,f2921,f2588,f2616,f124,f125,f175,f358,f427,f436,f437,f476,f477,f512,f513,f550,f606,f675,f873,f894,f977,f984,f985,f999,f1000,f1027,f1030,f1031,f1062,f1255,f1280,f1561,f1809,f1970,f2004,f2107,f2156,f2159,f2224,f2227,f2228,f2229,f2246,f2249,f2275,f3215,f2288,f2397,f2399,f2468,f2478,f2482,f2485,f2490,f2516,f2568,f2570,f2580,f2584,f2587,f2752,f2888,f2916,f2919,f2920,f2924,f1639,f1493,f1259,f1074,f1099,f1398,f1427,f874,f966,f978,f1002,f1041,f1195,f1251,f1254,f1257,f1262,f1016,f155,f1968,f156,f157,f510,f524,f612,f951,f1397,f1426,f1967,f2042,f2061,f1487,f1488,f1498,f1586,f1587,f1633,f1644,f560,f1003,f1634,f1263,f2038,f1128,f968,f921,f1562,f1130,f1129,f1111,f1091,f2080,f610,f786,f1098,f693,f778,f1085,f1086,f1088,f1100,f4787,f4788,f4789,f4876,f4834,f4881,f4884,f4890,f4949,f4950,f4951,f4952,f4957,f4997,f4996,f5064,f5065,f5066,f5067,f5068,f5096,f5118,f5121,f5124,f5184,f5224,f5223,f5280,f5281,f5282,f5283,f5284,f5308,f5309,f5310,f5311,f5312,f5763,f5756,f5577,f5928,f5932,f5924,f5937,f5938])).
fof(f5770,plain,(
  ( ! [X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl36),
  inference(cnf_transformation,[],[f5770_D])).
fof(f5770_D,plain,(
  ( ! [X1] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f5758,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl18),
  inference(condensation,[],[f5757])).
fof(f5757,plain,(
  ( ! [X35,X33,X34] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X34) | s(bool,X33) = s(bool,X35) | s(bool,'F_0') = s(bool,X35)) ) | $spl18),
  inference(trivial_inequality_removal,[],[f5740])).
fof(f5740,plain,(
  ( ! [X35,X33,X34] : (s(bool,X33) != s(bool,X33) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X34) | s(bool,X33) = s(bool,X35) | s(bool,'F_0') = s(bool,X35)) ) | $spl18),
  inference(superposition,[],[f476,f3511])).
fof(f5760,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X0) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X1)) ) | $spl18),
  inference(condensation,[],[f5759])).
fof(f5759,plain,(
  ( ! [X30,X31,X32] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,X31) | s(bool,X30) = s(bool,X32) | s(bool,'F_0') = s(bool,X32)) ) | $spl18),
  inference(trivial_inequality_removal,[],[f5739])).
fof(f5739,plain,(
  ( ! [X30,X31,X32] : (s(bool,X30) != s(bool,X30) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X31))) | s(bool,'T_0') = s(bool,X31) | s(bool,X30) = s(bool,X32) | s(bool,'F_0') = s(bool,X32)) ) | $spl18),
  inference(superposition,[],[f476,f3511])).
fof(f5578,plain,(
  ( ! [X57] : (s(bool,X57) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X57)) ) | $spl34),
  inference(cnf_transformation,[],[f5578_D])).
fof(f5578_D,plain,(
  ( ! [X57] : (s(bool,X57) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X57)) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f5513,plain,(
  ( ! [X57,X56] : (s(bool,X57) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,X56)) ) | ($spl0 | $spl10 | $spl18)),
  inference(duplicate_literal_removal,[],[f5404])).
fof(f5404,plain,(
  ( ! [X57,X56] : (s(bool,X57) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X57) | s(bool,'F_0') = s(bool,X56) | s(bool,'F_0') = s(bool,X56)) ) | ($spl0 | $spl10 | $spl18)),
  inference(superposition,[],[f4326,f3737])).
fof(f4707,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X69,bool),X70),s(X69,X71))),s(fun(sK0,bool),sK2))) | s(X69,X71) = s(X69,sK5(X71,X70,X69))) ) | $spl28),
  inference(cnf_transformation,[],[f4707_D])).
fof(f4707_D,plain,(
  ( ! [X70,X71,X69] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X69,bool),X70),s(X69,X71))),s(fun(sK0,bool),sK2))) | s(X69,X71) = s(X69,sK5(X71,X70,X69))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f4708,plain,(
  ( ! [X72,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X72,bool),X73)))) ) | $spl30),
  inference(cnf_transformation,[],[f4708_D])).
fof(f4708_D,plain,(
  ( ! [X72,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X72,bool),X73)))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f4661,plain,(
  ( ! [X70,X72,X71,X69,X73] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X72),'const.option.NONE_0'),s(bool,'F_0'),s(fun(X72,bool),X73))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(X69,bool),X70),s(X69,X71))),s(fun(sK0,bool),sK2))) | s(X69,X71) = s(X69,sK5(X71,X70,X69))) ) | ($spl0 | $spl18)),
  inference(superposition,[],[f950,f3654])).
fof(f3210,plain,(
  $false | ($spl0 | $spl24)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f168,f873,f874,f882,f894,f921,f950,f951,f977,f978,f964,f966,f968,f994,f984,f985,f999,f1000,f1002,f1015,f1016,f1027,f1030,f1031,f1041,f1062,f1064,f1098,f1099,f1074,f1100,f1085,f1086,f1088,f1111,f1091,f1128,f1129,f1130,f1153,f1154,f1251,f1193,f1195,f1254,f1255,f1257,f1259,f1220,f1260,f1262,f1263,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1561,f1562,f1584,f1586,f1587,f1964,f1965,f1809,f1966,f1967,f1968,f1970,f1629,f1631,f1633,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2038,f2080,f2042,f2100,f2107,f2108,f2109,f2111,f2119,f2156,f2159,f2752,f2728,f2713,f2707,f2224,f2227,f2228,f2229,f2698,f2697,f2246,f2249,f2275,f2288,f2397,f2399,f2652,f2643,f2642,f2888,f2468,f2478,f2482,f2485,f2490,f2516,f2916,f2630,f2919,f2920,f2629,f2921,f2924,f2568,f2570,f2580,f2584,f2587,f2588,f2616,f2933,f2959,f2965,f2967,f2969,f2973,f2979,f2981,f560,f1003,f1634,f3155,f3160,f3164,f3166,f3168,f3170,f3173,f3178,f3209])).
fof(f3209,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f3208,f3155])).
fof(f3208,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f124,f3155])).
fof(f3178,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2933,f3155])).
fof(f3173,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f3172,f111])).
fof(f3172,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f156,f3155])).
fof(f3170,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f3169,f111])).
fof(f3169,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f510,f3155])).
fof(f3168,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f3167,f111])).
fof(f3167,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f524,f3155])).
fof(f3166,plain,(
  ( ! [X90,X88,X89] : (s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f3165,f111])).
fof(f3165,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'T_0')) | s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2042,f3155])).
fof(f3164,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f3163,f111])).
fof(f3163,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2061,f3155])).
fof(f3160,plain,(
  ( ! [X24,X23,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f3157,f111])).
fof(f3157,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | ($spl0 | $spl24)),
  inference(backward_demodulation,[],[f3155,f560])).
fof(f3155,plain,(
  ( ! [X108] : (s(bool,'T_0') = s(bool,X108)) ) | ($spl0 | $spl24)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f168,f873,f874,f882,f894,f921,f950,f951,f977,f978,f964,f966,f968,f994,f984,f985,f999,f1000,f1002,f1015,f1016,f1027,f1030,f1031,f1041,f1062,f1064,f1098,f1099,f1074,f1100,f1085,f1086,f1088,f1111,f1091,f1128,f1129,f1130,f1153,f1154,f1251,f1193,f1195,f1254,f1255,f1257,f1259,f1220,f1260,f1262,f1263,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1561,f1562,f1584,f1586,f1587,f1964,f1965,f1809,f1966,f1967,f1968,f1970,f1629,f1631,f1633,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2038,f2080,f2042,f2100,f2107,f2108,f2109,f2111,f2119,f2156,f2159,f2752,f2728,f2713,f2707,f2224,f2227,f2228,f2229,f2698,f2697,f2246,f2249,f2275,f2288,f2397,f2399,f2652,f2643,f2642,f2888,f2468,f2478,f2482,f2485,f2490,f2516,f2916,f2630,f2919,f2920,f2629,f2921,f2924,f2568,f2570,f2580,f2584,f2587,f2588,f2616,f2933,f2959,f2965,f2967,f2969,f2973,f2979,f2981,f560,f1003,f1634])).
fof(f2981,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),happ(s(fun(fun(X7,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X7,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X7),fun(fun(bool,bool),fun(fun(X7,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X7),X8))),s(fun(bool,bool),X9))),s(fun(X7,fun(bool,bool)),X10)),bool))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f2980,f111])).
fof(f2980,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),happ(s(fun(fun(X7,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X7,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X7),fun(fun(bool,bool),fun(fun(X7,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X7),X8))),s(fun(bool,bool),X9))),s(fun(X7,fun(bool,bool)),X10)),bool))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2950,f873])).
fof(f2950,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),happ(s(fun(fun(X7,fun(bool,bool)),fun(bool,bool)),happ(s(fun(fun(bool,bool),fun(fun(X7,fun(bool,bool)),fun(bool,bool))),happ(s(fun('type.option.option'(X7),fun(fun(bool,bool),fun(fun(X7,fun(bool,bool)),fun(bool,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X7),X8))),s(fun(bool,bool),X9))),s(fun(X7,fun(bool,bool)),X10)),bool))) ) | ($spl0 | $spl24)),
  inference(backward_demodulation,[],[f2933,f1130])).
fof(f2979,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.SOME_1'(s(X3,X4))),s(fun(bool,bool),X5),s(fun(X3,fun(bool,bool)),X6)),bool))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f2978,f111])).
fof(f2978,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.SOME_1'(s(X3,X4))),s(fun(bool,bool),X5),s(fun(X3,fun(bool,bool)),X6)),bool))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2949,f873])).
fof(f2949,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(bool,'T_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),'const.option.option_CASE_3'(s('type.option.option'(X3),'const.option.SOME_1'(s(X3,X4))),s(fun(bool,bool),X5),s(fun(X3,fun(bool,bool)),X6)),bool))) ) | ($spl0 | $spl24)),
  inference(backward_demodulation,[],[f2933,f1129])).
fof(f2973,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f2972,f111])).
fof(f2972,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (~p(s(bool,'T_0')) | s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2947,f873])).
fof(f2947,plain,(
  ( ! [X152,X151,X149,X147,X150,X148] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(X147,X152) = s(X147,sK5(X152,happ(s(fun(fun(X148,fun(X147,bool)),fun(X147,bool)),happ(s(fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool))),happ(s(fun('type.option.option'(X148),fun(fun(X147,bool),fun(fun(X148,fun(X147,bool)),fun(X147,bool)))),'const.option.option_CASE_0'),s('type.option.option'(X148),X149))),s(fun(X147,bool),X150))),s(fun(X148,fun(X147,bool)),X151)),X147))) ) | $spl24),
  inference(backward_demodulation,[],[f2933,f1091])).
fof(f2969,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f2968,f111])).
fof(f2968,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'T_0')) | s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2944,f873])).
fof(f2944,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(X29,happ(s(fun(X30,X29),X33),s(X30,X31))) = s(X29,sK5('const.option.option_CASE_3'(s('type.option.option'(X30),'const.option.SOME_1'(s(X30,X31))),s(X29,X32),s(fun(X30,X29),X33)),X34,X29))) ) | $spl24),
  inference(backward_demodulation,[],[f2933,f786])).
fof(f2967,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f2966,f111])).
fof(f2966,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,'T_0')) | s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2943,f873])).
fof(f2943,plain,(
  ( ! [X39,X37,X41,X38,X36,X40] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(X36,'const.option.option_CASE_3'(s('type.option.option'(X37),X38),s(X36,X39),s(fun(X37,X36),X40))) = s(X36,sK5(happ(s(fun(fun(X37,X36),X36),happ(s(fun(X36,fun(fun(X37,X36),X36)),happ(s(fun('type.option.option'(X37),fun(X36,fun(fun(X37,X36),X36))),'const.option.option_CASE_0'),s('type.option.option'(X37),X38))),s(X36,X39))),s(fun(X37,X36),X40)),X41,X36))) ) | $spl24),
  inference(backward_demodulation,[],[f2933,f1098])).
fof(f2965,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f2964,f111])).
fof(f2964,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,'T_0')) | s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f2942,f873])).
fof(f2942,plain,(
  ( ! [X125,X123,X121,X126,X124,X122] : (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | s(X121,X126) = s(X121,sK5(X126,'const.option.option_CASE_3'(s('type.option.option'(X122),'const.option.SOME_1'(s(X122,X123))),s(fun(X121,bool),X124),s(fun(X122,fun(X121,bool)),X125)),X121))) ) | $spl24),
  inference(backward_demodulation,[],[f2933,f693])).
fof(f2959,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'T_0') = s(bool,happ(s(fun(fun(X130,bool),bool),happ(s(fun(bool,fun(fun(X130,bool),bool)),happ(s(fun('type.option.option'(X130),fun(bool,fun(fun(X130,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X130),X131))),s(bool,X132))),s(fun(X130,bool),X133)))) ) | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f2938,f2933])).
fof(f2938,plain,(
  ( ! [X132,X130,X133,X131] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(X130),X131),s(bool,X132),s(fun(X130,bool),X133))) | s(bool,'T_0') = s(bool,happ(s(fun(fun(X130,bool),bool),happ(s(fun(bool,fun(fun(X130,bool),bool)),happ(s(fun('type.option.option'(X130),fun(bool,fun(fun(X130,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X130),X131))),s(bool,X132))),s(fun(X130,bool),X133)))) ) | ($spl0 | $spl24)),
  inference(backward_demodulation,[],[f2933,f1088])).
fof(f3206,plain,(
  $false | ($spl0 | $spl24)),
  inference(subsumption_resolution,[],[f3205,f111])).
fof(f3205,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f175,f3155])).
fof(f3204,plain,(
  $false | ($spl0 | $spl24)),
  inference(trivial_inequality_removal,[],[f3203])).
fof(f3203,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f427,f3155])).
fof(f3199,plain,(
  $false | ($spl0 | $spl24)),
  inference(trivial_inequality_removal,[],[f3198])).
fof(f3198,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl0 | $spl24)),
  inference(forward_demodulation,[],[f1027,f3155])).
fof(f3154,plain,(
  $false | ($spl2 | $spl16)),
  inference(global_subsumption,[],[f3153,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135,f3137,f3141,f3143,f3145,f3147,f3149])).
fof(f3149,plain,(
  ( ! [X24,X23,X25] : (s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | $spl16),
  inference(subsumption_resolution,[],[f3087,f111])).
fof(f3087,plain,(
  ( ! [X24,X23,X25] : (~p(s(bool,'T_0')) | s('type.option.option'(X23),'const.option.SOME_1'(s(X23,sK4(X24,X23)))) = s('type.option.option'(X23),sK5('const.option.SOME_1'(s(X23,sK4(X24,X23))),X25,'type.option.option'(X23))) | s('type.option.option'(X23),'const.option.NONE_0') = s('type.option.option'(X23),X24)) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f560])).
fof(f3147,plain,(
  ( ! [X21,X22,X20] : (s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl16),
  inference(subsumption_resolution,[],[f3077,f111])).
fof(f3077,plain,(
  ( ! [X21,X22,X20] : (~p(s(bool,'T_0')) | s(X20,X21) = s(X20,sK5(sK4('const.option.SOME_1'(s(X20,X21)),X20),X22,X20))) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f2061])).
fof(f3145,plain,(
  ( ! [X90,X88,X89] : (s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | $spl16),
  inference(subsumption_resolution,[],[f3076,f111])).
fof(f3076,plain,(
  ( ! [X90,X88,X89] : (~p(s(bool,'T_0')) | s(X88,X90) = s(X88,sK5(X90,sK4('const.option.SOME_1'(s(fun(X88,bool),X89)),fun(X88,bool)),X88))) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f2042])).
fof(f3143,plain,(
  ( ! [X14,X12,X15,X13,X11] : (s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | $spl16),
  inference(subsumption_resolution,[],[f3071,f111])).
fof(f3071,plain,(
  ( ! [X14,X12,X15,X13,X11] : (~p(s(bool,'T_0')) | s(X11,X13) = s(X11,sK5('const.option.option_CASE_3'(s('type.option.option'(X12),'const.option.NONE_0'),s(X11,X13),s(fun(X12,X11),X14)),X15,X11))) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f524])).
fof(f3141,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f3070,f111])).
fof(f3070,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | s(X0,X4) = s(X0,sK5(X4,'const.option.option_CASE_3'(s('type.option.option'(X1),'const.option.NONE_0'),s(fun(X0,bool),X2),s(fun(X1,fun(X0,bool)),X3)),X0))) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f510])).
fof(f3137,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f3068,f111])).
fof(f3068,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK5(X2,X1,X0))) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f156])).
fof(f3135,plain,(
  ( ! [X70,X72,X71,X73] : (s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | $spl16),
  inference(subsumption_resolution,[],[f3056,f111])).
fof(f3056,plain,(
  ( ! [X70,X72,X71,X73] : (~p(s(bool,'T_0')) | s(fun(X70,bool),X73) = s(fun(X70,bool),sK5(X73,happ(s(fun(bool,fun(fun(X70,bool),bool)),happ(s(fun('type.option.option'(X70),fun(bool,fun(fun(X70,bool),bool))),'const.option.option_CASE_0'),s('type.option.option'(X70),X71))),s(bool,X72)),fun(X70,bool)))) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f1074])).
fof(f3107,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl16),
  inference(subsumption_resolution,[],[f2982,f2757])).
fof(f2982,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f124])).
fof(f3153,plain,(
  ( ! [X3] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3)))) ) | ($spl2 | $spl16)),
  inference(subsumption_resolution,[],[f3089,f111])).
fof(f3089,plain,(
  ( ! [X3] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3)))) ) | ($spl2 | $spl16)),
  inference(backward_demodulation,[],[f2757,f170])).
fof(f3152,plain,(
  $false | ($spl2 | $spl16)),
  inference(global_subsumption,[],[f3151,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135,f3137,f3141,f3143,f3145,f3147,f3149])).
fof(f3151,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | ($spl2 | $spl16)),
  inference(subsumption_resolution,[],[f3088,f111])).
fof(f3088,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X0) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X0)) ) | ($spl2 | $spl16)),
  inference(backward_demodulation,[],[f2757,f841])).
fof(f3150,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135,f3137,f3141,f3143,f3145,f3147,f3149])).
fof(f3148,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135,f3137,f3141,f3143,f3145,f3147])).
fof(f3146,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135,f3137,f3141,f3143,f3145])).
fof(f3144,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135,f3137,f3141,f3143])).
fof(f3142,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135,f3137,f3141])).
fof(f3138,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135,f3137])).
fof(f3136,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107,f3135])).
fof(f3134,plain,(
  $false | ($spl16 | $spl24)),
  inference(global_subsumption,[],[f3050,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3050,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl16 | $spl24)),
  inference(backward_demodulation,[],[f2757,f2933])).
fof(f3133,plain,(
  $false | ($spl0 | $spl2 | $spl16)),
  inference(global_subsumption,[],[f3049,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3049,plain,(
  ( ! [X101,X102] : (s(bool,X102) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X101) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X101) | s(bool,X102) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(X101,sK0))))) ) | ($spl0 | $spl2 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2925])).
fof(f3132,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3048,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3048,plain,(
  ( ! [X94,X95,X93,X96] : (s(bool,X96) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X93,X95) = s(X93,sK5(X95,X94,X93)) | s(bool,X96) = s(bool,happ(s(fun(X93,bool),X94),s(X93,X95)))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2924])).
fof(f3130,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3129,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3129,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl16)),
  inference(condensation,[],[f3128])).
fof(f3128,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f3127,f2757])).
fof(f3127,plain,(
  ( ! [X6,X7] : (s(bool,'T_0') != s(bool,X6) | s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl16)),
  inference(forward_demodulation,[],[f3044,f2757])).
fof(f3044,plain,(
  ( ! [X6,X7] : (s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') != s(bool,X6) | s(bool,X6) = s(bool,X7)) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2916])).
fof(f3126,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3125,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3125,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2)))) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f3043,f2757])).
fof(f3043,plain,(
  ( ! [X79] : (s(bool,X79) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,X79)) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2888])).
fof(f3123,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3039,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3039,plain,(
  ( ! [X177,X180,X178,X179] : (s(bool,X180) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(X179,f(s(bool,'T_0'))) != s(X179,g(s(bool,'T_0'))) | s(fun(bool,X179),X177) = s(fun(bool,X179),X178) | s(bool,X180) = s(bool,sK6(X177,X178,X179,bool))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2587])).
fof(f3122,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3038,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3038,plain,(
  ( ! [X171,X170] : (s(bool,X171) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),X170) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | s('type.option.option'(bool),'const.option.NONE_0') = s('type.option.option'(bool),X170) | s(bool,X171) = s(bool,sK4(X170,bool))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2584])).
fof(f3121,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3120,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3120,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f3037,f2757])).
fof(f3037,plain,(
  ( ! [X154,X152,X155,X153] : (s(bool,X155) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,f(s(X152,sK6(X153,X154,bool,X152)))) | s(fun(X152,bool),X153) = s(fun(X152,bool),X154) | s(bool,X155) = s(bool,g(s(X152,sK6(X153,X154,bool,X152))))) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2580])).
fof(f3119,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3118,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3118,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl16)),
  inference(subsumption_resolution,[],[f3036,f2757])).
fof(f3036,plain,(
  ( ! [X114,X115,X113] : (s(bool,X115) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') != s(bool,X114) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X113))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X114))) | s(bool,X113) = s(bool,X115)) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2570])).
fof(f3117,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3035,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3035,plain,(
  ( ! [X109,X107,X108] : (s(bool,X109) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X108))) | s(bool,X107) = s(bool,X108) | s(bool,X107) = s(bool,X109)) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2568])).
fof(f3116,plain,(
  $false | ($spl0 | $spl16)),
  inference(global_subsumption,[],[f3034,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3034,plain,(
  ( ! [X80,X81,X79] : (s(bool,X81) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X79) != s(bool,X80) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X80))) | s(bool,X79) = s(bool,X81)) ) | ($spl0 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2516])).
fof(f3115,plain,(
  $false | ($spl0 | $spl10 | $spl16)),
  inference(global_subsumption,[],[f3033,f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3033,plain,(
  ( ! [X21,X22] : (s(bool,X22) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,X21) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X21),s(fun(sK0,bool),sK2))) | s(bool,X21) = s(bool,X22)) ) | ($spl0 | $spl10 | $spl16)),
  inference(backward_demodulation,[],[f2757,f2492])).
fof(f3112,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f3111,f111])).
fof(f3111,plain,(
  ~p(s(bool,'T_0')) | $spl16),
  inference(forward_demodulation,[],[f3110,f2757])).
fof(f3110,plain,(
  ( ! [X57,X54,X55] : (~p(s(bool,happ(s(fun(X54,bool),X57),s(X54,X55))))) ) | $spl16),
  inference(subsumption_resolution,[],[f2997,f2757])).
fof(f2997,plain,(
  ( ! [X57,X54,X55] : (s(bool,'T_0') != s(bool,happ(s(fun(X54,bool),X57),s(X54,X55))) | ~p(s(bool,happ(s(fun(X54,bool),X57),s(X54,X55))))) ) | $spl16),
  inference(backward_demodulation,[],[f2757,f783])).
fof(f3109,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f2984,f111])).
fof(f2984,plain,(
  ~p(s(bool,'T_0')) | $spl16),
  inference(backward_demodulation,[],[f2757,f175])).
fof(f3108,plain,(
  $false | $spl16),
  inference(global_subsumption,[],[f110,f109,f108,f111,f118,f121,f120,f145,f150,f154,f153,f161,f158,f162,f163,f164,f165,f176,f213,f252,f433,f442,f547,f551,f556,f558,f651,f669,f693,f778,f782,f783,f675,f786,f560,f524,f510,f156,f155,f610,f157,f612,f606,f550,f513,f512,f477,f476,f437,f436,f358,f175,f125,f124,f427,f999,f1000,f1003,f1027,f1030,f1031,f1062,f1064,f1098,f1099,f1074,f1100,f1111,f1091,f1267,f1280,f1282,f1396,f1397,f1398,f1415,f1425,f1426,f1427,f1483,f1485,f1487,f1488,f1493,f1497,f1498,f1499,f1560,f1584,f1586,f1587,f1964,f1965,f1967,f1968,f1629,f1631,f1633,f1634,f1639,f1643,f1644,f1645,f2000,f2002,f2004,f2061,f2080,f2042,f2119,f2757,f3107])).
fof(f3106,plain,(
  $false | $spl16),
  inference(trivial_inequality_removal,[],[f2986])).
fof(f2986,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | $spl16),
  inference(backward_demodulation,[],[f2757,f427])).
fof(f3105,plain,(
  $false | $spl16),
  inference(trivial_inequality_removal,[],[f3005])).
fof(f3005,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | $spl16),
  inference(backward_demodulation,[],[f2757,f1027])).
fof(f2933,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl24),
  inference(cnf_transformation,[],[f2933_D])).
fof(f2933_D,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2934,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl26),
  inference(cnf_transformation,[],[f2934_D])).
fof(f2934_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1)) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2588,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(equality_factoring,[],[f1809])).
fof(f2767,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1)) ) | $spl18),
  inference(cnf_transformation,[],[f2767_D])).
fof(f2767_D,plain,(
  ( ! [X1] : (s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X1)) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2629,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X71)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2554])).
fof(f2554,plain,(
  ( ! [X70,X71] : (s(bool,'T_0') = s(bool,X70) | s(bool,'T_0') = s(bool,X70) | s(bool,X71) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X71)) ) | $spl0),
  inference(superposition,[],[f118,f1809])).
fof(f2886,plain,(
  ( ! [X54] : (s(bool,X54) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl22),
  inference(cnf_transformation,[],[f2886_D])).
fof(f2886_D,plain,(
  ( ! [X54] : (s(bool,X54) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2642,plain,(
  ( ! [X54,X53] : (s(bool,X54) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2437])).
fof(f2437,plain,(
  ( ! [X54,X53] : (s(bool,X54) != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X54),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X53) | s(bool,X54) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X53)) ) | $spl0),
  inference(superposition,[],[f994,f1809])).
fof(f2884,plain,(
  ( ! [X49] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X49),s(fun(sK0,bool),sK2))) | s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl20),
  inference(cnf_transformation,[],[f2884_D])).
fof(f2884_D,plain,(
  ( ! [X49] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X49),s(fun(sK0,bool),sK2))) | s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2643,plain,(
  ( ! [X48,X49] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X49),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2435])).
fof(f2435,plain,(
  ( ! [X48,X49] : (s(bool,'F_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X49),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X48) | s(bool,X49) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X48)) ) | $spl0),
  inference(superposition,[],[f977,f1809])).
fof(f2652,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2417])).
fof(f2417,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f118,f1809])).
fof(f2697,plain,(
  ( ! [X24,X23] : (s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X24)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2244])).
fof(f2244,plain,(
  ( ! [X24,X23] : (s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'F_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X23)) ) | $spl0),
  inference(superposition,[],[f1809,f118])).
fof(f2756,plain,(
  ( ! [X19,X17] : (s(bool,X17) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X17) = s(bool,X19) | s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl14),
  inference(cnf_transformation,[],[f2756_D])).
fof(f2756_D,plain,(
  ( ! [X19,X17] : (s(bool,X17) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X17) = s(bool,X19) | s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f2698,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X14) = s(bool,X16) | s(bool,X14) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2242])).
fof(f2242,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X14) = s(bool,X16) | s(bool,X14) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X15)) ) | $spl0),
  inference(superposition,[],[f1809,f1809])).
fof(f2707,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,X25) | s(bool,X25) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2213])).
fof(f2213,plain,(
  ( ! [X24,X23,X25] : (s(bool,X24) = s(bool,X25) | s(bool,X25) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X23) | s(bool,X24) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X23)) ) | $spl0),
  inference(superposition,[],[f1809,f1809])).
fof(f2713,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2205])).
fof(f2205,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f1809,f118])).
fof(f2728,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X18) | s(bool,X17) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X17) = s(bool,X19)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f2188])).
fof(f2188,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X18) | s(bool,X17) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X18) | s(bool,X19) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | s(bool,X17) = s(bool,X19)) ) | $spl0),
  inference(superposition,[],[f1809,f1809])).
fof(f1239,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X14),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X13),s(fun(sK0,bool),sK2))),s(fun(X14,bool),X15))) | s(bool,'T_0') = s(bool,X13)) ) | $spl12),
  inference(cnf_transformation,[],[f1239_D])).
fof(f1239_D,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X14),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X13),s(fun(sK0,bool),sK2))),s(fun(X14,bool),X15))) | s(bool,'T_0') = s(bool,X13)) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f1238,plain,(
  s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | $spl10),
  inference(cnf_transformation,[],[f1238_D])).
fof(f1238_D,plain,(
  s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1154,plain,(
  ( ! [X14,X15,X13] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X14),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X13),s(fun(sK0,bool),sK2))),s(fun(X14,bool),X15))) | s(bool,'T_0') = s(bool,X13)) ) | $spl0),
  inference(superposition,[],[f950,f882])).
fof(f1236,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X9),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2))),s(fun(X9,bool),X10))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(bool,X8),s(fun(X11,bool),X12)))) ) | $spl8),
  inference(cnf_transformation,[],[f1236_D])).
fof(f1236_D,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X9),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2))),s(fun(X9,bool),X10))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(bool,X8),s(fun(X11,bool),X12)))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f1153,plain,(
  ( ! [X12,X10,X8,X11,X9] : (s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X9),'const.option.NONE_0'),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2))),s(fun(X9,bool),X10))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X11),'const.option.NONE_0'),s(bool,X8),s(fun(X11,bool),X12)))) ) | $spl0),
  inference(superposition,[],[f950,f950])).
fof(f865,plain,(
  $false | ($spl0 | $spl2 | $spl6)),
  inference(subsumption_resolution,[],[f787,f842])).
fof(f842,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | ($spl2 | $spl6)),
  inference(trivial_inequality_removal,[],[f840])).
fof(f840,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),sK1) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | ($spl2 | $spl6)),
  inference(superposition,[],[f170,f174])).
fof(f787,plain,(
  p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | ($spl0 | $spl6)),
  inference(forward_demodulation,[],[f168,f650])).
fof(f650,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun(sK0,X0),X1),s(sK0,sK3))) = s(X0,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(X0,X2),s(fun(sK0,X0),X1)))) ) | $spl6),
  inference(superposition,[],[f164,f174])).
fof(f864,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f863,f111])).
fof(f863,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f842,f180])).
fof(f180,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3))) | $spl4),
  inference(unit_resulting_resolution,[],[f172,f121])).
fof(f860,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f859,f111])).
fof(f859,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f858,f180])).
fof(f858,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | ($spl2 | $spl6)),
  inference(forward_demodulation,[],[f857,f577])).
fof(f577,plain,(
  s(sK0,sK3) = s(sK0,sK4(sK1,sK0)) | $spl6),
  inference(unit_resulting_resolution,[],[f548,f443])).
fof(f443,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0))) | s(sK0,sK3) = s(sK0,X0)) ) | $spl6),
  inference(superposition,[],[f153,f174])).
fof(f548,plain,(
  s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK4(sK1,sK0)))) | $spl6),
  inference(unit_resulting_resolution,[],[f209,f145])).
fof(f209,plain,(
  s('type.option.option'(sK0),'const.option.NONE_0') != s('type.option.option'(sK0),sK1) | $spl6),
  inference(superposition,[],[f150,f174])).
fof(f857,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0))))) | ($spl2 | $spl6)),
  inference(subsumption_resolution,[],[f837,f174])).
fof(f837,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK4(sK1,sK0))))) | ($spl2 | $spl6)),
  inference(superposition,[],[f170,f577])).
fof(f856,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f855,f111])).
fof(f855,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f854,f180])).
fof(f854,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f853,f634])).
fof(f634,plain,(
  s(sK0,sK3) = s(sK0,sK5(sK4(sK1,sK0),sK2,sK0)) | ($spl4 | $spl6)),
  inference(subsumption_resolution,[],[f632,f111])).
fof(f632,plain,(
  ~p(s(bool,'T_0')) | s(sK0,sK3) = s(sK0,sK5(sK4(sK1,sK0),sK2,sK0)) | ($spl4 | $spl6)),
  inference(superposition,[],[f630,f180])).
fof(f630,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(sK0,bool),X4),s(sK0,sK3)))) | s(sK0,sK3) = s(sK0,sK5(sK4(sK1,sK0),X4,sK0))) ) | $spl6),
  inference(forward_demodulation,[],[f622,f577])).
fof(f622,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(sK0,bool),X4),s(sK0,sK3)))) | s(sK0,sK4(sK1,sK0)) = s(sK0,sK5(sK4(sK1,sK0),X4,sK0))) ) | $spl6),
  inference(superposition,[],[f156,f577])).
fof(f853,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK5(sK4(sK1,sK0),sK2,sK0))))) | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f836,f174])).
fof(f836,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK5(sK4(sK1,sK0),sK2,sK0))))) | ($spl2 | $spl4 | $spl6)),
  inference(superposition,[],[f170,f634])).
fof(f852,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f851,f111])).
fof(f851,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f850,f180])).
fof(f850,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f849,f546])).
fof(f546,plain,(
  s(sK0,sK3) = s(sK0,sK5(sK5(sK3,sK2,sK0),sK2,sK0)) | $spl4),
  inference(subsumption_resolution,[],[f544,f111])).
fof(f544,plain,(
  ~p(s(bool,'T_0')) | s(sK0,sK3) = s(sK0,sK5(sK5(sK3,sK2,sK0),sK2,sK0)) | $spl4),
  inference(superposition,[],[f542,f180])).
fof(f542,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(sK0,bool),X4),s(sK0,sK3)))) | s(sK0,sK3) = s(sK0,sK5(sK5(sK3,sK2,sK0),X4,sK0))) ) | $spl4),
  inference(forward_demodulation,[],[f534,f525])).
fof(f525,plain,(
  s(sK0,sK3) = s(sK0,sK5(sK3,sK2,sK0)) | $spl4),
  inference(subsumption_resolution,[],[f519,f111])).
fof(f519,plain,(
  ~p(s(bool,'T_0')) | s(sK0,sK3) = s(sK0,sK5(sK3,sK2,sK0)) | $spl4),
  inference(superposition,[],[f156,f180])).
fof(f534,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(sK0,bool),X4),s(sK0,sK3)))) | s(sK0,sK5(sK3,sK2,sK0)) = s(sK0,sK5(sK5(sK3,sK2,sK0),X4,sK0))) ) | $spl4),
  inference(superposition,[],[f156,f525])).
fof(f849,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK5(sK5(sK3,sK2,sK0),sK2,sK0))))) | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f835,f174])).
fof(f835,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK5(sK5(sK3,sK2,sK0),sK2,sK0))))) | ($spl2 | $spl4)),
  inference(superposition,[],[f170,f546])).
fof(f848,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f847,f111])).
fof(f847,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f846,f180])).
fof(f846,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f845,f525])).
fof(f845,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK5(sK3,sK2,sK0))))) | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f834,f174])).
fof(f834,plain,(
  s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK5(sK3,sK2,sK0))))) | ($spl2 | $spl4)),
  inference(superposition,[],[f170,f525])).
fof(f844,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f843,f111])).
fof(f843,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f833,f180])).
fof(f833,plain,(
  ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | ($spl2 | $spl6)),
  inference(unit_resulting_resolution,[],[f174,f170])).
fof(f762,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f723,f719])).
fof(f719,plain,(
  ( ! [X15] : (s(bool,'T_0') = s(bool,X15)) ) | ($spl1 | $spl4 | $spl6)),
  inference(global_subsumption,[],[f110,f109,f108,f111,f175,f118,f121,f120,f125,f124,f145,f150,f154,f153,f157,f156,f155,f161,f158,f162,f163,f164,f165,f174,f172,f169,f177,f176,f180,f195,f209,f213,f216,f217,f252,f276,f277,f284,f287,f345,f346,f358,f368,f369,f371,f384,f405,f406,f408,f411,f412,f424,f425,f434,f433,f454,f436,f437,f438,f439,f440,f441,f442,f443,f459,f463,f476,f477,f479,f480,f503,f507,f508,f510,f521,f512,f513,f522,f515,f516,f523,f524,f525,f542,f543,f546,f548,f547,f550,f551,f554,f556,f558,f560,f572,f576,f577,f610,f606,f612,f630,f631,f634,f650,f717,f718])).
fof(f718,plain,(
  ( ! [X15] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f700,f180])).
fof(f700,plain,(
  ( ! [X15] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X15)) ) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f650,f346])).
fof(f717,plain,(
  ( ! [X4] : (p(s(bool,X4))) ) | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f716,f176])).
fof(f716,plain,(
  ( ! [X4] : (s(bool,'T_0') = s(bool,'F_0') | p(s(bool,X4))) ) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f696,f180])).
fof(f696,plain,(
  ( ! [X4] : (s(bool,'F_0') = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3))) | p(s(bool,X4))) ) | ($spl1 | $spl6)),
  inference(backward_demodulation,[],[f650,f276])).
fof(f631,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(sK0,bool),X1),s(sK0,sK3)))) | s(sK0,sK3) = s(sK0,sK5(sK4(sK1,sK0),'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(sK0,bool),X1),s(fun(X0,fun(sK0,bool)),X2)),sK0))) ) | $spl6),
  inference(superposition,[],[f630,f162])).
fof(f576,plain,(
  ( ! [X4] : (s(sK0,sK3) = s(sK0,sK5(sK5(sK5(sK3,sK2,sK0),sK2,sK0),X4,sK0)) | ~p(s(bool,happ(s(fun(sK0,bool),X4),s(sK0,sK3))))) ) | $spl4),
  inference(forward_demodulation,[],[f570,f546])).
fof(f570,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(sK0,bool),X4),s(sK0,sK3)))) | s(sK0,sK5(sK5(sK3,sK2,sK0),sK2,sK0)) = s(sK0,sK5(sK5(sK5(sK3,sK2,sK0),sK2,sK0),X4,sK0))) ) | $spl4),
  inference(superposition,[],[f156,f546])).
fof(f572,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0))) | s(sK0,X0) = s(sK0,sK5(sK5(sK3,sK2,sK0),sK2,sK0))) ) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f566,f174])).
fof(f566,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X0))) | s(sK0,X0) = s(sK0,sK5(sK5(sK3,sK2,sK0),sK2,sK0))) ) | $spl4),
  inference(superposition,[],[f153,f546])).
fof(f554,plain,(
  ( ! [X8] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),X8) | s(sK0,sK3) = s(sK0,sK4(X8,sK0)) | s('type.option.option'(sK0),'const.option.NONE_0') = s('type.option.option'(sK0),X8)) ) | $spl6),
  inference(superposition,[],[f443,f145])).
fof(f543,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(sK0,bool),X1),s(sK0,sK3)))) | s(sK0,sK3) = s(sK0,sK5(sK5(sK3,sK2,sK0),'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(fun(sK0,bool),X1),s(fun(X0,fun(sK0,bool)),X2)),sK0))) ) | $spl4),
  inference(superposition,[],[f542,f162])).
fof(f523,plain,(
  ( ! [X10] : (s(bool,'T_0') = s(bool,sK5(happ(s(fun(sK0,bool),sK2),s(sK0,sK3)),X10,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X10),s(bool,'T_0'))))) ) | $spl4),
  inference(forward_demodulation,[],[f517,f180])).
fof(f517,plain,(
  ( ! [X10] : (~p(s(bool,happ(s(fun(bool,bool),X10),s(bool,'T_0')))) | s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3))) = s(bool,sK5(happ(s(fun(sK0,bool),sK2),s(sK0,sK3)),X10,bool))) ) | $spl4),
  inference(superposition,[],[f156,f180])).
fof(f516,plain,(
  ( ! [X8,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,X8)))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2)),X9,bool)) | s(bool,'T_0') = s(bool,X8)) ) | $spl1),
  inference(superposition,[],[f156,f216])).
fof(f515,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,'F_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2)),X7,bool)) | s(bool,'T_0') = s(bool,X6)) ) | $spl1),
  inference(superposition,[],[f156,f284])).
fof(f522,plain,(
  ( ! [X5] : (s(bool,'F_0') = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X5,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0'))))) ) | $spl1),
  inference(forward_demodulation,[],[f514,f195])).
fof(f514,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun(bool,bool),X5),s(bool,'F_0')))) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) = s(bool,sK5('const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)),X5,bool))) ) | $spl1),
  inference(superposition,[],[f156,f195])).
fof(f521,plain,(
  ( ! [X0] : (s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),sK5('const.option.SOME_1'(s(sK0,sK3)),X0,'type.option.option'(sK0))) | ~p(s(bool,happ(s(fun('type.option.option'(sK0),bool),X0),s('type.option.option'(sK0),sK1))))) ) | $spl6),
  inference(forward_demodulation,[],[f511,f174])).
fof(f511,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.option.option'(sK0),bool),X0),s('type.option.option'(sK0),sK1)))) | s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) = s('type.option.option'(sK0),sK5('const.option.SOME_1'(s(sK0,sK3)),X0,'type.option.option'(sK0)))) ) | $spl6),
  inference(superposition,[],[f156,f174])).
fof(f508,plain,(
  ( ! [X0] : (s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X0))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f459,f118])).
fof(f507,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))))) | $spl1),
  inference(unit_resulting_resolution,[],[f459,f153])).
fof(f503,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(sK0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))))) != s('type.option.option'('type.option.option'('type.option.option'(sK0))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),sK1))))) | $spl6),
  inference(unit_resulting_resolution,[],[f434,f153])).
fof(f480,plain,(
  ( ! [X8,X9] : (s(bool,X8) != s(bool,X9) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2))))) | s(bool,'T_0') = s(bool,X8)) ) | $spl1),
  inference(superposition,[],[f154,f216])).
fof(f479,plain,(
  ( ! [X6,X7] : (s(bool,'F_0') != s(bool,X7) | s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) = s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))))) | s(bool,'T_0') = s(bool,X6)) ) | $spl1),
  inference(superposition,[],[f154,f284])).
fof(f463,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X1))) | s(sK0,sK3) = s(sK0,'const.option.option_CASE_3'(s('type.option.option'(X0),'const.option.NONE_0'),s(sK0,X1),s(fun(X0,sK0),X2)))) ) | $spl6),
  inference(superposition,[],[f443,f162])).
fof(f459,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))))) | $spl1),
  inference(unit_resulting_resolution,[],[f454,f153])).
fof(f441,plain,(
  ( ! [X10] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X10))) | s(bool,X10) = s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) ) | $spl4),
  inference(superposition,[],[f153,f180])).
fof(f440,plain,(
  ( ! [X8,X9] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X8))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X9))) | s(bool,X9) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X8)) ) | $spl1),
  inference(superposition,[],[f153,f216])).
fof(f439,plain,(
  ( ! [X6,X7] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X7))) | s(bool,X7) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X6)) ) | $spl1),
  inference(superposition,[],[f153,f284])).
fof(f438,plain,(
  ( ! [X5] : (s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,X5))) | s(bool,X5) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) ) | $spl1),
  inference(superposition,[],[f153,f195])).
fof(f454,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'F_0'))) | $spl1),
  inference(forward_demodulation,[],[f432,f195])).
fof(f432,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) | $spl1),
  inference(unit_resulting_resolution,[],[f177,f153])).
fof(f434,plain,(
  s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),'const.option.NONE_0'))) != s('type.option.option'('type.option.option'(sK0)),'const.option.SOME_1'(s('type.option.option'(sK0),sK1))) | $spl6),
  inference(unit_resulting_resolution,[],[f209,f153])).
fof(f425,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X3),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X3),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2)))) ) | $spl1),
  inference(subsumption_resolution,[],[f419,f120])).
fof(f419,plain,(
  ( ! [X3] : (p(s(bool,X3)) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X3),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X3),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X3)) ) | $spl1),
  inference(superposition,[],[f384,f216])).
fof(f424,plain,(
  ( ! [X2] : (s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X2),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X2),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl1),
  inference(subsumption_resolution,[],[f418,f175])).
fof(f418,plain,(
  ( ! [X2] : (p(s(bool,'F_0')) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X2),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X2),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl1),
  inference(superposition,[],[f384,f284])).
fof(f412,plain,(
  ( ! [X8,X7] : (p(s(bool,X7)) | p(s(bool,X8)) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2)))) ) | $spl1),
  inference(subsumption_resolution,[],[f396,f120])).
fof(f396,plain,(
  ( ! [X8,X7] : (p(s(bool,X7)) | p(s(bool,X8)) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X8),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X7)) ) | $spl1),
  inference(superposition,[],[f277,f216])).
fof(f411,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X5),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X5)) ) | $spl1),
  inference(subsumption_resolution,[],[f395,f175])).
fof(f395,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,X6)) | s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X5),s(fun(sK0,bool),sK2))) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X6),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X5)) ) | $spl1),
  inference(superposition,[],[f277,f284])).
fof(f408,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X1),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(subsumption_resolution,[],[f392,f175])).
fof(f392,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X1)) | s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X1),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f277,f118])).
fof(f406,plain,(
  ( ! [X8,X7] : (p(s(bool,X7)) | p(s(bool,X8)) | s(bool,X8) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2)))) ) | $spl1),
  inference(subsumption_resolution,[],[f389,f120])).
fof(f389,plain,(
  ( ! [X8,X7] : (p(s(bool,X7)) | p(s(bool,X8)) | s(bool,X8) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X7)) ) | $spl1),
  inference(superposition,[],[f277,f216])).
fof(f405,plain,(
  ( ! [X6,X5] : (p(s(bool,X6)) | s(bool,X6) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X5),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X5)) ) | $spl1),
  inference(subsumption_resolution,[],[f388,f175])).
fof(f388,plain,(
  ( ! [X6,X5] : (p(s(bool,'F_0')) | p(s(bool,X6)) | s(bool,X6) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X5),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X5)) ) | $spl1),
  inference(superposition,[],[f277,f284])).
fof(f384,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2)))) ) | $spl1),
  inference(factoring,[],[f277])).
fof(f371,plain,(
  ( ! [X41,X42,X40] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X41),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X40),'const.option.NONE_0'),s(bool,X41),s(fun(X40,bool),X42)))) ) | $spl1),
  inference(superposition,[],[f284,f162])).
fof(f369,plain,(
  ( ! [X35,X36,X34] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X35),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X34),'const.option.NONE_0'),s(bool,X35),s(fun(X34,bool),X36)))) ) | $spl1),
  inference(superposition,[],[f217,f162])).
fof(f368,plain,(
  ( ! [X33,X31,X32] : (s(bool,X32) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X32),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(X31),'const.option.NONE_0'),s(bool,X32),s(fun(X31,bool),X33)))) ) | $spl1),
  inference(superposition,[],[f216,f162])).
fof(f346,plain,(
  ( ! [X15] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X15),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X15)) ) | $spl1),
  inference(subsumption_resolution,[],[f338,f175])).
fof(f338,plain,(
  ( ! [X15] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X15),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X15)) ) | $spl1),
  inference(superposition,[],[f276,f284])).
fof(f345,plain,(
  ( ! [X8,X7] : (p(s(bool,X8)) | s(bool,X8) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X7)) ) | $spl1),
  inference(subsumption_resolution,[],[f333,f175])).
fof(f333,plain,(
  ( ! [X8,X7] : (p(s(bool,'F_0')) | p(s(bool,X8)) | s(bool,X8) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X7),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X7)) ) | $spl1),
  inference(superposition,[],[f158,f284])).
fof(f287,plain,(
  ( ! [X2] : (p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X2),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2)))) ) | $spl1),
  inference(subsumption_resolution,[],[f282,f120])).
fof(f282,plain,(
  ( ! [X2] : (p(s(bool,X2)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X2),s(fun(sK0,bool),sK2))),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X2)) ) | $spl1),
  inference(superposition,[],[f276,f216])).
fof(f284,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(subsumption_resolution,[],[f279,f175])).
fof(f279,plain,(
  ( ! [X0] : (p(s(bool,'F_0')) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f276,f118])).
fof(f277,plain,(
  ( ! [X6,X5] : (p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X6) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X5),s(fun(sK0,bool),sK2)))) ) | $spl1),
  inference(subsumption_resolution,[],[f271,f120])).
fof(f271,plain,(
  ( ! [X6,X5] : (p(s(bool,X5)) | p(s(bool,X6)) | s(bool,X6) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X5),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X5)) ) | $spl1),
  inference(superposition,[],[f158,f216])).
fof(f276,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2)))) ) | $spl1),
  inference(subsumption_resolution,[],[f270,f120])).
fof(f270,plain,(
  ( ! [X4] : (p(s(bool,X4)) | s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X4),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X4)) ) | $spl1),
  inference(superposition,[],[f125,f216])).
fof(f217,plain,(
  ( ! [X1] : (s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X1),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X1)) ) | $spl1),
  inference(superposition,[],[f177,f118])).
fof(f216,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,X0),s(fun(sK0,bool),sK2))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f195,f118])).
fof(f195,plain,(
  s(bool,'F_0') = s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | $spl1),
  inference(unit_resulting_resolution,[],[f169,f125])).
fof(f177,plain,(
  s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))) | $spl1),
  inference(unit_resulting_resolution,[],[f169,f120])).
fof(f723,plain,(
  s(bool,'T_0') != s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'T_0'),s(fun(sK0,bool),sK2))) | ($spl1 | $spl4 | $spl6)),
  inference(backward_demodulation,[],[f719,f177])).
fof(f761,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f722,f111])).
fof(f722,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl4 | $spl6)),
  inference(backward_demodulation,[],[f719,f175])).
fof(f760,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f759,f717])).
fof(f759,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f720,f719])).
fof(f720,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | ($spl1 | $spl4 | $spl6)),
  inference(backward_demodulation,[],[f719,f124])).
fof(f758,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(trivial_inequality_removal,[],[f732])).
fof(f732,plain,(
  s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) != s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))) | ($spl1 | $spl4 | $spl6)),
  inference(backward_demodulation,[],[f719,f454])).
fof(f757,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(trivial_inequality_removal,[],[f733])).
fof(f733,plain,(
  s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) != s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))) | ($spl1 | $spl4 | $spl6)),
  inference(backward_demodulation,[],[f719,f459])).
fof(f756,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(trivial_inequality_removal,[],[f736])).
fof(f736,plain,(
  s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) != s('type.option.option'('type.option.option'('type.option.option'(bool))),'const.option.SOME_1'(s('type.option.option'('type.option.option'(bool)),'const.option.SOME_1'(s('type.option.option'(bool),'const.option.SOME_1'(s(bool,'T_0'))))))) | ($spl1 | $spl4 | $spl6)),
  inference(backward_demodulation,[],[f719,f507])).
fof(f168,plain,(
  p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | $spl0),
  inference(cnf_transformation,[],[f168_D])).
fof(f168_D,plain,(
  p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f174,plain,(
  s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) | $spl6),
  inference(cnf_transformation,[],[f174_D])).
fof(f174_D,plain,(
  s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f108,plain,(
  s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) | p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | (s('type.option.option'(sK0),sK1) = s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,sK3))) & p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))))) & (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | ! [X3] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f79])).
fof(f79,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,'F_0'),s(fun(X0,bool),X2)))) | ? [X4] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X4))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,'F_0'),s(fun(X0,bool),X2)))) | ! [X3] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f78])).
fof(f78,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,'F_0'),s(fun(X0,bool),X2)))) | ? [X3] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))) & (~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,'F_0'),s(fun(X0,bool),X2)))) | ! [X3] : (s('type.option.option'(X0),X1) != s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f73])).
fof(f73,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,'F_0'),s(fun(X0,bool),X2)))) <~> ? [X3] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(ennf_transformation,[],[f33])).
fof(f33,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,'F_0'),s(fun(X0,bool),X2)))) <=> ? [X3] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ~! [X0] : ! [X1,X2] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X0),X1),s(bool,'F_0'),s(fun(X0,bool),X2)))) <=> ? [X3] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X3))) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),X7),s(bool,'F_0'),s(fun(X6,bool),X8)))) <=> ? [X9] : (s('type.option.option'(X6),X7) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))) & p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X9))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(X6),X7),s(bool,'F_0'),s(fun(X6,bool),X8)))) <=> ? [X9] : (s('type.option.option'(X6),X7) = s('type.option.option'(X6),'const.option.SOME_1'(s(X6,X9))) & p(s(bool,happ(s(fun(X6,bool),X8),s(X6,X9))))))),
  file('thm.misc.option_case_NONE_F','thm.misc.option_case_NONE_F')).
fof(f172,plain,(
  p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | $spl4),
  inference(cnf_transformation,[],[f172_D])).
fof(f172_D,plain,(
  p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f109,plain,(
  p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,sK3)))) | p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))),
  inference(cnf_transformation,[],[f80])).
fof(f169,plain,(
  ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) | $spl1),
  inference(cnf_transformation,[],[f169_D])).
fof(f169_D,plain,(
  ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f170,plain,(
  ( ! [X3] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,X3))))) ) | $spl2),
  inference(cnf_transformation,[],[f170_D])).
fof(f170_D,plain,(
  ( ! [X3] : (s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3))) | ~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,X3))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f110,plain,(
  ( ! [X3] : (~p(s(bool,happ(s(fun(sK0,bool),sK2),s(sK0,X3)))) | s('type.option.option'(sK0),sK1) != s('type.option.option'(sK0),'const.option.SOME_1'(s(sK0,X3))) | ~p(s(bool,'const.option.option_CASE_3'(s('type.option.option'(sK0),sK1),s(bool,'F_0'),s(fun(sK0,bool),sK2))))) )),
  inference(cnf_transformation,[],[f80])).
% SZS output end Proof for thm.misc
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 287
% Passive clauses: 4830
% Generated clauses: 46470
% Final active clauses: 39
% Final passive clauses: 982
% Input formulas: 30
% Initial clauses: 58
% 
% Duplicate literals: 2114
% Trivial inequalities: 621
% Fw subsumption resolutions: 3584
% Fw demodulations: 6090
% Bw demodulations: 3420
% Condensations: 3133
% Global subsumptions: 330
% 
% Simple tautologies: 648
% Equational tautologies: 288
% Forward subsumptions: 24282
% Fw demodulations to eq. taut.: 152
% Bw demodulations to eq. taut.: 94
% 
% Unit resulting resolution: 1287
% Factoring: 2
% Forward superposition: 10602
% Backward superposition: 10093
% Self superposition: 291
% Equality factoring: 164
% Equality resolution: 60
% 
% Split clauses: 86
% Split components: 185
% SAT solver clauses: 5659
% SAT solver unit clauses: 38
% SAT solver binary clauses: 530
% 
% Sat splits: 86
% Sat splitting refutations: 325
% 
% Memory used [KB]: 22387
% Time elapsed: 2.943 s
% ------------------------------
% ------------------------------
% Success in time 4.27 s
