Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_translator
% (23530)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 103
% Passive clauses: 2826
% Generated clauses: 19362
% Final active clauses: 91
% Final passive clauses: 2512
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 655
% Trivial inequalities: 143
% Fw subsumption resolutions: 2827
% Fw demodulations: 3011
% Bw demodulations: 8
% 
% Simple tautologies: 202
% Equational tautologies: 61
% Forward subsumptions: 8664
% 
% Binary resolution: 247
% Factoring: 4
% Forward superposition: 6221
% Backward superposition: 5616
% Self superposition: 321
% Equality factoring: 185
% Equality resolution: 17
% 
% Split clauses: 680
% Split components: 1393
% SAT solver clauses: 1143
% SAT solver unit clauses: 17
% SAT solver binary clauses: 146
% 
% Sat splits: 680
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 1138
% TWLsolver calls for satisfiability: 171
% 
% Memory used [KB]: 15095
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f5014,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5013,f2380,f2381,f93,f121,f70,f99,f97,f2518,f4907,f4812,f4813,f84,f114,f78,f108,f77,f107,f69,f98,f96])).
fof(f96,plain,(
  s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) = s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2))) | $spl0),
  inference(cnf_transformation,[],[f96_D])).
fof(f96_D,plain,(
  s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) = s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f98,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK2) | $spl2),
  inference(cnf_transformation,[],[f98_D])).
fof(f98_D,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK2) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f69,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK2) | s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) = s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  (s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) = s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK2)) & (s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) != s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2))) | s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2])],[f60])).
fof(f60,plain,(
  ? [X0,X1,X2] : ((s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2)) & (s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) != s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X2))) | s('type.list.list'(X0),X1) != s('type.list.list'(X0),X2)))),
  inference(nnf_transformation,[],[f55])).
fof(f55,plain,(
  ? [X0,X1,X2] : (s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X2))) <~> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2] : (s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2] : (s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X2))) <=> s('type.list.list'(X0),X1) = s('type.list.list'(X0),X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : (s('type.ml_translator.vector'(X6),'const.ml_translator.Vector_1'(s('type.list.list'(X6),X7))) = s('type.ml_translator.vector'(X6),'const.ml_translator.Vector_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),X7) = s('type.list.list'(X6),X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : (s('type.ml_translator.vector'(X6),'const.ml_translator.Vector_1'(s('type.list.list'(X6),X7))) = s('type.ml_translator.vector'(X6),'const.ml_translator.Vector_1'(s('type.list.list'(X6),X8))) <=> s('type.list.list'(X6),X7) = s('type.list.list'(X6),X8))),
  file('thm.ml_translator.vector_|49||49|','thm.ml_translator.vector_|49||49|')).
fof(f107,plain,(
  ( ! [X0,X1] : (s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),happ(s(fun('type.list.list'(X0),'type.ml_translator.vector'(X0)),'const.ml_translator.Vector_0'),s('type.list.list'(X0),X1)))) ) | $spl14),
  inference(cnf_transformation,[],[f107_D])).
fof(f107_D,plain,(
  ( ! [X0,X1] : (s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),happ(s(fun('type.list.list'(X0),'type.ml_translator.vector'(X0)),'const.ml_translator.Vector_0'),s('type.list.list'(X0),X1)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f77,plain,(
  ( ! [X0,X1] : (s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),happ(s(fun('type.list.list'(X0),'type.ml_translator.vector'(X0)),'const.ml_translator.Vector_0'),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),happ(s(fun('type.list.list'(X0),'type.ml_translator.vector'(X0)),'const.ml_translator.Vector_0'),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f30])).
fof(f30,plain,(
  ! [X0] : ! [X1] : s('type.ml_translator.vector'(X0),'const.ml_translator.Vector_1'(s('type.list.list'(X0),X1))) = s('type.ml_translator.vector'(X0),happ(s(fun('type.list.list'(X0),'type.ml_translator.vector'(X0)),'const.ml_translator.Vector_0'),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X9] : s('type.ml_translator.vector'(X6),'const.ml_translator.Vector_1'(s('type.list.list'(X6),X9))) = s('type.ml_translator.vector'(X6),happ(s(fun('type.list.list'(X6),'type.ml_translator.vector'(X6)),'const.ml_translator.Vector_0'),s('type.list.list'(X6),X9)))),
  file('thm.ml_translator.vector_|49||49|','ARITY_0_1_const.ml_translator.Vector')).
fof(f108,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) ) | $spl16),
  inference(cnf_transformation,[],[f108_D])).
fof(f108_D,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f78,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))) )),
  inference(cnf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(flattening,[],[f32])).
fof(f32,plain,(
  ! [X0] : ! [X1,X2] : s(X0,X1) = s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num','const.num.|48|_0')))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X6] : ! [X7,X11] : s(X6,X7) = s(X6,'const.ind_type.FCONS_3'(s(X6,X7),s(fun('type.num.num',X6),X11),s('type.num.num','const.num.|48|_0')))),
  file('thm.ml_translator.vector_|49||49|','thm.ind_type.FCONS|split|0')).
fof(f114,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))) ) | $spl28),
  inference(cnf_transformation,[],[f114_D])).
fof(f114_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f84,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f43])).
fof(f43,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(flattening,[],[f42])).
fof(f42,plain,(
  ! [X0] : ! [X1,X2,X3] : s(X0,'const.ind_type.FCONS_3'(s(X0,X1),s(fun('type.num.num',X0),X2),s('type.num.num',X3))) = s(X0,happ(s(fun('type.num.num',X0),happ(s(fun(fun('type.num.num',X0),fun('type.num.num',X0)),happ(s(fun(X0,fun(fun('type.num.num',X0),fun('type.num.num',X0))),'const.ind_type.FCONS_0'),s(X0,X1))),s(fun('type.num.num',X0),X2))),s('type.num.num',X3)))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X6] : ! [X9,X24,X25] : s(X6,'const.ind_type.FCONS_3'(s(X6,X9),s(fun('type.num.num',X6),X24),s('type.num.num',X25))) = s(X6,happ(s(fun('type.num.num',X6),happ(s(fun(fun('type.num.num',X6),fun('type.num.num',X6)),happ(s(fun(X6,fun(fun('type.num.num',X6),fun('type.num.num',X6))),'const.ind_type.FCONS_0'),s(X6,X9))),s(fun('type.num.num',X6),X24))),s('type.num.num',X25)))),
  file('thm.ml_translator.vector_|49||49|','ARITY_0_3_const.ind_type.FCONS')).
fof(f4813,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),sK1),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num',X1))) = s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),sK2),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num',X1)))) ) | $spl598),
  inference(cnf_transformation,[],[f4813_D])).
fof(f4813_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),sK1),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num',X1))) = s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),sK2),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num',X1)))) ) <=> ~$spl598),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl598])])).
fof(f4812,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),sK1),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num',X1))) = s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),sK2),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num',X1)))) ) | ($spl28 | $spl260)),
  inference(forward_demodulation,[],[f4692,f114])).
fof(f4692,plain,(
  ( ! [X0,X1] : (s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),sK2),s(fun('type.num.num','type.list.list'(sK0)),X0),s('type.num.num',X1))) = s('type.list.list'(sK0),happ(s(fun('type.num.num','type.list.list'(sK0)),happ(s(fun(fun('type.num.num','type.list.list'(sK0)),fun('type.num.num','type.list.list'(sK0))),happ(s(fun('type.list.list'(sK0),fun(fun('type.num.num','type.list.list'(sK0)),fun('type.num.num','type.list.list'(sK0)))),'const.ind_type.FCONS_0'),s('type.list.list'(sK0),sK1))),s(fun('type.num.num','type.list.list'(sK0)),X0))),s('type.num.num',X1)))) ) | ($spl28 | $spl260)),
  inference(superposition,[],[f114,f2381])).
fof(f4907,plain,(
  $false | ($spl3 | $spl16 | $spl598)),
  inference(subsumption_resolution,[],[f4906,f99])).
fof(f4906,plain,(
  s('type.list.list'(sK0),sK1) = s('type.list.list'(sK0),sK2) | ($spl16 | $spl598)),
  inference(forward_demodulation,[],[f4890,f108])).
fof(f4890,plain,(
  ( ! [X2] : (s('type.list.list'(sK0),sK2) = s('type.list.list'(sK0),'const.ind_type.FCONS_3'(s('type.list.list'(sK0),sK1),s(fun('type.num.num','type.list.list'(sK0)),X2),s('type.num.num','const.num.|48|_0')))) ) | ($spl16 | $spl598)),
  inference(superposition,[],[f4813,f108])).
fof(f2518,plain,(
  s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) = s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2))) | ($spl14 | $spl260)),
  inference(forward_demodulation,[],[f2478,f107])).
fof(f2478,plain,(
  s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2))) = s('type.ml_translator.vector'(sK0),happ(s(fun('type.list.list'(sK0),'type.ml_translator.vector'(sK0)),'const.ml_translator.Vector_0'),s('type.list.list'(sK0),sK1))) | ($spl14 | $spl260)),
  inference(superposition,[],[f107,f2381])).
fof(f97,plain,(
  s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) != s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2))) | $spl1),
  inference(cnf_transformation,[],[f97_D])).
fof(f97_D,plain,(
  s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) != s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f99,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) | $spl3),
  inference(cnf_transformation,[],[f99_D])).
fof(f99_D,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f70,plain,(
  s('type.list.list'(sK0),sK1) != s('type.list.list'(sK0),sK2) | s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) != s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK2)))),
  inference(cnf_transformation,[],[f61])).
fof(f121,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.list.list'(X1),X0),X3),s('type.list.list'(X1),X2))) = s(X0,'const.ml_translator.vector_CASE_2'(s('type.ml_translator.vector'(X1),'const.ml_translator.Vector_1'(s('type.list.list'(X1),X2))),s(fun('type.list.list'(X1),X0),X3)))) ) | $spl42),
  inference(cnf_transformation,[],[f121_D])).
fof(f121_D,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.list.list'(X1),X0),X3),s('type.list.list'(X1),X2))) = s(X0,'const.ml_translator.vector_CASE_2'(s('type.ml_translator.vector'(X1),'const.ml_translator.Vector_1'(s('type.list.list'(X1),X2))),s(fun('type.list.list'(X1),X0),X3)))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f93,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,happ(s(fun('type.list.list'(X1),X0),X3),s('type.list.list'(X1),X2))) = s(X0,'const.ml_translator.vector_CASE_2'(s('type.ml_translator.vector'(X1),'const.ml_translator.Vector_1'(s('type.list.list'(X1),X2))),s(fun('type.list.list'(X1),X0),X3)))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2,X3] : s(X0,happ(s(fun('type.list.list'(X1),X0),X3),s('type.list.list'(X1),X2))) = s(X0,'const.ml_translator.vector_CASE_2'(s('type.ml_translator.vector'(X1),'const.ml_translator.Vector_1'(s('type.list.list'(X1),X2))),s(fun('type.list.list'(X1),X0),X3)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,happ(s(fun('type.list.list'(X1),X0),X3),s('type.list.list'(X1),X2))) = s(X0,'const.ml_translator.vector_CASE_2'(s('type.ml_translator.vector'(X1),'const.ml_translator.Vector_1'(s('type.list.list'(X1),X2))),s(fun('type.list.list'(X1),X0),X3)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X10,X6] : ! [X7,X11] : s(X10,happ(s(fun('type.list.list'(X6),X10),X11),s('type.list.list'(X6),X7))) = s(X10,'const.ml_translator.vector_CASE_2'(s('type.ml_translator.vector'(X6),'const.ml_translator.Vector_1'(s('type.list.list'(X6),X7))),s(fun('type.list.list'(X6),X10),X11)))),
  file('thm.ml_translator.vector_|49||49|','thm.ml_translator.vector_case_def')).
fof(f2381,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.list.list'(sK0),X0),X1),s('type.list.list'(sK0),sK1))) = s(X0,happ(s(fun('type.list.list'(sK0),X0),X1),s('type.list.list'(sK0),sK2)))) ) | $spl260),
  inference(cnf_transformation,[],[f2381_D])).
fof(f2381_D,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.list.list'(sK0),X0),X1),s('type.list.list'(sK0),sK1))) = s(X0,happ(s(fun('type.list.list'(sK0),X0),X1),s('type.list.list'(sK0),sK2)))) ) <=> ~$spl260),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl260])])).
fof(f2380,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.list.list'(sK0),X0),X1),s('type.list.list'(sK0),sK1))) = s(X0,happ(s(fun('type.list.list'(sK0),X0),X1),s('type.list.list'(sK0),sK2)))) ) | ($spl0 | $spl42)),
  inference(forward_demodulation,[],[f2320,f121])).
fof(f2320,plain,(
  ( ! [X0,X1] : (s(X0,happ(s(fun('type.list.list'(sK0),X0),X1),s('type.list.list'(sK0),sK2))) = s(X0,'const.ml_translator.vector_CASE_2'(s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))),s(fun('type.list.list'(sK0),X0),X1)))) ) | ($spl0 | $spl42)),
  inference(superposition,[],[f121,f96])).
fof(f5013,plain,(
  $false | ($spl1 | $spl2)),
  inference(trivial_inequality_removal,[],[f5012])).
fof(f5012,plain,(
  s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) != s('type.ml_translator.vector'(sK0),'const.ml_translator.Vector_1'(s('type.list.list'(sK0),sK1))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f97,f98])).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 48
% Passive clauses: 313
% Generated clauses: 4876
% Final active clauses: 35
% Final passive clauses: 186
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 346
% Trivial inequalities: 38
% Fw subsumption resolutions: 264
% Fw demodulations: 409
% Bw demodulations: 87
% Condensations: 567
% 
% Simple tautologies: 73
% Equational tautologies: 35
% Forward subsumptions: 2181
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 40
% Factoring: 1
% Forward superposition: 1227
% Backward superposition: 1354
% Self superposition: 115
% Equality factoring: 78
% Equality resolution: 5
% 
% Split clauses: 16
% Split components: 32
% SAT solver clauses: 681
% SAT solver unit clauses: 39
% SAT solver binary clauses: 37
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 16
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 679
% TWLsolver calls for satisfiability: 120
% 
% Memory used [KB]: 5756
% Time elapsed: 0.256 s
% ------------------------------
% ------------------------------
% Success in time 0.88 s
