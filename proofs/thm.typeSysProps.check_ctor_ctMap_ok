Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.typeSysProps
% (127576)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 640
% Passive clauses: 9809
% Generated clauses: 18876
% Final active clauses: 599
% Final passive clauses: 8734
% Input formulas: 132
% Initial clauses: 390
% 
% Duplicate literals: 209
% Trivial inequalities: 78
% Fw subsumption resolutions: 1105
% Fw demodulations: 1078
% Bw demodulations: 40
% 
% Simple tautologies: 271
% Equational tautologies: 52
% Forward subsumptions: 6559
% 
% Binary resolution: 8237
% Factoring: 868
% Forward superposition: 2986
% Backward superposition: 4022
% Self superposition: 48
% Equality factoring: 2
% Equality resolution: 32
% 
% Split clauses: 79
% Split components: 160
% SAT solver clauses: 101
% SAT solver unit clauses: 3
% SAT solver binary clauses: 39
% 
% Sat splits: 79
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 99
% TWLsolver calls for satisfiability: 22
% 
% Memory used [KB]: 13560
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.typeSysProps
% (127599)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 260
% Passive clauses: 1622
% Generated clauses: 7901
% Final active clauses: 253
% Final passive clauses: 1185
% Input formulas: 132
% Initial clauses: 390
% 
% Duplicate literals: 417
% Trivial inequalities: 4
% Fw subsumption resolutions: 399
% Fw demodulations: 359
% Bw demodulations: 181
% Condensations: 412
% Global subsumptions: 15
% 
% Simple tautologies: 169
% Equational tautologies: 9
% Forward subsumptions: 2665
% 
% Binary resolution: 2194
% Factoring: 650
% Forward superposition: 772
% Backward superposition: 440
% Self superposition: 23
% Equality factoring: 2
% Equality resolution: 6
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 2172
% SAT solver unit clauses: 444
% SAT solver binary clauses: 170
% SAT solver learnt clauses: 35
% SAT solver learnt literals: 8
% 
% Sat splits: 6
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 2102
% TWLsolver calls for satisfiability: 5390
% 
% Memory used [KB]: 21236
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.typeSysProps
% (127630)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 875
% Passive clauses: 8482
% Generated clauses: 110492
% Final active clauses: 530
% Final passive clauses: 1060
% Input formulas: 132
% Initial clauses: 390
% Discarded non-redundant clauses: 20900
% 
% Duplicate literals: 846
% Trivial inequalities: 208
% Fw subsumption resolutions: 1278
% Fw demodulations: 29160
% Bw demodulations: 2119
% Condensations: 805
% Global subsumptions: 498
% 
% Simple tautologies: 212
% Equational tautologies: 61
% Forward subsumptions: 41109
% Fw demodulations to eq. taut.: 16037
% Bw demodulations to eq. taut.: 102
% 
% Unit resulting resolution: 38171
% Factoring: 2
% Forward superposition: 20306
% Backward superposition: 15861
% Self superposition: 206
% Equality factoring: 28
% Equality resolution: 17
% 
% Split clauses: 35
% Split components: 90
% SAT solver clauses: 10003
% SAT solver unit clauses: 3724
% SAT solver binary clauses: 4239
% 
% Sat splits: 35
% Sat splitting refutations: 950
% 
% Memory used [KB]: 202384
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.typeSysProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSysProps
% SZS output start Proof for thm.typeSysProps
fof(f30277,plain,(
  $false),
  inference(subsumption_resolution,[],[f30159,f387])).
fof(f387,plain,(
  ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(sK18,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(sK18,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),sK19),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK18,'type.list.list'('type.ast.t')))))),sK21))))))))),
  inference(cnf_transformation,[],[f281])).
fof(f281,plain,(
  p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),sK19),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK18,'type.list.list'('type.ast.t')))))),sK21)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20)))) & ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(sK18,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(sK18,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),sK19),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK18,'type.list.list'('type.ast.t')))))),sK21))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK18,sK19,sK20,sK21])],[f217])).
fof(f217,plain,(
  ? [X0,X1,X2,X3] : (p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X3)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2)))) & ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X3)))))))))),
  inference(flattening,[],[f216])).
fof(f216,plain,(
  ? [X0,X1,X2,X3] : ((p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X3)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2))))) & ~p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X3)))))))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3] : ((p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X3)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X3)))))))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ~! [X0] : ! [X1,X2,X3] : ((p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X3)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X3)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.list.list'('type.ast.t')))))),X9)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X6,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.list.list'('type.ast.t')))))),X9)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ((p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.list.list'('type.ast.t')))))),X9)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8))))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X6,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.list.list'('type.ast.t')))))),X9)))))))))),
  file('thm.typeSysProps.check_ctor_ctMap_ok','thm.typeSysProps.check_ctor_ctMap_ok')).
fof(f30159,plain,(
  p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(sK18,'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(sK18,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),sK19),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK18,'type.list.list'('type.ast.t')))))),sK21))))))))),
  inference(resolution,[],[f881,f389])).
fof(f389,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))),X2)))))) | ~p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))),X2))))) )),
  inference(cnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))),X2)))) | p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))),X2)))))))),
  inference(ennf_transformation,[],[f139])).
fof(f139,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))),X2)))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))),X2)))))))),
  inference(flattening,[],[f138])).
fof(f138,plain,(
  ! [X0,X1] : ! [X2] : (p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))),X2)))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X0,X1),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X1)))),X2)))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X11] : ! [X19] : (p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X11)))),X19)))) => p(s(bool,'const.typeSoundInvariants.ctMap_ok_1'(s('type.finite_map.fmap'('type.pair.prod'(X6,X11),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.list.list'('type.ast.t'))),'const.typeSoundInvariants.flat_to_ctMap_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),X11)))),X19)))))))),
  file('thm.typeSysProps.check_ctor_ctMap_ok','thm.typeSysProps.flat_tenvC_ok_ctMap')).
fof(f881,plain,(
  p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(sK18,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),sK19),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK18,'type.list.list'('type.ast.t')))))),sK21))))))),
  inference(subsumption_resolution,[],[f773,f386])).
fof(f386,plain,(
  p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20))))),
  inference(cnf_transformation,[],[f281])).
fof(f773,plain,(
  p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(sK18,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),sK19),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK18,'type.list.list'('type.ast.t')))))),sK21)))))) | ~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20))))),
  inference(resolution,[],[f385,f446])).
fof(f446,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))))) | ~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3)))) | ~p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2))))) )),
  inference(cnf_transformation,[],[f223])).
fof(f223,plain,(
  ! [X0,X1,X2,X3] : (~p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))) | ~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3)))) | p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))))))),
  inference(flattening,[],[f222])).
fof(f222,plain,(
  ! [X0,X1,X2,X3] : ((~p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))) | ~p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3))))) | p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))))))),
  inference(ennf_transformation,[],[f148])).
fof(f148,plain,(
  ! [X0,X1,X2,X3] : ((p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3))))) => p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))))))),
  inference(flattening,[],[f147])).
fof(f147,plain,(
  ! [X0] : ! [X1,X2,X3] : ((p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3))))) => p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X0,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X1),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X0,'type.list.list'('type.ast.t')))))),X2)))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X7,X9,X8] : ((p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.list.list'('type.ast.t')))))),X9)))) & p(s(bool,'const.typeSoundInvariants.tenv_tabbrev_ok_1'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8))))) => p(s(bool,'const.typeSoundInvariants.flat_tenv_ctor_ok_1'(s('type.list.list'('type.pair.prod'(X6,'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.ast.t'),'type.semanticPrimitives.tid_or_exn')))),'const.typeSystem.build_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),X7),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(X6,'type.list.list'('type.ast.t')))))),X9)))))))),
  file('thm.typeSysProps.check_ctor_ctMap_ok','thm.typeSysProps.check_ctor_tenvC_ok')).
fof(f385,plain,(
  p(s(bool,'const.typeSystem.check_ctor_tenv_3'(s('type.option.option'('type.list.list'('type.string.char')),sK19),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.ast.t'))),sK20),s('type.list.list'('type.pair.prod'('type.list.list'('type.list.list'('type.string.char')),'type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'(sK18,'type.list.list'('type.ast.t')))))),sK21))))),
  inference(cnf_transformation,[],[f281])).
% SZS output end Proof for thm.typeSysProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 652
% Passive clauses: 14738
% Generated clauses: 29604
% Final active clauses: 629
% Final passive clauses: 13735
% Input formulas: 132
% Initial clauses: 283
% 
% Selected by SInE selection: 53
% SInE iterations: 1
% 
% Duplicate literals: 663
% Trivial inequalities: 23
% Fw subsumption resolutions: 3114
% Fw demodulations: 1017
% Bw demodulations: 4
% 
% Simple tautologies: 963
% Equational tautologies: 2
% Forward subsumptions: 7538
% 
% Binary resolution: 13995
% Factoring: 76
% Forward superposition: 9453
% Backward superposition: 1054
% Equality resolution: 11
% 
% Split clauses: 1525
% Split components: 3632
% SAT solver clauses: 1649
% SAT solver unit clauses: 19
% SAT solver binary clauses: 31
% 
% Sat splits: 1525
% Sat splitting refutations: 22
% 
% Memory used [KB]: 21364
% Time elapsed: 0.970 s
% ------------------------------
% ------------------------------
% Success in time 12.82 s
