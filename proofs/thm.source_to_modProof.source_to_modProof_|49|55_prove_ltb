Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (128426)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 710
% Passive clauses: 6132
% Generated clauses: 21857
% Final active clauses: 666
% Final passive clauses: 5066
% Input formulas: 132
% Initial clauses: 285
% 
% Duplicate literals: 190
% Trivial inequalities: 19
% Fw subsumption resolutions: 1060
% Fw demodulations: 2397
% Bw demodulations: 42
% 
% Simple tautologies: 216
% Equational tautologies: 31
% Forward subsumptions: 11484
% Fw demodulations to eq. taut.: 18
% 
% Binary resolution: 4744
% Factoring: 882
% Forward superposition: 4707
% Backward superposition: 7500
% Self superposition: 94
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 419
% Split components: 840
% SAT solver clauses: 603
% SAT solver unit clauses: 18
% SAT solver binary clauses: 62
% 
% Sat splits: 419
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 601
% TWLsolver calls for satisfiability: 316
% 
% Memory used [KB]: 20724
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (128454)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 323
% Passive clauses: 1670
% Generated clauses: 9927
% Final active clauses: 312
% Final passive clauses: 1297
% Input formulas: 132
% Initial clauses: 285
% 
% Duplicate literals: 76
% Trivial inequalities: 4
% Fw subsumption resolutions: 298
% Fw demodulations: 909
% Bw demodulations: 58
% Condensations: 72
% Global subsumptions: 19
% 
% Simple tautologies: 186
% Equational tautologies: 7
% Forward subsumptions: 4762
% Fw demodulations to eq. taut.: 18
% 
% Binary resolution: 1501
% Factoring: 147
% Forward superposition: 2871
% Backward superposition: 2382
% Self superposition: 76
% Equality factoring: 2
% Equality resolution: 5
% 
% Split clauses: 11
% Split components: 22
% SAT solver clauses: 2207
% SAT solver unit clauses: 361
% SAT solver binary clauses: 78
% SAT solver learnt clauses: 38
% SAT solver learnt literals: 12
% 
% Sat splits: 11
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 2131
% TWLsolver calls for satisfiability: 1734
% 
% Memory used [KB]: 15351
% Time elapsed: 0.727 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (128478)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 839
% Passive clauses: 10917
% Generated clauses: 126268
% Final active clauses: 774
% Final passive clauses: 1826
% Input formulas: 132
% Initial clauses: 285
% Discarded non-redundant clauses: 40087
% 
% Duplicate literals: 272
% Trivial inequalities: 43
% Fw subsumption resolutions: 2220
% Fw demodulations: 31149
% Bw demodulations: 2013
% Condensations: 414
% Global subsumptions: 960
% 
% Simple tautologies: 130
% Equational tautologies: 77
% Forward subsumptions: 39139
% Fw demodulations to eq. taut.: 14538
% Bw demodulations to eq. taut.: 236
% 
% Unit resulting resolution: 57960
% Factoring: 1
% Forward superposition: 15351
% Backward superposition: 14025
% Self superposition: 238
% Equality factoring: 26
% Equality resolution: 5
% 
% Split clauses: 37
% Split components: 74
% SAT solver clauses: 14740
% SAT solver unit clauses: 7811
% SAT solver binary clauses: 4975
% 
% Sat splits: 37
% Sat splitting refutations: 2787
% 
% Memory used [KB]: 224388
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f575,plain,(
  $false),
  inference(equality_resolution,[],[f530])).
fof(f530,plain,(
  ( ! [X17] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK9),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),X17) != s('type.pair.prod'('type.semanticPrimitives.state'(sK9),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),sK11),s('type.semanticPrimitives.state'(sK9),sK10),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK12),s('type.list.list'('type.ast.dec'),sK13)))) )),
  inference(superposition,[],[f482,f340])).
fof(f340,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(flattening,[],[f158])).
fof(f158,plain,(
  ! [X0,X1] : ! [X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(rectify,[],[f104])).
fof(f104,axiom,(
  ! [X6,X35] : ! [X30] : s('type.pair.prod'(X6,X35),X30) = s('type.pair.prod'(X6,X35),'const.pair.,_2'(s(X6,'const.pair.FST_1'(s('type.pair.prod'(X6,X35),X30))),s(X35,'const.pair.SND_1'(s('type.pair.prod'(X6,X35),X30)))))),
  file('thm.source_to_modProof.source_to_modProof_|49|55_prove_ltb','thm.pair.PAIR')).
fof(f482,plain,(
  ( ! [X17,X16] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK9),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),sK11),s('type.semanticPrimitives.state'(sK9),sK10),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK12),s('type.list.list'('type.ast.dec'),sK13))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK9),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK9),X17),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),X16)))) )),
  inference(superposition,[],[f283,f340])).
fof(f283,plain,(
  ( ! [X6,X7,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK9),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),sK11),s('type.semanticPrimitives.state'(sK9),sK10),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK12),s('type.list.list'('type.ast.dec'),sK13))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK9),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK9),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))) )),
  inference(cnf_transformation,[],[f222])).
fof(f222,plain,(
  ! [X5,X6,X7] : s('type.pair.prod'('type.semanticPrimitives.state'(sK9),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),sK11),s('type.semanticPrimitives.state'(sK9),sK10),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK12),s('type.list.list'('type.ast.dec'),sK13))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK9),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK9),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10,sK11,sK12,sK13])],[f196])).
fof(f196,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6,X7] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.dec'),X4))) != s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6,X7] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.dec'),X4))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6,X7] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X2),s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.dec'),X4))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X6),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X7)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13] : s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.list.list'('type.ast.dec'),X10))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X12),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X13)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12,X13] : s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.funBigStep.evaluate_decs_4'(s('type.option.option'('type.list.list'('type.string.char')),X8),s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.list.list'('type.ast.dec'),X10))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'))),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),'type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))),X12),s('type.semanticPrimitives.result'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.semanticPrimitives.v'),X13)))))),
  file('thm.source_to_modProof.source_to_modProof_|49|55_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|55_prove_ltb')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 111
% Passive clauses: 21
% Generated clauses: 100
% Final active clauses: 111
% Final passive clauses: 18
% Input formulas: 132
% Initial clauses: 150
% 
% Selected by SInE selection: 42
% SInE iterations: 1
% 
% Duplicate literals: 4
% 
% Simple tautologies: 41
% Forward subsumptions: 78
% 
% Forward superposition: 138
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1791
% Time elapsed: 0.012 s
% ------------------------------
% ------------------------------
% Success in time 11.784 s
