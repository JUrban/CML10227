Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (110720)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 513
% Passive clauses: 3796
% Generated clauses: 13741
% Final active clauses: 509
% Final passive clauses: 3089
% Input formulas: 132
% Initial clauses: 262
% 
% Duplicate literals: 150
% Trivial inequalities: 13
% Fw subsumption resolutions: 594
% Fw demodulations: 2035
% Bw demodulations: 4
% 
% Simple tautologies: 188
% Equational tautologies: 25
% Forward subsumptions: 6814
% 
% Binary resolution: 3260
% Factoring: 796
% Forward superposition: 2550
% Backward superposition: 3940
% Self superposition: 48
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 157
% Split components: 316
% SAT solver clauses: 271
% SAT solver unit clauses: 7
% SAT solver binary clauses: 42
% 
% Sat splits: 157
% 
% TWLsolver clauses: 271
% TWLsolver calls for satisfiability: 238
% 
% Memory used [KB]: 11385
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (110739)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 296
% Passive clauses: 1726
% Generated clauses: 10527
% Final active clauses: 296
% Final passive clauses: 1333
% Input formulas: 132
% Initial clauses: 262
% 
% Duplicate literals: 82
% Trivial inequalities: 3
% Fw subsumption resolutions: 361
% Fw demodulations: 1043
% Bw demodulations: 97
% Condensations: 114
% Global subsumptions: 18
% 
% Simple tautologies: 173
% Equational tautologies: 9
% Forward subsumptions: 5018
% 
% Binary resolution: 1443
% Factoring: 271
% Forward superposition: 2472
% Backward superposition: 2752
% Self superposition: 82
% Equality factoring: 2
% Equality resolution: 4
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 2280
% SAT solver unit clauses: 348
% SAT solver binary clauses: 69
% SAT solver learnt clauses: 36
% SAT solver learnt literals: 10
% 
% Sat splits: 5
% 
% TWLsolver clauses: 2208
% TWLsolver calls for satisfiability: 1638
% 
% Memory used [KB]: 17142
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% (110757)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1320
% Passive clauses: 11146
% Generated clauses: 144088
% Final active clauses: 1263
% Final passive clauses: 2711
% Input formulas: 132
% Initial clauses: 262
% Discarded non-redundant clauses: 77664
% 
% Duplicate literals: 824
% Trivial inequalities: 27
% Fw subsumption resolutions: 1304
% Fw demodulations: 23422
% Bw demodulations: 828
% Condensations: 1356
% Global subsumptions: 343
% 
% Simple tautologies: 99
% Equational tautologies: 83
% Forward subsumptions: 70840
% Fw demodulations to eq. taut.: 8146
% Bw demodulations to eq. taut.: 45
% 
% Unit resulting resolution: 46744
% Factoring: 1
% Forward superposition: 50893
% Backward superposition: 17074
% Self superposition: 238
% Equality factoring: 26
% Equality resolution: 7
% 
% Split clauses: 80
% Split components: 160
% SAT solver clauses: 12731
% SAT solver unit clauses: 5856
% SAT solver binary clauses: 4430
% 
% Sat splits: 80
% Sat splitting refutations: 1080
% 
% Memory used [KB]: 167332
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f575,plain,(
  $false),
  inference(equality_resolution,[],[f498])).
fof(f498,plain,(
  ( ! [X8] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),X8) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num',sK10),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK13),s('type.list.list'('type.ast.dec'),sK12)))) )),
  inference(superposition,[],[f429,f322])).
fof(f322,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK23(X2,X1,X0)),s(X1,sK24(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f240])).
fof(f240,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK23(X2,X1,X0)),s(X1,sK24(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK23,sK24])],[f168])).
fof(f168,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f167])).
fof(f167,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f107])).
fof(f107,axiom,(
  ! [X25,X37] : ! [X27] : ? [X53,X64] : s('type.pair.prod'(X25,X37),X27) = s('type.pair.prod'(X25,X37),'const.pair.,_2'(s(X25,X53),s(X37,X64)))),
  file('thm.source_to_modProof.source_to_modProof_|49|52_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f429,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),X10))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num',sK10),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK13),s('type.list.list'('type.ast.dec'),sK12)))) )),
  inference(superposition,[],[f268,f322])).
fof(f268,plain,(
  ( ! [X6,X7,X5] : (s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.list.list'('type.modLang.dec'),X7))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num',sK10),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK13),s('type.list.list'('type.ast.dec'),sK12)))) )),
  inference(cnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.list.list'('type.modLang.dec'),X7))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num',sK10),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK9))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK13),s('type.list.list'('type.ast.dec'),sK12)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10,sK11,sK12,sK13])],[f189])).
fof(f189,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.list.list'('type.modLang.dec'),X7))))) != s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num',X1),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.ast.dec'),X3)))),
  inference(ennf_transformation,[],[f134])).
fof(f134,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6,X7] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X5),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.list.list'('type.modLang.dec'),X7))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num',X1),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X0))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X2),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.ast.dec'),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : ? [X11,X12,X13] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X12),s('type.list.list'('type.modLang.dec'),X13))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num',X7),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X6))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10),s('type.list.list'('type.ast.dec'),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : ? [X11,X12,X13] : s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.pair.,_2'(s('type.num.num',X11),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X12),s('type.list.list'('type.modLang.dec'),X13))))) = s('type.pair.prod'('type.num.num','type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'type.list.list'('type.modLang.dec'))),'const.source_to_mod.compile_decs_5'(s('type.num.num',X7),s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X6))),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X8),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X10),s('type.list.list'('type.ast.dec'),X9)))),
  file('thm.source_to_modProof.source_to_modProof_|49|52_prove_ltb','thm.source_to_modProof.source_to_modProof_|49|52_prove_ltb')).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 91
% Passive clauses: 73
% Generated clauses: 144
% Final active clauses: 91
% Final passive clauses: 70
% Input formulas: 132
% Initial clauses: 117
% 
% Selected by SInE selection: 32
% SInE iterations: 1
% 
% Duplicate literals: 4
% 
% Simple tautologies: 26
% Equational tautologies: 2
% Forward subsumptions: 70
% 
% Forward superposition: 186
% Equality resolution: 1
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 2046
% Time elapsed: 0.013 s
% ------------------------------
% ------------------------------
% Success in time 11.775 s
