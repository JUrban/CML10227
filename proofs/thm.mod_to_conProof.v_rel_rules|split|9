Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (8543)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 214
% Passive clauses: 4584
% Generated clauses: 18844
% Final active clauses: 211
% Final passive clauses: 4191
% Input formulas: 69
% Initial clauses: 323
% 
% Duplicate literals: 469
% Trivial inequalities: 556
% Fw subsumption resolutions: 2392
% Fw demodulations: 2626
% 
% Simple tautologies: 451
% Equational tautologies: 38
% Forward subsumptions: 7303
% 
% Binary resolution: 628
% Factoring: 4
% Forward superposition: 6099
% Backward superposition: 5510
% Self superposition: 78
% Equality factoring: 58
% Equality resolution: 34
% 
% Split clauses: 218
% Split components: 452
% SAT solver clauses: 603
% SAT solver unit clauses: 10
% SAT solver binary clauses: 107
% 
% Sat splits: 218
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 603
% TWLsolver calls for satisfiability: 163
% 
% Memory used [KB]: 10106
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (8555)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 181
% Passive clauses: 2039
% Generated clauses: 15315
% Final active clauses: 154
% Final passive clauses: 1636
% Input formulas: 69
% Initial clauses: 323
% 
% Duplicate literals: 250
% Trivial inequalities: 475
% Fw subsumption resolutions: 1065
% Fw demodulations: 1609
% Bw demodulations: 248
% Condensations: 624
% Global subsumptions: 4
% 
% Simple tautologies: 224
% Equational tautologies: 18
% Forward subsumptions: 6403
% 
% Binary resolution: 393
% Factoring: 1
% Forward superposition: 4226
% Backward superposition: 3802
% Self superposition: 91
% Equality factoring: 32
% Equality resolution: 40
% 
% Split clauses: 69
% Split components: 138
% SAT solver clauses: 2802
% SAT solver unit clauses: 317
% SAT solver binary clauses: 105
% SAT solver learnt clauses: 8
% 
% Sat splits: 69
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 2786
% TWLsolver calls for satisfiability: 4670
% 
% Memory used [KB]: 14839
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (8578)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 805
% Passive clauses: 8565
% Generated clauses: 376285
% Final active clauses: 582
% Final passive clauses: 1802
% Input formulas: 69
% Initial clauses: 323
% Discarded non-redundant clauses: 167849
% 
% Duplicate literals: 1547
% Trivial inequalities: 1314
% Fw subsumption resolutions: 7111
% Fw demodulations: 113039
% Bw demodulations: 1495
% Condensations: 3522
% Global subsumptions: 236
% 
% Simple tautologies: 1201
% Equational tautologies: 1548
% Forward subsumptions: 129891
% Fw demodulations to eq. taut.: 15232
% Bw demodulations to eq. taut.: 46
% 
% Unit resulting resolution: 171488
% Factoring: 15
% Forward superposition: 41615
% Backward superposition: 34768
% Self superposition: 263
% Equality factoring: 91
% Equality resolution: 63
% 
% Split clauses: 48
% Split components: 96
% SAT solver clauses: 9196
% SAT solver unit clauses: 2094
% SAT solver binary clauses: 3968
% 
% Sat splits: 48
% Sat splitting refutations: 297
% 
% Memory used [KB]: 144304
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f7235,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f7233])).
fof(f7233,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0')),
  inference(resolution,[],[f7230,f382])).
fof(f382,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP6(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)) )),
  inference(cnf_transformation,[],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP6(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK33(X4,X3,X2,X1,X0)),s('type.modSem.v',sK34(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK35(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK33(X4,X3,X2,X1,X0)),s('type.conSem.v',sK37(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK36(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK35(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK36(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK34(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK37(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP6(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK33,sK34,sK35,sK36,sK37])],[f203])).
fof(f203,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP6(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.modSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X11))),s('type.conSem.v',X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP6(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f202])).
fof(f202,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP6(X3,X6,X5,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP6(X3,X6,X5,X8,X7)))),
  inference(flattening,[],[f201])).
fof(f201,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP6(X3,X6,X5,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP6(X3,X6,X5,X8,X7)))),
  inference(nnf_transformation,[],[f152])).
fof(f152,plain,(
  ! [X3,X6,X5,X8,X7] : (sP6(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f7230,plain,(
  ~sP6(sK71('const.list.NIL_0','const.list.NIL_0',sK24),sK24,sK73('const.list.NIL_0','const.list.NIL_0',sK24),'const.list.NIL_0','const.list.NIL_0')),
  inference(subsumption_resolution,[],[f7120,f289])).
fof(f289,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  inference(cnf_transformation,[],[f173])).
fof(f173,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK24])],[f112])).
fof(f112,plain,(
  ? [X0] : ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0] : p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  file('thm.mod_to_conProof.v_rel_rules|split|9','thm.mod_to_conProof.v_rel_rules|split|9')).
fof(f7120,plain,(
  p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ~sP6(sK71('const.list.NIL_0','const.list.NIL_0',sK24),sK24,sK73('const.list.NIL_0','const.list.NIL_0',sK24),'const.list.NIL_0','const.list.NIL_0')),
  inference(resolution,[],[f569,f423])).
fof(f423,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK73(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~sP6(sK71(X2,X1,X0),X6,sK73(X2,X1,X0),X8,X7)) )),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X12,X13,X14] : (sP7(X12,X13,X14) | (sP5(X13,sK65(X14,X13,X12,X2,X1,X0),X12,sK67(X14,X13,X12,X2,X1,X0),sK66(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK65(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK66(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK67(X14,X13,X12,X2,X1,X0)))))) | (sP6(X12,sK68(X14,X13,X12,X2,X1,X0),X14,sK70(X14,X13,X12,X2,X1,X0),sK69(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK68(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK69(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK70(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & ((~sP7(sK71(X2,X1,X0),sK72(X2,X1,X0),sK73(X2,X1,X0)) & ! [X9,X10,X11] : (~sP5(sK72(X2,X1,X0),X9,sK71(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK72(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP6(sK71(X2,X1,X0),X6,sK73(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK73(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK73(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK65,sK66,sK67,sK68,sK69,sK70,sK71,sK72,sK73])],[f225])).
fof(f225,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X12,X13,X14] : (sP7(X12,X13,X14) | ? [X18,X19,X20] : (sP5(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP6(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP7(X3,X4,X5) & ! [X9,X10,X11] : (~sP5(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP6(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(rectify,[],[f224])).
fof(f224,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X3,X4,X5] : (sP7(X3,X4,X5) | ? [X14,X15,X16] : (sP5(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP6(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP7(X3,X4,X5) & ! [X14,X15,X16] : (~sP5(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP6(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(nnf_transformation,[],[f154])).
fof(f154,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : (sP7(X3,X4,X5) | ? [X14,X15,X16] : (sP5(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP6(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(definition_folding,[],[f135,f153,f152,f151,f150,f149,f148,f147,f146])).
fof(f146,plain,(
  ! [X4,X21,X23,X22] : (sP0(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f147,plain,(
  ! [X21,X5,X23,X22] : (sP1(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f148,plain,(
  ! [X21,X5,X23,X22] : (sP2(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f149,plain,(
  ! [X4,X21,X23,X22] : (sP3(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f150,plain,(
  ! [X4,X21,X23,X22] : (sP4(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f151,plain,(
  ! [X4,X14,X3,X16,X15] : (sP5(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f153,plain,(
  ! [X3,X4,X5] : (sP7(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP3(X4,X21,X23,X22) | sP0(X4,X21,X23,X22) | sP1(X21,X5,X23,X22) | sP2(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP4(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f135,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(ennf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X7,X8] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) <=> ! [X9,X10,X11] : ((! [X12,X13,X14] : ((? [X15] : (s('type.modSem.v',X13) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X15))) & s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X15)))) | ? [X16,X17] : (s('type.modSem.v',X13) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X16))) & s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X17))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X16))),s('type.list.list'('type.conSem.v'),X17))))) | ? [X18,X19,X20,X16,X17] : (s('type.modSem.v',X13) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X18),s('type.semanticPrimitives.tid_or_exn',X19))))),s('type.list.list'('type.modSem.v'),X16))) & s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X20),s('type.semanticPrimitives.tid_or_exn',X19))))),s('type.list.list'('type.conSem.v'),X17))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X20),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X16))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X18),s('type.semanticPrimitives.tid_or_exn',X19))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X16))),s('type.list.list'('type.conSem.v'),X17))))) | ? [X21,X22,X23,X24,X25,X26,X27] : (s('type.modSem.v',X13) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.string.char'),X22),s('type.modLang.exp',X23))) & s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X24),s('type.list.list'('type.string.char'),X22),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X27),s('type.modLang.exp',X23))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X24)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X26),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X27),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))))) | ? [X21,X28,X22,X25,X24,X26,X27] : (s('type.modSem.v',X13) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X22))) & s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X22))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X24)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X26),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X27),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))))) | ? [X29] : (s('type.modSem.v',X13) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X29))) & s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X29)))) | ? [X16,X17] : (s('type.modSem.v',X13) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X16))) & s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X17))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.modSem.v'),X16))),s('type.list.list'('type.conSem.v'),X17)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.modSem.v',X13))),s('type.conSem.v',X14))))) & ! [X30,X31,X32] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X31) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X32)) | ? [X33,X16,X34,X17] : (s('type.list.list'('type.modSem.v'),X31) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X33),s('type.list.list'('type.modSem.v'),X16))) & s('type.list.list'('type.conSem.v'),X32) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X34),s('type.list.list'('type.conSem.v'),X17))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X16))),s('type.list.list'('type.conSem.v'),X17)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X30))),s('type.list.list'('type.modSem.v'),X31))),s('type.list.list'('type.conSem.v'),X32))))) & ! [X35,X36,X37] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)) | ? [X22,X33,X21,X38,X34] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X22),s('type.modSem.v',X33))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X22),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.modSem.v',X33))),s('type.conSem.v',X34)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))))),
  file('thm.mod_to_conProof.v_rel_rules|split|9','thm.mod_to_conProof.v_rel|48|_def')).
fof(f569,plain,(
  ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK73('const.list.NIL_0','const.list.NIL_0',sK24)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  inference(resolution,[],[f289,f424])).
fof(f424,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK73(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f226])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 299
% Passive clauses: 3494
% Generated clauses: 6672
% Final active clauses: 291
% Final passive clauses: 3353
% Input formulas: 69
% Initial clauses: 276
% 
% Selected by SInE selection: 35
% SInE iterations: 1
% 
% Duplicate literals: 212
% Trivial inequalities: 59
% Fw subsumption resolutions: 478
% 
% Simple tautologies: 218
% Equational tautologies: 2
% Forward subsumptions: 1629
% 
% Binary resolution: 3438
% Forward superposition: 2033
% Backward superposition: 333
% Equality resolution: 22
% 
% Split clauses: 359
% Split components: 763
% SAT solver clauses: 380
% SAT solver unit clauses: 20
% SAT solver binary clauses: 160
% 
% Sat splits: 359
% Sat splitting refutations: 20
% 
% Memory used [KB]: 9594
% Time elapsed: 0.292 s
% ------------------------------
% ------------------------------
% Success in time 12.05 s
