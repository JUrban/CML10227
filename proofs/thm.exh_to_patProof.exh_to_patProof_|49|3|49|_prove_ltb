Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.exh_to_patProof
% (85307)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 668
% Passive clauses: 6092
% Generated clauses: 19830
% Final active clauses: 615
% Final passive clauses: 5085
% Input formulas: 133
% Initial clauses: 280
% 
% Duplicate literals: 276
% Trivial inequalities: 66
% Fw subsumption resolutions: 1127
% Fw demodulations: 1893
% Bw demodulations: 49
% 
% Simple tautologies: 312
% Equational tautologies: 55
% Forward subsumptions: 10099
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 6362
% Factoring: 890
% Forward superposition: 4351
% Backward superposition: 4593
% Self superposition: 77
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 134
% Split components: 270
% SAT solver clauses: 157
% SAT solver unit clauses: 7
% SAT solver binary clauses: 42
% 
% Sat splits: 134
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 155
% TWLsolver calls for satisfiability: 47
% 
% Memory used [KB]: 13816
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.exh_to_patProof
% (85332)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 328
% Passive clauses: 2616
% Generated clauses: 13221
% Final active clauses: 323
% Final passive clauses: 2237
% Input formulas: 133
% Initial clauses: 280
% 
% Duplicate literals: 108
% Trivial inequalities: 36
% Fw subsumption resolutions: 336
% Fw demodulations: 1142
% Bw demodulations: 55
% Condensations: 96
% Global subsumptions: 19
% 
% Simple tautologies: 230
% Equational tautologies: 18
% Forward subsumptions: 5738
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 1717
% Factoring: 161
% Forward superposition: 3481
% Backward superposition: 3053
% Self superposition: 86
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 14
% Split components: 28
% SAT solver clauses: 3150
% SAT solver unit clauses: 350
% SAT solver binary clauses: 73
% SAT solver learnt clauses: 38
% SAT solver learnt literals: 2
% 
% Sat splits: 14
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 3074
% TWLsolver calls for satisfiability: 1627
% 
% Memory used [KB]: 20212
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.exh_to_patProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.exh_to_patProof
% SZS output start Proof for thm.exh_to_patProof
fof(f15238,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f646,f471])).
fof(f471,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK9),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',sK13))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.patSem.state'(sK9),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK9),sK10))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pes_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),sK11))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f366])).
fof(f366,plain,(
  ! [X5,X6] : s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(sK9),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(sK9),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',sK13))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.patSem.state'(sK9),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(sK9),sK10))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pes_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK12))))),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),sK11))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK9,sK10,sK11,sK12,sK13])],[f325])).
fof(f325,plain,(
  ? [X0,X1,X2,X3,X4] : ! [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) != s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X4))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pes_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ~! [X0,X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X4))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pes_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(flattening,[],[f135])).
fof(f135,plain,(
  ~! [X0] : ! [X1,X2,X3,X4] : ? [X5,X6] : s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X0),X5),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X6))) = s('type.pair.prod'('type.patSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X4))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.patSem.state'(X0),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X0),X1))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pes_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3))))),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X2))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X12))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X10))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X7))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pes_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X8))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.pair.,_2'(s('type.patSem.state'(X6),X11),s('type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v'),X12))) = s('type.pair.prod'('type.patSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.patSem.v'),'type.patSem.v')),'const.patSem.evaluate_3'(s('type.list.list'('type.patSem.v'),'const.list.CONS_2'(s('type.patSem.v',happ(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s('type.exhSem.v',X10))),s('type.list.list'('type.patSem.v'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.patSem.v'),'const.combin.o_2'(s(fun('type.exhSem.v','type.patSem.v'),'const.exh_to_patProof.compile_v_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.exhSem.v'),'const.pair.SND_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.patSem.state'(X6),'const.exh_to_patProof.compile_state_1'(s('type.exhSem.state'(X6),X7))),s('type.list.list'('type.patLang.exp'),'const.list.CONS_2'(s('type.patLang.exp','const.exh_to_pat.compile_pes_2'(s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.CONS_2'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.list.list'('type.option.option'('type.list.list'('type.string.char'))),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.option.option'('type.list.list'('type.string.char'))),'const.combin.o_2'(s(fun('type.list.list'('type.string.char'),'type.option.option'('type.list.list'('type.string.char'))),'const.option.SOME_0'),s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))),s('type.list.list'('type.pair.prod'('type.exhLang.pat','type.exhLang.exp')),X8))),s('type.list.list'('type.patLang.exp'),'const.list.NIL_0')))))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|3|49|_prove_ltb','thm.exh_to_patProof.exh_to_patProof_|49|3|49|_prove_ltb')).
fof(f646,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK26(X2,X1,X0)),s(X1,sK27(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f438])).
fof(f438,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK26(X2,X1,X0)),s(X1,sK27(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK26,sK27])],[f254])).
fof(f254,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f253])).
fof(f253,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X21,X23] : ! [X19] : ? [X44,X45] : s('type.pair.prod'(X21,X23),X19) = s('type.pair.prod'(X21,X23),'const.pair.,_2'(s(X21,X44),s(X23,X45)))),
  file('thm.exh_to_patProof.exh_to_patProof_|49|3|49|_prove_ltb','thm.pair.ABS_PAIR_THM')).
% SZS output end Proof for thm.exh_to_patProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 383
% Passive clauses: 2967
% Generated clauses: 14798
% Final active clauses: 378
% Final passive clauses: 2539
% Input formulas: 133
% Initial clauses: 280
% 
% Duplicate literals: 7
% Trivial inequalities: 1
% Fw subsumption resolutions: 35
% Fw demodulations: 1159
% Bw demodulations: 50
% Condensations: 17
% 
% Simple tautologies: 75
% Equational tautologies: 21
% Forward subsumptions: 10462
% Fw demodulations to eq. taut.: 9
% 
% Unit resulting resolution: 1736
% Factoring: 1
% Forward superposition: 5898
% Backward superposition: 5416
% Self superposition: 192
% Equality factoring: 2
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 2977
% SAT solver unit clauses: 1727
% SAT solver binary clauses: 927
% 
% Sat splits: 4
% 
% Memory used [KB]: 38506
% Time elapsed: 1.282 s
% ------------------------------
% ------------------------------
% Success in time 2.65 s
