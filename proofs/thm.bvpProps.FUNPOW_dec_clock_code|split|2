Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvpProps
% (93796)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 801
% Passive clauses: 4811
% Generated clauses: 27653
% Final active clauses: 753
% Final passive clauses: 3669
% Input formulas: 261
% Initial clauses: 434
% 
% Duplicate literals: 190
% Trivial inequalities: 39
% Fw subsumption resolutions: 1470
% Fw demodulations: 1508
% Bw demodulations: 12
% 
% Simple tautologies: 185
% Equational tautologies: 31
% Forward subsumptions: 19228
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 4566
% Factoring: 998
% Forward superposition: 8556
% Backward superposition: 9793
% Self superposition: 64
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 287
% Split components: 575
% SAT solver clauses: 448
% SAT solver unit clauses: 13
% SAT solver binary clauses: 54
% 
% Sat splits: 287
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 448
% TWLsolver calls for satisfiability: 334
% 
% Memory used [KB]: 15735
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvpProps
% (93871)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 572
% Passive clauses: 2883
% Generated clauses: 24393
% Final active clauses: 548
% Final passive clauses: 1995
% Input formulas: 261
% Initial clauses: 434
% 
% Duplicate literals: 107
% Trivial inequalities: 61
% Fw subsumption resolutions: 846
% Fw demodulations: 2117
% Bw demodulations: 320
% Condensations: 119
% Global subsumptions: 23
% 
% Simple tautologies: 232
% Equational tautologies: 23
% Forward subsumptions: 14396
% Fw demodulations to eq. taut.: 28
% 
% Binary resolution: 2189
% Factoring: 337
% Forward superposition: 7882
% Backward superposition: 6819
% Self superposition: 80
% Equality factoring: 2
% Equality resolution: 23
% 
% Split clauses: 14
% Split components: 28
% SAT solver clauses: 3904
% SAT solver unit clauses: 631
% SAT solver binary clauses: 131
% SAT solver learnt clauses: 47
% SAT solver learnt literals: 13
% 
% Sat splits: 14
% Sat splitting refutations: 33
% 
% TWLsolver clauses: 3811
% TWLsolver calls for satisfiability: 2151
% 
% Memory used [KB]: 21748
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.bvpProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvpProps
% SZS output start Proof for thm.bvpProps
fof(f58409,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f58408])).
fof(f58408,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK10),sK11))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK10),sK11)))))),
  inference(backward_demodulation,[],[f58405,f6778])).
fof(f6778,plain,(
  s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK10),sK11))))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK10),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK10),'type.bvpSem.state'(sK10)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK12),s('type.bvpSem.state'(sK10),sK11)))))))),
  inference(unit_resulting_resolution,[],[f822,f1092])).
fof(f1092,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f763])).
fof(f763,plain,(
  ! [X0,X1] : ((s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f570])).
fof(f570,plain,(
  ! [X0,X1] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X0))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f204])).
fof(f204,axiom,(
  ! [X8,X13] : (s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X8))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num',X13))) <=> s('type.num.num',X8) = s('type.num.num',X13))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|2','thm.numeral.numeral_distrib|split|19')).
fof(f822,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK10),sK11))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK10),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK10),'type.bvpSem.state'(sK10)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK12),s('type.bvpSem.state'(sK10),sK11)))))),
  inference(cnf_transformation,[],[f708])).
fof(f708,plain,(
  s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK10),sK11))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(sK10),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(sK10),'type.bvpSem.state'(sK10)),'const.bvpSem.dec_clock_0'),s('type.num.num',sK12),s('type.bvpSem.state'(sK10),sK11)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12])],[f667])).
fof(f667,plain,(
  ? [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(ennf_transformation,[],[f264])).
fof(f264,plain,(
  ~! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f263])).
fof(f263,plain,(
  ~! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),X7))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X7)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|2','thm.bvpProps.FUNPOW_dec_clock_code|split|2')).
fof(f58405,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X1),s('type.bvpSem.state'(X0),X2)))))) )),
  inference(forward_demodulation,[],[f57942,f957])).
fof(f957,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))) )),
  inference(cnf_transformation,[],[f360])).
fof(f360,plain,(
  ! [X0,X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(flattening,[],[f359])).
fof(f359,plain,(
  ! [X0] : ! [X1,X2] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X2),s('type.bvpSem.state'(X0),X1)))))),
  inference(rectify,[],[f119])).
fof(f119,axiom,(
  ! [X11] : ! [X9,X12] : s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X11),X9))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X11),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),X12),s('type.bvpSem.state'(X11),X9)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|2','thm.bvpSem.bvpSem_69_prove_ltb')).
fof(f57942,plain,(
  ( ! [X2,X0,X1] : (s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X1),s('type.bvpSem.state'(X0),X2))))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvpSem.state'(X0),X2)))))) )),
  inference(unit_resulting_resolution,[],[f1028,f1036])).
fof(f1036,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f758])).
fof(f758,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(flattening,[],[f757])).
fof(f757,plain,(
  ! [X0,X1,X2] : ((s('type.bvpSem.state'(X0),X1) != s('type.bvpSem.state'(X0),X2) | (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2))))) & ((s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) | s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) != s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) | s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) != s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) | s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) != s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) | s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) != s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) | s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) != s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) | s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) != s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))) | s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2)))),
  inference(nnf_transformation,[],[f510])).
fof(f510,plain,(
  ! [X0,X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(flattening,[],[f509])).
fof(f509,plain,(
  ! [X0] : ! [X1,X2] : (s('type.bvpSem.state'(X0),X1) = s('type.bvpSem.state'(X0),X2) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X0),X2))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X1))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X0),X2))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X1))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X0),X2))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X1))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X1))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X0),X2))) & s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X1))) = s('type.ffi.ffi_state'(X0),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X0),X2))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X1))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X0),X2)))))),
  inference(rectify,[],[f240])).
fof(f240,axiom,(
  ! [X11] : ! [X36,X37] : (s('type.bvpSem.state'(X11),X36) = s('type.bvpSem.state'(X11),X37) <=> (s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X11),X36))) = s('type.sptree.spt'('type.bvlSem.v'),'const.bvpSem.state_locals_1'(s('type.bvpSem.state'(X11),X37))) & s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X11),X36))) = s('type.list.list'('type.bvpSem.stack'),'const.bvpSem.state_stack_1'(s('type.bvpSem.state'(X11),X37))) & s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X11),X36))) = s('type.option.option'('type.num.num'),'const.bvpSem.state_global_1'(s('type.bvpSem.state'(X11),X37))) & s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X11),X36))) = s('type.num.num','const.bvpSem.state_handler_1'(s('type.bvpSem.state'(X11),X37))) & s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X11),X36))) = s('type.finite_map.fmap'('type.num.num','type.closSem.ref'('type.bvlSem.v')),'const.bvpSem.state_refs_1'(s('type.bvpSem.state'(X11),X37))) & s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X11),X36))) = s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X11),X37))) & s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X11),X36))) = s('type.sptree.spt'('type.pair.prod'('type.num.num','type.bvp.prog')),'const.bvpSem.state_code_1'(s('type.bvpSem.state'(X11),X37))) & s('type.ffi.ffi_state'(X11),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X11),X36))) = s('type.ffi.ffi_state'(X11),'const.bvpSem.state_ffi_1'(s('type.bvpSem.state'(X11),X37))) & s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X11),X36))) = s('type.num.num','const.bvpSem.state_space_1'(s('type.bvpSem.state'(X11),X37)))))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|2','thm.bvpSem.state_component_equality')).
fof(f1028,plain,(
  ( ! [X2,X0,X1] : (s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X1),s('type.bvpSem.state'(X0),X2))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvpSem.state'(X0),X2)))) )),
  inference(cnf_transformation,[],[f502])).
fof(f502,plain,(
  ! [X0,X1,X2] : s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X1),s('type.bvpSem.state'(X0),X2))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvpSem.state'(X0),X2)))),
  inference(flattening,[],[f501])).
fof(f501,plain,(
  ! [X0] : ! [X1,X2] : s('type.bvpSem.state'(X0),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X0),'type.bvpSem.state'(X0)),'const.bvpSem.dec_clock_0'),s('type.num.num',X1),s('type.bvpSem.state'(X0),X2))) = s('type.bvpSem.state'(X0),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X0),X2))),s('type.num.num',X1))))),s('type.bvpSem.state'(X0),X2)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X6] : ! [X8,X9] : s('type.bvpSem.state'(X6),'const.arithmetic.FUNPOW_3'(s(fun('type.bvpSem.state'(X6),'type.bvpSem.state'(X6)),'const.bvpSem.dec_clock_0'),s('type.num.num',X8),s('type.bvpSem.state'(X6),X9))) = s('type.bvpSem.state'(X6),'const.bvpSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.-_2'(s('type.num.num','const.bvpSem.state_clock_1'(s('type.bvpSem.state'(X6),X9))),s('type.num.num',X8))))),s('type.bvpSem.state'(X6),X9)))),
  file('thm.bvpProps.FUNPOW_dec_clock_code|split|2','thm.bvpProps.funpow_dec_clock_clock')).
% SZS output end Proof for thm.bvpProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 752
% Passive clauses: 3794
% Generated clauses: 57577
% Final active clauses: 745
% Final passive clauses: 2981
% Input formulas: 261
% Initial clauses: 434
% 
% Duplicate literals: 6
% Trivial inequalities: 13
% Fw subsumption resolutions: 116
% Fw demodulations: 5546
% Bw demodulations: 51
% Condensations: 5
% 
% Simple tautologies: 104
% Equational tautologies: 30
% Forward subsumptions: 46479
% Fw demodulations to eq. taut.: 1016
% Bw demodulations to eq. taut.: 17
% 
% Unit resulting resolution: 4718
% Factoring: 1
% Forward superposition: 23967
% Backward superposition: 22563
% Self superposition: 136
% Equality factoring: 2
% Equality resolution: 19
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 3800
% SAT solver unit clauses: 2258
% SAT solver binary clauses: 1222
% 
% Sat splits: 2
% 
% Memory used [KB]: 43368
% Time elapsed: 1.392 s
% ------------------------------
% ------------------------------
% Success in time 2.74 s
