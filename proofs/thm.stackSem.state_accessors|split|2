Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stackSem
% (108482)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 62
% Passive clauses: 1559
% Generated clauses: 16835
% Final active clauses: 59
% Final passive clauses: 1415
% Input formulas: 21
% Initial clauses: 21
% 
% Duplicate literals: 825
% Trivial inequalities: 175
% Fw subsumption resolutions: 1606
% Fw demodulations: 291
% Bw demodulations: 1
% 
% Simple tautologies: 269
% Equational tautologies: 125
% Forward subsumptions: 8422
% 
% Binary resolution: 25
% Forward superposition: 7910
% Backward superposition: 5033
% Self superposition: 465
% Equality factoring: 392
% Equality resolution: 18
% 
% Split clauses: 576
% Split components: 1156
% SAT solver clauses: 1599
% SAT solver unit clauses: 256
% SAT solver binary clauses: 531
% 
% Sat splits: 575
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1595
% TWLsolver calls for satisfiability: 68
% 
% Memory used [KB]: 12920
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stackSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stackSem
% SZS output start Proof for thm.stackSem
fof(f110,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f109,f64,f86,f77,f101])).
fof(f101,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X17,X7,X5,X3,X1,X15,X13,X11,X9,X16] : (s('type.list.list'('type.wordSem.word_loc'(X1)),X4) = s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.word_loc'(X1)),X4),s('type.num.num',X5),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6),s(fun('type.fcp.cart'(bool,X1),bool),X7),s('type.list.list'('type.fcp.cart'(bool,X1)),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X9),s(bool,X10),s(bool,X11),s(bool,X12),s('type.num.num',X13),s('type.sptree.spt'('type.stackLang.prog'(X1)),X14),s('type.ffi.ffi_state'(X0),X15),s(fun('type.num.num',bool),X16),s(bool,X17)))))) ) | $spl26),
  inference(cnf_transformation,[],[f101_D])).
fof(f101_D,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X17,X7,X5,X3,X1,X15,X13,X11,X9,X16] : (s('type.list.list'('type.wordSem.word_loc'(X1)),X4) = s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.word_loc'(X1)),X4),s('type.num.num',X5),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6),s(fun('type.fcp.cart'(bool,X1),bool),X7),s('type.list.list'('type.fcp.cart'(bool,X1)),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X9),s(bool,X10),s(bool,X11),s(bool,X12),s('type.num.num',X13),s('type.sptree.spt'('type.stackLang.prog'(X1)),X14),s('type.ffi.ffi_state'(X0),X15),s(fun('type.num.num',bool),X16),s(bool,X17)))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f77,plain,(
  ( ! [X6,X4,X2,X0,X14,X12,X10,X8,X17,X7,X5,X3,X1,X15,X13,X11,X9,X16] : (s('type.list.list'('type.wordSem.word_loc'(X1)),X4) = s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.word_loc'(X1)),X4),s('type.num.num',X5),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6),s(fun('type.fcp.cart'(bool,X1),bool),X7),s('type.list.list'('type.fcp.cart'(bool,X1)),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X9),s(bool,X10),s(bool,X11),s(bool,X12),s('type.num.num',X13),s('type.sptree.spt'('type.stackLang.prog'(X1)),X14),s('type.ffi.ffi_state'(X0),X15),s(fun('type.num.num',bool),X16),s(bool,X17)))))) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'('type.wordSem.word_loc'(X1)),X4) = s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.word_loc'(X1)),X4),s('type.num.num',X5),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6),s(fun('type.fcp.cart'(bool,X1),bool),X7),s('type.list.list'('type.fcp.cart'(bool,X1)),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X9),s(bool,X10),s(bool,X11),s(bool,X12),s('type.num.num',X13),s('type.sptree.spt'('type.stackLang.prog'(X1)),X14),s('type.ffi.ffi_state'(X0),X15),s(fun('type.num.num',bool),X16),s(bool,X17)))))),
  inference(flattening,[],[f44])).
fof(f44,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'('type.wordSem.word_loc'(X1)),X4) = s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.word_loc'(X1)),X4),s('type.num.num',X5),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6),s(fun('type.fcp.cart'(bool,X1),bool),X7),s('type.list.list'('type.fcp.cart'(bool,X1)),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X9),s(bool,X10),s(bool,X11),s(bool,X12),s('type.num.num',X13),s('type.sptree.spt'('type.stackLang.prog'(X1)),X14),s('type.ffi.ffi_state'(X0),X15),s(fun('type.num.num',bool),X16),s(bool,X17)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : s('type.list.list'('type.wordSem.word_loc'(X7)),X10) = s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),X8),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),X9),s('type.list.list'('type.wordSem.word_loc'(X7)),X10),s('type.num.num',X11),s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),X12),s(fun('type.fcp.cart'(bool,X7),bool),X13),s('type.list.list'('type.fcp.cart'(bool,X7)),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)))))),X15),s(bool,X16),s(bool,X17),s(bool,X18),s('type.num.num',X19),s('type.sptree.spt'('type.stackLang.prog'(X7)),X20),s('type.ffi.ffi_state'(X6),X21),s(fun('type.num.num',bool),X22),s(bool,X23)))))),
  file('thm.stackSem.state_accessors|split|2','thm.stackSem.state_stack')).
fof(f86,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK1)),sK4) != s('type.list.list'('type.wordSem.word_loc'(sK1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK1,sK0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK1)),sK2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1)),sK3),s('type.list.list'('type.wordSem.word_loc'(sK1)),sK4),s('type.num.num',sK5),s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),sK6),s(fun('type.fcp.cart'(bool,sK1),bool),sK7),s('type.list.list'('type.fcp.cart'(bool,sK1)),sK8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1)))))),sK9),s(bool,sK10),s(bool,sK11),s(bool,sK12),s('type.num.num',sK13),s('type.sptree.spt'('type.stackLang.prog'(sK1)),sK14),s('type.ffi.ffi_state'(sK0),sK15),s(fun('type.num.num',bool),sK16),s(bool,sK17))))) | $spl1),
  inference(cnf_transformation,[],[f86_D])).
fof(f86_D,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK1)),sK4) != s('type.list.list'('type.wordSem.word_loc'(sK1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK1,sK0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK1)),sK2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1)),sK3),s('type.list.list'('type.wordSem.word_loc'(sK1)),sK4),s('type.num.num',sK5),s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),sK6),s(fun('type.fcp.cart'(bool,sK1),bool),sK7),s('type.list.list'('type.fcp.cart'(bool,sK1)),sK8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1)))))),sK9),s(bool,sK10),s(bool,sK11),s(bool,sK12),s('type.num.num',sK13),s('type.sptree.spt'('type.stackLang.prog'(sK1)),sK14),s('type.ffi.ffi_state'(sK0),sK15),s(fun('type.num.num',bool),sK16),s(bool,sK17))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f64,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK1)),sK4) != s('type.list.list'('type.wordSem.word_loc'(sK1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK1,sK0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK1)),sK2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1)),sK3),s('type.list.list'('type.wordSem.word_loc'(sK1)),sK4),s('type.num.num',sK5),s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),sK6),s(fun('type.fcp.cart'(bool,sK1),bool),sK7),s('type.list.list'('type.fcp.cart'(bool,sK1)),sK8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1)))))),sK9),s(bool,sK10),s(bool,sK11),s(bool,sK12),s('type.num.num',sK13),s('type.sptree.spt'('type.stackLang.prog'(sK1)),sK14),s('type.ffi.ffi_state'(sK0),sK15),s(fun('type.num.num',bool),sK16),s(bool,sK17)))))),
  inference(cnf_transformation,[],[f62])).
fof(f62,plain,(
  s('type.list.list'('type.wordSem.word_loc'(sK1)),sK4) != s('type.list.list'('type.wordSem.word_loc'(sK1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK1,sK0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK1)),sK2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1)),sK3),s('type.list.list'('type.wordSem.word_loc'(sK1)),sK4),s('type.num.num',sK5),s(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),sK6),s(fun('type.fcp.cart'(bool,sK1),bool),sK7),s('type.list.list'('type.fcp.cart'(bool,sK1)),sK8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK1)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK1),'type.wordSem.word_loc'(sK1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK1)))))),sK9),s(bool,sK10),s(bool,sK11),s(bool,sK12),s('type.num.num',sK13),s('type.sptree.spt'('type.stackLang.prog'(sK1)),sK14),s('type.ffi.ffi_state'(sK0),sK15),s(fun('type.num.num',bool),sK16),s(bool,sK17)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17])],[f60])).
fof(f60,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'('type.wordSem.word_loc'(X1)),X4) != s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.word_loc'(X1)),X4),s('type.num.num',X5),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6),s(fun('type.fcp.cart'(bool,X1),bool),X7),s('type.list.list'('type.fcp.cart'(bool,X1)),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X9),s(bool,X10),s(bool,X11),s(bool,X12),s('type.num.num',X13),s('type.sptree.spt'('type.stackLang.prog'(X1)),X14),s('type.ffi.ffi_state'(X0),X15),s(fun('type.num.num',bool),X16),s(bool,X17)))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'('type.wordSem.word_loc'(X1)),X4) = s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.word_loc'(X1)),X4),s('type.num.num',X5),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6),s(fun('type.fcp.cart'(bool,X1),bool),X7),s('type.list.list'('type.fcp.cart'(bool,X1)),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X9),s(bool,X10),s(bool,X11),s(bool,X12),s('type.num.num',X13),s('type.sptree.spt'('type.stackLang.prog'(X1)),X14),s('type.ffi.ffi_state'(X0),X15),s(fun('type.num.num',bool),X16),s(bool,X17)))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17] : s('type.list.list'('type.wordSem.word_loc'(X1)),X4) = s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),X2),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),X3),s('type.list.list'('type.wordSem.word_loc'(X1)),X4),s('type.num.num',X5),s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),X6),s(fun('type.fcp.cart'(bool,X1),bool),X7),s('type.list.list'('type.fcp.cart'(bool,X1)),X8),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),X9),s(bool,X10),s(bool,X11),s(bool,X12),s('type.num.num',X13),s('type.sptree.spt'('type.stackLang.prog'(X1)),X14),s('type.ffi.ffi_state'(X0),X15),s(fun('type.num.num',bool),X16),s(bool,X17)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : s('type.list.list'('type.wordSem.word_loc'(X7)),X10) = s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),X8),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),X9),s('type.list.list'('type.wordSem.word_loc'(X7)),X10),s('type.num.num',X11),s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),X12),s(fun('type.fcp.cart'(bool,X7),bool),X13),s('type.list.list'('type.fcp.cart'(bool,X7)),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)))))),X15),s(bool,X16),s(bool,X17),s(bool,X18),s('type.num.num',X19),s('type.sptree.spt'('type.stackLang.prog'(X7)),X20),s('type.ffi.ffi_state'(X6),X21),s(fun('type.num.num',bool),X22),s(bool,X23)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X18,X19,X20,X21,X22,X23] : s('type.list.list'('type.wordSem.word_loc'(X7)),X10) = s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),'const.stackSem.recordtype|46|state_16'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),X8),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),X9),s('type.list.list'('type.wordSem.word_loc'(X7)),X10),s('type.num.num',X11),s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),X12),s(fun('type.fcp.cart'(bool,X7),bool),X13),s('type.list.list'('type.fcp.cart'(bool,X7)),X14),s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)))))),X15),s(bool,X16),s(bool,X17),s(bool,X18),s('type.num.num',X19),s('type.sptree.spt'('type.stackLang.prog'(X7)),X20),s('type.ffi.ffi_state'(X6),X21),s(fun('type.num.num',bool),X22),s(bool,X23)))))),
  file('thm.stackSem.state_accessors|split|2','thm.stackSem.state_accessors|split|2')).
fof(f109,plain,(
  $false | ($spl1 | $spl26)),
  inference(subsumption_resolution,[],[f86,f101])).
% SZS output end Proof for thm.stackSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Passive clauses: 20
% Generated clauses: 43
% Final passive clauses: 20
% Input formulas: 21
% Initial clauses: 21
% 
% Fw subsumption resolutions: 1
% 
% SAT solver clauses: 44
% SAT solver unit clauses: 40
% SAT solver binary clauses: 3
% SAT solver learnt clauses: 1
% 
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 43
% TWLsolver calls for satisfiability: 30
% 
% Memory used [KB]: 1023
% Time elapsed: 0.007 s
% ------------------------------
% ------------------------------
% Success in time 0.62 s
