Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.typeSysProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.typeSysProps
% SZS output start Proof for thm.typeSysProps
fof(f5061,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f43,f3541,f69,f40,f34,f65,f5060,f42,f33,f3295,f3298,f41,f74,f72,f35,f2153,f2156,f37,f62,f3248,f105,f236,f2112,f39,f66,f44,f70,f68,f59,f36,f64,f38,f60,f58,f56])).
fof(f56,plain,(
  s('type.ast.t',sK1) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))))),s('type.ast.t',sK1))) | $spl1),
  inference(cnf_transformation,[],[f56_D])).
fof(f56_D,plain,(
  s('type.ast.t',sK1) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))))),s('type.ast.t',sK1))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f58,plain,(
  s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK4))))))),s('type.list.list'('type.ast.t'),sK3))) | $spl3),
  inference(cnf_transformation,[],[f58_D])).
fof(f58_D,plain,(
  s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK4))))))),s('type.list.list'('type.ast.t'),sK3))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f60,plain,(
  sP0 | $spl4),
  inference(cnf_transformation,[],[f60_D])).
fof(f60_D,plain,(
  sP0 <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f38,plain,(
  sP0 | s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK4))))))),s('type.list.list'('type.ast.t'),sK3))) | s('type.ast.t',sK1) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))))),s('type.ast.t',sK1)))),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  (~sP0 | (! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))) & ((p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1)))) & s('type.ast.t',sK1) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))))),s('type.ast.t',sK1)))) | (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3)))) & s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK4))))))),s('type.list.list'('type.ast.t'),sK3)))) | sP0)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2,sK3,sK4])],[f25])).
fof(f25,plain,(
  (~sP0 | (! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))) & (? [X2,X3] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) & s('type.ast.t',X2) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) | ? [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) & s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0)))) | sP0)),
  inference(rectify,[],[f24])).
fof(f24,plain,(
  (~sP0 | (! [X2,X3] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) | s('type.ast.t',X2) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) & ! [X0,X1] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) | s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0)))))) & (? [X2,X3] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) & s('type.ast.t',X2) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) | ? [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) & s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0)))) | sP0)),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  (~sP0 | (! [X2,X3] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) | s('type.ast.t',X2) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) & ! [X0,X1] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) | s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0)))))) & ((? [X2,X3] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) & s('type.ast.t',X2) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) | ? [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) & s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0))))) | sP0)),
  inference(nnf_transformation,[],[f21])).
fof(f21,plain,(
  sP0 <=> (! [X2,X3] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) | s('type.ast.t',X2) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) & ! [X0,X1] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) | s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f64,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3)))) | $spl8),
  inference(cnf_transformation,[],[f64_D])).
fof(f64_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3)))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f36,plain,(
  sP0 | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3)))) | s('type.ast.t',sK1) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))))),s('type.ast.t',sK1)))),
  inference(cnf_transformation,[],[f26])).
fof(f59,plain,(
  ~sP0 | $spl5),
  inference(cnf_transformation,[],[f59_D])).
fof(f59_D,plain,(
  ~sP0 <=> ~$spl5),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl5])])).
fof(f68,plain,(
  s('type.ast.t',sK5) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK6))))))),s('type.ast.t',sK5))) | $spl15),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  s('type.ast.t',sK5) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK6))))))),s('type.ast.t',sK5))) <=> ~$spl15),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl15])])).
fof(f70,plain,(
  s('type.list.list'('type.ast.t'),sK7) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7))) | $spl17),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s('type.list.list'('type.ast.t'),sK7) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7))) <=> ~$spl17),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl17])])).
fof(f44,plain,(
  s('type.list.list'('type.ast.t'),sK7) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7))) | s('type.ast.t',sK5) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK6))))))),s('type.ast.t',sK5))) | ~sP0),
  inference(cnf_transformation,[],[f30])).
fof(f30,plain,(
  (sP0 | (! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))) & (~sP0 | (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK5)))) & s('type.ast.t',sK5) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK6))))))),s('type.ast.t',sK5)))) | (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7)))) & s('type.list.list'('type.ast.t'),sK7) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7,sK8])],[f29])).
fof(f29,plain,(
  (sP0 | (! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))) & (~sP0 | ? [X2,X3] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) & s('type.ast.t',X2) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) | ? [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) & s('type.list.list'('type.ast.t'),X0) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0)))))),
  inference(rectify,[],[f28])).
fof(f28,plain,(
  (sP0 | (! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))) & (~sP0 | ? [X6,X7] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) & s('type.ast.t',X6) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) | ? [X4,X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) & s('type.list.list'('type.ast.t'),X4) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  (sP0 | (! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))) & (~sP0 | (? [X6,X7] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) & s('type.ast.t',X6) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) | ? [X4,X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) & s('type.list.list'('type.ast.t'),X4) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4))))))),
  inference(nnf_transformation,[],[f22])).
fof(f22,plain,(
  sP0 <~> (! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))),
  inference(definition_folding,[],[f19,f21])).
fof(f19,plain,(
  (! [X2,X3] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) | s('type.ast.t',X2) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) & ! [X0,X1] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) | s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0))))) <~> (! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))))),
  inference(ennf_transformation,[],[f11])).
fof(f11,plain,(
  ~((! [X2,X3] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X3),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X2)))) => s('type.ast.t',X2) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X3))))))),s('type.ast.t',X2)))) & ! [X0,X1] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X1),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X0)))) => s('type.list.list'('type.ast.t'),X0) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X1))))))),s('type.list.list'('type.ast.t'),X0))))) <=> (! [X6,X7] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) => s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X4,X5] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) => s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~((! [X6,X7] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) => s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X8,X7] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X8)))) => s('type.list.list'('type.ast.t'),X8) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.list.list'('type.ast.t'),X8))))) <=> (! [X6,X7] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) => s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X8,X7] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X8)))) => s('type.list.list'('type.ast.t'),X8) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.list.list'('type.ast.t'),X8))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  (! [X6,X7] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) => s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X8,X7] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X8)))) => s('type.list.list'('type.ast.t'),X8) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.list.list'('type.ast.t'),X8))))) <=> (! [X6,X7] : (p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) => s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6)))) & ! [X8,X7] : (p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X8)))) => s('type.list.list'('type.ast.t'),X8) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.list.list'('type.ast.t'),X8)))))),
  file('thm.typeSysProps.typeSysProps_3|49|_prove_ltb','thm.typeSysProps.typeSysProps_3|49|_prove_ltb')).
fof(f66,plain,(
  ( ! [X6,X7] : (s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6))))) ) | $spl12),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  ( ! [X6,X7] : (s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f39,plain,(
  ( ! [X6,X7] : (s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | sP0) )),
  inference(cnf_transformation,[],[f30])).
fof(f2112,plain,(
  $false | ($spl1 | $spl12 | $spl26)),
  inference(subsumption_resolution,[],[f2111,f276])).
fof(f276,plain,(
  s('type.ast.t',sK1) != s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))),s('type.ast.t',sK1))) | $spl1),
  inference(superposition,[],[f56,f53])).
fof(f53,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num',X0),s('type.list.list'('type.ast.t'),X1),s('type.ast.t',X2))) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num',X0),s('type.list.list'('type.ast.t'),X1))),s('type.ast.t',X2)))) )),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  ! [X0,X1,X2] : s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num',X0),s('type.list.list'('type.ast.t'),X1),s('type.ast.t',X2))) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num',X0),s('type.list.list'('type.ast.t'),X1))),s('type.ast.t',X2)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X11,X12,X13] : s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num',X11),s('type.list.list'('type.ast.t'),X12),s('type.ast.t',X13))) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num',X11),s('type.list.list'('type.ast.t'),X12))),s('type.ast.t',X13)))),
  file('thm.typeSysProps.typeSysProps_3|49|_prove_ltb','ARITY_2_3_const.typeSystem.deBruijn_subst')).
fof(f2111,plain,(
  s('type.ast.t',sK1) = s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))),s('type.ast.t',sK1))) | ($spl12 | $spl26)),
  inference(subsumption_resolution,[],[f2084,f45])).
fof(f45,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.typeSysProps.typeSysProps_3|49|_prove_ltb',aHL_TRUTH)).
fof(f2084,plain,(
  ~p(s(bool,'T_0')) | s('type.ast.t',sK1) = s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK2))))),s('type.ast.t',sK1))) | ($spl12 | $spl26)),
  inference(superposition,[],[f842,f236])).
fof(f842,plain,(
  ( ! [X6,X7] : (~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | s('type.ast.t',X6) = s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))),s('type.ast.t',X6)))) ) | $spl12),
  inference(forward_demodulation,[],[f66,f53])).
fof(f236,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1))) | $spl26),
  inference(cnf_transformation,[],[f236_D])).
fof(f236_D,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1))) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f105,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1))) | $spl6),
  inference(subsumption_resolution,[],[f104,f47])).
fof(f47,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f12])).
fof(f12,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.typeSysProps.typeSysProps_3|49|_prove_ltb',aHL_FALSITY)).
fof(f104,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1))) | $spl6),
  inference(superposition,[],[f62,f49])).
fof(f49,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.typeSysProps.typeSysProps_3|49|_prove_ltb',aHL_BOOL_CASES)).
fof(f3248,plain,(
  $false | ($spl3 | $spl10 | $spl68)),
  inference(subsumption_resolution,[],[f3247,f58])).
fof(f3247,plain,(
  s('type.list.list'('type.ast.t'),sK3) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK4))))))),s('type.list.list'('type.ast.t'),sK3))) | ($spl10 | $spl68)),
  inference(subsumption_resolution,[],[f3216,f45])).
fof(f3216,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'('type.ast.t'),sK3) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK4))))))),s('type.list.list'('type.ast.t'),sK3))) | ($spl10 | $spl68)),
  inference(superposition,[],[f65,f2156])).
fof(f62,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1)))) | $spl6),
  inference(cnf_transformation,[],[f62_D])).
fof(f62_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f37,plain,(
  sP0 | s('type.list.list'('type.ast.t'),sK3) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK4))))))),s('type.list.list'('type.ast.t'),sK3))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1))))),
  inference(cnf_transformation,[],[f26])).
fof(f2156,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3))) | $spl68),
  inference(cnf_transformation,[],[f2156_D])).
fof(f2156_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f2153,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3))) | $spl8),
  inference(subsumption_resolution,[],[f2129,f47])).
fof(f2129,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3))) | $spl8),
  inference(superposition,[],[f64,f49])).
fof(f35,plain,(
  sP0 | p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK4),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK3)))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK2),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK1))))),
  inference(cnf_transformation,[],[f26])).
fof(f72,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK5)))) | $spl18),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK5)))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f74,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7)))) | $spl20),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7)))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f41,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7)))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK5)))) | ~sP0),
  inference(cnf_transformation,[],[f30])).
fof(f3298,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7))) | $spl92),
  inference(cnf_transformation,[],[f3298_D])).
fof(f3298_D,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7))) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f3295,plain,(
  s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7))) | $spl20),
  inference(subsumption_resolution,[],[f3265,f47])).
fof(f3265,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7))) | $spl20),
  inference(superposition,[],[f74,f49])).
fof(f33,plain,(
  ( ! [X6,X7] : (s('type.ast.t',X6) = s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X7))))))),s('type.ast.t',X6))) | ~p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X7),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',X6)))) | ~sP0) )),
  inference(cnf_transformation,[],[f26])).
fof(f42,plain,(
  p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK8),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),sK7)))) | s('type.ast.t',sK5) != s('type.ast.t',happ(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK6))))))),s('type.ast.t',sK5))) | ~sP0),
  inference(cnf_transformation,[],[f30])).
fof(f5060,plain,(
  $false | ($spl12 | $spl15 | $spl18)),
  inference(subsumption_resolution,[],[f3457,f3312])).
fof(f3312,plain,(
  s('type.ast.t',sK5) = s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK6))))),s('type.ast.t',sK5))) | ($spl12 | $spl18)),
  inference(resolution,[],[f72,f842])).
fof(f3457,plain,(
  s('type.ast.t',sK5) != s('type.ast.t','const.typeSystem.deBruijn_subst_3'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK6))))),s('type.ast.t',sK5))) | $spl15),
  inference(superposition,[],[f68,f53])).
fof(f65,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))) ) | $spl10),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  ( ! [X4,X5] : (~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f34,plain,(
  ( ! [X4,X5] : (s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | ~sP0) )),
  inference(cnf_transformation,[],[f26])).
fof(f40,plain,(
  ( ! [X4,X5] : (s('type.list.list'('type.ast.t'),X4) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',X5))))))),s('type.list.list'('type.ast.t'),X4))) | ~p(s(bool,'const.list.EVERY_2'(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',X5),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.list.list'('type.ast.t'),X4)))) | sP0) )),
  inference(cnf_transformation,[],[f30])).
fof(f69,plain,(
  s('type.list.list'('type.ast.t'),sK7) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7))) | $spl16),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  s('type.list.list'('type.ast.t'),sK7) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f3541,plain,(
  s('type.list.list'('type.ast.t'),sK7) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7))) | ($spl10 | $spl92)),
  inference(subsumption_resolution,[],[f3484,f45])).
fof(f3484,plain,(
  ~p(s(bool,'T_0')) | s('type.list.list'('type.ast.t'),sK7) = s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7))) | ($spl10 | $spl92)),
  inference(superposition,[],[f65,f3298])).
fof(f43,plain,(
  s('type.list.list'('type.ast.t'),sK7) != s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.ast.t','type.ast.t'),'const.typeSystem.deBruijn_subst_2'(s('type.num.num','const.num.|48|_0'),s('type.list.list'('type.ast.t'),'const.list.MAP_2'(s(fun('type.num.num','type.ast.t'),'const.ast.Tvar_db_0'),s('type.list.list'('type.num.num'),'const.rich_list.COUNT_LIST_1'(s('type.num.num',sK8))))))),s('type.list.list'('type.ast.t'),sK7))) | p(s(bool,happ(s(fun('type.ast.t',bool),'const.typeSystem.check_freevars_2'(s('type.num.num',sK6),s('type.list.list'('type.list.list'('type.string.char')),'const.list.NIL_0'))),s('type.ast.t',sK5)))) | ~sP0),
  inference(cnf_transformation,[],[f30])).
% SZS output end Proof for thm.typeSysProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 48
% Passive clauses: 684
% Generated clauses: 4843
% Final active clauses: 38
% Final passive clauses: 591
% Input formulas: 9
% Initial clauses: 21
% 
% Duplicate literals: 495
% Trivial inequalities: 69
% Fw subsumption resolutions: 591
% Fw demodulations: 7
% Bw demodulations: 4
% 
% Simple tautologies: 144
% Equational tautologies: 90
% Forward subsumptions: 1936
% 
% Binary resolution: 34
% Forward superposition: 1671
% Backward superposition: 1367
% Self superposition: 275
% Equality factoring: 246
% Equality resolution: 6
% 
% Split clauses: 265
% Split components: 540
% SAT solver clauses: 892
% SAT solver unit clauses: 232
% SAT solver binary clauses: 321
% SAT solver learnt clauses: 22
% SAT solver learnt literals: 54
% 
% Sat splits: 265
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 868
% TWLsolver calls for satisfiability: 46
% 
% Memory used [KB]: 2430
% Time elapsed: 0.546 s
% ------------------------------
% ------------------------------
% Success in time 0.591 s
