Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (61474)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 830
% Passive clauses: 10663
% Generated clauses: 20989
% Final active clauses: 829
% Final passive clauses: 9484
% Input formulas: 133
% Initial clauses: 1009
% 
% Duplicate literals: 320
% Trivial inequalities: 42
% Fw subsumption resolutions: 1152
% Fw demodulations: 616
% Bw demodulations: 1
% 
% Simple tautologies: 287
% Equational tautologies: 57
% Forward subsumptions: 7576
% 
% Binary resolution: 12406
% Factoring: 1786
% Forward superposition: 2086
% Backward superposition: 1411
% Self superposition: 13
% Equality factoring: 4
% Equality resolution: 32
% 
% Split clauses: 246
% Split components: 493
% SAT solver clauses: 486
% SAT solver unit clauses: 19
% SAT solver binary clauses: 83
% 
% Sat splits: 246
% 
% TWLsolver clauses: 486
% TWLsolver calls for satisfiability: 415
% 
% Memory used [KB]: 11641
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% (61498)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 734
% Passive clauses: 3713
% Generated clauses: 14595
% Final active clauses: 726
% Final passive clauses: 2964
% Input formulas: 133
% Initial clauses: 1009
% 
% Duplicate literals: 147
% Trivial inequalities: 9
% Fw subsumption resolutions: 301
% Fw demodulations: 994
% Bw demodulations: 23
% Condensations: 32
% Global subsumptions: 22
% 
% Simple tautologies: 253
% Equational tautologies: 24
% Forward subsumptions: 3757
% 
% Binary resolution: 3131
% Factoring: 74
% Forward superposition: 2446
% Backward superposition: 2069
% Self superposition: 27
% Equality factoring: 2
% Equality resolution: 22
% 
% Split clauses: 37
% Split components: 74
% SAT solver clauses: 5796
% SAT solver unit clauses: 1008
% SAT solver binary clauses: 417
% SAT solver learnt clauses: 44
% SAT solver learnt literals: 10
% 
% Sat splits: 37
% 
% TWLsolver clauses: 5708
% TWLsolver calls for satisfiability: 19478
% 
% Memory used [KB]: 27249
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f32571,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f992,f2014,f2013,f991,f2016,f990,f2018,f2012,f9777,f10174,f10179,f32484])).
fof(f32484,plain,(
  $false | ($spl0 | $spl2)),
  inference(subsumption_resolution,[],[f32483,f31778])).
fof(f31778,plain,(
  ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK240('const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103)),sK104,sK102))))) | ($spl0 | $spl2)),
  inference(unit_resulting_resolution,[],[f31771,f2014])).
fof(f31771,plain,(
  s('type.modSem.v',sK104) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK240('const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103)),sK104,sK102)))) | $spl0),
  inference(unit_resulting_resolution,[],[f31762,f1226])).
fof(f1226,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK240(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f655])).
fof(f655,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK241(X2,X1,X0)))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK240(X2,X1,X0)))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),sK241(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK240(X2,X1,X0))))))) & (! [X3,X4] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X4))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X3))))) | sP9(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK240,sK241])],[f654])).
fof(f654,plain,(
  ! [X0,X1,X2] : ((~sP9(X0,X1,X2) | ? [X5,X6] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X6))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X5))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X6),s('type.list.list'('type.modSem.v'),X5)))))) & (! [X3,X4] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X4))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X3))))) | sP9(X0,X1,X2)))),
  inference(rectify,[],[f653])).
fof(f653,plain,(
  ! [X0,X2,X1] : ((~sP9(X0,X2,X1) | ? [X3,X4] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X4))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X3)))))) & (! [X3,X4] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X4))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X3))))) | sP9(X0,X2,X1)))),
  inference(nnf_transformation,[],[f433])).
fof(f433,plain,(
  ! [X0,X2,X1] : (sP9(X0,X2,X1) <=> ? [X3,X4] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X4))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X3))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f31762,plain,(
  sP9(sK102,sK104,'const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))) | $spl0),
  inference(unit_resulting_resolution,[],[f9346,f6343,f28386,f10181,f1192,f1193,f31713,f1214])).
fof(f1214,plain,(
  ( ! [X2,X0,X1] : (~sP10(X0,X1,X2) | s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',sK239(X2,X1,X0)))) | sP5(X0,X1,X2) | sP7(X0,X1,X2) | sP6(X0,X1,X2) | sP8(X0,X1,X2) | s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',sK238(X2,X1,X0)))) | sP9(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f652])).
fof(f652,plain,(
  ! [X0,X1,X2] : ((~sP10(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',sK238(X2,X1,X0)))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK238(X2,X1,X0))))) | sP8(X0,X1,X2) | sP6(X0,X1,X2) | sP7(X0,X1,X2) | sP5(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',sK239(X2,X1,X0)))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK239(X2,X1,X0))))) | sP9(X0,X1,X2)) & ((! [X4] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X4))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X4)))) & ~sP8(X0,X1,X2) & ~sP6(X0,X1,X2) & ~sP7(X0,X1,X2) & ~sP5(X0,X1,X2) & ! [X3] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X3))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X3)))) & ~sP9(X0,X1,X2)) | sP10(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK238,sK239])],[f651])).
fof(f651,plain,(
  ! [X0,X1,X2] : ((~sP10(X0,X1,X2) | ? [X6] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X6))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X6)))) | sP8(X0,X1,X2) | sP6(X0,X1,X2) | sP7(X0,X1,X2) | sP5(X0,X1,X2) | ? [X5] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5)))) | sP9(X0,X1,X2)) & ((! [X4] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X4))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X4)))) & ~sP8(X0,X1,X2) & ~sP6(X0,X1,X2) & ~sP7(X0,X1,X2) & ~sP5(X0,X1,X2) & ! [X3] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X3))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X3)))) & ~sP9(X0,X1,X2)) | sP10(X0,X1,X2)))),
  inference(rectify,[],[f650])).
fof(f650,plain,(
  ! [X0,X2,X1] : ((~sP10(X0,X2,X1) | ? [X35] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X35))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X35)))) | sP8(X0,X2,X1) | sP6(X0,X2,X1) | sP7(X0,X2,X1) | sP5(X0,X2,X1) | ? [X5] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5)))) | sP9(X0,X2,X1)) & ((! [X35] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X35))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X35)))) & ~sP8(X0,X2,X1) & ~sP6(X0,X2,X1) & ~sP7(X0,X2,X1) & ~sP5(X0,X2,X1) & ! [X5] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5)))) & ~sP9(X0,X2,X1)) | sP10(X0,X2,X1)))),
  inference(flattening,[],[f649])).
fof(f649,plain,(
  ! [X0,X2,X1] : ((~sP10(X0,X2,X1) | (? [X35] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X35))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X35)))) | sP8(X0,X2,X1) | sP6(X0,X2,X1) | sP7(X0,X2,X1) | sP5(X0,X2,X1) | ? [X5] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5)))) | sP9(X0,X2,X1))) & ((! [X35] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X35))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X35)))) & ~sP8(X0,X2,X1) & ~sP6(X0,X2,X1) & ~sP7(X0,X2,X1) & ~sP5(X0,X2,X1) & ! [X5] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5)))) & ~sP9(X0,X2,X1)) | sP10(X0,X2,X1)))),
  inference(nnf_transformation,[],[f434])).
fof(f434,plain,(
  ! [X0,X2,X1] : (sP10(X0,X2,X1) <=> (? [X35] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X35))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X35)))) | sP8(X0,X2,X1) | sP6(X0,X2,X1) | sP7(X0,X2,X1) | sP5(X0,X2,X1) | ? [X5] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5)))) | sP9(X0,X2,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f31713,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,'const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2)))) )),
  inference(unit_resulting_resolution,[],[f1790,f1233])).
fof(f1233,plain,(
  ( ! [X2,X0,X1] : (~sP7(X0,X1,X2) | s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK247(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK250(X2,X1,X0)))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK247(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK248(X2,X1,X0)),s('type.list.list'('type.string.char'),sK249(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f661])).
fof(f661,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK247(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK250(X2,X1,X0)))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK247(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK248(X2,X1,X0)),s('type.list.list'('type.string.char'),sK249(X2,X1,X0)))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK247(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK245(X2,X1,X0)),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK246(X2,X1,X0)),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X2,X1,X0)))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK248(X2,X1,X0)))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK248(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK249(X2,X1,X0)))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK247(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X2,X1,X0))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK250(X2,X1,X0)))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK247(X2,X1,X0)))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK246(X2,X1,X0))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK245(X2,X1,X0)),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK246(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK247(X2,X1,X0)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X2,X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK250(X2,X1,X0))))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6),s('type.list.list'('type.string.char'),X7))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6))),s('type.list.list'('type.string.char'),X7))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))) | sP7(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK245,sK246,sK247,sK248,sK249,sK250,sK251])],[f660])).
fof(f660,plain,(
  ! [X0,X1,X2] : ((~sP7(X0,X1,X2) | ? [X10,X11,X12,X13,X14,X15,X16] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X13),s('type.list.list'('type.string.char'),X14))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X10),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X11),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X13))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X13))),s('type.list.list'('type.string.char'),X14))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X11)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X10),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15)))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6),s('type.list.list'('type.string.char'),X7))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6))),s('type.list.list'('type.string.char'),X7))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))) | sP7(X0,X1,X2)))),
  inference(rectify,[],[f659])).
fof(f659,plain,(
  ! [X0,X2,X1] : ((~sP7(X0,X2,X1) | ? [X18,X19,X20,X21,X22,X23,X24] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21),s('type.list.list'('type.string.char'),X22))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))),s('type.list.list'('type.string.char'),X22))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23)))))) & (! [X18,X19,X20,X21,X22,X23,X24] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21),s('type.list.list'('type.string.char'),X22))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))),s('type.list.list'('type.string.char'),X22))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))) | sP7(X0,X2,X1)))),
  inference(nnf_transformation,[],[f431])).
fof(f431,plain,(
  ! [X0,X2,X1] : (sP7(X0,X2,X1) <=> ? [X18,X19,X20,X21,X22,X23,X24] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21),s('type.list.list'('type.string.char'),X22))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))),s('type.list.list'('type.string.char'),X22))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f1790,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X3))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.list.list'('type.string.char'),X0)))) )),
  inference(cnf_transformation,[],[f315])).
fof(f315,plain,(
  ! [X0,X1,X2,X3] : s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X3))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.list.list'('type.string.char'),X0)))),
  inference(flattening,[],[f314])).
fof(f314,plain,(
  ! [X0,X1,X2,X3] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X3))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.list.list'('type.string.char'),X0)))),
  inference(rectify,[],[f85])).
fof(f85,axiom,(
  ! [X19,X18,X17,X92] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X92))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X18),s('type.list.list'('type.string.char'),X19)))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.semanticPrimitives.v_distinct|split|13')).
fof(f1193,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X1))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0)))) )),
  inference(cnf_transformation,[],[f243])).
fof(f243,plain,(
  ! [X0,X1] : s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X1))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0)))),
  inference(flattening,[],[f242])).
fof(f242,plain,(
  ! [X0,X1] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X1))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0)))),
  inference(rectify,[],[f81])).
fof(f81,axiom,(
  ! [X138,X92] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X92))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X138)))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.semanticPrimitives.v_distinct|split|14')).
fof(f1192,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X1))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0)))) )),
  inference(cnf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X0,X1] : s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X1))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0)))),
  inference(flattening,[],[f240])).
fof(f240,plain,(
  ! [X0,X1] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X1))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0)))),
  inference(rectify,[],[f91])).
fof(f91,axiom,(
  ! [X138,X92] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X92))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X138)))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.semanticPrimitives.v_distinct|split|4')).
fof(f10181,plain,(
  sP10(sK102,sK104,'const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))) | $spl0),
  inference(unit_resulting_resolution,[],[f2012,f1259])).
fof(f1259,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v',X1),s('type.modSem.v',X2)))) | sP10(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f671])).
fof(f671,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v',X1),s('type.modSem.v',X2)))) | sP10(X0,X2,X1)) & (~sP10(X0,X2,X1) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v',X1),s('type.modSem.v',X2))))))),
  inference(nnf_transformation,[],[f435])).
fof(f435,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v',X1),s('type.modSem.v',X2)))) <=> sP10(X0,X2,X1))),
  inference(definition_folding,[],[f381,f434,f433,f432,f431,f430,f429,f428])).
fof(f428,plain,(
  ! [X0,X8,X6,X7,X13,X9] : (sP4(X0,X8,X6,X7,X13,X9) <=> ! [X14] : (~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X14),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9)))))))) | ? [X15,X16,X17] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X15))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X14))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X16),s('type.ast.exp',X17))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.option.option'('type.modSem.v')),X0))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X16),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X16))),s('type.ast.exp',X17))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f429,plain,(
  ! [X0,X2,X1] : (sP5(X0,X2,X1) <=> ? [X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9),s('type.list.list'('type.string.char'),X10))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X11),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X11))),s('type.ast.exp',X12))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X11),s('type.ast.exp',X12))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) & sP4(X0,X8,X6,X7,X13,X9)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f430,plain,(
  ! [X0,X2,X1] : (sP6(X0,X2,X1) <=> ? [X25,X26,X27,X28,X29,X30,X31] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.string.char'),X28),s('type.ast.exp',X29))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))),s('type.list.list'('type.string.char'),X28),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))))))),s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29))))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f432,plain,(
  ! [X0,X2,X1] : (sP8(X0,X2,X1) <=> ? [X32,X33,X34] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.modSem.v'),X34))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X33),s('type.list.list'('type.modSem.v'),X34))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f381,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v',X1),s('type.modSem.v',X2)))) <=> (? [X35] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X35))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X35)))) | ? [X32,X33,X34] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.modSem.v'),X34))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X33),s('type.list.list'('type.modSem.v'),X34))))) | ? [X25,X26,X27,X28,X29,X30,X31] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.string.char'),X28),s('type.ast.exp',X29))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))),s('type.list.list'('type.string.char'),X28),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))))))),s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29))))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))) | ? [X18,X19,X20,X21,X22,X23,X24] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21),s('type.list.list'('type.string.char'),X22))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))),s('type.list.list'('type.string.char'),X22))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))) | ? [X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9),s('type.list.list'('type.string.char'),X10))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X11),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X11))),s('type.ast.exp',X12))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X11),s('type.ast.exp',X12))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) & ! [X14] : (~p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X14),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9)))))))) | ? [X15,X16,X17] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X15))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X14))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X16),s('type.ast.exp',X17))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.option.option'('type.modSem.v')),X0))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X16),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X16))),s('type.ast.exp',X17)))))))))) | ? [X5] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5)))) | ? [X3,X4] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X4))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X3)))))))),
  inference(ennf_transformation,[],[f261])).
fof(f261,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v',X1),s('type.modSem.v',X2)))) <=> (? [X35] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X35))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X35)))) | ? [X32,X33,X34] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.modSem.v'),X34))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X33),s('type.list.list'('type.modSem.v'),X34))))) | ? [X25,X26,X27,X28,X29,X30,X31] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.string.char'),X28),s('type.ast.exp',X29))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))),s('type.list.list'('type.string.char'),X28),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))))))),s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29))))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))) | ? [X18,X19,X20,X21,X22,X23,X24] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21),s('type.list.list'('type.string.char'),X22))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X21))),s('type.list.list'('type.string.char'),X22))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X18),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X19),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X20))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X24))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X23))))) | ? [X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9),s('type.list.list'('type.string.char'),X10))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X11),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X11))),s('type.ast.exp',X12))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X11),s('type.ast.exp',X12))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) & ! [X14] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X14),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9)))))))) => ? [X15,X16,X17] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X15))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X14))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X15),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X0)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X16),s('type.ast.exp',X17))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X15),s('type.list.list'('type.option.option'('type.modSem.v')),X0))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X16),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X16))),s('type.ast.exp',X17)))))))))) | ? [X5] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X5))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5)))) | ? [X3,X4] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X4))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X3)))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X17,X18,X19] : (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.semanticPrimitives.v',X18),s('type.modSem.v',X19)))) <=> (? [X20] : (s('type.semanticPrimitives.v',X18) = s('type.semanticPrimitives.v','const.semanticPrimitives.Litv_1'(s('type.ast.lit',X20))) & s('type.modSem.v',X19) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X20)))) | ? [X21,X7,X9] : (s('type.semanticPrimitives.v',X18) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X21),s('type.list.list'('type.semanticPrimitives.v'),X7))) & s('type.modSem.v',X19) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X21),s('type.list.list'('type.modSem.v'),X9))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.modSem.v'),X9))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.semanticPrimitives.v',X18) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.string.char'),X25),s('type.ast.exp',X26))) & s('type.modSem.v',X19) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28))),s('type.list.list'('type.string.char'),X25),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X22),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28))))))))),s('type.list.list'('type.string.char'),X25))),s('type.ast.exp',X26))))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X22),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))) | ? [X22,X23,X24,X29,X25,X27,X28] : (s('type.semanticPrimitives.v',X18) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X29),s('type.list.list'('type.string.char'),X25))) & s('type.modSem.v',X19) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),'const.source_to_mod.compile_funs_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X22),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.UNION_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X29))))))))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X29))),s('type.list.list'('type.string.char'),X25))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X22),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X28))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X27))))) | ? [X22,X23,X24,X29,X25,X30,X26,X31] : (s('type.semanticPrimitives.v',X18) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X29),s('type.list.list'('type.string.char'),X25))) & s('type.modSem.v',X19) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X30),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X22),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X31))),s('type.list.list'('type.string.char'),X30))),s('type.ast.exp',X26))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X22),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X29))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X31))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X30),s('type.ast.exp',X26))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X29))) & ! [X32] : (p(s(bool,'const.bool.IN_2'(s('type.list.list'('type.string.char'),X32),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X29)))))))) => ? [X33,X34,X35] : (s('type.option.option'('type.num.num'),'const.option.SOME_1'(s('type.num.num',X33))) = s('type.option.option'('type.num.num'),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FEMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X31))),s('type.list.list'('type.string.char'),X32))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X33),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.option.option'('type.modSem.v')),X17)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X34),s('type.ast.exp',X35))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X32),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X29))) & s('type.option.option'('type.modSem.v'),'const.list.EL_2'(s('type.num.num',X33),s('type.list.list'('type.option.option'('type.modSem.v')),X17))) = s('type.option.option'('type.modSem.v'),'const.option.SOME_1'(s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X24))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X34),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X22),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X23),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X31))),s('type.list.list'('type.string.char'),X34))),s('type.ast.exp',X35)))))))))) | ? [X36] : (s('type.semanticPrimitives.v',X18) = s('type.semanticPrimitives.v','const.semanticPrimitives.Loc_1'(s('type.num.num',X36))) & s('type.modSem.v',X19) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X36)))) | ? [X37,X7] : (s('type.semanticPrimitives.v',X18) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X7))) & s('type.modSem.v',X19) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X37))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X17),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.modSem.v'),X37)))))))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.source_to_modProof.v_rel_cases|split|0')).
fof(f28386,plain,(
  ( ! [X2,X0,X1] : (~sP6(X0,X1,'const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2)))) )),
  inference(unit_resulting_resolution,[],[f1787,f1239])).
fof(f1239,plain,(
  ( ! [X2,X0,X1] : (~sP6(X0,X1,X2) | s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK254(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK257(X2,X1,X0)))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK254(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK255(X2,X1,X0)),s('type.ast.exp',sK256(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f664])).
fof(f664,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK254(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK257(X2,X1,X0)))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK254(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK255(X2,X1,X0)),s('type.ast.exp',sK256(X2,X1,X0)))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK254(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK258(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK255(X2,X1,X0)),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK252(X2,X1,X0)),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK253(X2,X1,X0)),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK258(X2,X1,X0)))))))))),s('type.list.list'('type.string.char'),sK255(X2,X1,X0)))),s('type.ast.exp',sK256(X2,X1,X0)))))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK254(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK258(X2,X1,X0))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK257(X2,X1,X0)))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK254(X2,X1,X0)))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK253(X2,X1,X0))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK252(X2,X1,X0)),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK253(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK254(X2,X1,X0)))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK258(X2,X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),sK257(X2,X1,X0))))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.string.char'),X6),s('type.ast.exp',X7))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))),s('type.list.list'('type.string.char'),X6),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))))))))),s('type.list.list'('type.string.char'),X6))),s('type.ast.exp',X7))))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))) | sP6(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK252,sK253,sK254,sK255,sK256,sK257,sK258])],[f663])).
fof(f663,plain,(
  ! [X0,X1,X2] : ((~sP6(X0,X1,X2) | ? [X10,X11,X12,X13,X14,X15,X16] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.string.char'),X13),s('type.ast.exp',X14))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.string.char'),X13),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X10),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X11),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))))))))),s('type.list.list'('type.string.char'),X13))),s('type.ast.exp',X14))))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X11)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X10),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X12))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X15)))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.string.char'),X6),s('type.ast.exp',X7))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))),s('type.list.list'('type.string.char'),X6),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))))))))),s('type.list.list'('type.string.char'),X6))),s('type.ast.exp',X7))))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X9))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X8))))) | sP6(X0,X1,X2)))),
  inference(rectify,[],[f662])).
fof(f662,plain,(
  ! [X0,X2,X1] : ((~sP6(X0,X2,X1) | ? [X25,X26,X27,X28,X29,X30,X31] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.string.char'),X28),s('type.ast.exp',X29))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))),s('type.list.list'('type.string.char'),X28),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))))))),s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29))))) & p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30)))))) & (! [X25,X26,X27,X28,X29,X30,X31] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),'const.semanticPrimitives.environment_v_fupd_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'))),'const.combin.K_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.list.APPEND_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.string.char'),X28),s('type.ast.exp',X29))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))),s('type.list.list'('type.string.char'),X28),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.DRESTRICT_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.COMPL_1'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))))))),s('type.list.list'('type.string.char'),X28))),s('type.ast.exp',X29))))) | ~p(s(bool,'const.source_to_modProof.env_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31)))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.DIFF_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X25),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X27))),s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X31))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),X30))))) | sP6(X0,X2,X1)))),
  inference(nnf_transformation,[],[f430])).
fof(f1787,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X3))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.string.char'),X1),s('type.ast.exp',X0)))) )),
  inference(cnf_transformation,[],[f309])).
fof(f309,plain,(
  ! [X0,X1,X2,X3] : s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X3))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.string.char'),X1),s('type.ast.exp',X0)))),
  inference(flattening,[],[f308])).
fof(f308,plain,(
  ! [X0,X1,X2,X3] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X3))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.string.char'),X1),s('type.ast.exp',X0)))),
  inference(rectify,[],[f86])).
fof(f86,axiom,(
  ! [X19,X18,X17,X92] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X92))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Closure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X17),s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19)))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.semanticPrimitives.v_distinct|split|11')).
fof(f6343,plain,(
  ( ! [X2,X0,X1] : (~sP8(X0,X1,'const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2)))) )),
  inference(unit_resulting_resolution,[],[f1650,f1229])).
fof(f1229,plain,(
  ( ! [X2,X0,X1] : (~sP8(X0,X1,X2) | s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),sK242(X2,X1,X0)),s('type.list.list'('type.semanticPrimitives.v'),sK243(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f658])).
fof(f658,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),sK242(X2,X1,X0)),s('type.list.list'('type.semanticPrimitives.v'),sK243(X2,X1,X0)))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),sK242(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK244(X2,X1,X0)))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),sK243(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK244(X2,X1,X0))))))) & (! [X3,X4,X5] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X3),s('type.list.list'('type.semanticPrimitives.v'),X4))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X3),s('type.list.list'('type.modSem.v'),X5))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X5))))) | sP8(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK242,sK243,sK244])],[f657])).
fof(f657,plain,(
  ! [X0,X1,X2] : ((~sP8(X0,X1,X2) | ? [X6,X7,X8] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X6),s('type.list.list'('type.semanticPrimitives.v'),X7))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X6),s('type.list.list'('type.modSem.v'),X8))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.modSem.v'),X8)))))) & (! [X3,X4,X5] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X3),s('type.list.list'('type.semanticPrimitives.v'),X4))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X3),s('type.list.list'('type.modSem.v'),X5))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X4),s('type.list.list'('type.modSem.v'),X5))))) | sP8(X0,X1,X2)))),
  inference(rectify,[],[f656])).
fof(f656,plain,(
  ! [X0,X2,X1] : ((~sP8(X0,X2,X1) | ? [X32,X33,X34] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.modSem.v'),X34))) & p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X33),s('type.list.list'('type.modSem.v'),X34)))))) & (! [X32,X33,X34] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.semanticPrimitives.v'),X33))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X32),s('type.list.list'('type.modSem.v'),X34))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X33),s('type.list.list'('type.modSem.v'),X34))))) | sP8(X0,X2,X1)))),
  inference(nnf_transformation,[],[f432])).
fof(f1650,plain,(
  ( ! [X2,X0,X1] : (s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X1),s('type.list.list'('type.semanticPrimitives.v'),X0)))) )),
  inference(cnf_transformation,[],[f289])).
fof(f289,plain,(
  ! [X0,X1,X2] : s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X1),s('type.list.list'('type.semanticPrimitives.v'),X0)))),
  inference(flattening,[],[f288])).
fof(f288,plain,(
  ! [X0,X1,X2] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X1),s('type.list.list'('type.semanticPrimitives.v'),X0)))),
  inference(rectify,[],[f87])).
fof(f87,axiom,(
  ! [X18,X17,X92] : ~s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X92))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X17),s('type.list.list'('type.semanticPrimitives.v'),X18)))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.semanticPrimitives.v_distinct|split|8')).
fof(f9346,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,'const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2)))) )),
  inference(unit_resulting_resolution,[],[f1790,f1245])).
fof(f1245,plain,(
  ( ! [X2,X0,X1] : (~sP5(X0,X1,X2) | s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK261(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK262(X2,X1,X0)),s('type.list.list'('type.string.char'),sK263(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f667])).
fof(f667,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK261(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK262(X2,X1,X0)),s('type.list.list'('type.string.char'),sK263(X2,X1,X0)))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK261(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),sK264(X2,X1,X0)),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK259(X2,X1,X0)),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK260(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),sK266(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK264(X2,X1,X0)))),s('type.ast.exp',sK265(X2,X1,X0)))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK261(X2,X1,X0)))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK260(X2,X1,X0))))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),sK259(X2,X1,X0)),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),sK260(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK261(X2,X1,X0)))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK261(X2,X1,X0))))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK262(X2,X1,X0)))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),sK266(X2,X1,X0)))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK264(X2,X1,X0)),s('type.ast.exp',sK265(X2,X1,X0)))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),sK263(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK262(X2,X1,X0)))) & sP4(X0,sK261(X2,X1,X0),sK259(X2,X1,X0),sK260(X2,X1,X0),sK266(X2,X1,X0),sK262(X2,X1,X0)))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6),s('type.list.list'('type.string.char'),X7))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X8),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X10))),s('type.list.list'('type.string.char'),X8))),s('type.ast.exp',X9))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5)))))) | s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X10))))) | s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.ast.exp',X9))))) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6))) | ~sP4(X0,X5,X3,X4,X10,X6)) | sP5(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK259,sK260,sK261,sK262,sK263,sK264,sK265,sK266])],[f666])).
fof(f666,plain,(
  ! [X0,X1,X2] : ((~sP5(X0,X1,X2) | ? [X11,X12,X13,X14,X15,X16,X17,X18] : (s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X14),s('type.list.list'('type.string.char'),X15))) & s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X16),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X18))),s('type.list.list'('type.string.char'),X16))),s('type.ast.exp',X17))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X11),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X13)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X14))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X18))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X16),s('type.ast.exp',X17))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X14))) & sP4(X0,X13,X11,X12,X18,X14))) & (! [X3,X4,X5,X6,X7,X8,X9,X10] : (s('type.semanticPrimitives.v',X2) != s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6),s('type.list.list'('type.string.char'),X7))) | s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X8),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X10))),s('type.list.list'('type.string.char'),X8))),s('type.ast.exp',X9))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X3),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X5)))))) | s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X10))))) | s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.ast.exp',X9))))) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X6))) | ~sP4(X0,X5,X3,X4,X10,X6)) | sP5(X0,X1,X2)))),
  inference(rectify,[],[f665])).
fof(f665,plain,(
  ! [X0,X2,X1] : ((~sP5(X0,X2,X1) | ? [X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.semanticPrimitives.v',X1) = s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9),s('type.list.list'('type.string.char'),X10))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X11),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X11))),s('type.ast.exp',X12))))) & p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7)))))) & p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8)))))) & s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) = s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))))) & s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X11),s('type.ast.exp',X12))))) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) & sP4(X0,X8,X6,X7,X13,X9))) & (! [X6,X7,X8,X9,X10,X11,X12,X13] : (s('type.semanticPrimitives.v',X1) != s('type.semanticPrimitives.v','const.semanticPrimitives.Recclosure_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9),s('type.list.list'('type.string.char'),X10))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'const.semanticPrimitives.environment_c_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.string.char'),X11),s('type.modLang.exp','const.source_to_mod.compile_exp_3'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.fdomsub_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),'const.finite_map.FUPDATE_LIST_2'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))),s('type.list.list'('type.string.char'),X11))),s('type.ast.exp',X12))))) | ~p(s(bool,'const.pred_set.SUBSET_2'(s(fun('type.list.list'('type.string.char'),bool),'const.list.LIST_TO_SET_1'(s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))))))),s(fun('type.list.list'('type.string.char'),bool),'const.finite_map.FDOM_1'(s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7)))))) | ~p(s(bool,'const.source_to_modProof.global_env_inv_6'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num')),X6),s('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.num.num'),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')))),'const.semanticPrimitives.environment_m_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8))),s(fun('type.list.list'('type.string.char'),bool),'const.pred_set.EMPTY_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.v')),'const.semanticPrimitives.environment_v_1'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X8)))))) | s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) != s('type.list.list'('type.list.list'('type.string.char')),'const.list.MAP_2'(s(fun('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num'),'type.list.list'('type.string.char')),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),'const.list.REVERSE_1'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.num.num')),X13))))) | s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X11),s('type.ast.exp',X12))))) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp')),'const.semanticPrimitives.find_recfun_2'(s('type.list.list'('type.string.char'),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X9))) | ~sP4(X0,X8,X6,X7,X13,X9)) | sP5(X0,X2,X1)))),
  inference(nnf_transformation,[],[f429])).
fof(f32483,plain,(
  p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK240('const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103)),sK104,sK102))))) | $spl0),
  inference(backward_demodulation,[],[f32290,f31770])).
fof(f31770,plain,(
  p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK241('const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103)),sK104,sK102)),s('type.list.list'('type.modSem.v'),sK240('const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103)),sK104,sK102))))) | $spl0),
  inference(unit_resulting_resolution,[],[f31762,f1227])).
fof(f1227,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),sK241(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK240(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f655])).
fof(f32290,plain,(
  s('type.list.list'('type.semanticPrimitives.v'),sK103) = s('type.list.list'('type.semanticPrimitives.v'),sK241('const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103)),sK104,sK102)) | $spl0),
  inference(unit_resulting_resolution,[],[f31772,f1164])).
fof(f1164,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))) | s('type.list.list'('type.semanticPrimitives.v'),X0) = s('type.list.list'('type.semanticPrimitives.v'),X1)) )),
  inference(cnf_transformation,[],[f624])).
fof(f624,plain,(
  ! [X0,X1] : ((s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0))) != s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))) | s('type.list.list'('type.semanticPrimitives.v'),X0) = s('type.list.list'('type.semanticPrimitives.v'),X1)) & (s('type.list.list'('type.semanticPrimitives.v'),X0) != s('type.list.list'('type.semanticPrimitives.v'),X1) | s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1)))))),
  inference(nnf_transformation,[],[f231])).
fof(f231,plain,(
  ! [X0,X1] : (s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X0))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))) <=> s('type.list.list'('type.semanticPrimitives.v'),X0) = s('type.list.list'('type.semanticPrimitives.v'),X1))),
  inference(rectify,[],[f102])).
fof(f102,axiom,(
  ! [X92,X138] : (s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X92))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X138))) <=> s('type.list.list'('type.semanticPrimitives.v'),X92) = s('type.list.list'('type.semanticPrimitives.v'),X138))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.semanticPrimitives.v_|49||49||split|5')).
fof(f31772,plain,(
  s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK241('const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103)),sK104,sK102)))) | $spl0),
  inference(unit_resulting_resolution,[],[f31762,f1225])).
fof(f1225,plain,(
  ( ! [X2,X0,X1] : (~sP9(X0,X1,X2) | s('type.semanticPrimitives.v',X2) = s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK241(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f655])).
fof(f10179,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f10178,f993])).
fof(f993,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.source_to_modProof.v_rel_eqns|split|4',aHL_TRUTH)).
fof(f10178,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f10172,f2077])).
fof(f2077,plain,(
  s(bool,'T_0') = s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK105))) | $spl6),
  inference(unit_resulting_resolution,[],[f2018,f1053])).
fof(f1053,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f551])).
fof(f551,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X81] : (s(bool,'T_0') = s(bool,X81) <=> p(s(bool,X81)))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.bool.EQ_CLAUSES|split|0')).
fof(f10172,plain,(
  ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK105)))) | ($spl2 | $spl4)),
  inference(trivial_inequality_removal,[],[f10171])).
fof(f10171,plain,(
  s('type.modSem.v',sK104) != s('type.modSem.v',sK104) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK105)))) | ($spl2 | $spl4)),
  inference(superposition,[],[f2014,f2016])).
fof(f10174,plain,(
  $false | ($spl2 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f10173,f993])).
fof(f10173,plain,(
  ~p(s(bool,'T_0')) | ($spl2 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f10167,f2077])).
fof(f10167,plain,(
  ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK105)))) | ($spl2 | $spl4)),
  inference(unit_resulting_resolution,[],[f2016,f2014])).
fof(f9777,plain,(
  $false | ($spl1 | $spl4 | $spl6)),
  inference(subsumption_resolution,[],[f9776,f2019])).
fof(f2019,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f996,f993])).
fof(f996,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f543])).
fof(f543,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f136])).
fof(f136,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f55])).
fof(f55,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.bool.NOT_CLAUSES|split|2')).
fof(f9776,plain,(
  p(s(bool,'F_0')) | ($spl1 | $spl4 | $spl6)),
  inference(forward_demodulation,[],[f9775,f2086])).
fof(f2086,plain,(
  s(bool,'F_0') = s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104))) | $spl1),
  inference(unit_resulting_resolution,[],[f2013,f1057])).
fof(f1057,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f553])).
fof(f553,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f161])).
fof(f161,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X81] : (s(bool,'F_0') = s(bool,X81) <=> ~p(s(bool,X81)))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.bool.EQ_CLAUSES|split|3')).
fof(f9775,plain,(
  p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104)))) | ($spl4 | $spl6)),
  inference(forward_demodulation,[],[f9774,f2016])).
fof(f9774,plain,(
  p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK105)))))) | $spl6),
  inference(subsumption_resolution,[],[f9763,f993])).
fof(f9763,plain,(
  ~p(s(bool,'T_0')) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK105)))))) | $spl6),
  inference(superposition,[],[f1213,f2077])).
fof(f1213,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.modSem.v'),X1)))) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))))))) )),
  inference(cnf_transformation,[],[f380])).
fof(f380,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.modSem.v'),X1)))) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1)))))))),
  inference(ennf_transformation,[],[f260])).
fof(f260,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X2),s('type.list.list'('type.modSem.v'),X1)))) => p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X2))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1)))))))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X37,X7] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.modSem.v'),X37)))) => p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X7))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X37)))))))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.source_to_modProof.v_rel_rules|split|6')).
fof(f2012,plain,(
  p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104)))) | $spl0),
  inference(cnf_transformation,[],[f2012_D])).
fof(f2012_D,plain,(
  p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f2018,plain,(
  p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK105)))) | $spl6),
  inference(cnf_transformation,[],[f2018_D])).
fof(f2018_D,plain,(
  p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK105)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f990,plain,(
  p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK105)))) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104))))),
  inference(cnf_transformation,[],[f542])).
fof(f542,plain,(
  (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104)))) | (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),sK105)))) & s('type.modSem.v',sK104) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK105))))) & (~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104)))) | ! [X3] : (~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),X3)))) | s('type.modSem.v',sK104) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK102,sK103,sK104,sK105])],[f541])).
fof(f541,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.modSem.v',X2)))) | ? [X4] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X4)))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))))) & (~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.modSem.v',X2)))) | ! [X3] : (~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X3)))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))))))),
  inference(rectify,[],[f540])).
fof(f540,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.modSem.v',X2)))) | ? [X3] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X3)))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))))) & (~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.modSem.v',X2)))) | ! [X3] : (~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X3)))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))))))),
  inference(nnf_transformation,[],[f337])).
fof(f337,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.modSem.v',X2)))) <~> ? [X3] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X3)))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3)))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X1))),s('type.modSem.v',X2)))) <=> ? [X3] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X0),s('type.list.list'('type.semanticPrimitives.v'),X1),s('type.list.list'('type.modSem.v'),X3)))) & s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X7))),s('type.modSem.v',X8)))) <=> ? [X9] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.modSem.v'),X9)))) & s('type.modSem.v',X8) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),X7))),s('type.modSem.v',X8)))) <=> ? [X9] : (p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.list.list'('type.semanticPrimitives.v'),X7),s('type.list.list'('type.modSem.v'),X9)))) & s('type.modSem.v',X8) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X9)))))),
  file('thm.source_to_modProof.v_rel_eqns|split|4','thm.source_to_modProof.v_rel_eqns|split|4')).
fof(f2016,plain,(
  s('type.modSem.v',sK104) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK105))) | $spl4),
  inference(cnf_transformation,[],[f2016_D])).
fof(f2016_D,plain,(
  s('type.modSem.v',sK104) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK105))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f991,plain,(
  s('type.modSem.v',sK104) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK105))) | p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104))))),
  inference(cnf_transformation,[],[f542])).
fof(f2013,plain,(
  ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104)))) | $spl1),
  inference(cnf_transformation,[],[f2013_D])).
fof(f2013_D,plain,(
  ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f2014,plain,(
  ( ! [X3] : (s('type.modSem.v',sK104) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),X3))))) ) | $spl2),
  inference(cnf_transformation,[],[f2014_D])).
fof(f2014_D,plain,(
  ( ! [X3] : (s('type.modSem.v',sK104) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),X3))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f992,plain,(
  ( ! [X3] : (s('type.modSem.v',sK104) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | ~p(s(bool,'const.source_to_modProof.vs_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.list.list'('type.semanticPrimitives.v'),sK103),s('type.list.list'('type.modSem.v'),X3)))) | ~p(s(bool,'const.source_to_modProof.v_rel_3'(s('type.list.list'('type.option.option'('type.modSem.v')),sK102),s('type.semanticPrimitives.v','const.semanticPrimitives.Vectorv_1'(s('type.list.list'('type.semanticPrimitives.v'),sK103))),s('type.modSem.v',sK104))))) )),
  inference(cnf_transformation,[],[f542])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1677
% Passive clauses: 5285
% Generated clauses: 31587
% Final active clauses: 1582
% Final passive clauses: 3390
% Input formulas: 133
% Initial clauses: 1009
% 
% Duplicate literals: 35
% Trivial inequalities: 10
% Fw subsumption resolutions: 171
% Fw demodulations: 7868
% Bw demodulations: 43
% Condensations: 40
% 
% Simple tautologies: 100
% Equational tautologies: 45
% Forward subsumptions: 15882
% Fw demodulations to eq. taut.: 2144
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 10466
% Factoring: 1
% Forward superposition: 7994
% Backward superposition: 3863
% Self superposition: 20
% Equality factoring: 2
% Equality resolution: 51
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 5297
% SAT solver unit clauses: 1054
% SAT solver binary clauses: 2612
% 
% Sat splits: 3
% Sat splitting refutations: 4
% 
% Memory used [KB]: 39274
% Time elapsed: 1.629 s
% ------------------------------
% ------------------------------
% Success in time 3.02 s
