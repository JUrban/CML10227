Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.RedBlackSet
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.RedBlackSet
% SZS output start Proof for thm.RedBlackSet
fof(f399,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f396,f223,f21,f32,f30,f275,f280,f278,f22,f33,f31,f322,f40,f43,f41,f52])).
fof(f52,plain,(
  $false | $spl4),
  inference(resolution,[],[f49,f23])).
fof(f23,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.RedBlackSet.color2num_num2color',aHL_TRUTH)).
fof(f49,plain,(
  ( ! [X2] : (~p(s(bool,X2))) ) | $spl4),
  inference(superposition,[],[f24,f41])).
fof(f24,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f10])).
fof(f10,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.RedBlackSet.color2num_num2color',aHL_FALSITY)).
fof(f41,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) | $spl4),
  inference(cnf_transformation,[],[f41_D])).
fof(f41_D,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f43,plain,(
  s(bool,'T_0') != s(bool,'F_0') | $spl7),
  inference(cnf_transformation,[],[f43_D])).
fof(f43_D,plain,(
  s(bool,'T_0') != s(bool,'F_0') <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f40,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'F_0') | s(bool,'F_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f26])).
fof(f26,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.RedBlackSet.color2num_num2color',aHL_BOOL_CASES)).
fof(f322,plain,(
  $false | ($spl7 | $spl8)),
  inference(trivial_inequality_removal,[],[f317])).
fof(f317,plain,(
  s(bool,'T_0') != s(bool,'T_0') | ($spl7 | $spl8)),
  inference(superposition,[],[f43,f278])).
fof(f31,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl1),
  inference(cnf_transformation,[],[f31_D])).
fof(f31_D,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f33,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) | $spl3),
  inference(cnf_transformation,[],[f33_D])).
fof(f33_D,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f22,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(cnf_transformation,[],[f18])).
fof(f18,plain,(
  (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num',sK0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0)))))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num',sK0) != s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0])],[f17])).
fof(f17,plain,(
  ? [X0] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num',X0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0)))))) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num',X0) != s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0)))))))),
  inference(nnf_transformation,[],[f15])).
fof(f15,plain,(
  ? [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <~> s('type.num.num',X0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0))))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.num.num',X0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.num.num',X6) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.num.num',X6) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X6))))))),
  file('thm.RedBlackSet.color2num_num2color','thm.RedBlackSet.color2num_num2color')).
fof(f278,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) | $spl8),
  inference(cnf_transformation,[],[f278_D])).
fof(f278_D,plain,(
  ( ! [X9] : (s(bool,'T_0') = s(bool,X9)) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f280,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl10),
  inference(cnf_transformation,[],[f280_D])).
fof(f280_D,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f275,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X9)) ) | $spl1),
  inference(duplicate_literal_removal,[],[f239])).
fof(f239,plain,(
  ( ! [X9] : (s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl1),
  inference(superposition,[],[f233,f26])).
fof(f233,plain,(
  ( ! [X0] : (s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(subsumption_resolution,[],[f228,f23])).
fof(f228,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s(bool,X0) = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | s(bool,'T_0') = s(bool,X0)) ) | $spl1),
  inference(superposition,[],[f31,f35])).
fof(f35,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f26,f26])).
fof(f30,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl0),
  inference(cnf_transformation,[],[f30_D])).
fof(f30_D,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f32,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) | $spl2),
  inference(cnf_transformation,[],[f32_D])).
fof(f32_D,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f21,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),
  inference(cnf_transformation,[],[f18])).
fof(f223,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f222,f33])).
fof(f222,plain,(
  s('type.num.num',sK0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) | $spl0),
  inference(subsumption_resolution,[],[f216,f23])).
fof(f216,plain,(
  ~p(s(bool,'T_0')) | s('type.num.num',sK0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) | $spl0),
  inference(superposition,[],[f27,f65])).
fof(f65,plain,(
  s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl0),
  inference(subsumption_resolution,[],[f64,f24])).
fof(f64,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))) | $spl0),
  inference(superposition,[],[f30,f26])).
fof(f27,plain,(
  ( ! [X0] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num',X0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0] : ((~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | s('type.num.num',X0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0)))))) & (s('type.num.num',X0) != s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),
  inference(nnf_transformation,[],[f12])).
fof(f12,plain,(
  ! [X0] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.num.num',X0) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X6] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X6),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) <=> s('type.num.num',X6) = s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X6))))))),
  file('thm.RedBlackSet.color2num_num2color','thm.RedBlackSet.color_BIJ|split|1')).
fof(f396,plain,(
  $false | ($spl2 | $spl10)),
  inference(subsumption_resolution,[],[f395,f24])).
fof(f395,plain,(
  p(s(bool,'F_0')) | ($spl2 | $spl10)),
  inference(forward_demodulation,[],[f394,f280])).
fof(f394,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl2),
  inference(forward_demodulation,[],[f393,f32])).
fof(f393,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl2),
  inference(subsumption_resolution,[],[f388,f32])).
fof(f388,plain,(
  s('type.num.num',sK0) != s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',sK0))))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))) | $spl2),
  inference(superposition,[],[f28,f32])).
fof(f28,plain,(
  ( ! [X0] : (s('type.num.num',X0) != s('type.num.num','const.RedBlackSet.color2num_1'(s('type.RedBlackSet.color','const.RedBlackSet.num2color_1'(s('type.num.num',X0))))) | p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) )),
  inference(cnf_transformation,[],[f19])).
% SZS output end Proof for thm.RedBlackSet
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 24
% Passive clauses: 46
% Generated clauses: 360
% Final active clauses: 14
% Final passive clauses: 12
% Input formulas: 7
% Initial clauses: 9
% 
% Duplicate literals: 63
% Trivial inequalities: 7
% Fw subsumption resolutions: 15
% Fw demodulations: 5
% Bw demodulations: 5
% 
% Simple tautologies: 20
% Equational tautologies: 15
% Forward subsumptions: 179
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 10
% Forward superposition: 101
% Backward superposition: 76
% Self superposition: 29
% Equality factoring: 28
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 15
% SAT solver unit clauses: 3
% SAT solver binary clauses: 8
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 6
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 12
% TWLsolver calls for satisfiability: 6
% 
% Memory used [KB]: 767
% Time elapsed: 0.012 s
% ------------------------------
% ------------------------------
% Success in time 0.004 s
