Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlProps
% SZS output start Proof for thm.bvlProps
fof(f5063,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f5062,f223,f424,f422,f420,f418,f416,f414,f412,f410,f408,f406,f5060,f5059,f5058,f5057,f4671,f4670,f4669,f4668,f5061])).
fof(f5061,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f414,f229])).
fof(f229,plain,(
  ( ! [X14,X13] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X13),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK14),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK16),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK17),s('type.bvl.exp',sK18),s('type.bvl.exp',sK19))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK20),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK21),s('type.bvl.exp',sK22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK23),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK24))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK26),s('type.bvl.exp',sK27))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK28),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK30),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK31),s('type.option.option'('type.num.num'),sK32),s('type.list.list'('type.bvl.exp'),sK33))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK34),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK35),s('type.list.list'('type.bvl.exp'),sK36))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK37),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK40),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK38),s('type.list.list'('type.bvl.exp'),sK39)))))))) & ! [X28] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X28),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) & ! [X24,X25,X26,X27] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X24),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27))))))) & ! [X22,X23] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X22),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X18,X19,X20,X21] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X18),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X19),s('type.bvl.exp',X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X15,X16,X17] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X15),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X16),s('type.bvl.exp',X17))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X13,X14] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X13),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X11,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X11),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X8,X9,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X5,X6,X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X5),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X6),s('type.bvl.exp',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X1,X2,X3,X4] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X1),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28,sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36,sK37,sK38,sK39,sK40])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X56] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X56),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X54,X55] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X54),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X55))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X50,X51,X52,X53] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X50),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X51),s('type.bvl.exp',X52),s('type.bvl.exp',X53))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X47,X48,X49] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X47),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X48),s('type.bvl.exp',X49))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X45,X46] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X45),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X46))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X42,X43,X44] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X42),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X43),s('type.bvl.exp',X44))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X40,X41] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X40),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X41))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X36,X37,X38,X39] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X36),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X37),s('type.option.option'('type.num.num'),X38),s('type.list.list'('type.bvl.exp'),X39))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X33,X34,X35] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X33),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X34),s('type.list.list'('type.bvl.exp'),X35))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X29,X30,X31,X32] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X29),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X32),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X30),s('type.list.list'('type.bvl.exp'),X31)))))))) & ! [X28] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X28),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) & ! [X24,X25,X26,X27] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X24),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27))))))) & ! [X22,X23] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X22),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X18,X19,X20,X21] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X18),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X19),s('type.bvl.exp',X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X15,X16,X17] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X15),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X16),s('type.bvl.exp',X17))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X13,X14] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X13),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X14))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X11,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X11),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X8,X9,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X5,X6,X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X5),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X6),s('type.bvl.exp',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X1,X2,X3,X4] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X1),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X28] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X28),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X26,X27] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X26),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X27))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X22,X23,X24,X25] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X22),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X23),s('type.bvl.exp',X24),s('type.bvl.exp',X25))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X19,X20,X21] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X19),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X17,X18] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X17),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X18))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X14,X15,X16] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X14),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X15),s('type.bvl.exp',X16))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X12,X13] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X12),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X8,X9,X10,X11] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X9),s('type.option.option'('type.num.num'),X10),s('type.list.list'('type.bvl.exp'),X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X5,X6,X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X5),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X6),s('type.list.list'('type.bvl.exp'),X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X1,X2,X3,X4] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X1),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X4),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),X3)))))))) & ! [X56] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X56),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) & ! [X52,X53,X54,X55] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X52),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X53),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X54),s('type.list.list'('type.bvl.exp'),X55))))))) & ! [X50,X51] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X50),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X51))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X46,X47,X48,X49] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X46),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X47),s('type.bvl.exp',X48),s('type.bvl.exp',X49))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X43,X44,X45] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X43),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X44),s('type.bvl.exp',X45))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X41,X42] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X41),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X42))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X39,X40] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X39),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X40))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X36,X37,X38] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X36),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X37),s('type.list.list'('type.bvl.exp'),X38))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X33,X34,X35] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X33),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X34),s('type.bvl.exp',X35))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X29,X30,X31,X32] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X29),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X30),s('type.option.option'('type.num.num'),X31),s('type.list.list'('type.bvl.exp'),X32))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X28] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X28),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X26,X27] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X26),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X27))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X22,X23,X24,X25] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X22),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X23),s('type.bvl.exp',X24),s('type.bvl.exp',X25))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X19,X20,X21] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X19),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X17,X18] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X17),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X18))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X14,X15,X16] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X14),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X15),s('type.bvl.exp',X16))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X12,X13] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X12),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X8,X9,X10,X11] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X9),s('type.option.option'('type.num.num'),X10),s('type.list.list'('type.bvl.exp'),X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X5,X6,X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X5),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X6),s('type.list.list'('type.bvl.exp'),X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X1,X2,X3,X4] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X1),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X4),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),X3)))))))) & (! [X56] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X56),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) & ! [X52,X53,X54,X55] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X52),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X53),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X54),s('type.list.list'('type.bvl.exp'),X55))))))) & ! [X50,X51] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X50),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X51))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X46,X47,X48,X49] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X46),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X47),s('type.bvl.exp',X48),s('type.bvl.exp',X49))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X43,X44,X45] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X43),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X44),s('type.bvl.exp',X45))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X41,X42] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X41),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X42))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X39,X40] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X39),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X40))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X36,X37,X38] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X36),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X37),s('type.list.list'('type.bvl.exp'),X38))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X33,X34,X35] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X33),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X34),s('type.bvl.exp',X35))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) & ! [X29,X30,X31,X32] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X29),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X30),s('type.option.option'('type.num.num'),X31),s('type.list.list'('type.bvl.exp'),X32))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X28] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X28),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X26,X27] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X26),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X27))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X22,X23,X24,X25] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X22),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X23),s('type.bvl.exp',X24),s('type.bvl.exp',X25))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X19,X20,X21] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X19),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X17,X18] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X17),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X18))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X14,X15,X16] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X14),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X15),s('type.bvl.exp',X16))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X12,X13] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X12),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X13))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X8,X9,X10,X11] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X9),s('type.option.option'('type.num.num'),X10),s('type.list.list'('type.bvl.exp'),X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X5,X6,X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X5),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X6),s('type.list.list'('type.bvl.exp'),X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X1,X2,X3,X4] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X1),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X4),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X2),s('type.list.list'('type.bvl.exp'),X3)))))))) => (? [X56] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X56),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X52,X53,X54,X55] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X52),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X53),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X54),s('type.list.list'('type.bvl.exp'),X55))))))) | ? [X50,X51] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X50),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X51))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X46,X47,X48,X49] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X46),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X47),s('type.bvl.exp',X48),s('type.bvl.exp',X49))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X43,X44,X45] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X43),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X44),s('type.bvl.exp',X45))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X41,X42] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X41),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X42))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X39,X40] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X39),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X40))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X36,X37,X38] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X36),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X37),s('type.list.list'('type.bvl.exp'),X38))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X33,X34,X35] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X33),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X34),s('type.bvl.exp',X35))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X29,X30,X31,X32] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X0) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X29),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X30),s('type.option.option'('type.num.num'),X31),s('type.list.list'('type.bvl.exp'),X32))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X7,X8] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9,X10,X11] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X9),s('type.bvl.exp',X10),s('type.bvl.exp',X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X12,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X12),s('type.bvl.exp',X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X9),s('type.bvl.exp',X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X13,X14,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X13),s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X15,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X15),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X16,X12,X17] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X17),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X16),s('type.list.list'('type.bvl.exp'),X12)))))))) => (? [X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X7,X17,X16,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X17),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X16),s('type.list.list'('type.bvl.exp'),X12))))))) | ? [X7,X8] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9,X10,X11] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X9),s('type.bvl.exp',X10),s('type.bvl.exp',X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X12,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X12),s('type.bvl.exp',X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X15,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X15),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X9),s('type.bvl.exp',X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X13,X14,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X13),s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X7,X8] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9,X10,X11] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X9),s('type.bvl.exp',X10),s('type.bvl.exp',X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X12,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X12),s('type.bvl.exp',X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X9),s('type.bvl.exp',X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X13,X14,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X13),s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X15,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X15),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X16,X12,X17] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X17),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X16),s('type.list.list'('type.bvl.exp'),X12)))))))) => (? [X7] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | ? [X7,X17,X16,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X17),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X16),s('type.list.list'('type.bvl.exp'),X12))))))) | ? [X7,X8] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X8))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9,X10,X11] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X9),s('type.bvl.exp',X10),s('type.bvl.exp',X11))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X12,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X12),s('type.bvl.exp',X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X9))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X15,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X15),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X9,X10] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X9),s('type.bvl.exp',X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | ? [X7,X13,X14,X12] : s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),X6) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X7),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X13),s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.bvl.exp'),X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))))),
  file('thm.bvlProps.bvlProps_69_prove_ltb','thm.bvlProps.bvlProps_69_prove_ltb')).
fof(f4668,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f410,f227])).
fof(f227,plain,(
  ( ! [X21,X19,X20,X18] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X18),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',X19),s('type.bvl.exp',X20),s('type.bvl.exp',X21))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4669,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f416,f232])).
fof(f232,plain,(
  ( ! [X6,X7,X5] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X5),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',X6),s('type.bvl.exp',X7))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4670,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f418,f230])).
fof(f230,plain,(
  ( ! [X12,X11] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X11),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',X12))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4671,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f408,f226])).
fof(f226,plain,(
  ( ! [X23,X22] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X22),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',X23))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f5057,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f420,f233])).
fof(f233,plain,(
  ( ! [X4,X2,X3,X1] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X1),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',X2),s('type.option.option'('type.num.num'),X3),s('type.list.list'('type.bvl.exp'),X4))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f5058,plain,(
  $false | $spl18),
  inference(subsumption_resolution,[],[f424,f225])).
fof(f225,plain,(
  ( ! [X26,X24,X27,X25] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X24),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',X26),s('type.list.list'('type.bvl.exp'),X27)))))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f5059,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f406,f224])).
fof(f224,plain,(
  ( ! [X28] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X28),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f138])).
fof(f5060,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f412,f228])).
fof(f228,plain,(
  ( ! [X17,X15,X16] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X15),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),X16),s('type.bvl.exp',X17))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f406,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) | $spl0),
  inference(cnf_transformation,[],[f406_D])).
fof(f406_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f408,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK14),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl2),
  inference(cnf_transformation,[],[f408_D])).
fof(f408_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK14),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f410,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK16),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK17),s('type.bvl.exp',sK18),s('type.bvl.exp',sK19))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl4),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK16),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK17),s('type.bvl.exp',sK18),s('type.bvl.exp',sK19))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f412,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK20),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK21),s('type.bvl.exp',sK22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl6),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK20),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK21),s('type.bvl.exp',sK22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f414,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK23),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK24))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl8),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK23),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK24))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f416,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK26),s('type.bvl.exp',sK27))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl10),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK26),s('type.bvl.exp',sK27))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f418,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK28),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl12),
  inference(cnf_transformation,[],[f418_D])).
fof(f418_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK28),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f420,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK30),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK31),s('type.option.option'('type.num.num'),sK32),s('type.list.list'('type.bvl.exp'),sK33))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl14),
  inference(cnf_transformation,[],[f420_D])).
fof(f420_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK30),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK31),s('type.option.option'('type.num.num'),sK32),s('type.list.list'('type.bvl.exp'),sK33))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f422,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK34),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK35),s('type.list.list'('type.bvl.exp'),sK36))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | $spl16),
  inference(cnf_transformation,[],[f422_D])).
fof(f422_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK34),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK35),s('type.list.list'('type.bvl.exp'),sK36))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f424,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK37),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK40),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK38),s('type.list.list'('type.bvl.exp'),sK39))))))) | $spl18),
  inference(cnf_transformation,[],[f424_D])).
fof(f424_D,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK37),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK40),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK38),s('type.list.list'('type.bvl.exp'),sK39))))))) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f223,plain,(
  s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK37),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK40),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp',sK38),s('type.list.list'('type.bvl.exp'),sK39))))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK34),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',sK35),s('type.list.list'('type.bvl.exp'),sK36))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK30),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Call_3'(s('type.num.num',sK31),s('type.option.option'('type.num.num'),sK32),s('type.list.list'('type.bvl.exp'),sK33))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK28),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Tick_1'(s('type.bvl.exp',sK29))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK25),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Handle_2'(s('type.bvl.exp',sK26),s('type.bvl.exp',sK27))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK23),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Raise_1'(s('type.bvl.exp',sK24))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK20),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Let_2'(s('type.list.list'('type.bvl.exp'),sK21),s('type.bvl.exp',sK22))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK16),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.If_3'(s('type.bvl.exp',sK17),s('type.bvl.exp',sK18),s('type.bvl.exp',sK19))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK14),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Var_1'(s('type.num.num',sK15))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0'))))) | s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) = s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),sK13),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))),
  inference(cnf_transformation,[],[f138])).
fof(f5062,plain,(
  $false | $spl16),
  inference(subsumption_resolution,[],[f422,f231])).
fof(f231,plain,(
  ( ! [X10,X8,X9] : (s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),sK12) != s('type.pair.prod'(fun('type.bvl.exp',bool),'type.list.list'('type.bvl.exp')),'const.pair.,_2'(s(fun('type.bvl.exp',bool),X8),s('type.list.list'('type.bvl.exp'),'const.list.CONS_2'(s('type.bvl.exp','const.bvl.Op_2'(s('type.closLang.op',X9),s('type.list.list'('type.bvl.exp'),X10))),s('type.list.list'('type.bvl.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.bvlProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 413
% Passive clauses: 1565
% Generated clauses: 4833
% Final active clauses: 413
% Final passive clauses: 955
% Input formulas: 37
% Initial clauses: 178
% 
% Duplicate literals: 156
% Trivial inequalities: 29
% Fw subsumption resolutions: 336
% 
% Simple tautologies: 145
% Equational tautologies: 41
% Forward subsumptions: 2513
% 
% Binary resolution: 2984
% Factoring: 832
% Forward superposition: 174
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 16
% 
% Split clauses: 119
% Split components: 247
% SAT solver clauses: 255
% SAT solver unit clauses: 16
% SAT solver binary clauses: 45
% SAT solver learnt clauses: 1
% 
% Sat splits: 119
% Sat splitting refutations: 10
% 
% TWLsolver clauses: 254
% TWLsolver calls for satisfiability: 204
% 
% Memory used [KB]: 2686
% Time elapsed: 0.120 s
% ------------------------------
% ------------------------------
% Success in time 0.13 s
