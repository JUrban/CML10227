Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.closProps
% (27986)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 96
% Passive clauses: 3818
% Generated clauses: 14374
% Final active clauses: 91
% Final passive clauses: 3611
% Input formulas: 21
% Initial clauses: 33
% 
% Duplicate literals: 659
% Trivial inequalities: 194
% Fw subsumption resolutions: 1713
% Fw demodulations: 898
% Bw demodulations: 1
% 
% Simple tautologies: 234
% Equational tautologies: 78
% Forward subsumptions: 5803
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 221
% Factoring: 4
% Forward superposition: 4901
% Backward superposition: 5139
% Self superposition: 281
% Equality factoring: 201
% Equality resolution: 20
% 
% Split clauses: 317
% Split components: 642
% SAT solver clauses: 964
% SAT solver unit clauses: 19
% SAT solver binary clauses: 176
% 
% Sat splits: 317
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 964
% TWLsolver calls for satisfiability: 129
% 
% Memory used [KB]: 13560
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.closProps
% (28051)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 97
% Passive clauses: 1088
% Generated clauses: 9254
% Final active clauses: 83
% Final passive clauses: 682
% Input formulas: 21
% Initial clauses: 33
% 
% Duplicate literals: 318
% Trivial inequalities: 19
% Fw subsumption resolutions: 219
% Fw demodulations: 1315
% Bw demodulations: 302
% Condensations: 592
% 
% Simple tautologies: 35
% Equational tautologies: 30
% Forward subsumptions: 4059
% Bw demodulations to eq. taut.: 16
% 
% Binary resolution: 87
% Factoring: 2
% Forward superposition: 2722
% Backward superposition: 2126
% Self superposition: 111
% Equality factoring: 54
% Equality resolution: 5
% 
% Split clauses: 89
% Split components: 182
% SAT solver clauses: 1608
% SAT solver unit clauses: 39
% SAT solver binary clauses: 33
% 
% Sat splits: 89
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 1608
% TWLsolver calls for satisfiability: 330
% 
% Memory used [KB]: 19317
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.closProps
% (28109)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 536
% Passive clauses: 10380
% Generated clauses: 158364
% Final active clauses: 127
% Final passive clauses: 1088
% Input formulas: 21
% Initial clauses: 33
% Discarded non-redundant clauses: 3563
% 
% Duplicate literals: 4987
% Trivial inequalities: 1181
% Fw subsumption resolutions: 10017
% Fw demodulations: 25066
% Bw demodulations: 5091
% Condensations: 9365
% Global subsumptions: 34
% 
% Simple tautologies: 920
% Equational tautologies: 381
% Forward subsumptions: 95290
% Fw demodulations to eq. taut.: 2
% Bw demodulations to eq. taut.: 453
% 
% Unit resulting resolution: 3366
% Factoring: 5
% Forward superposition: 48287
% Backward superposition: 37689
% Self superposition: 746
% Equality factoring: 292
% Equality resolution: 55
% 
% Split clauses: 340
% Split components: 691
% SAT solver clauses: 11185
% SAT solver unit clauses: 166
% SAT solver binary clauses: 2123
% 
% Sat splits: 340
% Sat splitting refutations: 89
% 
% Memory used [KB]: 115264
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.closProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.closProps
% SZS output start Proof for thm.closProps
fof(f2191,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f52,f67,f51,f68,f66,f50,f49,f72,f48,f70,f47,f76,f74,f65,f281,f440,f443,f444,f447,f448,f449,f442,f441,f450,f453,f452,f451,f454,f455,f446,f445,f456,f459,f458,f457,f500,f522,f570,f571,f724,f725,f1218,f1224,f1225,f1255,f1256,f1257,f1260,f1261,f1262,f1263,f1237,f1246,f1259,f1264,f1297,f1300,f1298,f1362,f1365,f1363,f1638,f1338,f1332,f1223,f1640,f1643,f1688,f1691,f1689,f1753,f1756,f1754,f1948,f1951,f1949,f2123,f2188])).
fof(f2188,plain,(
  $false | ($spl0 | $spl31 | $spl39)),
  inference(subsumption_resolution,[],[f2118,f1258])).
fof(f1258,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | $spl39),
  inference(cnf_transformation,[],[f1258_D])).
fof(f1258_D,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f2118,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | ($spl0 | $spl31)),
  inference(superposition,[],[f65,f1665])).
fof(f1665,plain,(
  ( ! [X8,X7,X9] : (s(X7,happ(s(fun('type.list.list'(sK0),X7),X8),s('type.list.list'(sK0),sK10(sK2,sK0)))) = s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),X7),X8),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X9)))) ) | $spl31),
  inference(superposition,[],[f59,f1642])).
fof(f1642,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))) | $spl31),
  inference(trivial_inequality_removal,[],[f1641])).
fof(f1641,plain,(
  s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),sK2) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))) | $spl31),
  inference(superposition,[],[f1222,f58])).
fof(f58,plain,(
  ( ! [X0,X1] : (s('type.closSem.ref'(X0),X1) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(X1,X0)))) | s('type.closSem.ref'(X0),X1) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),sK10(X1,X0))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1] : (s('type.closSem.ref'(X0),X1) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),sK10(X1,X0)))) | s('type.closSem.ref'(X0),X1) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11])],[f30])).
fof(f30,plain,(
  ! [X0,X1] : (? [X3] : s('type.closSem.ref'(X0),X1) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X3))) | ? [X2] : s('type.closSem.ref'(X0),X1) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))))),
  inference(flattening,[],[f29])).
fof(f29,plain,(
  ! [X0] : ! [X1] : (? [X3] : s('type.closSem.ref'(X0),X1) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X3))) | ? [X2] : s('type.closSem.ref'(X0),X1) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6] : ! [X28] : (? [X12] : s('type.closSem.ref'(X6),X28) = s('type.closSem.ref'(X6),'const.closSem.ValueArray_1'(s('type.list.list'(X6),X12))) | ? [X12] : s('type.closSem.ref'(X6),X28) = s('type.closSem.ref'(X6),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))))),
  file('thm.closProps.eqs|split|4','thm.closSem.ref_nchotomy')).
fof(f1222,plain,(
  s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) | $spl31),
  inference(cnf_transformation,[],[f1222_D])).
fof(f1222_D,plain,(
  s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) <=> ~$spl31),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl31])])).
fof(f59,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,happ(s(fun('type.list.list'(X1),X0),X3),s('type.list.list'(X1),X2))) = s(X0,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X1),'const.closSem.ValueArray_1'(s('type.list.list'(X1),X2))),s(fun('type.list.list'(X1),X0),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X0),X4)))) )),
  inference(cnf_transformation,[],[f32])).
fof(f32,plain,(
  ! [X0,X1,X2,X3,X4] : s(X0,happ(s(fun('type.list.list'(X1),X0),X3),s('type.list.list'(X1),X2))) = s(X0,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X1),'const.closSem.ValueArray_1'(s('type.list.list'(X1),X2))),s(fun('type.list.list'(X1),X0),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X0),X4)))),
  inference(flattening,[],[f31])).
fof(f31,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X0,happ(s(fun('type.list.list'(X1),X0),X3),s('type.list.list'(X1),X2))) = s(X0,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X1),'const.closSem.ValueArray_1'(s('type.list.list'(X1),X2))),s(fun('type.list.list'(X1),X0),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X0),X4)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X7,X6] : ! [X18,X19,X20] : s(X7,happ(s(fun('type.list.list'(X6),X7),X19),s('type.list.list'(X6),X18))) = s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X6),'const.closSem.ValueArray_1'(s('type.list.list'(X6),X18))),s(fun('type.list.list'(X6),X7),X19),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X20)))),
  file('thm.closProps.eqs|split|4','thm.closSem.ref_case_def|split|0')).
fof(f2123,plain,(
  $false | ($spl0 | $spl31 | $spl39)),
  inference(subsumption_resolution,[],[f2022,f1258])).
fof(f2022,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | ($spl0 | $spl31)),
  inference(superposition,[],[f1665,f65])).
fof(f1949,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | $spl64),
  inference(cnf_transformation,[],[f1949_D])).
fof(f1949_D,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f1951,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0)))) | $spl66),
  inference(cnf_transformation,[],[f1951_D])).
fof(f1951_D,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0)))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f1948,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0)))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | ($spl0 | $spl62)),
  inference(forward_demodulation,[],[f1947,f1756])).
fof(f1947,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0))))) ) | ($spl0 | $spl62)),
  inference(trivial_inequality_removal,[],[f1919])).
fof(f1919,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),sK2) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK0))))) ) | ($spl0 | $spl62)),
  inference(superposition,[],[f1155,f1756])).
fof(f1155,plain,(
  ( ! [X17,X16] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),X16) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(X16,sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X17))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X17,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(X16,sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),X16) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(X16,sK0))))) ) | $spl0),
  inference(superposition,[],[f1149,f58])).
fof(f1149,plain,(
  ( ! [X0,X1] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),X1) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),X1),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,X1,sK5,sK4,sK1,sK0))))) ) | $spl0),
  inference(equality_resolution,[],[f555])).
fof(f555,plain,(
  ( ! [X10,X11,X9] : (s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK8(X11,X10,sK2,X9,sK5,sK4,sK1,sK0)))) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),X10),s('type.list.list'(sK0),sK8(X11,X10,sK2,X9,sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X11,X10,sK2,X9,sK5,sK4,sK1,sK0)))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),X9),s(fun('type.list.list'(sK0),sK1),X10),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X11))) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),X9)) ) | $spl0),
  inference(superposition,[],[f65,f54])).
fof(f54,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X4),s(fun('type.list.list'(X0),X1),X6),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X5),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2))) | s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X7,X6,X5,X4,X3,X2,X1,X0)))) | s(X1,happ(s(fun('type.list.list'(X0),X1),X3),s('type.list.list'(X0),sK8(X7,X6,X5,X4,X3,X2,X1,X0)))) != s(X1,happ(s(fun('type.list.list'(X0),X1),X6),s('type.list.list'(X0),sK8(X7,X6,X5,X4,X3,X2,X1,X0)))) | s('type.closSem.ref'(X0),X4) != s('type.closSem.ref'(X0),X5)) )),
  inference(cnf_transformation,[],[f45])).
fof(f45,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.closSem.ref'(X0),X4) != s('type.closSem.ref'(X0),X5) | (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),sK8(X7,X6,X5,X4,X3,X2,X1,X0)))) & s(X1,happ(s(fun('type.list.list'(X0),X1),X3),s('type.list.list'(X0),sK8(X7,X6,X5,X4,X3,X2,X1,X0)))) != s(X1,happ(s(fun('type.list.list'(X0),X1),X6),s('type.list.list'(X0),sK8(X7,X6,X5,X4,X3,X2,X1,X0))))) | (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X7,X6,X5,X4,X3,X2,X1,X0)))) & s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X7,X6,X5,X4,X3,X2,X1,X0)))) != s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X7,X6,X5,X4,X3,X2,X1,X0))))) | s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X4),s(fun('type.list.list'(X0),X1),X6),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X5),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK8,sK9])],[f38])).
fof(f38,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.closSem.ref'(X0),X4) != s('type.closSem.ref'(X0),X5) | ? [X9] : (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X9))) & s(X1,happ(s(fun('type.list.list'(X0),X1),X3),s('type.list.list'(X0),X9))) != s(X1,happ(s(fun('type.list.list'(X0),X1),X6),s('type.list.list'(X0),X9)))) | ? [X8] : (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) & s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) != s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8)))) | s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X4),s(fun('type.list.list'(X0),X1),X6),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X5),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((s('type.closSem.ref'(X0),X4) != s('type.closSem.ref'(X0),X5) | ? [X9] : (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X9))) & s(X1,happ(s(fun('type.list.list'(X0),X1),X3),s('type.list.list'(X0),X9))) != s(X1,happ(s(fun('type.list.list'(X0),X1),X6),s('type.list.list'(X0),X9)))) | ? [X8] : (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) & s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) != s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))))) | s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X4),s(fun('type.list.list'(X0),X1),X6),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X5),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2))))),
  inference(ennf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((s('type.closSem.ref'(X0),X4) = s('type.closSem.ref'(X0),X5) & ! [X9] : (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X9))) => s(X1,happ(s(fun('type.list.list'(X0),X1),X3),s('type.list.list'(X0),X9))) = s(X1,happ(s(fun('type.list.list'(X0),X1),X6),s('type.list.list'(X0),X9)))) & ! [X8] : (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) => s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) = s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))))) => s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X4),s(fun('type.list.list'(X0),X1),X6),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X5),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2))))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5,X6,X7] : ((s('type.closSem.ref'(X0),X4) = s('type.closSem.ref'(X0),X5) & ! [X9] : (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X9))) => s(X1,happ(s(fun('type.list.list'(X0),X1),X3),s('type.list.list'(X0),X9))) = s(X1,happ(s(fun('type.list.list'(X0),X1),X6),s('type.list.list'(X0),X9)))) & ! [X8] : (s('type.closSem.ref'(X0),X5) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) => s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) = s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))))) => s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X4),s(fun('type.list.list'(X0),X1),X6),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X7))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X5),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X2))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6,X7] : ! [X21,X22,X23,X24,X19,X20] : ((s('type.closSem.ref'(X6),X23) = s('type.closSem.ref'(X6),X24) & ! [X18] : (s('type.closSem.ref'(X6),X24) = s('type.closSem.ref'(X6),'const.closSem.ValueArray_1'(s('type.list.list'(X6),X18))) => s(X7,happ(s(fun('type.list.list'(X6),X7),X19),s('type.list.list'(X6),X18))) = s(X7,happ(s(fun('type.list.list'(X6),X7),X22),s('type.list.list'(X6),X18)))) & ! [X18] : (s('type.closSem.ref'(X6),X24) = s('type.closSem.ref'(X6),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X18))) => s(X7,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X20),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X18))) = s(X7,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X21),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X18))))) => s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X6),X23),s(fun('type.list.list'(X6),X7),X19),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X20))) = s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X6),X24),s(fun('type.list.list'(X6),X7),X22),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X21))))),
  file('thm.closProps.eqs|split|4','thm.closSem.ref_case_cong')).
fof(f1754,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | $spl60),
  inference(cnf_transformation,[],[f1754_D])).
fof(f1754_D,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f1756,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))) | $spl62),
  inference(cnf_transformation,[],[f1756_D])).
fof(f1756_D,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f1753,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | ($spl0 | $spl58)),
  inference(forward_demodulation,[],[f1752,f1691])).
fof(f1752,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))))) ) | ($spl0 | $spl58)),
  inference(trivial_inequality_removal,[],[f1724])).
fof(f1724,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),sK2) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK0))))) ) | ($spl0 | $spl58)),
  inference(superposition,[],[f1155,f1691])).
fof(f1689,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | $spl56),
  inference(cnf_transformation,[],[f1689_D])).
fof(f1689_D,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f1691,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))) | $spl58),
  inference(cnf_transformation,[],[f1691_D])).
fof(f1691_D,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f1688,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | ($spl0 | $spl31)),
  inference(forward_demodulation,[],[f1687,f1642])).
fof(f1687,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))))) ) | ($spl0 | $spl31)),
  inference(trivial_inequality_removal,[],[f1660])).
fof(f1660,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),sK2) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK0))))) ) | ($spl0 | $spl31)),
  inference(superposition,[],[f1155,f1642])).
fof(f1643,plain,(
  $false | ($spl4 | $spl31 | $spl38)),
  inference(subsumption_resolution,[],[f1642,f1266])).
fof(f1266,plain,(
  s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))) | ($spl4 | $spl38)),
  inference(trivial_inequality_removal,[],[f1265])).
fof(f1265,plain,(
  s(sK1,sK3) != s(sK1,sK3) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))) | ($spl4 | $spl38)),
  inference(superposition,[],[f68,f1259])).
fof(f1640,plain,(
  s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) | $spl54),
  inference(cnf_transformation,[],[f1640_D])).
fof(f1640_D,plain,(
  s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f1223,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) | $spl30),
  inference(cnf_transformation,[],[f1223_D])).
fof(f1223_D,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f1332,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) | $spl48),
  inference(superposition,[],[f1300,f58])).
fof(f1338,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) | $spl48),
  inference(superposition,[],[f58,f1300])).
fof(f1638,plain,(
  $false | ($spl0 | $spl2 | $spl30)),
  inference(trivial_inequality_removal,[],[f1620])).
fof(f1620,plain,(
  s(sK1,sK3) != s(sK1,sK3) | ($spl0 | $spl2 | $spl30)),
  inference(superposition,[],[f1607,f65])).
fof(f1607,plain,(
  ( ! [X242] : (s(sK1,sK3) != s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),X242),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4)))) ) | ($spl2 | $spl30)),
  inference(subsumption_resolution,[],[f1553,f1223])).
fof(f1553,plain,(
  ( ! [X242] : (s(sK1,sK3) != s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),X242),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4))) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))))) ) | ($spl2 | $spl30)),
  inference(superposition,[],[f67,f1274])).
fof(f1274,plain,(
  ( ! [X8,X7,X9] : (s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),X7),X9),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X8))) = s(X7,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X8),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))))) ) | $spl30),
  inference(superposition,[],[f57,f1223])).
fof(f57,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4)))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4] : s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4)))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X2))),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X6,X7] : ! [X18,X19,X20] : s(X7,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X20),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X18))) = s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X6),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X18))),s(fun('type.list.list'(X6),X7),X19),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X20)))),
  file('thm.closProps.eqs|split|4','thm.closSem.ref_case_def|split|1')).
fof(f1363,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | $spl50),
  inference(cnf_transformation,[],[f1363_D])).
fof(f1363_D,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f1365,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0)))) | $spl52),
  inference(cnf_transformation,[],[f1365_D])).
fof(f1365_D,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0)))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f1362,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0)))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | ($spl0 | $spl48)),
  inference(forward_demodulation,[],[f1361,f1300])).
fof(f1361,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0))))) ) | ($spl0 | $spl48)),
  inference(trivial_inequality_removal,[],[f1333])).
fof(f1333,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),sK2) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK0))))) ) | ($spl0 | $spl48)),
  inference(superposition,[],[f1155,f1300])).
fof(f1298,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | $spl46),
  inference(cnf_transformation,[],[f1298_D])).
fof(f1298_D,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f1300,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) | $spl48),
  inference(cnf_transformation,[],[f1300_D])).
fof(f1300_D,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f1297,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0))))) ) | ($spl0 | $spl30)),
  inference(forward_demodulation,[],[f1296,f1223])).
fof(f1296,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))))) ) | ($spl0 | $spl30)),
  inference(trivial_inequality_removal,[],[f1269])).
fof(f1269,plain,(
  ( ! [X0] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),sK2) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0)))) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11('const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))),sK0))))) ) | ($spl0 | $spl30)),
  inference(superposition,[],[f1155,f1223])).
fof(f1264,plain,(
  ( ! [X1] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X1,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl44),
  inference(cnf_transformation,[],[f1264_D])).
fof(f1264_D,plain,(
  ( ! [X1] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X1,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f1259,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | $spl38),
  inference(cnf_transformation,[],[f1259_D])).
fof(f1259_D,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f1246,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(superposition,[],[f59,f1224])).
fof(f1237,plain,(
  ( ! [X1] : (s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X1,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(superposition,[],[f1224,f59])).
fof(f1263,plain,(
  ( ! [X66,X64,X67,X65] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(happ(s(fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),happ(s(fun(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1))),happ(s(fun('type.closSem.ref'(X64),fun(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)))),'const.closSem.ref_CASE_0'),s('type.closSem.ref'(X64),X65))),s(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X66))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X67)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl42),
  inference(cnf_transformation,[],[f1263_D])).
fof(f1263_D,plain,(
  ( ! [X66,X64,X67,X65] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(happ(s(fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),happ(s(fun(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1))),happ(s(fun('type.closSem.ref'(X64),fun(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)))),'const.closSem.ref_CASE_0'),s('type.closSem.ref'(X64),X65))),s(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X66))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X67)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f1262,plain,(
  ( ! [X66,X64,X67,X65] : (s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(happ(s(fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),happ(s(fun(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1))),happ(s(fun('type.closSem.ref'(X64),fun(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)))),'const.closSem.ref_CASE_0'),s('type.closSem.ref'(X64),X65))),s(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X66))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X67)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(forward_demodulation,[],[f1236,f59])).
fof(f1236,plain,(
  ( ! [X66,X64,X67,X65] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X64),X65),s(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X66),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X67))))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(happ(s(fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),happ(s(fun(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1))),happ(s(fun('type.closSem.ref'(X64),fun(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)))),'const.closSem.ref_CASE_0'),s('type.closSem.ref'(X64),X65))),s(fun('type.list.list'(X64),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X66))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X67)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(superposition,[],[f1224,f64])).
fof(f64,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) = s(X1,happ(s(fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1),happ(s(fun(fun('type.list.list'(X0),X1),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1)),happ(s(fun('type.closSem.ref'(X0),fun(fun('type.list.list'(X0),X1),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1))),'const.closSem.ref_CASE_0'),s('type.closSem.ref'(X0),X2))),s(fun('type.list.list'(X0),X1),X3))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4)))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3,X4] : s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) = s(X1,happ(s(fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1),happ(s(fun(fun('type.list.list'(X0),X1),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1)),happ(s(fun('type.closSem.ref'(X0),fun(fun('type.list.list'(X0),X1),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1))),'const.closSem.ref_CASE_0'),s('type.closSem.ref'(X0),X2))),s(fun('type.list.list'(X0),X1),X3))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4)))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X3),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) = s(X1,happ(s(fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1),happ(s(fun(fun('type.list.list'(X0),X1),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1)),happ(s(fun('type.closSem.ref'(X0),fun(fun('type.list.list'(X0),X1),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X1))),'const.closSem.ref_CASE_0'),s('type.closSem.ref'(X0),X2))),s(fun('type.list.list'(X0),X1),X3))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X6,X7] : ! [X25,X26,X27] : s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X6),X25),s(fun('type.list.list'(X6),X7),X26),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X27))) = s(X7,happ(s(fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X7),happ(s(fun(fun('type.list.list'(X6),X7),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X7)),happ(s(fun('type.closSem.ref'(X6),fun(fun('type.list.list'(X6),X7),fun(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X7))),'const.closSem.ref_CASE_0'),s('type.closSem.ref'(X6),X25))),s(fun('type.list.list'(X6),X7),X26))),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X27)))),
  file('thm.closProps.eqs|split|4','ARITY_0_3_const.closSem.ref_CASE')).
fof(f1261,plain,(
  ( ! [X61,X62,X60,X63] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9('const.closSem.ref_CASE_3'(s('type.closSem.ref'(X60),'const.closSem.ValueArray_1'(s('type.list.list'(X60),X61))),s(fun('type.list.list'(X60),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X62),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X63)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl40),
  inference(cnf_transformation,[],[f1261_D])).
fof(f1261_D,plain,(
  ( ! [X61,X62,X60,X63] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9('const.closSem.ref_CASE_3'(s('type.closSem.ref'(X60),'const.closSem.ValueArray_1'(s('type.list.list'(X60),X61))),s(fun('type.list.list'(X60),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X62),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X63)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f1260,plain,(
  ( ! [X61,X62,X60,X63] : (s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9('const.closSem.ref_CASE_3'(s('type.closSem.ref'(X60),'const.closSem.ValueArray_1'(s('type.list.list'(X60),X61))),s(fun('type.list.list'(X60),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X62),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X63)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(forward_demodulation,[],[f1235,f59])).
fof(f1235,plain,(
  ( ! [X61,X62,X60,X63] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),happ(s(fun('type.list.list'(X60),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X62),s('type.list.list'(X60),X61))))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9('const.closSem.ref_CASE_3'(s('type.closSem.ref'(X60),'const.closSem.ValueArray_1'(s('type.list.list'(X60),X61))),s(fun('type.list.list'(X60),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X62),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X63)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(superposition,[],[f1224,f59])).
fof(f1257,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9('const.closSem.ref_CASE_3'(s('type.closSem.ref'(X56),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X57))),s(fun('type.list.list'(X56),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X58),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X59)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl36),
  inference(cnf_transformation,[],[f1257_D])).
fof(f1257_D,plain,(
  ( ! [X59,X57,X58,X56] : (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9('const.closSem.ref_CASE_3'(s('type.closSem.ref'(X56),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X57))),s(fun('type.list.list'(X56),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X58),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X59)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f1256,plain,(
  ( ! [X59,X57,X58,X56] : (s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK10(sK2,sK0)))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9('const.closSem.ref_CASE_3'(s('type.closSem.ref'(X56),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X57))),s(fun('type.list.list'(X56),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X58),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X59)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(forward_demodulation,[],[f1234,f59])).
fof(f1234,plain,(
  ( ! [X59,X57,X58,X56] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X59),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X57))))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9('const.closSem.ref_CASE_3'(s('type.closSem.ref'(X56),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X57))),s(fun('type.list.list'(X56),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X58),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1)),X59)),sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(superposition,[],[f1224,f57])).
fof(f1255,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl34),
  inference(cnf_transformation,[],[f1255_D])).
fof(f1255_D,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f1225,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))))) ) | $spl32),
  inference(superposition,[],[f1224,f58])).
fof(f1224,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) | $spl32),
  inference(cnf_transformation,[],[f1224_D])).
fof(f1224_D,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0))))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f1218,plain,(
  ( ! [X0] : (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0)))),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),X0))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK9(X0,sK5,sK2,'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK10(sK2,sK0))),sK5,sK4,sK1,sK0)))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK11(sK2,sK0))))) ) | $spl0),
  inference(equality_resolution,[],[f1155])).
fof(f725,plain,(
  $false | ($spl0 | $spl9 | $spl12)),
  inference(subsumption_resolution,[],[f550,f71])).
fof(f71,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | $spl9),
  inference(cnf_transformation,[],[f71_D])).
fof(f71_D,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) <=> ~$spl9),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl9])])).
fof(f550,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ($spl0 | $spl12)),
  inference(superposition,[],[f65,f282])).
fof(f282,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X0),X1),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) = s(X0,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),X0),X2),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X0),X1)))) ) | $spl12),
  inference(superposition,[],[f57,f76])).
fof(f724,plain,(
  $false | ($spl2 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f719,f76])).
fof(f719,plain,(
  s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ($spl2 | $spl8)),
  inference(trivial_inequality_removal,[],[f718])).
fof(f718,plain,(
  s(sK1,sK3) != s(sK1,sK3) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ($spl2 | $spl8)),
  inference(superposition,[],[f67,f72])).
fof(f571,plain,(
  $false | ($spl0 | $spl7 | $spl10)),
  inference(subsumption_resolution,[],[f561,f69])).
fof(f69,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) | $spl7),
  inference(cnf_transformation,[],[f69_D])).
fof(f69_D,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) <=> ~$spl7),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl7])])).
fof(f561,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) | ($spl0 | $spl10)),
  inference(superposition,[],[f77,f65])).
fof(f77,plain,(
  ( ! [X2,X0,X1] : (s(X0,happ(s(fun('type.list.list'(sK0),X0),X1),s('type.list.list'(sK0),sK6))) = s(X0,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),X0),X1),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X0),X2)))) ) | $spl10),
  inference(superposition,[],[f59,f74])).
fof(f570,plain,(
  $false | ($spl0 | $spl7 | $spl10)),
  inference(subsumption_resolution,[],[f551,f69])).
fof(f551,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) | ($spl0 | $spl10)),
  inference(superposition,[],[f65,f77])).
fof(f522,plain,(
  $false | ($spl22 | $spl26)),
  inference(subsumption_resolution,[],[f457,f451])).
fof(f500,plain,(
  $false | ($spl1 | $spl8 | $spl12)),
  inference(subsumption_resolution,[],[f439,f72])).
fof(f439,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ($spl1 | $spl12)),
  inference(superposition,[],[f66,f282])).
fof(f457,plain,(
  ( ! [X70] : (~p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X70),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))))) ) | $spl26),
  inference(cnf_transformation,[],[f457_D])).
fof(f457_D,plain,(
  ( ! [X70] : (~p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X70),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f458,plain,(
  ( ! [X71,X69] : (~p(s(bool,X71)) | s(bool,X71) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X69),s('type.list.list'(sK0),sK6)))) ) | $spl28),
  inference(cnf_transformation,[],[f458_D])).
fof(f458_D,plain,(
  ( ! [X71,X69] : (~p(s(bool,X71)) | s(bool,X71) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X69),s('type.list.list'(sK0),sK6)))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f459,plain,(
  ( ! [X74,X72,X73] : (s(bool,X74) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X72),s('type.list.list'(sK0),sK6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X73),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) | ~p(s(bool,X74))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f387,f77])).
fof(f387,plain,(
  ( ! [X74,X72,X73] : (~p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X73),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) | s(bool,X74) = s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X72),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X73))) | ~p(s(bool,X74))) ) | $spl12),
  inference(superposition,[],[f63,f282])).
fof(f63,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f33])).
fof(f33,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X16,X17] : ((p(s(bool,X16)) => p(s(bool,X17))) => ((p(s(bool,X17)) => p(s(bool,X16))) => s(bool,X16) = s(bool,X17)))),
  file('thm.closProps.eqs|split|4','thm.bool.IMP_ANTISYM_AX')).
fof(f456,plain,(
  ( ! [X70,X71,X69] : (s(bool,X71) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X69),s('type.list.list'(sK0),sK6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X70),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) | ~p(s(bool,X71))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f386,f77])).
fof(f386,plain,(
  ( ! [X70,X71,X69] : (~p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X70),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) | s(bool,X71) = s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X69),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X70))) | ~p(s(bool,X71))) ) | $spl12),
  inference(superposition,[],[f63,f282])).
fof(f445,plain,(
  ( ! [X61,X62] : (s(bool,X62) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X61),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,X62))) ) | $spl18),
  inference(cnf_transformation,[],[f445_D])).
fof(f445_D,plain,(
  ( ! [X61,X62] : (s(bool,X62) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X61),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,X62))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f446,plain,(
  ( ! [X60] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X60),s('type.list.list'(sK0),sK6))))) ) | $spl20),
  inference(cnf_transformation,[],[f446_D])).
fof(f446_D,plain,(
  ( ! [X60] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X60),s('type.list.list'(sK0),sK6))))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f455,plain,(
  ( ! [X68,X66,X67] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X66),s('type.list.list'(sK0),sK6)))) | s(bool,X68) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X67),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,X68))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f385,f77])).
fof(f385,plain,(
  ( ! [X68,X66,X67] : (s(bool,X68) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X67),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,X68)) | ~p(s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X66),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X67))))) ) | $spl12),
  inference(superposition,[],[f63,f282])).
fof(f454,plain,(
  ( ! [X64,X65,X63] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X63),s('type.list.list'(sK0),sK6)))) | s(bool,X65) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X64),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,X65))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f384,f77])).
fof(f384,plain,(
  ( ! [X64,X65,X63] : (s(bool,X65) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X64),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X63),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X64)))) | ~p(s(bool,X65))) ) | $spl12),
  inference(superposition,[],[f63,f282])).
fof(f451,plain,(
  ( ! [X58] : (p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X58),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))))) ) | $spl22),
  inference(cnf_transformation,[],[f451_D])).
fof(f451_D,plain,(
  ( ! [X58] : (p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X58),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f452,plain,(
  ( ! [X59,X57] : (s(bool,X59) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X57),s('type.list.list'(sK0),sK6))) | p(s(bool,X59))) ) | $spl24),
  inference(cnf_transformation,[],[f452_D])).
fof(f452_D,plain,(
  ( ! [X59,X57] : (s(bool,X59) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X57),s('type.list.list'(sK0),sK6))) | p(s(bool,X59))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f453,plain,(
  ( ! [X61,X62,X60] : (s(bool,X62) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X60),s('type.list.list'(sK0),sK6))) | p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X61),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) | p(s(bool,X62))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f383,f77])).
fof(f383,plain,(
  ( ! [X61,X62,X60] : (p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X61),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) | s(bool,X62) = s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X60),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X61))) | p(s(bool,X62))) ) | $spl12),
  inference(superposition,[],[f60,f282])).
fof(f60,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f40])).
fof(f450,plain,(
  ( ! [X59,X57,X58] : (s(bool,X59) = s(bool,happ(s(fun('type.list.list'(sK0),bool),X57),s('type.list.list'(sK0),sK6))) | p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X58),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) | p(s(bool,X59))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f382,f77])).
fof(f382,plain,(
  ( ! [X59,X57,X58] : (p(s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X58),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) | s(bool,X59) = s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X57),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X58))) | p(s(bool,X59))) ) | $spl12),
  inference(superposition,[],[f60,f282])).
fof(f441,plain,(
  ( ! [X56,X55] : (p(s(bool,X56)) | s(bool,X56) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X55),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) ) | $spl14),
  inference(cnf_transformation,[],[f441_D])).
fof(f441_D,plain,(
  ( ! [X56,X55] : (p(s(bool,X56)) | s(bool,X56) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X55),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f442,plain,(
  ( ! [X54] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X54),s('type.list.list'(sK0),sK6))))) ) | $spl16),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  ( ! [X54] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X54),s('type.list.list'(sK0),sK6))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f449,plain,(
  ( ! [X54,X56,X55] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X54),s('type.list.list'(sK0),sK6)))) | s(bool,X56) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X55),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | p(s(bool,X56))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f381,f77])).
fof(f381,plain,(
  ( ! [X54,X56,X55] : (s(bool,X56) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X55),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | p(s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X54),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X55)))) | p(s(bool,X56))) ) | $spl12),
  inference(superposition,[],[f60,f282])).
fof(f448,plain,(
  ( ! [X52,X53,X51] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X51),s('type.list.list'(sK0),sK6)))) | s(bool,X53) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X52),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | p(s(bool,X53))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f380,f77])).
fof(f380,plain,(
  ( ! [X52,X53,X51] : (s(bool,X53) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X52),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | p(s(bool,X53)) | p(s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X51),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X52))))) ) | $spl12),
  inference(superposition,[],[f60,f282])).
fof(f447,plain,(
  ( ! [X64,X65,X63] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X63),s('type.list.list'(sK0),sK6)))) | s(bool,X65) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X64),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,X65))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f370,f77])).
fof(f370,plain,(
  ( ! [X64,X65,X63] : (s(bool,X65) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X64),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X63),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X64)))) | ~p(s(bool,X65))) ) | $spl12),
  inference(superposition,[],[f282,f63])).
fof(f444,plain,(
  ( ! [X61,X62,X60] : (~p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X60),s('type.list.list'(sK0),sK6)))) | s(bool,X62) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X61),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,X62))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f369,f77])).
fof(f369,plain,(
  ( ! [X61,X62,X60] : (s(bool,X62) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X61),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | ~p(s(bool,X62)) | ~p(s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X60),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X61))))) ) | $spl12),
  inference(superposition,[],[f282,f63])).
fof(f443,plain,(
  ( ! [X59,X57,X58] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X57),s('type.list.list'(sK0),sK6)))) | s(bool,X59) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X58),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | p(s(bool,X59))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f368,f77])).
fof(f368,plain,(
  ( ! [X59,X57,X58] : (s(bool,X59) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X58),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | p(s(bool,X59)) | p(s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X57),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X58))))) ) | $spl12),
  inference(superposition,[],[f282,f60])).
fof(f440,plain,(
  ( ! [X54,X56,X55] : (p(s(bool,happ(s(fun('type.list.list'(sK0),bool),X54),s('type.list.list'(sK0),sK6)))) | s(bool,X56) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X55),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | p(s(bool,X56))) ) | ($spl10 | $spl12)),
  inference(forward_demodulation,[],[f367,f77])).
fof(f367,plain,(
  ( ! [X54,X56,X55] : (s(bool,X56) = s(bool,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X55),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | p(s(bool,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),bool),X54),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),bool),X55)))) | p(s(bool,X56))) ) | $spl12),
  inference(superposition,[],[f282,f60])).
fof(f281,plain,(
  $false | ($spl1 | $spl6 | $spl10)),
  inference(subsumption_resolution,[],[f228,f70])).
fof(f228,plain,(
  s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) | ($spl1 | $spl10)),
  inference(superposition,[],[f66,f77])).
fof(f65,plain,(
  s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4))) | $spl0),
  inference(cnf_transformation,[],[f65_D])).
fof(f65_D,plain,(
  s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f74,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK6))) | $spl10),
  inference(cnf_transformation,[],[f74_D])).
fof(f74_D,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK6))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f76,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | $spl12),
  inference(cnf_transformation,[],[f76_D])).
fof(f76_D,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f47,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK6))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4)))),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  (s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4))) | (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK6))) & s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6)))) | (s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) & s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))))) & (s(sK1,sK3) != s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4))) | (! [X7] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),X7))) | s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),X7)))) & ! [X6] : (s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) | s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4,sK5,sK6,sK7])],[f43])).
fof(f43,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s(X1,X3) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) | ? [X9] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X9))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X9)))) | ? [X8] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X8))))) & (s(X1,X3) != s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) | (! [X7] : (s('type.closSem.ref'(X0),X2) != s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X7))) | s(X1,X3) != s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X7)))) & ! [X6] : (s('type.closSem.ref'(X0),X2) != s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) | s(X1,X3) != s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6)))))))),
  inference(rectify,[],[f42])).
fof(f42,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s(X1,X3) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) | ? [X7] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X7))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X7)))) | ? [X6] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))))) & (s(X1,X3) != s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) | (! [X7] : (s('type.closSem.ref'(X0),X2) != s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X7))) | s(X1,X3) != s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X7)))) & ! [X6] : (s('type.closSem.ref'(X0),X2) != s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) | s(X1,X3) != s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6)))))))),
  inference(flattening,[],[f41])).
fof(f41,plain,(
  ? [X0,X1,X2,X3,X4,X5] : ((s(X1,X3) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) | (? [X7] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X7))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X7)))) | ? [X6] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6)))))) & (s(X1,X3) != s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) | (! [X7] : (s('type.closSem.ref'(X0),X2) != s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X7))) | s(X1,X3) != s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X7)))) & ! [X6] : (s('type.closSem.ref'(X0),X2) != s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) | s(X1,X3) != s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6)))))))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ? [X0,X1,X2,X3,X4,X5] : (s(X1,X3) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) <~> (? [X7] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X7))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X7)))) | ? [X6] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5] : (s(X1,X3) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) <=> (? [X7] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X7))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X7)))) | ? [X6] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5] : (s(X1,X3) = s(X1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X0),X2),s(fun('type.list.list'(X0),X1),X5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4))) <=> (? [X7] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ValueArray_1'(s('type.list.list'(X0),X7))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'(X0),X1),X5),s('type.list.list'(X0),X7)))) | ? [X6] : (s('type.closSem.ref'(X0),X2) = s('type.closSem.ref'(X0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) & s(X1,X3) = s(X1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X1),X4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11] : (s(X7,X9) = s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X6),X8),s(fun('type.list.list'(X6),X7),X11),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X10))) <=> (? [X12] : (s('type.closSem.ref'(X6),X8) = s('type.closSem.ref'(X6),'const.closSem.ValueArray_1'(s('type.list.list'(X6),X12))) & s(X7,X9) = s(X7,happ(s(fun('type.list.list'(X6),X7),X11),s('type.list.list'(X6),X12)))) | ? [X12] : (s('type.closSem.ref'(X6),X8) = s('type.closSem.ref'(X6),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))) & s(X7,X9) = s(X7,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X10),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11] : (s(X7,X9) = s(X7,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(X6),X8),s(fun('type.list.list'(X6),X7),X11),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X10))) <=> (? [X12] : (s('type.closSem.ref'(X6),X8) = s('type.closSem.ref'(X6),'const.closSem.ValueArray_1'(s('type.list.list'(X6),X12))) & s(X7,X9) = s(X7,happ(s(fun('type.list.list'(X6),X7),X11),s('type.list.list'(X6),X12)))) | ? [X12] : (s('type.closSem.ref'(X6),X8) = s('type.closSem.ref'(X6),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))) & s(X7,X9) = s(X7,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X7),X10),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X12))))))),
  file('thm.closProps.eqs|split|4','thm.closProps.eqs|split|4')).
fof(f70,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) | $spl6),
  inference(cnf_transformation,[],[f70_D])).
fof(f70_D,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f48,plain,(
  s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4)))),
  inference(cnf_transformation,[],[f44])).
fof(f72,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | $spl8),
  inference(cnf_transformation,[],[f72_D])).
fof(f72_D,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f49,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | s('type.closSem.ref'(sK0),sK2) = s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),sK6))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4)))),
  inference(cnf_transformation,[],[f44])).
fof(f50,plain,(
  s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK7))) | s(sK1,sK3) = s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),sK6))) | s(sK1,sK3) = s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4)))),
  inference(cnf_transformation,[],[f44])).
fof(f66,plain,(
  s(sK1,sK3) != s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4))) | $spl1),
  inference(cnf_transformation,[],[f66_D])).
fof(f66_D,plain,(
  s(sK1,sK3) != s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f68,plain,(
  ( ! [X7] : (s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),X7))) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),X7)))) ) | $spl4),
  inference(cnf_transformation,[],[f68_D])).
fof(f68_D,plain,(
  ( ! [X7] : (s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),X7))) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),X7)))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f51,plain,(
  ( ! [X7] : (s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'(sK0),sK1),sK5),s('type.list.list'(sK0),X7))) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ValueArray_1'(s('type.list.list'(sK0),X7))) | s(sK1,sK3) != s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4)))) )),
  inference(cnf_transformation,[],[f44])).
fof(f67,plain,(
  ( ! [X6] : (s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6)))) ) | $spl2),
  inference(cnf_transformation,[],[f67_D])).
fof(f67_D,plain,(
  ( ! [X6] : (s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f52,plain,(
  ( ! [X6] : (s(sK1,sK3) != s(sK1,happ(s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4),s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) | s('type.closSem.ref'(sK0),sK2) != s('type.closSem.ref'(sK0),'const.closSem.ByteArray_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X6))) | s(sK1,sK3) != s(sK1,'const.closSem.ref_CASE_3'(s('type.closSem.ref'(sK0),sK2),s(fun('type.list.list'(sK0),sK1),sK5),s(fun('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK1),sK4)))) )),
  inference(cnf_transformation,[],[f44])).
% SZS output end Proof for thm.closProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 59
% Passive clauses: 846
% Generated clauses: 2193
% Final active clauses: 46
% Final passive clauses: 471
% Input formulas: 21
% Initial clauses: 18
% 
% Selected by SInE selection: 7
% SInE iterations: 1
% 
% Duplicate literals: 10
% Trivial inequalities: 39
% Fw subsumption resolutions: 38
% Fw demodulations: 621
% Bw demodulations: 1
% 
% Simple tautologies: 12
% Forward subsumptions: 519
% 
% Binary resolution: 14
% Forward superposition: 628
% Backward superposition: 702
% Self superposition: 17
% Equality resolution: 9
% 
% Split clauses: 32
% Split components: 68
% SAT solver clauses: 44
% SAT solver binary clauses: 3
% 
% Sat splits: 32
% Sat splitting refutations: 11
% 
% Memory used [KB]: 5756
% Time elapsed: 0.139 s
% ------------------------------
% ------------------------------
% Success in time 11.89 s
