Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.ml_optimise
% (129105)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 193
% Passive clauses: 1528
% Generated clauses: 16497
% Final active clauses: 173
% Final passive clauses: 1133
% Input formulas: 16
% Initial clauses: 47
% 
% Duplicate literals: 1141
% Trivial inequalities: 142
% Fw subsumption resolutions: 2294
% Fw demodulations: 1595
% Bw demodulations: 20
% 
% Simple tautologies: 379
% Equational tautologies: 43
% Forward subsumptions: 8132
% 
% Binary resolution: 257
% Forward superposition: 6111
% Backward superposition: 5773
% Self superposition: 228
% Equality factoring: 141
% Equality resolution: 40
% 
% Split clauses: 955
% Split components: 1961
% SAT solver clauses: 1447
% SAT solver unit clauses: 79
% SAT solver binary clauses: 281
% 
% Sat splits: 955
% 
% TWLsolver clauses: 1445
% TWLsolver calls for satisfiability: 158
% 
% Memory used [KB]: 10874
% Time elapsed: 0.669 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.ml_optimise
% (129131)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 185
% Passive clauses: 561
% Generated clauses: 12160
% Final active clauses: 150
% Final passive clauses: 329
% Input formulas: 16
% Initial clauses: 47
% 
% Duplicate literals: 1280
% Trivial inequalities: 127
% Fw subsumption resolutions: 439
% Fw demodulations: 480
% Bw demodulations: 65
% Condensations: 2114
% 
% Simple tautologies: 144
% Equational tautologies: 72
% Forward subsumptions: 5052
% Bw demodulations to eq. taut.: 10
% 
% Binary resolution: 143
% Forward superposition: 3567
% Backward superposition: 2877
% Self superposition: 256
% Equality factoring: 183
% Equality resolution: 22
% 
% Split clauses: 120
% Split components: 243
% SAT solver clauses: 1208
% SAT solver unit clauses: 67
% SAT solver binary clauses: 87
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 120
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 1207
% TWLsolver calls for satisfiability: 900
% 
% Memory used [KB]: 12281
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.ml_optimise
% (129148)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 512
% Passive clauses: 3768
% Generated clauses: 127398
% Final active clauses: 128
% Final passive clauses: 474
% Input formulas: 16
% Initial clauses: 47
% 
% Duplicate literals: 8560
% Trivial inequalities: 832
% Fw subsumption resolutions: 9929
% Fw demodulations: 14478
% Bw demodulations: 2294
% Condensations: 13830
% Global subsumptions: 2768
% 
% Simple tautologies: 1126
% Equational tautologies: 2610
% Forward subsumptions: 65589
% Fw demodulations to eq. taut.: 6
% Bw demodulations to eq. taut.: 104
% 
% Unit resulting resolution: 8746
% Forward superposition: 32913
% Backward superposition: 21400
% Self superposition: 690
% Equality factoring: 473
% Equality resolution: 65
% 
% Split clauses: 460
% Split components: 963
% SAT solver clauses: 10332
% SAT solver unit clauses: 97
% SAT solver binary clauses: 997
% 
% Sat splits: 460
% Sat splitting refutations: 2874
% 
% Memory used [KB]: 64092
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 31 next slice time: 31
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.ml_optimise
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_optimise
% SZS output start Proof for thm.ml_optimise
fof(f7279,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f106,f165,f294,f121,f1527,f1591,f1542,f1777,f1793,f1778,f1795,f1808,f1921,f1922,f2053,f1937,f2054,f1794,f1938,f2140,f2211,f2158,f2157,f2669,f2685,f2684,f2700,f2771,f2718,f2717,f3575,f3638,f3694,f3695,f3784,f3696,f3697,f3698,f3699,f3700,f3701,f3702,f3703,f3815,f3790,f3816,f3763,f3875,f3896,f3957,f3978,f4041,f4127,f4064,f4128,f4129,f4130,f4131,f4132,f4133,f4134,f4135,f4136,f4138,f3794,f4140,f4200,f4235,f3792,f4239,f4240,f4306,f4307,f4394,f4493,f4430,f4494,f4497,f4500,f4503,f4506,f4509,f4512,f4515,f4518,f4522,f3798,f4524,f4531,f3800,f4590,f4641,f3802,f4700,f4752,f3796,f4819,f4756,f4820,f4826,f4832,f4838,f4844,f4850,f4856,f4862,f4868,f4875,f4877,f4880,f4305,f4304,f4888,f3808,f4955,f5077,f5144,f5211,f5148,f5212,f5219,f5226,f5233,f5240,f5247,f5254,f5261,f5268,f5276,f3804,f5278,f3767,f5341,f5415,f5425,f3806,f5491,f5573,f5641,f5577,f5642,f5651,f5660,f5669,f5678,f5687,f5696,f5705,f5714,f5724,f3810,f5727,f5730,f5801,f5736,f5812,f5738,f5813,f5739,f5814,f5740,f5815,f5741,f5816,f5742,f5817,f5744,f5818,f5745,f5819,f5751,f5820,f5753,f5821,f5755,f5822,f5760,f5823,f5811,f5836,f5871,f5886,f5899,f5912,f5838,f5925,f5858,f5873,f5856,f5854,f5852,f5850,f5848,f5846,f5844,f5842,f5840,f5951,f6023,f5959,f6024,f6034,f6044,f6054,f6064,f6074,f6084,f6094,f6104,f6115,f6118,f6121,f6276,f6212,f6277,f6287,f6297,f6307,f6317,f6327,f6337,f6347,f6357,f6368,f6371,f6614,f6550,f6615,f6625,f6635,f6645,f6655,f6665,f6675,f6685,f6695,f6706,f6709,f6797,f6799,f6149,f6147,f6145,f6143,f6141,f6139,f6137,f6135,f6133,f6131,f6129,f6127,f6125,f6868,f3759,f6805,f6869,f122,f6879,f6889,f6899,f6909,f3786,f6919,f3812,f6929,f3814,f3761,f6939,f6949,f3788,f3811,f6960,f5803,f3898,f6962,f3980,f3783,f3781,f3779,f3777,f3775,f3773,f3771,f3769,f3765,f7051])).
fof(f7051,plain,(
  $false | $spl82),
  inference(subsumption_resolution,[],[f6967,f109])).
fof(f109,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2)))),
  inference(resolution,[],[f72,f97])).
fof(f97,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'T_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f30])).
fof(f30,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X41] : (s(bool,'T_0') = s(bool,X41) <=> p(s(bool,X41)))),
  file('thm.ml_optimise.let_id_ind','thm.bool.EQ_CLAUSES|split|0')).
fof(f72,plain,(
  ~p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))))),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X25,X26,X27] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X25))),s('type.ast.exp',X26),s('type.ast.exp',X27)))))) & ! [X24] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X24)))))) & ! [X22,X23] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X22),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X23)))))) & ! [X21] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X21)))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X19),s('type.list.list'('type.ast.exp'),X20)))))) & ! [X18] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X18)))))) & ! [X16,X17] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X16),s('type.ast.exp',X17)))))) & ! [X14,X15] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X14),s('type.list.list'('type.ast.exp'),X15)))))) & ! [X11,X12,X13] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X11),s('type.ast.exp',X12),s('type.ast.exp',X13)))))) & ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X8),s('type.ast.exp',X9),s('type.ast.exp',X10)))))) & ! [X6,X7] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7)))))) & ! [X4,X5] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X4),s('type.ast.exp',X5)))))) & ! [X2,X3] : p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X2),s('type.ast.exp',X3)))))) & ~p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK1,sK2])],[f45])).
fof(f45,plain,(
  ? [X0] : (! [X25,X26,X27] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X25))),s('type.ast.exp',X26),s('type.ast.exp',X27)))))) & ! [X24] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X24)))))) & ! [X22,X23] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X22),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X23)))))) & ! [X21] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X21)))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X19),s('type.list.list'('type.ast.exp'),X20)))))) & ! [X18] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X18)))))) & ! [X16,X17] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X16),s('type.ast.exp',X17)))))) & ! [X14,X15] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X14),s('type.list.list'('type.ast.exp'),X15)))))) & ! [X11,X12,X13] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X11),s('type.ast.exp',X12),s('type.ast.exp',X13)))))) & ! [X8,X9,X10] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X8),s('type.ast.exp',X9),s('type.ast.exp',X10)))))) & ! [X6,X7] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7)))))) & ! [X4,X5] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X4),s('type.ast.exp',X5)))))) & ! [X2,X3] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X2),s('type.ast.exp',X3)))))) & ? [X1] : ~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',X1)))))),
  inference(rectify,[],[f38])).
fof(f38,plain,(
  ? [X0] : (! [X24,X25,X26] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X24))),s('type.ast.exp',X25),s('type.ast.exp',X26)))))) & ! [X23] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X23)))))) & ! [X21,X22] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X21),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X22)))))) & ! [X20] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X20)))))) & ! [X18,X19] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X18),s('type.list.list'('type.ast.exp'),X19)))))) & ! [X17] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X17)))))) & ! [X15,X16] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X15),s('type.ast.exp',X16)))))) & ! [X13,X14] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X13),s('type.list.list'('type.ast.exp'),X14)))))) & ! [X10,X11,X12] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X10),s('type.ast.exp',X11),s('type.ast.exp',X12)))))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X7),s('type.ast.exp',X8),s('type.ast.exp',X9)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6)))))) & ! [X3,X4] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X3),s('type.ast.exp',X4)))))) & ! [X1,X2] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))))) & ? [X27] : ~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',X27)))))),
  inference(flattening,[],[f37])).
fof(f37,plain,(
  ? [X0] : ((! [X24,X25,X26] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X24))),s('type.ast.exp',X25),s('type.ast.exp',X26)))))) & ! [X23] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X23)))))) & ! [X21,X22] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X21),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X22)))))) & ! [X20] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X20)))))) & ! [X18,X19] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X18),s('type.list.list'('type.ast.exp'),X19)))))) & ! [X17] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X17)))))) & ! [X15,X16] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X15),s('type.ast.exp',X16)))))) & ! [X13,X14] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X13),s('type.list.list'('type.ast.exp'),X14)))))) & ! [X10,X11,X12] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X10),s('type.ast.exp',X11),s('type.ast.exp',X12)))))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X7),s('type.ast.exp',X8),s('type.ast.exp',X9)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6)))))) & ! [X3,X4] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X3),s('type.ast.exp',X4)))))) & ! [X1,X2] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2))))))) & ? [X27] : ~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',X27)))))),
  inference(ennf_transformation,[],[f18])).
fof(f18,plain,(
  ~! [X0] : ((! [X24,X25,X26] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X24))),s('type.ast.exp',X25),s('type.ast.exp',X26)))))) & ! [X23] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X23)))))) & ! [X21,X22] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X21),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X22)))))) & ! [X20] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X20)))))) & ! [X18,X19] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X18),s('type.list.list'('type.ast.exp'),X19)))))) & ! [X17] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X17)))))) & ! [X15,X16] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X15),s('type.ast.exp',X16)))))) & ! [X13,X14] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X13),s('type.list.list'('type.ast.exp'),X14)))))) & ! [X10,X11,X12] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X10),s('type.ast.exp',X11),s('type.ast.exp',X12)))))) & ! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X7),s('type.ast.exp',X8),s('type.ast.exp',X9)))))) & ! [X5,X6] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6)))))) & ! [X3,X4] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X3),s('type.ast.exp',X4)))))) & ! [X1,X2] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2))))))) => ! [X27] : p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',X27)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X7))),s('type.ast.exp',X8),s('type.ast.exp',X9)))))) & ! [X10] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X10)))))) & ! [X11,X12] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X11),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X12)))))) & ! [X13] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X13)))))) & ! [X14,X15] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X14),s('type.list.list'('type.ast.exp'),X15)))))) & ! [X16] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X16)))))) & ! [X17,X18] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X17),s('type.ast.exp',X18)))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X19),s('type.list.list'('type.ast.exp'),X20)))))) & ! [X21,X22,X23] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X21),s('type.ast.exp',X22),s('type.ast.exp',X23)))))) & ! [X24,X25,X26] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X24),s('type.ast.exp',X25),s('type.ast.exp',X26)))))) & ! [X27,X28] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X27),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X28)))))) & ! [X29,X30] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30)))))) & ! [X31,X32] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X31),s('type.ast.exp',X32))))))) => ! [X7] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((! [X7,X8,X9] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X7))),s('type.ast.exp',X8),s('type.ast.exp',X9)))))) & ! [X10] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X10)))))) & ! [X11,X12] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X11),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X12)))))) & ! [X13] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X13)))))) & ! [X14,X15] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X14),s('type.list.list'('type.ast.exp'),X15)))))) & ! [X16] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X16)))))) & ! [X17,X18] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X17),s('type.ast.exp',X18)))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X19),s('type.list.list'('type.ast.exp'),X20)))))) & ! [X21,X22,X23] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X21),s('type.ast.exp',X22),s('type.ast.exp',X23)))))) & ! [X24,X25,X26] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X24),s('type.ast.exp',X25),s('type.ast.exp',X26)))))) & ! [X27,X28] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X27),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X28)))))) & ! [X29,X30] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30)))))) & ! [X31,X32] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X31),s('type.ast.exp',X32))))))) => ! [X7] : p(s(bool,happ(s(fun('type.ast.exp',bool),X6),s('type.ast.exp',X7)))))),
  file('thm.ml_optimise.let_id_ind','thm.ml_optimise.let_id_ind')).
fof(f6967,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl82),
  inference(superposition,[],[f861,f5932])).
fof(f5932,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | $spl82),
  inference(backward_demodulation,[],[f5806,f3810])).
fof(f5806,plain,(
  s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)) | $spl82),
  inference(subsumption_resolution,[],[f5732,f111])).
fof(f111,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2)))),
  inference(resolution,[],[f72,f94])).
fof(f94,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f55])).
fof(f55,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X41] : (s(bool,'F_0') = s(bool,X41) <=> ~p(s(bool,X41)))),
  file('thm.ml_optimise.let_id_ind','thm.bool.EQ_CLAUSES|split|2')).
fof(f5732,plain,(
  s(bool,'F_0') != s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)) | $spl82),
  inference(superposition,[],[f2057,f3810])).
fof(f2057,plain,(
  ( ! [X6,X8,X7] : (s(bool,'F_0') != s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),X6),s('type.ast.exp',X7),s('type.ast.exp',X8))))) | s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.string.char')),X6)) )),
  inference(resolution,[],[f1098,f93])).
fof(f93,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f55])).
fof(f1098,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.ast.exp',X1),s('type.ast.exp',X2)))))) | s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.string.char')),X0)) )),
  inference(superposition,[],[f59,f88])).
fof(f88,plain,(
  ( ! [X0,X1] : (s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK53(X1,X0)))) | s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1)) )),
  inference(cnf_transformation,[],[f51])).
fof(f51,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,sK53(X1,X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK53])],[f22])).
fof(f22,plain,(
  ! [X0,X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(flattening,[],[f21])).
fof(f21,plain,(
  ! [X0] : ! [X1] : (s('type.option.option'(X0),'const.option.NONE_0') = s('type.option.option'(X0),X1) | ? [X2] : s('type.option.option'(X0),X1) = s('type.option.option'(X0),'const.option.SOME_1'(s(X0,X2))))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X43] : ! [X44] : (s('type.option.option'(X43),'const.option.NONE_0') = s('type.option.option'(X43),X44) | ? [X8] : s('type.option.option'(X43),X44) = s('type.option.option'(X43),'const.option.SOME_1'(s(X43,X8))))),
  file('thm.ml_optimise.let_id_ind','thm.option.option_nchotomy')).
fof(f59,plain,(
  ( ! [X26,X27,X25] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X25))),s('type.ast.exp',X26),s('type.ast.exp',X27))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f861,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X0),s('type.ast.exp',X1)))))) )),
  inference(resolution,[],[f70,f98])).
fof(f98,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f57])).
fof(f70,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X4),s('type.ast.exp',X5))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f3765,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl36),
  inference(cnf_transformation,[],[f3765_D])).
fof(f3765_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f3769,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl40),
  inference(cnf_transformation,[],[f3769_D])).
fof(f3769_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f3771,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl42),
  inference(cnf_transformation,[],[f3771_D])).
fof(f3771_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f3773,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl44),
  inference(cnf_transformation,[],[f3773_D])).
fof(f3773_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f3775,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl46),
  inference(cnf_transformation,[],[f3775_D])).
fof(f3775_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f3777,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl48),
  inference(cnf_transformation,[],[f3777_D])).
fof(f3777_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f3779,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl50),
  inference(cnf_transformation,[],[f3779_D])).
fof(f3779_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f3781,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl52),
  inference(cnf_transformation,[],[f3781_D])).
fof(f3781_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f3783,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl54),
  inference(cnf_transformation,[],[f3783_D])).
fof(f3783_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f3980,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl90),
  inference(cnf_transformation,[],[f3980_D])).
fof(f3980_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f6962,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f6961,f3766])).
fof(f3766,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl39),
  inference(cnf_transformation,[],[f3766_D])).
fof(f3766_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl39),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl39])])).
fof(f6961,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f6860,f99])).
fof(f99,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f31])).
fof(f31,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.ml_optimise.let_id_ind',aHL_FALSITY)).
fof(f6860,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f156,f1532])).
fof(f1532,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))),
  inference(resolution,[],[f1513,f94])).
fof(f1513,plain,(
  ~p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(resolution,[],[f108,f105])).
fof(f105,plain,(
  ( ! [X0] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),'const.relation.EMPTY_REL_0'))))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0] : p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),'const.relation.EMPTY_REL_0'))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X43] : p(s(bool,'const.relation.WF_1'(s(fun(X43,fun(X43,bool)),'const.relation.EMPTY_REL_0'))))),
  file('thm.ml_optimise.let_id_ind','thm.relation.WF_EMPTY_REL')).
fof(f108,plain,(
  ( ! [X4] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X4)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,X4,'type.ast.exp')))))) )),
  inference(resolution,[],[f72,f90])).
fof(f90,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK54(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f53,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : ((! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK54(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK54(X2,X1,X0)))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK54])],[f52])).
fof(f52,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X4] : (! [X5] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))))),
  inference(rectify,[],[f41])).
fof(f41,plain,(
  ! [X0,X1] : (~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) | ! [X2] : (? [X3] : (! [X4] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0,X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ! [X0] : ! [X1] : (p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1)))) => ! [X2] : (! [X3] : (! [X4] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X4))),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) => p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) => ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X43] : ! [X45] : (p(s(bool,'const.relation.WF_1'(s(fun(X43,fun(X43,bool)),X45)))) => ! [X6] : (! [X8] : (! [X9] : (p(s(bool,happ(s(fun(X43,bool),happ(s(fun(X43,fun(X43,bool)),X45),s(X43,X9))),s(X43,X8)))) => p(s(bool,happ(s(fun(X43,bool),X6),s(X43,X9))))) => p(s(bool,happ(s(fun(X43,bool),X6),s(X43,X8))))) => ! [X8] : p(s(bool,happ(s(fun(X43,bool),X6),s(X43,X8))))))),
  file('thm.ml_optimise.let_id_ind','thm.relation.WF_INDUCTION_THM')).
fof(f156,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1))))) )),
  inference(superposition,[],[f60,f87])).
fof(f87,plain,(
  ( ! [X0] : (s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X0)),s('type.ast.exp',sK52(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X0)),s('type.ast.exp',sK49(X0)),s('type.ast.exp',sK50(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X0)),s('type.ast.exp',sK44(X0)),s('type.ast.exp',sK45(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X0)),s('type.ast.exp',sK41(X0)),s('type.ast.exp',sK42(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X0)),s('type.list.list'('type.ast.exp'),sK39(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X0)),s('type.ast.exp',sK37(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X0)),s('type.list.list'('type.ast.exp'),sK34(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X0))))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0] : (s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X0)),s('type.list.list'('type.ast.exp'),sK34(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X0)),s('type.ast.exp',sK37(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X0)),s('type.list.list'('type.ast.exp'),sK39(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X0)),s('type.ast.exp',sK41(X0)),s('type.ast.exp',sK42(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X0)),s('type.ast.exp',sK44(X0)),s('type.ast.exp',sK45(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X0)),s('type.ast.exp',sK49(X0)),s('type.ast.exp',sK50(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X0)),s('type.ast.exp',sK52(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK29,sK30,sK31,sK32,sK33,sK34,sK35,sK36,sK37,sK38,sK39,sK40,sK41,sK42,sK43,sK44,sK45,sK46,sK47,sK48,sK49,sK50,sK51,sK52])],[f20])).
fof(f20,plain,(
  ! [X0] : (? [X24] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X24))) | ? [X22,X23] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X22),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X23))) | ? [X21] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X21))) | ? [X19,X20] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X19),s('type.list.list'('type.ast.exp'),X20))) | ? [X18] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X18))) | ? [X16,X17] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X16),s('type.ast.exp',X17))) | ? [X14,X15] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X14),s('type.list.list'('type.ast.exp'),X15))) | ? [X11,X12,X13] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X11),s('type.ast.exp',X12),s('type.ast.exp',X13))) | ? [X8,X9,X10] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X8),s('type.ast.exp',X9),s('type.ast.exp',X10))) | ? [X6,X7] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7))) | ? [X3,X4,X5] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),X3),s('type.ast.exp',X4),s('type.ast.exp',X5))) | ? [X1,X2] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X33] : (? [X34] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X34))) | ? [X34,X35] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X34),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X35))) | ? [X35] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X35))) | ? [X36,X35] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X36),s('type.list.list'('type.ast.exp'),X35))) | ? [X37] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X37))) | ? [X38,X34] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X38),s('type.ast.exp',X34))) | ? [X36,X35] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X36),s('type.list.list'('type.ast.exp'),X35))) | ? [X35,X34,X39] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X35),s('type.ast.exp',X34),s('type.ast.exp',X39))) | ? [X34,X39,X40] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X34),s('type.ast.exp',X39),s('type.ast.exp',X40))) | ? [X34,X35] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X34),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X35))) | ? [X36,X34,X39] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),X36),s('type.ast.exp',X34),s('type.ast.exp',X39))) | ? [X35,X34] : s('type.ast.exp',X33) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X35),s('type.ast.exp',X34))))),
  file('thm.ml_optimise.let_id_ind','thm.ast.exp_nchotomy')).
fof(f60,plain,(
  ( ! [X24] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X24))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f3898,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | $spl88),
  inference(cnf_transformation,[],[f3898_D])).
fof(f3898_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f5803,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | $spl108),
  inference(cnf_transformation,[],[f5803_D])).
fof(f5803_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f6960,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6959,f5806])).
fof(f6959,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6958,f3791])).
fof(f3791,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | $spl65),
  inference(cnf_transformation,[],[f3791_D])).
fof(f3791_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) <=> ~$spl65),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl65])])).
fof(f6958,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6957,f3793])).
fof(f3793,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | $spl67),
  inference(cnf_transformation,[],[f3793_D])).
fof(f3793_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) <=> ~$spl67),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl67])])).
fof(f6957,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6956,f3795])).
fof(f3795,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | $spl69),
  inference(cnf_transformation,[],[f3795_D])).
fof(f3795_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) <=> ~$spl69),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl69])])).
fof(f6956,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6955,f3797])).
fof(f3797,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | $spl71),
  inference(cnf_transformation,[],[f3797_D])).
fof(f3797_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) <=> ~$spl71),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl71])])).
fof(f6955,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6954,f3799])).
fof(f3799,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | $spl73),
  inference(cnf_transformation,[],[f3799_D])).
fof(f3799_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) <=> ~$spl73),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl73])])).
fof(f6954,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6953,f3801])).
fof(f3801,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | $spl75),
  inference(cnf_transformation,[],[f3801_D])).
fof(f3801_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) <=> ~$spl75),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl75])])).
fof(f6953,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6952,f3803])).
fof(f3803,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | $spl77),
  inference(cnf_transformation,[],[f3803_D])).
fof(f3803_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) <=> ~$spl77),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl77])])).
fof(f6952,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6951,f3805])).
fof(f3805,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | $spl79),
  inference(cnf_transformation,[],[f3805_D])).
fof(f3805_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) <=> ~$spl79),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl79])])).
fof(f6951,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | $spl81),
  inference(subsumption_resolution,[],[f6950,f3807])).
fof(f3807,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | $spl81),
  inference(cnf_transformation,[],[f3807_D])).
fof(f3807_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) <=> ~$spl81),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl81])])).
fof(f6950,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2))))),
  inference(subsumption_resolution,[],[f6859,f99])).
fof(f6859,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2))))),
  inference(superposition,[],[f156,f111])).
fof(f3811,plain,(
  s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl85),
  inference(cnf_transformation,[],[f3811_D])).
fof(f3811_D,plain,(
  s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) <=> ~$spl85),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl85])])).
fof(f3788,plain,(
  s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl61),
  inference(cnf_transformation,[],[f3788_D])).
fof(f3788_D,plain,(
  s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) <=> ~$spl61),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl61])])).
fof(f6949,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6948,f5806])).
fof(f6948,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6947,f3791])).
fof(f6947,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6946,f3793])).
fof(f6946,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6945,f3795])).
fof(f6945,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6944,f3797])).
fof(f6944,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6943,f3799])).
fof(f6943,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6942,f3801])).
fof(f6942,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6941,f3803])).
fof(f6941,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6940,f3805])).
fof(f6940,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6813,f3807])).
fof(f6813,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f156,f2411])).
fof(f2411,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(X0,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(X0,sK1,bool,'type.ast.exp'))))) )),
  inference(resolution,[],[f2000,f97])).
fof(f2000,plain,(
  ( ! [X2] : (~p(s(bool,g(s('type.ast.exp',sK55(X2,sK1,bool,'type.ast.exp'))))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),X2),s('type.ast.exp',sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(X2,sK1,bool,'type.ast.exp'))))) )),
  inference(superposition,[],[f114,f98])).
fof(f114,plain,(
  ( ! [X1] : (s(bool,f(s('type.ast.exp',sK55(X1,sK1,bool,'type.ast.exp')))) != s(bool,g(s('type.ast.exp',sK55(X1,sK1,bool,'type.ast.exp')))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),X1),s('type.ast.exp',sK2))))) )),
  inference(superposition,[],[f72,f104])).
fof(f104,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,X1),X2) = s(fun(X0,X1),X3) | s(X1,f(s(X0,sK55(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK55(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK55(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK55(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK55])],[f42])).
fof(f42,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f34])).
fof(f34,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.ml_optimise.let_id_ind',aHL_EXT)).
fof(f6939,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6938,f5806])).
fof(f6938,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6937,f3791])).
fof(f6937,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6936,f3793])).
fof(f6936,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6935,f3795])).
fof(f6935,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6934,f3797])).
fof(f6934,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6933,f3799])).
fof(f6933,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6932,f3801])).
fof(f6932,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6931,f3803])).
fof(f6931,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6930,f3805])).
fof(f6930,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6812,f3807])).
fof(f6812,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f156,f2383])).
fof(f2383,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,X0,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,X0,bool,'type.ast.exp'))))) )),
  inference(resolution,[],[f1969,f97])).
fof(f1969,plain,(
  ( ! [X2] : (~p(s(bool,g(s('type.ast.exp',sK55(sK1,X2,bool,'type.ast.exp'))))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),X2),s('type.ast.exp',sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,X2,bool,'type.ast.exp'))))) )),
  inference(superposition,[],[f113,f98])).
fof(f113,plain,(
  ( ! [X0] : (s(bool,f(s('type.ast.exp',sK55(sK1,X0,bool,'type.ast.exp')))) != s(bool,g(s('type.ast.exp',sK55(sK1,X0,bool,'type.ast.exp')))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',sK2))))) )),
  inference(superposition,[],[f72,f104])).
fof(f3761,plain,(
  p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl32),
  inference(cnf_transformation,[],[f3761_D])).
fof(f3761_D,plain,(
  p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f3814,plain,(
  s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl87),
  inference(cnf_transformation,[],[f3814_D])).
fof(f3814_D,plain,(
  s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) <=> ~$spl87),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl87])])).
fof(f6929,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6928,f5806])).
fof(f6928,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6927,f3791])).
fof(f6927,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6926,f3793])).
fof(f6926,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6925,f3795])).
fof(f6925,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6924,f3797])).
fof(f6924,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6923,f3799])).
fof(f6923,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6922,f3801])).
fof(f6922,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6921,f3803])).
fof(f6921,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6920,f3805])).
fof(f6920,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f6811,f3807])).
fof(f6811,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f156,f2002])).
fof(f2002,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X4),s('type.ast.exp',sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(X4,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(X4,sK1,bool,'type.ast.exp')))))) )),
  inference(superposition,[],[f114,f94])).
fof(f3812,plain,(
  s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl84),
  inference(cnf_transformation,[],[f3812_D])).
fof(f3812_D,plain,(
  s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f6919,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6918,f5806])).
fof(f6918,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6917,f3791])).
fof(f6917,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6916,f3793])).
fof(f6916,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6915,f3795])).
fof(f6915,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6914,f3797])).
fof(f6914,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6913,f3799])).
fof(f6913,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6912,f3801])).
fof(f6912,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6911,f3803])).
fof(f6911,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6910,f3805])).
fof(f6910,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6810,f3807])).
fof(f6810,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f156,f1999])).
fof(f1999,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X1),s('type.ast.exp',sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(X1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(X1,sK1,bool,'type.ast.exp'))))) )),
  inference(superposition,[],[f114,f103])).
fof(f103,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.ml_optimise.let_id_ind',aHL_BOOL_CASES)).
fof(f3786,plain,(
  s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl58),
  inference(cnf_transformation,[],[f3786_D])).
fof(f3786_D,plain,(
  s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f6909,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6908,f5806])).
fof(f6908,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6907,f3791])).
fof(f6907,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6906,f3793])).
fof(f6906,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6905,f3795])).
fof(f6905,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6904,f3797])).
fof(f6904,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6903,f3799])).
fof(f6903,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6902,f3801])).
fof(f6902,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6901,f3803])).
fof(f6901,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6900,f3805])).
fof(f6900,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6809,f3807])).
fof(f6809,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f156,f1998])).
fof(f1998,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(X0,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(X0,sK1,bool,'type.ast.exp'))))) )),
  inference(superposition,[],[f114,f103])).
fof(f6899,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6898,f5806])).
fof(f6898,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6897,f3791])).
fof(f6897,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6896,f3793])).
fof(f6896,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6895,f3795])).
fof(f6895,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6894,f3797])).
fof(f6894,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6893,f3799])).
fof(f6893,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6892,f3801])).
fof(f6892,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6891,f3803])).
fof(f6891,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6890,f3805])).
fof(f6890,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f6808,f3807])).
fof(f6808,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f156,f1971])).
fof(f1971,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X4),s('type.ast.exp',sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,X4,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,X4,bool,'type.ast.exp')))))) )),
  inference(superposition,[],[f113,f94])).
fof(f6889,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6888,f5806])).
fof(f6888,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6887,f3791])).
fof(f6887,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6886,f3793])).
fof(f6886,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6885,f3795])).
fof(f6885,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6884,f3797])).
fof(f6884,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6883,f3799])).
fof(f6883,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6882,f3801])).
fof(f6882,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6881,f3803])).
fof(f6881,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6880,f3805])).
fof(f6880,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6807,f3807])).
fof(f6807,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f156,f1968])).
fof(f1968,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X1),s('type.ast.exp',sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,X1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,X1,bool,'type.ast.exp'))))) )),
  inference(superposition,[],[f113,f103])).
fof(f6879,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6878,f5806])).
fof(f6878,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6877,f3791])).
fof(f6877,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6876,f3793])).
fof(f6876,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6875,f3795])).
fof(f6875,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6874,f3797])).
fof(f6874,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6873,f3799])).
fof(f6873,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6872,f3801])).
fof(f6872,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6871,f3803])).
fof(f6871,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6870,f3805])).
fof(f6870,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6806,f3807])).
fof(f6806,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f156,f1967])).
fof(f1967,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,X0,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,X0,bool,'type.ast.exp'))))) )),
  inference(superposition,[],[f113,f103])).
fof(f122,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0))))) ) | $spl2),
  inference(cnf_transformation,[],[f122_D])).
fof(f122_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0))))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f6869,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl192),
  inference(cnf_transformation,[],[f6869_D])).
fof(f6869_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl192),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl192])])).
fof(f6805,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f156,f90])).
fof(f3759,plain,(
  p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl30),
  inference(cnf_transformation,[],[f3759_D])).
fof(f3759_D,plain,(
  p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f6868,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f6804,f3766])).
fof(f6804,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f156,f3668])).
fof(f3668,plain,(
  ( ! [X5] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),X5),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,X5,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,X5,bool,'type.ast.exp')))))) )),
  inference(trivial_inequality_removal,[],[f3667])).
fof(f3667,plain,(
  ( ! [X5] : (s(bool,'F_0') != s(bool,'F_0') | ~p(s(bool,happ(s(fun('type.ast.exp',bool),X5),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,X5,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,X5,bool,'type.ast.exp')))))) )),
  inference(superposition,[],[f2280,f92])).
fof(f92,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f25])).
fof(f25,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X41] : (s(bool,'F_0') = s(bool,X41) <=> ~p(s(bool,X41)))),
  file('thm.ml_optimise.let_id_ind','thm.bool.EQ_CLAUSES|split|3')).
fof(f2280,plain,(
  ( ! [X4] : (s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,X4,bool,'type.ast.exp')))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),X4),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,X4,bool,'type.ast.exp')))))) )),
  inference(superposition,[],[f1534,f94])).
fof(f1534,plain,(
  ( ! [X0] : (s(bool,f(s('type.ast.exp',sK55(sK1,X0,bool,'type.ast.exp')))) != s(bool,g(s('type.ast.exp',sK55(sK1,X0,bool,'type.ast.exp')))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),X0),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))) )),
  inference(superposition,[],[f1513,f104])).
fof(f6125,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))),s('type.ast.exp',sK4('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK5('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl162),
  inference(cnf_transformation,[],[f6125_D])).
fof(f6125_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))),s('type.ast.exp',sK4('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK5('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f6127,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl164),
  inference(cnf_transformation,[],[f6127_D])).
fof(f6127_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f6129,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl166),
  inference(cnf_transformation,[],[f6129_D])).
fof(f6129_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f6131,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl168),
  inference(cnf_transformation,[],[f6131_D])).
fof(f6131_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f6133,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK11('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl170),
  inference(cnf_transformation,[],[f6133_D])).
fof(f6133_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK11('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f6135,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl172),
  inference(cnf_transformation,[],[f6135_D])).
fof(f6135_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl172),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl172])])).
fof(f6137,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK14('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl174),
  inference(cnf_transformation,[],[f6137_D])).
fof(f6137_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK14('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl174),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl174])])).
fof(f6139,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK16('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl176),
  inference(cnf_transformation,[],[f6139_D])).
fof(f6139_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK16('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl176),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl176])])).
fof(f6141,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK18('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK19('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl178),
  inference(cnf_transformation,[],[f6141_D])).
fof(f6141_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK18('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK19('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl178),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl178])])).
fof(f6143,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK21('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK22('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl180),
  inference(cnf_transformation,[],[f6143_D])).
fof(f6143_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK21('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK22('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl180),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl180])])).
fof(f6145,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl182),
  inference(cnf_transformation,[],[f6145_D])).
fof(f6145_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl182),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl182])])).
fof(f6147,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK25('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK26('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl184),
  inference(cnf_transformation,[],[f6147_D])).
fof(f6147_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK25('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK26('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl184),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl184])])).
fof(f6149,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK28('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl186),
  inference(cnf_transformation,[],[f6149_D])).
fof(f6149_D,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK28('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl186),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl186])])).
fof(f6799,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK28('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK25('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK26('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK21('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK22('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK18('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK19('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK16('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK14('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK11('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))),s('type.ast.exp',sK4('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK5('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | ($spl82 | $spl111)),
  inference(resolution,[],[f5955,f86])).
fof(f86,plain,(
  ( ! [X0] : (s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27(X0)),s('type.ast.exp',sK28(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK25(X0)),s('type.ast.exp',sK26(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20(X0)),s('type.ast.exp',sK21(X0)),s('type.ast.exp',sK22(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17(X0)),s('type.ast.exp',sK18(X0)),s('type.ast.exp',sK19(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15(X0)),s('type.list.list'('type.ast.exp'),sK16(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13(X0)),s('type.ast.exp',sK14(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10(X0)),s('type.list.list'('type.ast.exp'),sK11(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3(X0)))),s('type.ast.exp',sK4(X0)),s('type.ast.exp',sK5(X0)))) | sP0(X0)) )),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  ! [X0] : (sP0(X0) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3(X0)))),s('type.ast.exp',sK4(X0)),s('type.ast.exp',sK5(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10(X0)),s('type.list.list'('type.ast.exp'),sK11(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13(X0)),s('type.ast.exp',sK14(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15(X0)),s('type.list.list'('type.ast.exp'),sK16(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17(X0)),s('type.ast.exp',sK18(X0)),s('type.ast.exp',sK19(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20(X0)),s('type.ast.exp',sK21(X0)),s('type.ast.exp',sK22(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK25(X0)),s('type.ast.exp',sK26(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27(X0)),s('type.ast.exp',sK28(X0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27,sK28])],[f48])).
fof(f48,plain,(
  ! [X0] : (sP0(X0) | ? [X24,X25,X26] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X24))),s('type.ast.exp',X25),s('type.ast.exp',X26))) | ? [X23] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X23))) | ? [X21,X22] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X21),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X22))) | ? [X20] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X20))) | ? [X18,X19] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X18),s('type.list.list'('type.ast.exp'),X19))) | ? [X17] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X17))) | ? [X15,X16] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X15),s('type.ast.exp',X16))) | ? [X13,X14] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X13),s('type.list.list'('type.ast.exp'),X14))) | ? [X10,X11,X12] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) | ? [X7,X8,X9] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X7),s('type.ast.exp',X8),s('type.ast.exp',X9))) | ? [X5,X6] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X5),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X6))) | ? [X3,X4] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X3),s('type.ast.exp',X4))) | ? [X1,X2] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2))))),
  inference(rectify,[],[f44])).
fof(f44,plain,(
  ! [X0] : (sP0(X0) | ? [X50,X51,X52] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X50))),s('type.ast.exp',X51),s('type.ast.exp',X52))) | ? [X49] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X49))) | ? [X47,X48] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X47),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X48))) | ? [X46] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X46))) | ? [X44,X45] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X44),s('type.list.list'('type.ast.exp'),X45))) | ? [X43] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X43))) | ? [X41,X42] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X41),s('type.ast.exp',X42))) | ? [X39,X40] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X39),s('type.list.list'('type.ast.exp'),X40))) | ? [X36,X37,X38] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X36),s('type.ast.exp',X37),s('type.ast.exp',X38))) | ? [X33,X34,X35] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X33),s('type.ast.exp',X34),s('type.ast.exp',X35))) | ? [X31,X32] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X31),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X32))) | ? [X29,X30] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X27,X28] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X27),s('type.ast.exp',X28))))),
  inference(definition_folding,[],[f40,f43])).
fof(f43,plain,(
  ! [X0] : (~sP0(X0) | (! [X26] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) & ! [X24,X25] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) & ! [X23] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) & ! [X21,X22] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) & ! [X20] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) & ! [X18,X19] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) & ! [X16,X17] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) & ! [X13,X14,X15] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) & ! [X10,X11,X12] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) & ! [X8,X9] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) & ! [X6,X7] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) & ! [X3,X4,X5] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X4),s('type.ast.exp',X5))) & ! [X1,X2] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f40,plain,(
  ! [X0] : ((! [X26] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) & ! [X24,X25] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) & ! [X23] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) & ! [X21,X22] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) & ! [X20] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) & ! [X18,X19] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) & ! [X16,X17] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) & ! [X13,X14,X15] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) & ! [X10,X11,X12] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) & ! [X8,X9] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) & ! [X6,X7] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) & ! [X3,X4,X5] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X4),s('type.ast.exp',X5))) & ! [X1,X2] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))) | ? [X50,X51,X52] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X50))),s('type.ast.exp',X51),s('type.ast.exp',X52))) | ? [X49] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X49))) | ? [X47,X48] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X47),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X48))) | ? [X46] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X46))) | ? [X44,X45] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X44),s('type.list.list'('type.ast.exp'),X45))) | ? [X43] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X43))) | ? [X41,X42] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X41),s('type.ast.exp',X42))) | ? [X39,X40] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X39),s('type.list.list'('type.ast.exp'),X40))) | ? [X36,X37,X38] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X36),s('type.ast.exp',X37),s('type.ast.exp',X38))) | ? [X33,X34,X35] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X33),s('type.ast.exp',X34),s('type.ast.exp',X35))) | ? [X31,X32] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X31),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X32))) | ? [X29,X30] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X27,X28] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X27),s('type.ast.exp',X28))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ((! [X26] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) & ! [X24,X25] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) & ! [X23] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) & ! [X21,X22] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) & ! [X20] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) & ! [X18,X19] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) & ! [X16,X17] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) & ! [X13,X14,X15] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) & ! [X10,X11,X12] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) & ! [X8,X9] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) & ! [X6,X7] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) & ! [X3,X4,X5] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X4),s('type.ast.exp',X5))) & ! [X1,X2] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))) | (? [X50,X51,X52] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X50))),s('type.ast.exp',X51),s('type.ast.exp',X52))) | ? [X49] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X49))) | ? [X47,X48] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X47),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X48))) | ? [X46] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X46))) | ? [X44,X45] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X44),s('type.list.list'('type.ast.exp'),X45))) | ? [X43] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X43))) | ? [X41,X42] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X41),s('type.ast.exp',X42))) | ? [X39,X40] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X39),s('type.list.list'('type.ast.exp'),X40))) | ? [X36,X37,X38] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X36),s('type.ast.exp',X37),s('type.ast.exp',X38))) | ? [X33,X34,X35] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X33),s('type.ast.exp',X34),s('type.ast.exp',X35))) | ? [X31,X32] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X31),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X32))) | ? [X29,X30] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X27,X28] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X27),s('type.ast.exp',X28)))))),
  inference(ennf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0] : ((? [X26] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) | ? [X24,X25] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ? [X23] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) | ? [X21,X22] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) | ? [X20] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) | ? [X18,X19] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) | ? [X16,X17] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ? [X13,X14,X15] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) | ? [X10,X11,X12] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) | ? [X8,X9] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ? [X6,X7] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) | ? [X3,X4,X5] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X4),s('type.ast.exp',X5))) | ? [X1,X2] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))) => (? [X50,X51,X52] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X50))),s('type.ast.exp',X51),s('type.ast.exp',X52))) | ? [X49] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X49))) | ? [X47,X48] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X47),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X48))) | ? [X46] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X46))) | ? [X44,X45] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X44),s('type.list.list'('type.ast.exp'),X45))) | ? [X43] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X43))) | ? [X41,X42] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X41),s('type.ast.exp',X42))) | ? [X39,X40] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X39),s('type.list.list'('type.ast.exp'),X40))) | ? [X36,X37,X38] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X36),s('type.ast.exp',X37),s('type.ast.exp',X38))) | ? [X33,X34,X35] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X33),s('type.ast.exp',X34),s('type.ast.exp',X35))) | ? [X31,X32] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X31),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X32))) | ? [X29,X30] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X27,X28] : s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X27),s('type.ast.exp',X28)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X42] : ((? [X10] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X10))) | ? [X11,X12] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X11),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X12))) | ? [X13] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X13))) | ? [X14,X15] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X14),s('type.list.list'('type.ast.exp'),X15))) | ? [X16] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X16))) | ? [X17,X18] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X17),s('type.ast.exp',X18))) | ? [X19,X20] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X19),s('type.list.list'('type.ast.exp'),X20))) | ? [X21,X22,X23] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X21),s('type.ast.exp',X22),s('type.ast.exp',X23))) | ? [X24,X25,X26] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X24),s('type.ast.exp',X25),s('type.ast.exp',X26))) | ? [X27,X28] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X27),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X28))) | ? [X29,X30] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X7,X8,X9] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X7))),s('type.ast.exp',X8),s('type.ast.exp',X9))) | ? [X31,X32] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X31),s('type.ast.exp',X32)))) => (? [X7,X8,X9] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X7))),s('type.ast.exp',X8),s('type.ast.exp',X9))) | ? [X10] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X10))) | ? [X11,X12] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X11),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X12))) | ? [X13] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X13))) | ? [X14,X15] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X14),s('type.list.list'('type.ast.exp'),X15))) | ? [X16] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X16))) | ? [X17,X18] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X17),s('type.ast.exp',X18))) | ? [X19,X20] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X19),s('type.list.list'('type.ast.exp'),X20))) | ? [X21,X22,X23] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X21),s('type.ast.exp',X22),s('type.ast.exp',X23))) | ? [X24,X25,X26] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X24),s('type.ast.exp',X25),s('type.ast.exp',X26))) | ? [X27,X28] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X27),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X28))) | ? [X29,X30] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X29),s('type.ast.exp',X30))) | ? [X31,X32] : s('type.ast.exp',X42) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X31),s('type.ast.exp',X32)))))),
  file('thm.ml_optimise.let_id_ind','thm.ml_optimise.ml_optimise_|49|9_prove_ltb')).
fof(f5955,plain,(
  ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | ($spl82 | $spl111)),
  inference(forward_demodulation,[],[f5811,f5806])).
fof(f6797,plain,(
  $false | ($spl82 | $spl132)),
  inference(subsumption_resolution,[],[f5932,f5822])).
fof(f6709,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f6708,f3762])).
fof(f3762,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl35),
  inference(cnf_transformation,[],[f3762_D])).
fof(f3762_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl35),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl35])])).
fof(f6708,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f6707,f3766])).
fof(f6707,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f6605,f99])).
fof(f6605,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f251,f1532])).
fof(f251,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f64,f87])).
fof(f64,plain,(
  ( ! [X18] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X18))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f6706,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6705,f5806])).
fof(f6705,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6704,f3789])).
fof(f3789,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl63),
  inference(cnf_transformation,[],[f3789_D])).
fof(f3789_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) <=> ~$spl63),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl63])])).
fof(f6704,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6703,f3791])).
fof(f6703,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6702,f3793])).
fof(f6702,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6701,f3795])).
fof(f6701,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6700,f3799])).
fof(f6700,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6699,f3801])).
fof(f6699,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6698,f3803])).
fof(f6698,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6697,f3805])).
fof(f6697,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl81),
  inference(subsumption_resolution,[],[f6696,f3807])).
fof(f6696,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f6604,f99])).
fof(f6604,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f251,f111])).
fof(f6695,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6694,f5806])).
fof(f6694,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6693,f3789])).
fof(f6693,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6692,f3791])).
fof(f6692,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6691,f3793])).
fof(f6691,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6690,f3795])).
fof(f6690,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6689,f3799])).
fof(f6689,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6688,f3801])).
fof(f6688,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6687,f3803])).
fof(f6687,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6686,f3805])).
fof(f6686,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6558,f3807])).
fof(f6558,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f251,f2411])).
fof(f6685,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6684,f5806])).
fof(f6684,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6683,f3789])).
fof(f6683,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6682,f3791])).
fof(f6682,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6681,f3793])).
fof(f6681,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6680,f3795])).
fof(f6680,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6679,f3799])).
fof(f6679,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6678,f3801])).
fof(f6678,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6677,f3803])).
fof(f6677,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6676,f3805])).
fof(f6676,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6557,f3807])).
fof(f6557,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f251,f2383])).
fof(f6675,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6674,f5806])).
fof(f6674,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6673,f3789])).
fof(f6673,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6672,f3791])).
fof(f6672,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6671,f3793])).
fof(f6671,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6670,f3795])).
fof(f6670,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6669,f3799])).
fof(f6669,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6668,f3801])).
fof(f6668,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6667,f3803])).
fof(f6667,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6666,f3805])).
fof(f6666,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f6556,f3807])).
fof(f6556,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f251,f2002])).
fof(f6665,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6664,f5806])).
fof(f6664,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6663,f3789])).
fof(f6663,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6662,f3791])).
fof(f6662,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6661,f3793])).
fof(f6661,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6660,f3795])).
fof(f6660,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6659,f3799])).
fof(f6659,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6658,f3801])).
fof(f6658,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6657,f3803])).
fof(f6657,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6656,f3805])).
fof(f6656,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6555,f3807])).
fof(f6555,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f251,f1999])).
fof(f6655,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6654,f5806])).
fof(f6654,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6653,f3789])).
fof(f6653,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6652,f3791])).
fof(f6652,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6651,f3793])).
fof(f6651,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6650,f3795])).
fof(f6650,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6649,f3799])).
fof(f6649,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6648,f3801])).
fof(f6648,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6647,f3803])).
fof(f6647,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6646,f3805])).
fof(f6646,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6554,f3807])).
fof(f6554,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f251,f1998])).
fof(f6645,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6644,f5806])).
fof(f6644,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6643,f3789])).
fof(f6643,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6642,f3791])).
fof(f6642,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6641,f3793])).
fof(f6641,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6640,f3795])).
fof(f6640,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6639,f3799])).
fof(f6639,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6638,f3801])).
fof(f6638,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6637,f3803])).
fof(f6637,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6636,f3805])).
fof(f6636,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f6553,f3807])).
fof(f6553,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f251,f1971])).
fof(f6635,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6634,f5806])).
fof(f6634,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6633,f3789])).
fof(f6633,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6632,f3791])).
fof(f6632,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6631,f3793])).
fof(f6631,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6630,f3795])).
fof(f6630,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6629,f3799])).
fof(f6629,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6628,f3801])).
fof(f6628,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6627,f3803])).
fof(f6627,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6626,f3805])).
fof(f6626,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6552,f3807])).
fof(f6552,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f251,f1968])).
fof(f6625,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6624,f5806])).
fof(f6624,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6623,f3789])).
fof(f6623,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6622,f3791])).
fof(f6622,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6621,f3793])).
fof(f6621,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6620,f3795])).
fof(f6620,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6619,f3799])).
fof(f6619,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6618,f3801])).
fof(f6618,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6617,f3803])).
fof(f6617,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6616,f3805])).
fof(f6616,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6551,f3807])).
fof(f6551,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f251,f1967])).
fof(f6615,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl190),
  inference(cnf_transformation,[],[f6615_D])).
fof(f6615_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl190),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl190])])).
fof(f6550,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f251,f90])).
fof(f6614,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f6613,f3762])).
fof(f6613,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f6549,f3766])).
fof(f6549,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f251,f3668])).
fof(f6371,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f6370,f3762])).
fof(f6370,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f6369,f3766])).
fof(f6369,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f6267,f99])).
fof(f6267,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f427,f1532])).
fof(f427,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f66,f87])).
fof(f66,plain,(
  ( ! [X14,X15] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X14),s('type.list.list'('type.ast.exp'),X15))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f6368,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6367,f5806])).
fof(f6367,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6366,f3789])).
fof(f6366,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6365,f3791])).
fof(f6365,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6364,f3793])).
fof(f6364,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6363,f3795])).
fof(f6363,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6362,f3797])).
fof(f6362,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6361,f3799])).
fof(f6361,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6360,f3803])).
fof(f6360,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6359,f3805])).
fof(f6359,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl81),
  inference(subsumption_resolution,[],[f6358,f3807])).
fof(f6358,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f6266,f99])).
fof(f6266,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f427,f111])).
fof(f6357,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6356,f5806])).
fof(f6356,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6355,f3789])).
fof(f6355,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6354,f3791])).
fof(f6354,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6353,f3793])).
fof(f6353,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6352,f3795])).
fof(f6352,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6351,f3797])).
fof(f6351,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6350,f3799])).
fof(f6350,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6349,f3803])).
fof(f6349,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6348,f3805])).
fof(f6348,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6220,f3807])).
fof(f6220,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f427,f2411])).
fof(f6347,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6346,f5806])).
fof(f6346,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6345,f3789])).
fof(f6345,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6344,f3791])).
fof(f6344,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6343,f3793])).
fof(f6343,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6342,f3795])).
fof(f6342,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6341,f3797])).
fof(f6341,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6340,f3799])).
fof(f6340,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6339,f3803])).
fof(f6339,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6338,f3805])).
fof(f6338,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6219,f3807])).
fof(f6219,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f427,f2383])).
fof(f6337,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6336,f5806])).
fof(f6336,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6335,f3789])).
fof(f6335,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6334,f3791])).
fof(f6334,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6333,f3793])).
fof(f6333,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6332,f3795])).
fof(f6332,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6331,f3797])).
fof(f6331,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6330,f3799])).
fof(f6330,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6329,f3803])).
fof(f6329,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6328,f3805])).
fof(f6328,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f6218,f3807])).
fof(f6218,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f427,f2002])).
fof(f6327,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6326,f5806])).
fof(f6326,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6325,f3789])).
fof(f6325,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6324,f3791])).
fof(f6324,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6323,f3793])).
fof(f6323,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6322,f3795])).
fof(f6322,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6321,f3797])).
fof(f6321,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6320,f3799])).
fof(f6320,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6319,f3803])).
fof(f6319,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6318,f3805])).
fof(f6318,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6217,f3807])).
fof(f6217,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f427,f1999])).
fof(f6317,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6316,f5806])).
fof(f6316,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6315,f3789])).
fof(f6315,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6314,f3791])).
fof(f6314,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6313,f3793])).
fof(f6313,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6312,f3795])).
fof(f6312,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6311,f3797])).
fof(f6311,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6310,f3799])).
fof(f6310,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6309,f3803])).
fof(f6309,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6308,f3805])).
fof(f6308,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6216,f3807])).
fof(f6216,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f427,f1998])).
fof(f6307,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6306,f5806])).
fof(f6306,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6305,f3789])).
fof(f6305,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6304,f3791])).
fof(f6304,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6303,f3793])).
fof(f6303,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6302,f3795])).
fof(f6302,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6301,f3797])).
fof(f6301,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6300,f3799])).
fof(f6300,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6299,f3803])).
fof(f6299,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6298,f3805])).
fof(f6298,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f6215,f3807])).
fof(f6215,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f427,f1971])).
fof(f6297,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6296,f5806])).
fof(f6296,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6295,f3789])).
fof(f6295,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6294,f3791])).
fof(f6294,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6293,f3793])).
fof(f6293,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6292,f3795])).
fof(f6292,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6291,f3797])).
fof(f6291,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6290,f3799])).
fof(f6290,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6289,f3803])).
fof(f6289,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6288,f3805])).
fof(f6288,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6214,f3807])).
fof(f6214,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f427,f1968])).
fof(f6287,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6286,f5806])).
fof(f6286,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6285,f3789])).
fof(f6285,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6284,f3791])).
fof(f6284,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6283,f3793])).
fof(f6283,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6282,f3795])).
fof(f6282,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6281,f3797])).
fof(f6281,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6280,f3799])).
fof(f6280,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6279,f3803])).
fof(f6279,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6278,f3805])).
fof(f6278,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f6213,f3807])).
fof(f6213,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f427,f1967])).
fof(f6277,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl188),
  inference(cnf_transformation,[],[f6277_D])).
fof(f6277_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl188),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl188])])).
fof(f6212,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f427,f90])).
fof(f6276,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f6275,f3762])).
fof(f6275,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f6211,f3766])).
fof(f6211,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f427,f3668])).
fof(f6121,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK28('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK25('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK26('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK21('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK22('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK18('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK19('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK16('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK14('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK11('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))),s('type.ast.exp',sK4('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK5('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | ($spl82 | $spl111)),
  inference(resolution,[],[f5955,f86])).
fof(f6118,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f6117,f3762])).
fof(f6117,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f6116,f3766])).
fof(f6116,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f6014,f99])).
fof(f6014,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f337,f1532])).
fof(f337,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f65,f87])).
fof(f65,plain,(
  ( ! [X17,X16] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X16),s('type.ast.exp',X17))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f6115,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6114,f5806])).
fof(f6114,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6113,f3789])).
fof(f6113,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6112,f3791])).
fof(f6112,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6111,f3793])).
fof(f6111,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6110,f3795])).
fof(f6110,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6109,f3797])).
fof(f6109,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6108,f3801])).
fof(f6108,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6107,f3803])).
fof(f6107,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6106,f3805])).
fof(f6106,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl81),
  inference(subsumption_resolution,[],[f6105,f3807])).
fof(f6105,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f6013,f99])).
fof(f6013,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f337,f111])).
fof(f6104,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6103,f5806])).
fof(f6103,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6102,f3789])).
fof(f6102,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6101,f3791])).
fof(f6101,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6100,f3793])).
fof(f6100,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6099,f3795])).
fof(f6099,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6098,f3797])).
fof(f6098,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6097,f3801])).
fof(f6097,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6096,f3803])).
fof(f6096,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6095,f3805])).
fof(f6095,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5967,f3807])).
fof(f5967,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f337,f2411])).
fof(f6094,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6093,f5806])).
fof(f6093,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6092,f3789])).
fof(f6092,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6091,f3791])).
fof(f6091,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6090,f3793])).
fof(f6090,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6089,f3795])).
fof(f6089,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6088,f3797])).
fof(f6088,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6087,f3801])).
fof(f6087,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6086,f3803])).
fof(f6086,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6085,f3805])).
fof(f6085,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5966,f3807])).
fof(f5966,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f337,f2383])).
fof(f6084,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6083,f5806])).
fof(f6083,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6082,f3789])).
fof(f6082,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6081,f3791])).
fof(f6081,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6080,f3793])).
fof(f6080,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6079,f3795])).
fof(f6079,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6078,f3797])).
fof(f6078,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6077,f3801])).
fof(f6077,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6076,f3803])).
fof(f6076,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6075,f3805])).
fof(f6075,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f5965,f3807])).
fof(f5965,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f337,f2002])).
fof(f6074,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6073,f5806])).
fof(f6073,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6072,f3789])).
fof(f6072,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6071,f3791])).
fof(f6071,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6070,f3793])).
fof(f6070,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6069,f3795])).
fof(f6069,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6068,f3797])).
fof(f6068,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6067,f3801])).
fof(f6067,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6066,f3803])).
fof(f6066,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6065,f3805])).
fof(f6065,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5964,f3807])).
fof(f5964,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f337,f1999])).
fof(f6064,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6063,f5806])).
fof(f6063,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6062,f3789])).
fof(f6062,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6061,f3791])).
fof(f6061,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6060,f3793])).
fof(f6060,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6059,f3795])).
fof(f6059,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6058,f3797])).
fof(f6058,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6057,f3801])).
fof(f6057,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6056,f3803])).
fof(f6056,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6055,f3805])).
fof(f6055,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5963,f3807])).
fof(f5963,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f337,f1998])).
fof(f6054,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6053,f5806])).
fof(f6053,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6052,f3789])).
fof(f6052,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6051,f3791])).
fof(f6051,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6050,f3793])).
fof(f6050,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6049,f3795])).
fof(f6049,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6048,f3797])).
fof(f6048,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6047,f3801])).
fof(f6047,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6046,f3803])).
fof(f6046,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6045,f3805])).
fof(f6045,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f5962,f3807])).
fof(f5962,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f337,f1971])).
fof(f6044,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6043,f5806])).
fof(f6043,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6042,f3789])).
fof(f6042,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6041,f3791])).
fof(f6041,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6040,f3793])).
fof(f6040,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6039,f3795])).
fof(f6039,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6038,f3797])).
fof(f6038,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6037,f3801])).
fof(f6037,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6036,f3803])).
fof(f6036,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6035,f3805])).
fof(f6035,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5961,f3807])).
fof(f5961,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f337,f1968])).
fof(f6034,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(forward_demodulation,[],[f6033,f5806])).
fof(f6033,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6032,f3789])).
fof(f6032,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6031,f3791])).
fof(f6031,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6030,f3793])).
fof(f6030,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6029,f3795])).
fof(f6029,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6028,f3797])).
fof(f6028,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6027,f3801])).
fof(f6027,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6026,f3803])).
fof(f6026,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f6025,f3805])).
fof(f6025,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5960,f3807])).
fof(f5960,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f337,f1967])).
fof(f6024,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl160),
  inference(cnf_transformation,[],[f6024_D])).
fof(f6024_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f5959,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f337,f90])).
fof(f6023,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f6022,f3762])).
fof(f6022,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f5958,f3766])).
fof(f5958,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f337,f3668])).
fof(f5951,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5950,f3789])).
fof(f5950,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5949,f3791])).
fof(f5949,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5948,f3793])).
fof(f5948,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5947,f3795])).
fof(f5947,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5946,f3797])).
fof(f5946,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5945,f3799])).
fof(f5945,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl75 | $spl77 | $spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5944,f3801])).
fof(f5944,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl77 | $spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5943,f3803])).
fof(f5943,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl79 | $spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5942,f3805])).
fof(f5942,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl81 | $spl82)),
  inference(subsumption_resolution,[],[f5933,f3807])).
fof(f5933,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl82),
  inference(superposition,[],[f87,f5806])).
fof(f5840,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl138),
  inference(cnf_transformation,[],[f5840_D])).
fof(f5840_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f5842,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl140),
  inference(cnf_transformation,[],[f5842_D])).
fof(f5842_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f5844,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl142),
  inference(cnf_transformation,[],[f5844_D])).
fof(f5844_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f5846,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl144),
  inference(cnf_transformation,[],[f5846_D])).
fof(f5846_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f5848,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl146),
  inference(cnf_transformation,[],[f5848_D])).
fof(f5848_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f5850,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl148),
  inference(cnf_transformation,[],[f5850_D])).
fof(f5850_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f5852,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl150),
  inference(cnf_transformation,[],[f5852_D])).
fof(f5852_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f5854,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl152),
  inference(cnf_transformation,[],[f5854_D])).
fof(f5854_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f5856,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl154),
  inference(cnf_transformation,[],[f5856_D])).
fof(f5856_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f5873,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl158),
  inference(cnf_transformation,[],[f5873_D])).
fof(f5873_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f5858,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl156),
  inference(cnf_transformation,[],[f5858_D])).
fof(f5858_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f5925,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5924,f3810])).
fof(f5924,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5923,f3810])).
fof(f5923,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5922,f3810])).
fof(f5922,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5921,f3810])).
fof(f5921,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5920,f3810])).
fof(f5920,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5919,f3810])).
fof(f5919,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5918,f3810])).
fof(f5918,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5917,f3810])).
fof(f5917,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5916,f3810])).
fof(f5916,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5915,f3810])).
fof(f5915,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5914,f3810])).
fof(f5914,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(subsumption_resolution,[],[f5913,f99])).
fof(f5913,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5780,f111])).
fof(f5780,plain,(
  p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2)))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(superposition,[],[f1009,f3810])).
fof(f1009,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f71,f87])).
fof(f71,plain,(
  ( ! [X2,X3] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X2),s('type.ast.exp',X3))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f5838,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl136),
  inference(cnf_transformation,[],[f5838_D])).
fof(f5838_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f5912,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5911,f3810])).
fof(f5911,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5910,f3810])).
fof(f5910,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5909,f3810])).
fof(f5909,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5908,f3810])).
fof(f5908,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5907,f3810])).
fof(f5907,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5906,f3810])).
fof(f5906,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5905,f3810])).
fof(f5905,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5904,f3810])).
fof(f5904,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5903,f3810])).
fof(f5903,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5902,f3810])).
fof(f5902,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5901,f3810])).
fof(f5901,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(subsumption_resolution,[],[f5900,f99])).
fof(f5900,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5774,f111])).
fof(f5774,plain,(
  p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2)))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(superposition,[],[f780,f3810])).
fof(f780,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f63,f87])).
fof(f63,plain,(
  ( ! [X19,X20] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X19),s('type.list.list'('type.ast.exp'),X20))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f5899,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5898,f3810])).
fof(f5898,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5897,f3810])).
fof(f5897,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5896,f3810])).
fof(f5896,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5895,f3810])).
fof(f5895,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5894,f3810])).
fof(f5894,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5893,f3810])).
fof(f5893,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5892,f3810])).
fof(f5892,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5891,f3810])).
fof(f5891,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5890,f3810])).
fof(f5890,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5889,f3810])).
fof(f5889,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5888,f3810])).
fof(f5888,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(subsumption_resolution,[],[f5887,f99])).
fof(f5887,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5773,f111])).
fof(f5773,plain,(
  p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2)))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(superposition,[],[f762,f3810])).
fof(f762,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f69,f87])).
fof(f69,plain,(
  ( ! [X6,X7] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X6),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X7))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f5886,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5885,f3810])).
fof(f5885,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5884,f3810])).
fof(f5884,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5883,f3810])).
fof(f5883,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5882,f3810])).
fof(f5882,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5881,f3810])).
fof(f5881,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5880,f3810])).
fof(f5880,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5879,f3810])).
fof(f5879,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5878,f3810])).
fof(f5878,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5877,f3810])).
fof(f5877,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5876,f3810])).
fof(f5876,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5875,f3810])).
fof(f5875,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(subsumption_resolution,[],[f5874,f99])).
fof(f5874,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5771,f111])).
fof(f5771,plain,(
  p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2)))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(superposition,[],[f722,f3810])).
fof(f722,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f68,f87])).
fof(f68,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X8),s('type.ast.exp',X9),s('type.ast.exp',X10))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f5871,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5870,f3810])).
fof(f5870,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5869,f3810])).
fof(f5869,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5868,f3810])).
fof(f5868,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5867,f3810])).
fof(f5867,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5866,f3810])).
fof(f5866,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5865,f3810])).
fof(f5865,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5864,f3810])).
fof(f5864,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5863,f3810])).
fof(f5863,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5862,f3810])).
fof(f5862,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5861,f3810])).
fof(f5861,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5860,f3810])).
fof(f5860,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(subsumption_resolution,[],[f5859,f99])).
fof(f5859,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5767,f111])).
fof(f5767,plain,(
  p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2)))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(superposition,[],[f632,f3810])).
fof(f632,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f67,f87])).
fof(f67,plain,(
  ( ! [X12,X13,X11] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X11),s('type.ast.exp',X12),s('type.ast.exp',X13))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f5836,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5835,f3810])).
fof(f5835,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5834,f3810])).
fof(f5834,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5833,f3810])).
fof(f5833,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5832,f3810])).
fof(f5832,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5831,f3810])).
fof(f5831,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5830,f3810])).
fof(f5830,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5829,f3810])).
fof(f5829,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5828,f3810])).
fof(f5828,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5827,f3810])).
fof(f5827,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5826,f3810])).
fof(f5826,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5825,f3810])).
fof(f5825,plain,(
  s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(subsumption_resolution,[],[f5824,f99])).
fof(f5824,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(forward_demodulation,[],[f5764,f111])).
fof(f5764,plain,(
  p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2)))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK52('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK49('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK50('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK44('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK45('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK41('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK42('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK39('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.ast.exp',sK37('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))),s('type.list.list'('type.ast.exp'),sK34('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))))) | $spl82),
  inference(superposition,[],[f517,f3810])).
fof(f517,plain,(
  ( ! [X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(X1)),s('type.ast.exp',sK52(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(X1)),s('type.ast.exp',sK49(X1)),s('type.ast.exp',sK50(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(X1)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(X1)),s('type.ast.exp',sK44(X1)),s('type.ast.exp',sK45(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(X1)),s('type.ast.exp',sK41(X1)),s('type.ast.exp',sK42(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(X1)),s('type.list.list'('type.ast.exp'),sK39(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(X1)),s('type.ast.exp',sK37(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(X1)),s('type.list.list'('type.ast.exp'),sK34(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(X1)))) | s('type.ast.exp',X1) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(X1))))) )),
  inference(superposition,[],[f61,f87])).
fof(f61,plain,(
  ( ! [X23,X22] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X22),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X23))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f5811,plain,(
  ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | $spl111),
  inference(cnf_transformation,[],[f5811_D])).
fof(f5811_D,plain,(
  ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) <=> ~$spl111),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl111])])).
fof(f5823,plain,(
  ( ! [X59,X58] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X58),s('type.ast.exp',X59)))) ) | $spl134),
  inference(cnf_transformation,[],[f5823_D])).
fof(f5823_D,plain,(
  ( ! [X59,X58] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X58),s('type.ast.exp',X59)))) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f5760,plain,(
  ( ! [X59,X58] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X58),s('type.ast.exp',X59))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f85,f3810])).
fof(f85,plain,(
  ( ! [X2,X0,X1] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f47,plain,(
  ! [X0] : (~sP0(X0) | (! [X26] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) & ! [X24,X25] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) & ! [X23] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) & ! [X21,X22] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) & ! [X20] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) & ! [X18,X19] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) & ! [X16,X17] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) & ! [X13,X14,X15] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) & ! [X10,X11,X12] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) & ! [X8,X9] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) & ! [X6,X7] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) & ! [X3,X4,X5] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),X3))),s('type.ast.exp',X4),s('type.ast.exp',X5))) & ! [X1,X2] : s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),X1),s('type.ast.exp',X2)))))),
  inference(nnf_transformation,[],[f43])).
fof(f5822,plain,(
  ( ! [X43,X44] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X43),s('type.ast.exp',X44)))) ) | $spl132),
  inference(cnf_transformation,[],[f5822_D])).
fof(f5822_D,plain,(
  ( ! [X43,X44] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X43),s('type.ast.exp',X44)))) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f5755,plain,(
  ( ! [X43,X44] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X43),s('type.ast.exp',X44))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f83,f3810])).
fof(f83,plain,(
  ( ! [X6,X0,X7] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',X6),s('type.ast.exp',X7))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5821,plain,(
  ( ! [X39,X40] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X39),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X40)))) ) | $spl130),
  inference(cnf_transformation,[],[f5821_D])).
fof(f5821_D,plain,(
  ( ! [X39,X40] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X39),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X40)))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f5753,plain,(
  ( ! [X39,X40] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X39),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X40))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f82,f3810])).
fof(f82,plain,(
  ( ! [X0,X8,X9] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X9))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5820,plain,(
  ( ! [X35,X36,X34] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X34),s('type.ast.exp',X35),s('type.ast.exp',X36)))) ) | $spl128),
  inference(cnf_transformation,[],[f5820_D])).
fof(f5820_D,plain,(
  ( ! [X35,X36,X34] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X34),s('type.ast.exp',X35),s('type.ast.exp',X36)))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f5751,plain,(
  ( ! [X35,X36,X34] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X34),s('type.ast.exp',X35),s('type.ast.exp',X36))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f81,f3810])).
fof(f81,plain,(
  ( ! [X0,X12,X10,X11] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X10),s('type.ast.exp',X11),s('type.ast.exp',X12))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5819,plain,(
  ( ! [X17,X18,X16] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X16),s('type.ast.exp',X17),s('type.ast.exp',X18)))) ) | $spl126),
  inference(cnf_transformation,[],[f5819_D])).
fof(f5819_D,plain,(
  ( ! [X17,X18,X16] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X16),s('type.ast.exp',X17),s('type.ast.exp',X18)))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f5745,plain,(
  ( ! [X17,X18,X16] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X16),s('type.ast.exp',X17),s('type.ast.exp',X18))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f80,f3810])).
fof(f80,plain,(
  ( ! [X0,X14,X15,X13] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X13),s('type.ast.exp',X14),s('type.ast.exp',X15))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5818,plain,(
  ( ! [X14,X15] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X14),s('type.list.list'('type.ast.exp'),X15)))) ) | $spl124),
  inference(cnf_transformation,[],[f5818_D])).
fof(f5818_D,plain,(
  ( ! [X14,X15] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X14),s('type.list.list'('type.ast.exp'),X15)))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f5744,plain,(
  ( ! [X14,X15] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X14),s('type.list.list'('type.ast.exp'),X15))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f79,f3810])).
fof(f79,plain,(
  ( ! [X0,X17,X16] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X16),s('type.list.list'('type.ast.exp'),X17))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5817,plain,(
  ( ! [X10,X11] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X10),s('type.ast.exp',X11)))) ) | $spl122),
  inference(cnf_transformation,[],[f5817_D])).
fof(f5817_D,plain,(
  ( ! [X10,X11] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X10),s('type.ast.exp',X11)))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f5742,plain,(
  ( ! [X10,X11] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X10),s('type.ast.exp',X11))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f78,f3810])).
fof(f78,plain,(
  ( ! [X0,X19,X18] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X18),s('type.ast.exp',X19))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5816,plain,(
  ( ! [X9] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X9)))) ) | $spl120),
  inference(cnf_transformation,[],[f5816_D])).
fof(f5816_D,plain,(
  ( ! [X9] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X9)))) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f5741,plain,(
  ( ! [X9] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X9))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f77,f3810])).
fof(f77,plain,(
  ( ! [X0,X20] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X20))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5815,plain,(
  ( ! [X8,X7] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X7),s('type.list.list'('type.ast.exp'),X8)))) ) | $spl118),
  inference(cnf_transformation,[],[f5815_D])).
fof(f5815_D,plain,(
  ( ! [X8,X7] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X7),s('type.list.list'('type.ast.exp'),X8)))) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f5740,plain,(
  ( ! [X8,X7] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X7),s('type.list.list'('type.ast.exp'),X8))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f76,f3810])).
fof(f76,plain,(
  ( ! [X0,X21,X22] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X21),s('type.list.list'('type.ast.exp'),X22))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5814,plain,(
  ( ! [X6] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X6)))) ) | $spl116),
  inference(cnf_transformation,[],[f5814_D])).
fof(f5814_D,plain,(
  ( ! [X6] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X6)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f5739,plain,(
  ( ! [X6] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X6))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f75,f3810])).
fof(f75,plain,(
  ( ! [X0,X23] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X23))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5813,plain,(
  ( ! [X4,X5] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5)))) ) | $spl114),
  inference(cnf_transformation,[],[f5813_D])).
fof(f5813_D,plain,(
  ( ! [X4,X5] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5)))) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f5738,plain,(
  ( ! [X4,X5] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X4),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X5))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f74,f3810])).
fof(f74,plain,(
  ( ! [X24,X0,X25] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X24),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X25))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5812,plain,(
  ( ! [X1] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X1)))) ) | $spl112),
  inference(cnf_transformation,[],[f5812_D])).
fof(f5812_D,plain,(
  ( ! [X1] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X1)))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f5736,plain,(
  ( ! [X1] : (s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X1))) | ~sP0('const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2))))) ) | $spl82),
  inference(superposition,[],[f73,f3810])).
fof(f73,plain,(
  ( ! [X26,X0] : (s('type.ast.exp',X0) != s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X26))) | ~sP0(X0)) )),
  inference(cnf_transformation,[],[f47])).
fof(f5801,plain,(
  s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK53(sK48(sK2),'type.list.list'('type.string.char'))))) | $spl106),
  inference(cnf_transformation,[],[f5801_D])).
fof(f5801_D,plain,(
  s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK53(sK48(sK2),'type.list.list'('type.string.char'))))) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f5730,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0'),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK53(sK48(sK2),'type.list.list'('type.string.char'))))) | $spl82),
  inference(superposition,[],[f3810,f88])).
fof(f5727,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f5726,f3762])).
fof(f5726,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f5725,f3766])).
fof(f5725,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f5632,f99])).
fof(f5632,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f762,f1532])).
fof(f3810,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | $spl82),
  inference(cnf_transformation,[],[f3810_D])).
fof(f3810_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f5724,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5723,f3789])).
fof(f5723,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5722,f3791])).
fof(f5722,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5721,f3793])).
fof(f5721,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5720,f3795])).
fof(f5720,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5719,f3797])).
fof(f5719,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5718,f3799])).
fof(f5718,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5717,f3801])).
fof(f5717,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5716,f3803])).
fof(f5716,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl79),
  inference(subsumption_resolution,[],[f5715,f3805])).
fof(f5715,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f5631,f99])).
fof(f5631,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f762,f111])).
fof(f5714,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5713,f3789])).
fof(f5713,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5712,f3791])).
fof(f5712,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5711,f3793])).
fof(f5711,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5710,f3795])).
fof(f5710,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5709,f3797])).
fof(f5709,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5708,f3799])).
fof(f5708,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5707,f3801])).
fof(f5707,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5706,f3803])).
fof(f5706,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl79),
  inference(subsumption_resolution,[],[f5585,f3805])).
fof(f5585,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f762,f2411])).
fof(f5705,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5704,f3789])).
fof(f5704,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5703,f3791])).
fof(f5703,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5702,f3793])).
fof(f5702,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5701,f3795])).
fof(f5701,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5700,f3797])).
fof(f5700,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5699,f3799])).
fof(f5699,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5698,f3801])).
fof(f5698,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5697,f3803])).
fof(f5697,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl79),
  inference(subsumption_resolution,[],[f5584,f3805])).
fof(f5584,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f762,f2383])).
fof(f5696,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5695,f3789])).
fof(f5695,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5694,f3791])).
fof(f5694,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5693,f3793])).
fof(f5693,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5692,f3795])).
fof(f5692,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5691,f3797])).
fof(f5691,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5690,f3799])).
fof(f5690,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5689,f3801])).
fof(f5689,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5688,f3803])).
fof(f5688,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl79),
  inference(subsumption_resolution,[],[f5583,f3805])).
fof(f5583,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f762,f2002])).
fof(f5687,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5686,f3789])).
fof(f5686,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5685,f3791])).
fof(f5685,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5684,f3793])).
fof(f5684,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5683,f3795])).
fof(f5683,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5682,f3797])).
fof(f5682,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5681,f3799])).
fof(f5681,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5680,f3801])).
fof(f5680,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5679,f3803])).
fof(f5679,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl79),
  inference(subsumption_resolution,[],[f5582,f3805])).
fof(f5582,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f762,f1999])).
fof(f5678,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5677,f3789])).
fof(f5677,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5676,f3791])).
fof(f5676,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5675,f3793])).
fof(f5675,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5674,f3795])).
fof(f5674,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5673,f3797])).
fof(f5673,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5672,f3799])).
fof(f5672,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5671,f3801])).
fof(f5671,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5670,f3803])).
fof(f5670,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl79),
  inference(subsumption_resolution,[],[f5581,f3805])).
fof(f5581,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f762,f1998])).
fof(f5669,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5668,f3789])).
fof(f5668,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5667,f3791])).
fof(f5667,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5666,f3793])).
fof(f5666,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5665,f3795])).
fof(f5665,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5664,f3797])).
fof(f5664,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5663,f3799])).
fof(f5663,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5662,f3801])).
fof(f5662,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5661,f3803])).
fof(f5661,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl79),
  inference(subsumption_resolution,[],[f5580,f3805])).
fof(f5580,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f762,f1971])).
fof(f5660,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5659,f3789])).
fof(f5659,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5658,f3791])).
fof(f5658,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5657,f3793])).
fof(f5657,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5656,f3795])).
fof(f5656,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5655,f3797])).
fof(f5655,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5654,f3799])).
fof(f5654,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5653,f3801])).
fof(f5653,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5652,f3803])).
fof(f5652,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl79),
  inference(subsumption_resolution,[],[f5579,f3805])).
fof(f5579,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f762,f1968])).
fof(f5651,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5650,f3789])).
fof(f5650,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5649,f3791])).
fof(f5649,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5648,f3793])).
fof(f5648,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5647,f3795])).
fof(f5647,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5646,f3797])).
fof(f5646,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5645,f3799])).
fof(f5645,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5644,f3801])).
fof(f5644,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl77 | $spl79)),
  inference(subsumption_resolution,[],[f5643,f3803])).
fof(f5643,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl79),
  inference(subsumption_resolution,[],[f5578,f3805])).
fof(f5578,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f762,f1967])).
fof(f5642,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl104),
  inference(cnf_transformation,[],[f5642_D])).
fof(f5642_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f5577,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f762,f90])).
fof(f5641,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f5640,f3762])).
fof(f5640,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl39),
  inference(subsumption_resolution,[],[f5576,f3766])).
fof(f5576,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f762,f3668])).
fof(f5573,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5572,f3789])).
fof(f5572,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5571,f3791])).
fof(f5571,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5570,f3793])).
fof(f5570,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5569,f3795])).
fof(f5569,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5568,f3797])).
fof(f5568,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5567,f3799])).
fof(f5567,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl75 | $spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5566,f3801])).
fof(f5566,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl77 | $spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5565,f3803])).
fof(f5565,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl79 | $spl81)),
  inference(subsumption_resolution,[],[f5564,f3807])).
fof(f5564,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl79),
  inference(trivial_inequality_removal,[],[f5563])).
fof(f5563,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl79),
  inference(superposition,[],[f3805,f87])).
fof(f5491,plain,(
  $false | $spl78),
  inference(subsumption_resolution,[],[f5426,f109])).
fof(f5426,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl78),
  inference(superposition,[],[f640,f3806])).
fof(f640,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',X0),s('type.ast.exp',X1),s('type.ast.exp',X2)))))) )),
  inference(resolution,[],[f68,f98])).
fof(f3806,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | $spl78),
  inference(cnf_transformation,[],[f3806_D])).
fof(f3806_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f5425,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl81)),
  inference(subsumption_resolution,[],[f5424,f3789])).
fof(f5424,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl81)),
  inference(subsumption_resolution,[],[f5423,f3791])).
fof(f5423,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl81)),
  inference(subsumption_resolution,[],[f5422,f3793])).
fof(f5422,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl77 | $spl81)),
  inference(subsumption_resolution,[],[f5421,f3795])).
fof(f5421,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl75 | $spl77 | $spl81)),
  inference(subsumption_resolution,[],[f5420,f3797])).
fof(f5420,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75 | $spl77 | $spl81)),
  inference(subsumption_resolution,[],[f5419,f3799])).
fof(f5419,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl75 | $spl77 | $spl81)),
  inference(subsumption_resolution,[],[f5418,f3801])).
fof(f5418,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl77 | $spl81)),
  inference(subsumption_resolution,[],[f5417,f3807])).
fof(f5417,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl77),
  inference(trivial_inequality_removal,[],[f5416])).
fof(f5416,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl77),
  inference(superposition,[],[f3803,f87])).
fof(f5415,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | ($spl35 | $spl39)),
  inference(subsumption_resolution,[],[f5414,f3762])).
fof(f5414,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl39),
  inference(trivial_inequality_removal,[],[f5413])).
fof(f5413,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) != s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl39),
  inference(superposition,[],[f3766,f87])).
fof(f5341,plain,(
  $false | $spl38),
  inference(subsumption_resolution,[],[f5283,f1530])).
fof(f1530,plain,(
  s(bool,'T_0') != s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))),
  inference(resolution,[],[f1513,f97])).
fof(f5283,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))) | $spl38),
  inference(superposition,[],[f204,f3767])).
fof(f204,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X0)))))) )),
  inference(resolution,[],[f62,f98])).
fof(f62,plain,(
  ( ! [X21] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',X21))))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f3767,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl38),
  inference(cnf_transformation,[],[f3767_D])).
fof(f3767_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f5278,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl35),
  inference(subsumption_resolution,[],[f5277,f3762])).
fof(f5277,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f5203,f99])).
fof(f5203,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f517,f1532])).
fof(f3804,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | $spl76),
  inference(cnf_transformation,[],[f3804_D])).
fof(f3804_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f5276,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5275,f3789])).
fof(f5275,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5274,f3793])).
fof(f5274,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5273,f3795])).
fof(f5273,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5272,f3797])).
fof(f5272,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5271,f3799])).
fof(f5271,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5270,f3801])).
fof(f5270,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl81),
  inference(subsumption_resolution,[],[f5269,f3807])).
fof(f5269,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f5202,f99])).
fof(f5202,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f517,f111])).
fof(f5268,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5267,f3789])).
fof(f5267,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5266,f3793])).
fof(f5266,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5265,f3795])).
fof(f5265,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5264,f3797])).
fof(f5264,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5263,f3799])).
fof(f5263,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5262,f3801])).
fof(f5262,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5156,f3807])).
fof(f5156,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f517,f2411])).
fof(f5261,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5260,f3789])).
fof(f5260,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5259,f3793])).
fof(f5259,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5258,f3795])).
fof(f5258,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5257,f3797])).
fof(f5257,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5256,f3799])).
fof(f5256,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5255,f3801])).
fof(f5255,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5155,f3807])).
fof(f5155,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f517,f2383])).
fof(f5254,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5253,f3789])).
fof(f5253,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5252,f3793])).
fof(f5252,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5251,f3795])).
fof(f5251,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5250,f3797])).
fof(f5250,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5249,f3799])).
fof(f5249,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5248,f3801])).
fof(f5248,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f5154,f3807])).
fof(f5154,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f517,f2002])).
fof(f5247,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5246,f3789])).
fof(f5246,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5245,f3793])).
fof(f5245,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5244,f3795])).
fof(f5244,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5243,f3797])).
fof(f5243,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5242,f3799])).
fof(f5242,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5241,f3801])).
fof(f5241,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5153,f3807])).
fof(f5153,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f517,f1999])).
fof(f5240,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5239,f3789])).
fof(f5239,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5238,f3793])).
fof(f5238,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5237,f3795])).
fof(f5237,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5236,f3797])).
fof(f5236,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5235,f3799])).
fof(f5235,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5234,f3801])).
fof(f5234,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5152,f3807])).
fof(f5152,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f517,f1998])).
fof(f5233,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5232,f3789])).
fof(f5232,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5231,f3793])).
fof(f5231,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5230,f3795])).
fof(f5230,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5229,f3797])).
fof(f5229,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5228,f3799])).
fof(f5228,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5227,f3801])).
fof(f5227,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl81),
  inference(subsumption_resolution,[],[f5151,f3807])).
fof(f5151,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f517,f1971])).
fof(f5226,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5225,f3789])).
fof(f5225,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5224,f3793])).
fof(f5224,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5223,f3795])).
fof(f5223,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5222,f3797])).
fof(f5222,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5221,f3799])).
fof(f5221,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5220,f3801])).
fof(f5220,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5150,f3807])).
fof(f5150,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f517,f1968])).
fof(f5219,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5218,f3789])).
fof(f5218,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5217,f3793])).
fof(f5217,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5216,f3795])).
fof(f5216,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5215,f3797])).
fof(f5215,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5214,f3799])).
fof(f5214,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5213,f3801])).
fof(f5213,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl81),
  inference(subsumption_resolution,[],[f5149,f3807])).
fof(f5149,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f517,f1967])).
fof(f5212,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl102),
  inference(cnf_transformation,[],[f5212_D])).
fof(f5212_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f5148,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f517,f90])).
fof(f5211,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl35),
  inference(subsumption_resolution,[],[f5147,f3762])).
fof(f5147,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f517,f3668])).
fof(f5144,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5143,f3789])).
fof(f5143,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5142,f3791])).
fof(f5142,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5141,f3793])).
fof(f5141,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5140,f3795])).
fof(f5140,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5139,f3797])).
fof(f5139,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5138,f3799])).
fof(f5138,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl75 | $spl81)),
  inference(subsumption_resolution,[],[f5137,f3801])).
fof(f5137,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl81),
  inference(trivial_inequality_removal,[],[f5136])).
fof(f5136,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl81),
  inference(superposition,[],[f3807,f87])).
fof(f5077,plain,(
  $false | $spl80),
  inference(subsumption_resolution,[],[f5014,f109])).
fof(f5014,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl80),
  inference(superposition,[],[f730,f3808])).
fof(f730,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',X0),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X1)))))) )),
  inference(resolution,[],[f69,f98])).
fof(f4955,plain,(
  $false | $spl76),
  inference(subsumption_resolution,[],[f4891,f109])).
fof(f4891,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl76),
  inference(superposition,[],[f575,f3804])).
fof(f575,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',X0),s('type.ast.exp',X1),s('type.ast.exp',X2)))))) )),
  inference(resolution,[],[f67,f98])).
fof(f3808,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | $spl80),
  inference(cnf_transformation,[],[f3808_D])).
fof(f3808_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f4888,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4887,f3789])).
fof(f4887,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl69 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4886,f3791])).
fof(f4886,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl69 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4885,f3793])).
fof(f4885,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4884,f3797])).
fof(f4884,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4883,f3799])).
fof(f4883,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl69 | $spl75)),
  inference(subsumption_resolution,[],[f4882,f3801])).
fof(f4882,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl69),
  inference(trivial_inequality_removal,[],[f4881])).
fof(f4881,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl69),
  inference(superposition,[],[f3795,f87])).
fof(f4304,plain,(
  s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)) = s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK53(sK33(sK2),'type.ast.id'('type.list.list'('type.string.char')))))) | $spl94),
  inference(cnf_transformation,[],[f4304_D])).
fof(f4304_D,plain,(
  s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)) = s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK53(sK33(sK2),'type.ast.id'('type.list.list'('type.string.char')))))) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f4305,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.NONE_0'),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | $spl97),
  inference(cnf_transformation,[],[f4305_D])).
fof(f4305_D,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.NONE_0'),s('type.list.list'('type.ast.exp'),sK34(sK2)))) <=> ~$spl97),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl97])])).
fof(f4880,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.NONE_0'),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)) = s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK53(sK33(sK2),'type.ast.id'('type.list.list'('type.string.char')))))) | $spl69),
  inference(superposition,[],[f3795,f88])).
fof(f4877,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl35),
  inference(subsumption_resolution,[],[f4876,f3762])).
fof(f4876,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f4811,f99])).
fof(f4811,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f780,f1532])).
fof(f4875,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4874,f3789])).
fof(f4874,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4873,f3791])).
fof(f4873,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4872,f3793])).
fof(f4872,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4871,f3797])).
fof(f4871,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4870,f3799])).
fof(f4870,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl75),
  inference(subsumption_resolution,[],[f4869,f3801])).
fof(f4869,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f4810,f99])).
fof(f4810,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f780,f111])).
fof(f4868,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4867,f3789])).
fof(f4867,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4866,f3791])).
fof(f4866,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4865,f3793])).
fof(f4865,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4864,f3797])).
fof(f4864,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4863,f3799])).
fof(f4863,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl75),
  inference(subsumption_resolution,[],[f4764,f3801])).
fof(f4764,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f780,f2411])).
fof(f4862,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4861,f3789])).
fof(f4861,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4860,f3791])).
fof(f4860,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4859,f3793])).
fof(f4859,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4858,f3797])).
fof(f4858,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4857,f3799])).
fof(f4857,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl75),
  inference(subsumption_resolution,[],[f4763,f3801])).
fof(f4763,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f780,f2383])).
fof(f4856,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4855,f3789])).
fof(f4855,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4854,f3791])).
fof(f4854,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4853,f3793])).
fof(f4853,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4852,f3797])).
fof(f4852,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4851,f3799])).
fof(f4851,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl75),
  inference(subsumption_resolution,[],[f4762,f3801])).
fof(f4762,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f780,f2002])).
fof(f4850,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4849,f3789])).
fof(f4849,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4848,f3791])).
fof(f4848,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4847,f3793])).
fof(f4847,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4846,f3797])).
fof(f4846,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4845,f3799])).
fof(f4845,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl75),
  inference(subsumption_resolution,[],[f4761,f3801])).
fof(f4761,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f780,f1999])).
fof(f4844,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4843,f3789])).
fof(f4843,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4842,f3791])).
fof(f4842,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4841,f3793])).
fof(f4841,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4840,f3797])).
fof(f4840,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4839,f3799])).
fof(f4839,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl75),
  inference(subsumption_resolution,[],[f4760,f3801])).
fof(f4760,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f780,f1998])).
fof(f4838,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4837,f3789])).
fof(f4837,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4836,f3791])).
fof(f4836,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4835,f3793])).
fof(f4835,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4834,f3797])).
fof(f4834,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4833,f3799])).
fof(f4833,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl75),
  inference(subsumption_resolution,[],[f4759,f3801])).
fof(f4759,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f780,f1971])).
fof(f4832,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4831,f3789])).
fof(f4831,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4830,f3791])).
fof(f4830,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4829,f3793])).
fof(f4829,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4828,f3797])).
fof(f4828,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4827,f3799])).
fof(f4827,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl75),
  inference(subsumption_resolution,[],[f4758,f3801])).
fof(f4758,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f780,f1968])).
fof(f4826,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4825,f3789])).
fof(f4825,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4824,f3791])).
fof(f4824,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4823,f3793])).
fof(f4823,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4822,f3797])).
fof(f4822,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4821,f3799])).
fof(f4821,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl75),
  inference(subsumption_resolution,[],[f4757,f3801])).
fof(f4757,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f780,f1967])).
fof(f4820,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl100),
  inference(cnf_transformation,[],[f4820_D])).
fof(f4820_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f4756,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f780,f90])).
fof(f4819,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl35),
  inference(subsumption_resolution,[],[f4755,f3762])).
fof(f4755,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f780,f3668])).
fof(f3796,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | $spl68),
  inference(cnf_transformation,[],[f3796_D])).
fof(f3796_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f4752,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4751,f3789])).
fof(f4751,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4750,f3791])).
fof(f4750,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4749,f3793])).
fof(f4749,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4748,f3797])).
fof(f4748,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl73 | $spl75)),
  inference(subsumption_resolution,[],[f4747,f3799])).
fof(f4747,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl75),
  inference(trivial_inequality_removal,[],[f4746])).
fof(f4746,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl75),
  inference(superposition,[],[f3801,f87])).
fof(f4700,plain,(
  $false | $spl74),
  inference(subsumption_resolution,[],[f4642,f109])).
fof(f4642,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl74),
  inference(superposition,[],[f420,f3802])).
fof(f420,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.App_2'(s('type.ast.op',X0),s('type.list.list'('type.ast.exp'),X1)))))) )),
  inference(resolution,[],[f66,f98])).
fof(f3802,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | $spl74),
  inference(cnf_transformation,[],[f3802_D])).
fof(f3802_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f4641,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl71 | $spl73)),
  inference(subsumption_resolution,[],[f4640,f3789])).
fof(f4640,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl71 | $spl73)),
  inference(subsumption_resolution,[],[f4639,f3791])).
fof(f4639,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl71 | $spl73)),
  inference(subsumption_resolution,[],[f4638,f3793])).
fof(f4638,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl71 | $spl73)),
  inference(subsumption_resolution,[],[f4637,f3797])).
fof(f4637,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl73),
  inference(trivial_inequality_removal,[],[f4636])).
fof(f4636,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl73),
  inference(superposition,[],[f3799,f87])).
fof(f4590,plain,(
  $false | $spl72),
  inference(subsumption_resolution,[],[f4532,f109])).
fof(f4532,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl72),
  inference(superposition,[],[f305,f3800])).
fof(f305,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),X0),s('type.ast.exp',X1)))))) )),
  inference(resolution,[],[f65,f98])).
fof(f3800,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | $spl72),
  inference(cnf_transformation,[],[f3800_D])).
fof(f3800_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f4531,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | ($spl63 | $spl65 | $spl67 | $spl71)),
  inference(subsumption_resolution,[],[f4530,f3789])).
fof(f4530,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67 | $spl71)),
  inference(subsumption_resolution,[],[f4529,f3791])).
fof(f4529,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl67 | $spl71)),
  inference(subsumption_resolution,[],[f4528,f3793])).
fof(f4528,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl71),
  inference(trivial_inequality_removal,[],[f4527])).
fof(f4527,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl71),
  inference(superposition,[],[f3797,f87])).
fof(f4524,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl35),
  inference(subsumption_resolution,[],[f4523,f3762])).
fof(f4523,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f4485,f99])).
fof(f4485,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f722,f1532])).
fof(f3798,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | $spl70),
  inference(cnf_transformation,[],[f3798_D])).
fof(f3798_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f4522,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4521,f3789])).
fof(f4521,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4520,f3791])).
fof(f4520,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl67),
  inference(subsumption_resolution,[],[f4519,f3793])).
fof(f4519,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f4484,f99])).
fof(f4484,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f722,f111])).
fof(f4518,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4517,f3789])).
fof(f4517,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4516,f3791])).
fof(f4516,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl67),
  inference(subsumption_resolution,[],[f4438,f3793])).
fof(f4438,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f722,f2411])).
fof(f4515,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4514,f3789])).
fof(f4514,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4513,f3791])).
fof(f4513,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl67),
  inference(subsumption_resolution,[],[f4437,f3793])).
fof(f4437,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f722,f2383])).
fof(f4512,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4511,f3789])).
fof(f4511,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4510,f3791])).
fof(f4510,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl67),
  inference(subsumption_resolution,[],[f4436,f3793])).
fof(f4436,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f722,f2002])).
fof(f4509,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4508,f3789])).
fof(f4508,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4507,f3791])).
fof(f4507,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl67),
  inference(subsumption_resolution,[],[f4435,f3793])).
fof(f4435,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f722,f1999])).
fof(f4506,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4505,f3789])).
fof(f4505,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4504,f3791])).
fof(f4504,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl67),
  inference(subsumption_resolution,[],[f4434,f3793])).
fof(f4434,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f722,f1998])).
fof(f4503,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4502,f3789])).
fof(f4502,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4501,f3791])).
fof(f4501,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl67),
  inference(subsumption_resolution,[],[f4433,f3793])).
fof(f4433,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f722,f1971])).
fof(f4500,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4499,f3789])).
fof(f4499,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4498,f3791])).
fof(f4498,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl67),
  inference(subsumption_resolution,[],[f4432,f3793])).
fof(f4432,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f722,f1968])).
fof(f4497,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4496,f3789])).
fof(f4496,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4495,f3791])).
fof(f4495,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl67),
  inference(subsumption_resolution,[],[f4431,f3793])).
fof(f4431,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f722,f1967])).
fof(f4494,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl98),
  inference(cnf_transformation,[],[f4494_D])).
fof(f4494_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f4430,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f722,f90])).
fof(f4493,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl35),
  inference(subsumption_resolution,[],[f4429,f3762])).
fof(f4429,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f722,f3668])).
fof(f4394,plain,(
  $false | $spl70),
  inference(subsumption_resolution,[],[f4340,f109])).
fof(f4340,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl70),
  inference(superposition,[],[f244,f3798])).
fof(f244,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),X0)))))) )),
  inference(resolution,[],[f64,f98])).
fof(f4307,plain,(
  $false | $spl68),
  inference(subsumption_resolution,[],[f4241,f109])).
fof(f4241,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl68),
  inference(superposition,[],[f770,f3796])).
fof(f770,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),X0),s('type.list.list'('type.ast.exp'),X1)))))) )),
  inference(resolution,[],[f63,f98])).
fof(f4306,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.NONE_0'),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | $spl96),
  inference(cnf_transformation,[],[f4306_D])).
fof(f4306_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.NONE_0'),s('type.list.list'('type.ast.exp'),sK34(sK2)))) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f4240,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.NONE_0'),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)) = s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),'const.option.SOME_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK53(sK33(sK2),'type.ast.id'('type.list.list'('type.string.char')))))) | $spl68),
  inference(superposition,[],[f3796,f88])).
fof(f4239,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | ($spl63 | $spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4238,f3789])).
fof(f4238,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | ($spl65 | $spl67)),
  inference(subsumption_resolution,[],[f4237,f3793])).
fof(f4237,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl65),
  inference(trivial_inequality_removal,[],[f4236])).
fof(f4236,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl65),
  inference(superposition,[],[f3791,f87])).
fof(f3792,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | $spl64),
  inference(cnf_transformation,[],[f3792_D])).
fof(f3792_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f4235,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | ($spl63 | $spl67)),
  inference(subsumption_resolution,[],[f4234,f3789])).
fof(f4234,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl67),
  inference(trivial_inequality_removal,[],[f4233])).
fof(f4233,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl67),
  inference(superposition,[],[f3793,f87])).
fof(f4200,plain,(
  $false | $spl66),
  inference(subsumption_resolution,[],[f4145,f109])).
fof(f4145,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl66),
  inference(superposition,[],[f204,f3794])).
fof(f4140,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl35),
  inference(subsumption_resolution,[],[f4139,f3762])).
fof(f4139,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f4119,f99])).
fof(f4119,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f632,f1532])).
fof(f3794,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | $spl66),
  inference(cnf_transformation,[],[f3794_D])).
fof(f3794_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f4138,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | $spl63),
  inference(subsumption_resolution,[],[f4137,f3789])).
fof(f4137,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f4118,f99])).
fof(f4118,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f632,f111])).
fof(f4136,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl63),
  inference(subsumption_resolution,[],[f4072,f3789])).
fof(f4072,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f632,f2411])).
fof(f4135,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl63),
  inference(subsumption_resolution,[],[f4071,f3789])).
fof(f4071,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f632,f2383])).
fof(f4134,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl63),
  inference(subsumption_resolution,[],[f4070,f3789])).
fof(f4070,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f632,f2002])).
fof(f4133,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl63),
  inference(subsumption_resolution,[],[f4069,f3789])).
fof(f4069,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f632,f1999])).
fof(f4132,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl63),
  inference(subsumption_resolution,[],[f4068,f3789])).
fof(f4068,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f632,f1998])).
fof(f4131,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl63),
  inference(subsumption_resolution,[],[f4067,f3789])).
fof(f4067,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f632,f1971])).
fof(f4130,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl63),
  inference(subsumption_resolution,[],[f4066,f3789])).
fof(f4066,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f632,f1968])).
fof(f4129,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | $spl63),
  inference(subsumption_resolution,[],[f4065,f3789])).
fof(f4065,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f632,f1967])).
fof(f4128,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl92),
  inference(cnf_transformation,[],[f4128_D])).
fof(f4128_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f4064,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f632,f90])).
fof(f4127,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | $spl35),
  inference(subsumption_resolution,[],[f4063,f3762])).
fof(f4063,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f632,f3668])).
fof(f4041,plain,(
  $false | $spl64),
  inference(subsumption_resolution,[],[f3981,f109])).
fof(f3981,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl64),
  inference(superposition,[],[f485,f3792])).
fof(f485,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',X0),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),X1)))))) )),
  inference(resolution,[],[f61,f98])).
fof(f3978,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl35),
  inference(trivial_inequality_removal,[],[f3977])).
fof(f3977,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) != s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK52(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl35),
  inference(superposition,[],[f3762,f87])).
fof(f3957,plain,(
  $false | $spl34),
  inference(subsumption_resolution,[],[f3903,f1530])).
fof(f3903,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))) | $spl34),
  inference(superposition,[],[f124,f3763])).
fof(f124,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',X0)))))) )),
  inference(resolution,[],[f60,f98])).
fof(f3896,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | $spl63),
  inference(trivial_inequality_removal,[],[f3895])).
fof(f3895,plain,(
  s('type.ast.exp',sK2) != s('type.ast.exp',sK2) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK51(sK2)),s('type.ast.exp',sK52(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | $spl63),
  inference(superposition,[],[f3789,f87])).
fof(f3875,plain,(
  $false | $spl62),
  inference(subsumption_resolution,[],[f3823,f109])).
fof(f3823,plain,(
  s(bool,'T_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK2))) | $spl62),
  inference(superposition,[],[f124,f3790])).
fof(f3763,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl34),
  inference(cnf_transformation,[],[f3763_D])).
fof(f3763_D,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f3816,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(subsumption_resolution,[],[f3750,f99])).
fof(f3750,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))))),
  inference(superposition,[],[f1009,f1532])).
fof(f3790,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | $spl62),
  inference(cnf_transformation,[],[f3790_D])).
fof(f3790_D,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f3815,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(subsumption_resolution,[],[f3749,f99])).
fof(f3749,plain,(
  p(s(bool,'F_0')) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2))))),
  inference(superposition,[],[f1009,f111])).
fof(f3703,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f1009,f2411])).
fof(f3702,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') != s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f1009,f2383])).
fof(f3701,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f1009,f2002])).
fof(f3700,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f1009,f1999])).
fof(f3699,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f1009,f1998])).
fof(f3698,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f1009,f1971])).
fof(f3697,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'F_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'T_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f1009,f1968])).
fof(f3696,plain,(
  s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK2)),s('type.ast.exp',sK49(sK2)),s('type.ast.exp',sK50(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK2)),s('type.ast.exp',sK44(sK2)),s('type.ast.exp',sK45(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK2)),s('type.ast.exp',sK41(sK2)),s('type.ast.exp',sK42(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK2)),s('type.list.list'('type.ast.exp'),sK39(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK2)),s('type.ast.exp',sK37(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK2)),s('type.list.list'('type.ast.exp'),sK34(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK2)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK2)))) | s('type.ast.exp',sK2) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK2)))) | s(bool,'T_0') != s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))) | s(bool,'F_0') = s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))),
  inference(resolution,[],[f1009,f1967])).
fof(f3784,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp')))))) ) | $spl56),
  inference(cnf_transformation,[],[f3784_D])).
fof(f3784_D,plain,(
  ( ! [X2] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f3695,plain,(
  ( ! [X2,X3] : (s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,X2,'type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,X2,'type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,X2,'type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,X2,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f1009,f90])).
fof(f3694,plain,(
  s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),sK48(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK49(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK50(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK46(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK47(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK43(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK44(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK45(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK40(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK41(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK42(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK38(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK39(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK36(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.ast.exp',sK37(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK35(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK33(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.ast.exp'),sK34(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK32(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK30(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK31(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK29(sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,g(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp'))))) | p(s(bool,f(s('type.ast.exp',sK55(sK1,sK1,bool,'type.ast.exp')))))),
  inference(resolution,[],[f1009,f3668])).
fof(f3638,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) ) | $spl28),
  inference(cnf_transformation,[],[f3638_D])).
fof(f3638_D,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f3575,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X3)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f3357,f90])).
fof(f3357,plain,(
  ( ! [X10] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X10)))) | s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',X10))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) )),
  inference(resolution,[],[f3338,f94])).
fof(f3338,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',X0))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0))))) )),
  inference(resolution,[],[f107,f105])).
fof(f107,plain,(
  ( ! [X2,X3] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3),s('type.ast.exp',X2))),s('type.ast.exp',sK54(sK1,X3,'type.ast.exp'))))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X2))))) )),
  inference(resolution,[],[f72,f89])).
fof(f89,plain,(
  ( ! [X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),X1),s(X0,X5))),s(X0,sK54(X2,X1,X0))))) | ~p(s(bool,'const.relation.WF_1'(s(fun(X0,fun(X0,bool)),X1))))) )),
  inference(cnf_transformation,[],[f53])).
fof(f2717,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) ) | $spl24),
  inference(cnf_transformation,[],[f2717_D])).
fof(f2717_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f2718,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',X0))))) ) | $spl26),
  inference(cnf_transformation,[],[f2718_D])).
fof(f2718_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',X0))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f2771,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) ) | $spl4),
  inference(subsumption_resolution,[],[f2743,f99])).
fof(f2743,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) ) | $spl4),
  inference(superposition,[],[f89,f2705])).
fof(f2705,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))) | $spl4),
  inference(resolution,[],[f2596,f94])).
fof(f2596,plain,(
  ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl4),
  inference(resolution,[],[f1542,f105])).
fof(f2700,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',X0)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))),X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) ) | $spl4),
  inference(resolution,[],[f2596,f89])).
fof(f2684,plain,(
  s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK53('const.option.NONE_0','type.list.list'('type.string.char'))))) | $spl20),
  inference(cnf_transformation,[],[f2684_D])).
fof(f2684_D,plain,(
  s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK53('const.option.NONE_0','type.list.list'('type.string.char'))))) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f2685,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0)))) | sP0(X0) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3(X0)))),s('type.ast.exp',sK4(X0)),s('type.ast.exp',sK5(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10(X0)),s('type.list.list'('type.ast.exp'),sK11(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13(X0)),s('type.ast.exp',sK14(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15(X0)),s('type.list.list'('type.ast.exp'),sK16(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17(X0)),s('type.ast.exp',sK18(X0)),s('type.ast.exp',sK19(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20(X0)),s('type.ast.exp',sK21(X0)),s('type.ast.exp',sK22(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27(X0)),s('type.ast.exp',sK28(X0))))) ) | $spl22),
  inference(cnf_transformation,[],[f2685_D])).
fof(f2685_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0)))) | sP0(X0) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3(X0)))),s('type.ast.exp',sK4(X0)),s('type.ast.exp',sK5(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10(X0)),s('type.list.list'('type.ast.exp'),sK11(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13(X0)),s('type.ast.exp',sK14(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15(X0)),s('type.list.list'('type.ast.exp'),sK16(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17(X0)),s('type.ast.exp',sK18(X0)),s('type.ast.exp',sK19(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20(X0)),s('type.ast.exp',sK21(X0)),s('type.ast.exp',sK22(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27(X0)),s('type.ast.exp',sK28(X0))))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f2669,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0)))) | s('type.option.option'('type.list.list'('type.string.char')),'const.option.NONE_0') = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK53('const.option.NONE_0','type.list.list'('type.string.char'))))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Letrec_2'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.ast.exp'))),sK27(X0)),s('type.ast.exp',sK28(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Mat_2'(s('type.ast.exp',sK23(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK24(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.If_3'(s('type.ast.exp',sK20(X0)),s('type.ast.exp',sK21(X0)),s('type.ast.exp',sK22(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Log_3'(s('type.ast.lop',sK17(X0)),s('type.ast.exp',sK18(X0)),s('type.ast.exp',sK19(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.App_2'(s('type.ast.op',sK15(X0)),s('type.list.list'('type.ast.exp'),sK16(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Fun_2'(s('type.list.list'('type.string.char'),sK13(X0)),s('type.ast.exp',sK14(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Var_1'(s('type.ast.id'('type.list.list'('type.string.char')),sK12(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Con_2'(s('type.option.option'('type.ast.id'('type.list.list'('type.string.char'))),sK10(X0)),s('type.list.list'('type.ast.exp'),sK11(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Lit_1'(s('type.ast.lit',sK9(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Handle_2'(s('type.ast.exp',sK7(X0)),s('type.list.list'('type.pair.prod'('type.ast.pat','type.ast.exp')),sK8(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Raise_1'(s('type.ast.exp',sK6(X0)))) | s('type.ast.exp',X0) = s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK3(X0)))),s('type.ast.exp',sK4(X0)),s('type.ast.exp',sK5(X0)))) | sP0(X0)) )),
  inference(superposition,[],[f867,f86])).
fof(f867,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp','const.ast.Let_3'(s('type.option.option'('type.list.list'('type.string.char')),X0),s('type.ast.exp',X1),s('type.ast.exp',X2)))))) | s('type.option.option'('type.list.list'('type.string.char')),X0) = s('type.option.option'('type.list.list'('type.string.char')),'const.option.SOME_1'(s('type.list.list'('type.string.char'),sK53(X0,'type.list.list'('type.string.char')))))) )),
  inference(superposition,[],[f70,f88])).
fof(f2157,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2)),X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) ) | $spl16),
  inference(cnf_transformation,[],[f2157_D])).
fof(f2157_D,plain,(
  ( ! [X1] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2)),X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f2158,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2))),s('type.ast.exp',X0))))) ) | $spl18),
  inference(cnf_transformation,[],[f2158_D])).
fof(f2158_D,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2))),s('type.ast.exp',X0))))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f2211,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2))),s('type.ast.exp',X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2)),X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) ) | $spl0),
  inference(subsumption_resolution,[],[f2183,f99])).
fof(f2183,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2))),s('type.ast.exp',X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2)),X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) ) | $spl0),
  inference(superposition,[],[f89,f2145])).
fof(f2145,plain,(
  s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))) | $spl0),
  inference(resolution,[],[f2126,f94])).
fof(f2126,plain,(
  ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2))),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp'))))) | $spl0),
  inference(resolution,[],[f121,f105])).
fof(f2140,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2))),s('type.ast.exp',X0)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),'const.relation.EMPTY_REL_0'),s('type.ast.exp',sK2)),X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) ) | $spl0),
  inference(resolution,[],[f2126,f89])).
fof(f1938,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3)))) ) | $spl14),
  inference(cnf_transformation,[],[f1938_D])).
fof(f1938_D,plain,(
  ( ! [X3] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3)))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f1794,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X4)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5),s('type.ast.exp',X4))),s('type.ast.exp',sK54(sK1,X5,'type.ast.exp')))))) ) | $spl8),
  inference(cnf_transformation,[],[f1794_D])).
fof(f1794_D,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X4)))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5),s('type.ast.exp',X4))),s('type.ast.exp',sK54(sK1,X5,'type.ast.exp')))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f2054,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X9)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X10),s('type.ast.exp',X9))),s('type.ast.exp',sK54(sK1,X10,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X10)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X8)))) )),
  inference(subsumption_resolution,[],[f2027,f99])).
fof(f2027,plain,(
  ( ! [X10,X8,X9] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X9)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X10),s('type.ast.exp',X9))),s('type.ast.exp',sK54(sK1,X10,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X10)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X8)))) )),
  inference(superposition,[],[f89,f1926])).
fof(f1926,plain,(
  ( ! [X10] : (s(bool,'F_0') = s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,X10,'type.ast.exp')))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X10)))) )),
  inference(resolution,[],[f1516,f94])).
fof(f1516,plain,(
  ( ! [X2] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp'))))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) )),
  inference(resolution,[],[f108,f94])).
fof(f1937,plain,(
  ( ! [X2,X0] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X0))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,X0,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')))))) ) | $spl12),
  inference(cnf_transformation,[],[f1937_D])).
fof(f1937_D,plain,(
  ( ! [X2,X0] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X0))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,X0,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f2053,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X6)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X7),s('type.ast.exp',sK54(sK1,X5,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,X7,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X7)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5)))) )),
  inference(subsumption_resolution,[],[f2026,f99])).
fof(f2026,plain,(
  ( ! [X6,X7,X5] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X6)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X7),s('type.ast.exp',sK54(sK1,X5,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,X7,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X7)))) | s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5)))) )),
  inference(superposition,[],[f89,f1926])).
fof(f1922,plain,(
  ( ! [X4,X5,X3] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X4)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5),s('type.ast.exp',X4))),s('type.ast.exp',sK54(sK1,X5,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5))))) )),
  inference(resolution,[],[f1516,f89])).
fof(f1921,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X0))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,X0,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f1516,f89])).
fof(f1808,plain,(
  $false | $spl10),
  inference(resolution,[],[f1805,f105])).
fof(f1805,plain,(
  ( ! [X3] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3))))) ) | $spl10),
  inference(trivial_inequality_removal,[],[f1802])).
fof(f1802,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'T_0') | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3))))) ) | $spl10),
  inference(superposition,[],[f1795,f96])).
fof(f96,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f29])).
fof(f29,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X41] : (s(bool,'T_0') = s(bool,X41) <=> p(s(bool,X41)))),
  file('thm.ml_optimise.let_id_ind','thm.bool.EQ_CLAUSES|split|1')).
fof(f1795,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3)))) ) | $spl10),
  inference(cnf_transformation,[],[f1795_D])).
fof(f1795_D,plain,(
  ( ! [X3] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3)))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f1778,plain,(
  ( ! [X4,X5,X3] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X3))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X4)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5),s('type.ast.exp',X4))),s('type.ast.exp',sK54(sK1,X5,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X5))))) )),
  inference(resolution,[],[f1514,f89])).
fof(f1514,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',sK54(sK1,X0,'type.ast.exp'))))) | s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X0)))) )),
  inference(resolution,[],[f108,f97])).
fof(f1793,plain,(
  ( ! [X2,X0] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X0))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,X0,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')))))) ) | $spl6),
  inference(cnf_transformation,[],[f1793_D])).
fof(f1793_D,plain,(
  ( ! [X2,X0] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X0))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,X0,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp')))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f1777,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') != s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X0))) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,X0,'type.ast.exp')))),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(resolution,[],[f1514,f89])).
fof(f1542,plain,(
  ( ! [X1] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(sK1,X1,'type.ast.exp')))))) ) | $spl4),
  inference(cnf_transformation,[],[f1542_D])).
fof(f1542_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(sK1,X1,'type.ast.exp')))))) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f1591,plain,(
  ( ! [X2,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(subsumption_resolution,[],[f1563,f99])).
fof(f1563,plain,(
  ( ! [X2,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(sK1,X2,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X2))))) )),
  inference(superposition,[],[f89,f1532])).
fof(f1527,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK54(sK1,'const.relation.EMPTY_REL_0','type.ast.exp')))),s('type.ast.exp',sK54(sK1,X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) )),
  inference(resolution,[],[f1513,f89])).
fof(f121,plain,(
  ( ! [X1] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK2))),s('type.ast.exp',sK54(sK1,X1,'type.ast.exp')))))) ) | $spl0),
  inference(cnf_transformation,[],[f121_D])).
fof(f121_D,plain,(
  ( ! [X1] : (~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK2))),s('type.ast.exp',sK54(sK1,X1,'type.ast.exp')))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f294,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK2))),s('type.ast.exp',sK54(sK1,X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) )),
  inference(subsumption_resolution,[],[f266,f99])).
fof(f266,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK2))),s('type.ast.exp',sK54(sK1,X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) )),
  inference(superposition,[],[f89,f111])).
fof(f165,plain,(
  $false | $spl2),
  inference(resolution,[],[f122,f72])).
fof(f106,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.ast.exp',bool),sK1),s('type.ast.exp',X0)))) | ~p(s(bool,happ(s(fun('type.ast.exp',bool),happ(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1),s('type.ast.exp',sK2))),s('type.ast.exp',sK54(sK1,X1,'type.ast.exp'))))) | ~p(s(bool,'const.relation.WF_1'(s(fun('type.ast.exp',fun('type.ast.exp',bool)),X1))))) )),
  inference(resolution,[],[f72,f89])).
% SZS output end Proof for thm.ml_optimise
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 226
% Passive clauses: 1364
% Generated clauses: 7087
% Final active clauses: 190
% Final passive clauses: 987
% Input formulas: 16
% Initial clauses: 47
% 
% Selected by SInE selection: 16
% SInE iterations: 1
% 
% Duplicate literals: 13
% Trivial inequalities: 97
% Fw subsumption resolutions: 1049
% Fw demodulations: 942
% Bw demodulations: 18
% 
% Simple tautologies: 2
% Forward subsumptions: 3441
% 
% Binary resolution: 546
% Forward superposition: 3027
% Backward superposition: 1311
% 
% Split clauses: 172
% Split components: 1068
% SAT solver clauses: 189
% SAT solver unit clauses: 15
% SAT solver binary clauses: 23
% 
% Sat splits: 172
% Sat splitting refutations: 16
% 
% Memory used [KB]: 6012
% Time elapsed: 0.635 s
% ------------------------------
% ------------------------------
% Success in time 12.51 s
