Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.source_to_modProof
% (19092)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 740
% Passive clauses: 5879
% Generated clauses: 27197
% Final active clauses: 690
% Final passive clauses: 4792
% Input formulas: 132
% Initial clauses: 352
% 
% Duplicate literals: 194
% Trivial inequalities: 22
% Fw subsumption resolutions: 1085
% Fw demodulations: 3225
% Bw demodulations: 48
% 
% Simple tautologies: 234
% Equational tautologies: 35
% Forward subsumptions: 16255
% Fw demodulations to eq. taut.: 26
% 
% Binary resolution: 5310
% Factoring: 974
% Forward superposition: 8354
% Backward superposition: 7412
% Self superposition: 57
% Equality factoring: 2
% Equality resolution: 9
% 
% Split clauses: 332
% Split components: 666
% SAT solver clauses: 498
% SAT solver unit clauses: 19
% SAT solver binary clauses: 69
% 
% Sat splits: 332
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 496
% TWLsolver calls for satisfiability: 291
% 
% Memory used [KB]: 16119
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.source_to_modProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.source_to_modProof
% SZS output start Proof for thm.source_to_modProof
fof(f7091,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f7090,f7056,f7077,f546,f923,f759,f1048])).
fof(f1048,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) ) | $spl194),
  inference(cnf_transformation,[],[f1048_D])).
fof(f1048_D,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) ) <=> ~$spl194),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl194])])).
fof(f759,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))) )),
  inference(cnf_transformation,[],[f240])).
fof(f240,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(flattening,[],[f239])).
fof(f239,plain,(
  ! [X0,X1] : ! [X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,'const.pair.FST_1'(s('type.pair.prod'(X0,X1),X2))),s(X1,'const.pair.SND_1'(s('type.pair.prod'(X0,X1),X2)))))),
  inference(rectify,[],[f106])).
fof(f106,axiom,(
  ! [X53,X57] : ! [X26] : s('type.pair.prod'(X53,X57),X26) = s('type.pair.prod'(X53,X57),'const.pair.,_2'(s(X53,'const.pair.FST_1'(s('type.pair.prod'(X53,X57),X26))),s(X57,'const.pair.SND_1'(s('type.pair.prod'(X53,X57),X26)))))),
  file('thm.source_to_modProof.source_to_modProof_72_prove_ltb','thm.pair.PAIR')).
fof(f923,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK19),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK19),sK20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK22),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK21)))))) ) | $spl0),
  inference(cnf_transformation,[],[f923_D])).
fof(f923_D,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK19),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK19),sK20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK22),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK21)))))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f546,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK19),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK19),sK20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK22),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK21)))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f394,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(sK19),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) != s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK19),sK20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK22),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK21)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK19,sK20,sK21,sK22])],[f332])).
fof(f332,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) != s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X2)))))),
  inference(ennf_transformation,[],[f135])).
fof(f135,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X2)))))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X0),X4),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X5))) = s('type.pair.prod'('type.semanticPrimitives.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X0),X1),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X3),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X2)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X10),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X11))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X8)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.pair.,_2'(s('type.semanticPrimitives.state'(X6),X10),s('type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v'),X11))) = s('type.pair.prod'('type.semanticPrimitives.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(X6),X7),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X9),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),X8)))))),
  file('thm.source_to_modProof.source_to_modProof_72_prove_ltb','thm.source_to_modProof.source_to_modProof_72_prove_ltb')).
fof(f7077,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X0) != s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK19),sK20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK22),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK21)))))) ) | $spl2386),
  inference(cnf_transformation,[],[f7077_D])).
fof(f7077_D,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X0) != s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK19),sK20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK22),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK21)))))) ) <=> ~$spl2386),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2386])])).
fof(f7056,plain,(
  ( ! [X0] : (s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),X0) != s('type.pair.prod'('type.semanticPrimitives.state'(sK19),'type.semanticPrimitives.result'('type.list.list'('type.semanticPrimitives.v'),'type.semanticPrimitives.v')),'const.funBigStep.evaluate_3'(s('type.semanticPrimitives.state'(sK19),sK20),s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK22),s('type.list.list'('type.ast.exp'),'const.list.REVERSE_1'(s('type.list.list'('type.ast.exp'),sK21)))))) ) | ($spl0 | $spl194)),
  inference(superposition,[],[f923,f1048])).
fof(f7090,plain,(
  $false | $spl2386),
  inference(equality_resolution,[],[f7077])).
% SZS output end Proof for thm.source_to_modProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 261
% Passive clauses: 1224
% Generated clauses: 6593
% Final active clauses: 254
% Final passive clauses: 883
% Input formulas: 132
% Initial clauses: 352
% 
% Duplicate literals: 77
% Trivial inequalities: 3
% Fw subsumption resolutions: 330
% Fw demodulations: 747
% Bw demodulations: 85
% Condensations: 92
% Global subsumptions: 24
% 
% Simple tautologies: 193
% Equational tautologies: 6
% Forward subsumptions: 2484
% Fw demodulations to eq. taut.: 12
% 
% Binary resolution: 1429
% Factoring: 203
% Forward superposition: 1032
% Backward superposition: 925
% Self superposition: 38
% Equality factoring: 2
% Equality resolution: 4
% 
% Split clauses: 5
% Split components: 10
% SAT solver clauses: 1778
% SAT solver unit clauses: 410
% SAT solver binary clauses: 104
% SAT solver learnt clauses: 49
% SAT solver learnt literals: 12
% 
% Sat splits: 5
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1681
% TWLsolver calls for satisfiability: 7139
% 
% Memory used [KB]: 7931
% Time elapsed: 0.239 s
% ------------------------------
% ------------------------------
% Success in time 0.87 s
