Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.pat_to_closProof
% (30441)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 994
% Passive clauses: 8098
% Generated clauses: 31043
% Final active clauses: 982
% Final passive clauses: 6840
% Input formulas: 260
% Initial clauses: 529
% 
% Duplicate literals: 183
% Trivial inequalities: 35
% Fw subsumption resolutions: 1722
% Fw demodulations: 2857
% Bw demodulations: 11
% 
% Simple tautologies: 276
% Equational tautologies: 30
% Forward subsumptions: 17357
% Fw demodulations to eq. taut.: 2
% 
% Binary resolution: 6210
% Factoring: 581
% Forward superposition: 9597
% Backward superposition: 9071
% Self superposition: 66
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 387
% Split components: 776
% SAT solver clauses: 546
% SAT solver unit clauses: 15
% SAT solver binary clauses: 89
% 
% Sat splits: 387
% 
% TWLsolver clauses: 546
% TWLsolver calls for satisfiability: 350
% 
% Memory used [KB]: 17270
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.pat_to_closProof
% (30459)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit

% Active clauses: 471
% Passive clauses: 3051
% Generated clauses: 17432
% Final active clauses: 465
% Final passive clauses: 2555
% Input formulas: 260
% Initial clauses: 529
% 
% Duplicate literals: 95
% Trivial inequalities: 10
% Fw subsumption resolutions: 645
% Fw demodulations: 1832
% Bw demodulations: 31
% Condensations: 69
% Global subsumptions: 37
% 
% Simple tautologies: 249
% Equational tautologies: 17
% Forward subsumptions: 7608
% Fw demodulations to eq. taut.: 16
% 
% Binary resolution: 1920
% Factoring: 102
% Forward superposition: 5313
% Backward superposition: 3711
% Self superposition: 70
% Equality factoring: 2
% Equality resolution: 13
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 4427
% SAT solver unit clauses: 710
% SAT solver binary clauses: 181
% SAT solver learnt clauses: 74
% SAT solver learnt literals: 14
% 
% Sat splits: 2
% 
% TWLsolver clauses: 4279
% TWLsolver calls for satisfiability: 8577
% 
% Memory used [KB]: 20212
% Time elapsed: 0.725 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.pat_to_closProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.pat_to_closProof
% SZS output start Proof for thm.pat_to_closProof
fof(f332463,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f927,f1161])).
fof(f1161,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK95(X3,X2,X1,X0)),s('type.closSem.state'(X0),sK96(X3,X2,X1,X0)))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X2)))))))) )),
  inference(cnf_transformation,[],[f826])).
fof(f826,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),sK95(X3,X2,X1,X0)),s('type.closSem.state'(X0),sK96(X3,X2,X1,X0)))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X2)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK95,sK96])],[f453])).
fof(f453,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X2)))))))),
  inference(flattening,[],[f452])).
fof(f452,plain,(
  ! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X3),s('type.closSem.state'(X0),X2)))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X6] : ! [X21,X13,X9] : ? [X40,X11] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X40),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X21),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),X9),s('type.closSem.state'(X6),X13)))))))),
  file('thm.pat_to_closProof.pat_to_closProof_|49|8_prove_ltb','thm.clos_numberProof.clos_numberProof_42_prove_ltb')).
fof(f927,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK22)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(sK22),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK22)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK22))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',sK23))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK22)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),sK25))),s('type.closSem.state'(sK22),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(sK22),sK24)))))))))) )),
  inference(cnf_transformation,[],[f731])).
fof(f731,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK22)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(sK22),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(sK22)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK22))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',sK23))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(sK22)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),sK25))),s('type.closSem.state'(sK22),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(sK22),sK24)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK22,sK23,sK24,sK25])],[f646])).
fof(f646,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) != s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X3))),s('type.closSem.state'(X0),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(X0),X2)))))))))),
  inference(ennf_transformation,[],[f263])).
fof(f263,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X3))),s('type.closSem.state'(X0),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(X0),X2)))))))))),
  inference(flattening,[],[f262])).
fof(f262,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X4),s('type.closSem.state'(X0),X5))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X0)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X0)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X3))),s('type.closSem.state'(X0),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(X0),X2)))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X9))),s('type.closSem.state'(X6),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(X6),X8)))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),X10),s('type.closSem.state'(X6),X11))) = s('type.pair.prod'('type.semanticPrimitives.result'('type.list.list'('type.closSem.v'),'type.closSem.v'),'type.closSem.state'(X6)),'const.closSem.evaluate_1'(s('type.pair.prod'('type.list.list'('type.closLang.exp'),'type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6))),'const.pair.,_2'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.pat_to_clos.compile_1'(s('type.patLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.pair.prod'('type.list.list'('type.closSem.v'),'type.closSem.state'(X6)),'const.pair.,_2'(s('type.list.list'('type.closSem.v'),'const.list.MAP_2'(s(fun('type.patSem.v','type.closSem.v'),'const.pat_to_closProof.compile_v_0'),s('type.list.list'('type.patSem.v'),X9))),s('type.closSem.state'(X6),'const.pat_to_closProof.compile_state_1'(s('type.patSem.state'(X6),X8)))))))))),
  file('thm.pat_to_closProof.pat_to_closProof_|49|8_prove_ltb','thm.pat_to_closProof.pat_to_closProof_|49|8_prove_ltb')).
% SZS output end Proof for thm.pat_to_closProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1232
% Passive clauses: 10556
% Generated clauses: 331731
% Final active clauses: 1006
% Final passive clauses: 2757
% Input formulas: 260
% Initial clauses: 529
% Discarded non-redundant clauses: 78474
% 
% Duplicate literals: 11
% Trivial inequalities: 53
% Fw subsumption resolutions: 2652
% Fw demodulations: 103385
% Bw demodulations: 3135
% Condensations: 25
% Global subsumptions: 1
% 
% Simple tautologies: 134
% Equational tautologies: 68
% Forward subsumptions: 66305
% Fw demodulations to eq. taut.: 82805
% Bw demodulations to eq. taut.: 38
% 
% Unit resulting resolution: 167950
% Factoring: 3
% Forward superposition: 26844
% Backward superposition: 25149
% Self superposition: 178
% Equality factoring: 2
% Equality resolution: 30
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 13275
% SAT solver unit clauses: 4409
% SAT solver binary clauses: 6685
% 
% Sat splits: 8
% Sat splitting refutations: 2700
% 
% Memory used [KB]: 152875
% Time elapsed: 9.823 s
% ------------------------------
% ------------------------------
% Success in time 11.2 s
