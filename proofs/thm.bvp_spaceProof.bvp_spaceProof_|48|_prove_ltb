Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvp_spaceProof
% (68088)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 536
% Passive clauses: 5798
% Generated clauses: 12719
% Final active clauses: 533
% Final passive clauses: 4905
% Input formulas: 43
% Initial clauses: 182
% 
% Duplicate literals: 299
% Trivial inequalities: 16
% Fw subsumption resolutions: 1167
% Fw demodulations: 108
% Bw demodulations: 2
% 
% Simple tautologies: 213
% Equational tautologies: 59
% Forward subsumptions: 4587
% 
% Binary resolution: 7108
% Factoring: 992
% Forward superposition: 1086
% Backward superposition: 1579
% Self superposition: 34
% Equality factoring: 34
% Equality resolution: 6
% 
% Split clauses: 438
% Split components: 878
% SAT solver clauses: 672
% SAT solver unit clauses: 14
% SAT solver binary clauses: 107
% 
% Sat splits: 438
% 
% TWLsolver clauses: 671
% TWLsolver calls for satisfiability: 289
% 
% Memory used [KB]: 5884
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.bvp_spaceProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_spaceProof
% SZS output start Proof for thm.bvp_spaceProof
fof(f3409,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f3408,f253,f442,f254,f449,f576,f580,f251,f445,f269,f457,f2740,f2741,f252,f443,f299,f467,f577,f582,f250,f447])).
fof(f447,plain,(
  p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK15)))) | $spl6),
  inference(cnf_transformation,[],[f447_D])).
fof(f447_D,plain,(
  p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK15)))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f250,plain,(
  p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK15))))),
  inference(cnf_transformation,[],[f164])).
fof(f164,plain,(
  p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK15)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14)))) & ! [X3] : s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(sK13),sK14))) = s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(sK13),sK15))) & s('type.sptree.spt'(sK13),sK14) != s('type.sptree.spt'(sK13),sK15)),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK13,sK14,sK15])],[f114])).
fof(f114,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) & ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2))) & s('type.sptree.spt'(X0),X1) != s('type.sptree.spt'(X0),X2))),
  inference(flattening,[],[f113])).
fof(f113,plain,(
  ? [X0,X1,X2] : ((p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) & ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))) & s('type.sptree.spt'(X0),X1) != s('type.sptree.spt'(X0),X2))),
  inference(ennf_transformation,[],[f46])).
fof(f46,plain,(
  ~! [X0,X1,X2] : ((p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) & ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))) => s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ~! [X0] : ! [X1,X2] : ((p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) & ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))) => s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8] : ((p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X6),X8)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X6),X7)))) & ! [X9] : s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X9),s('type.sptree.spt'(X6),X7))) = s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X9),s('type.sptree.spt'(X6),X8)))) => s('type.sptree.spt'(X6),X7) = s('type.sptree.spt'(X6),X8))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8] : ((p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X6),X8)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X6),X7)))) & ! [X9] : s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X9),s('type.sptree.spt'(X6),X7))) = s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X9),s('type.sptree.spt'(X6),X8)))) => s('type.sptree.spt'(X6),X7) = s('type.sptree.spt'(X6),X8))),
  file('thm.bvp_spaceProof.bvp_spaceProof_|48|_prove_ltb','thm.bvp_spaceProof.bvp_spaceProof_|48|_prove_ltb')).
fof(f582,plain,(
  s(bool,'T_0') = s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK15))) | $spl218),
  inference(cnf_transformation,[],[f582_D])).
fof(f582_D,plain,(
  s(bool,'T_0') = s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK15))) <=> ~$spl218),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl218])])).
fof(f577,plain,(
  s(bool,'T_0') = s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK15))) | ($spl6 | $spl14)),
  inference(resolution,[],[f457,f447])).
fof(f467,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.sptree.spt'(X0),X1))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.sptree.spt'(X0),X2))) | s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1))))) ) | $spl26),
  inference(cnf_transformation,[],[f467_D])).
fof(f467_D,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.sptree.spt'(X0),X1))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.sptree.spt'(X0),X2))) | s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1))))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f299,plain,(
  ( ! [X2,X0,X1] : (s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2) | s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.sptree.spt'(X0),X1))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.sptree.spt'(X0),X2))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1))))) )),
  inference(cnf_transformation,[],[f185])).
fof(f185,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) | ((s('type.sptree.spt'(X0),X1) != s('type.sptree.spt'(X0),X2) | ! [X4] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'(X0),X2)))) & (s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.sptree.spt'(X0),X1))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',sK16(X2,X1,X0)),s('type.sptree.spt'(X0),X2))) | s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK16])],[f184])).
fof(f184,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) | ((s('type.sptree.spt'(X0),X1) != s('type.sptree.spt'(X0),X2) | ! [X4] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X4),s('type.sptree.spt'(X0),X2)))) & (? [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2))) | s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2))))),
  inference(rectify,[],[f183])).
fof(f183,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) | ((s('type.sptree.spt'(X0),X1) != s('type.sptree.spt'(X0),X2) | ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))) & (? [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) != s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2))) | s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2))))),
  inference(nnf_transformation,[],[f127])).
fof(f127,plain,(
  ! [X0,X1,X2] : (~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2)))) | (s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2) <=> ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(flattening,[],[f126])).
fof(f126,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2))))) | (s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2) <=> ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(ennf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2] : ((p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2))))) => (s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2) <=> ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(flattening,[],[f78])).
fof(f78,plain,(
  ! [X0] : ! [X1,X2] : ((p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X1)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X0),X2))))) => (s('type.sptree.spt'(X0),X1) = s('type.sptree.spt'(X0),X2) <=> ! [X3] : s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X1))) = s('type.option.option'(X0),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(X0),X2)))))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X6] : ! [X11,X12] : ((p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X6),X11)))) & p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(X6),X12))))) => (s('type.sptree.spt'(X6),X11) = s('type.sptree.spt'(X6),X12) <=> ! [X20] : s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X20),s('type.sptree.spt'(X6),X11))) = s('type.option.option'(X6),'const.sptree.lookup_2'(s('type.num.num',X20),s('type.sptree.spt'(X6),X12)))))),
  file('thm.bvp_spaceProof.bvp_spaceProof_|48|_prove_ltb','thm.sptree.spt_eq_thm')).
fof(f443,plain,(
  ( ! [X3] : (s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(sK13),sK14))) = s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(sK13),sK15)))) ) | $spl2),
  inference(cnf_transformation,[],[f443_D])).
fof(f443_D,plain,(
  ( ! [X3] : (s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(sK13),sK14))) = s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(sK13),sK15)))) ) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f252,plain,(
  ( ! [X3] : (s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(sK13),sK14))) = s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',X3),s('type.sptree.spt'(sK13),sK15)))) )),
  inference(cnf_transformation,[],[f164])).
fof(f2741,plain,(
  ( ! [X0] : (s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),sK14))) != s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),X0))) | s('type.sptree.spt'(sK13),sK15) = s('type.sptree.spt'(sK13),X0) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),X0))))) ) | $spl1134),
  inference(cnf_transformation,[],[f2741_D])).
fof(f2741_D,plain,(
  ( ! [X0] : (s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),sK14))) != s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),X0))) | s('type.sptree.spt'(sK13),sK15) = s('type.sptree.spt'(sK13),X0) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),X0))))) ) <=> ~$spl1134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1134])])).
fof(f2740,plain,(
  ( ! [X0] : (s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),sK14))) != s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),X0))) | s('type.sptree.spt'(sK13),sK15) = s('type.sptree.spt'(sK13),X0) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),X0))))) ) | ($spl2 | $spl8 | $spl26 | $spl218)),
  inference(subsumption_resolution,[],[f2739,f449])).
fof(f2739,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),sK14))) != s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),X0))) | s('type.sptree.spt'(sK13),sK15) = s('type.sptree.spt'(sK13),X0) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),X0))))) ) | ($spl2 | $spl26 | $spl218)),
  inference(forward_demodulation,[],[f2735,f582])).
fof(f2735,plain,(
  ( ! [X0] : (s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),sK14))) != s('type.option.option'(sK13),'const.sptree.lookup_2'(s('type.num.num',sK16(X0,sK15,sK13)),s('type.sptree.spt'(sK13),X0))) | s('type.sptree.spt'(sK13),sK15) = s('type.sptree.spt'(sK13),X0) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),X0)))) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK15))))) ) | ($spl2 | $spl26)),
  inference(superposition,[],[f467,f443])).
fof(f457,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) | $spl14),
  inference(cnf_transformation,[],[f457_D])).
fof(f457_D,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f269,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f167])).
fof(f167,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X13] : (s(bool,'T_0') = s(bool,X13) <=> p(s(bool,X13)))),
  file('thm.bvp_spaceProof.bvp_spaceProof_|48|_prove_ltb','thm.bool.EQ_CLAUSES|split|1')).
fof(f445,plain,(
  p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14)))) | $spl4),
  inference(cnf_transformation,[],[f445_D])).
fof(f445_D,plain,(
  p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14)))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f251,plain,(
  p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14))))),
  inference(cnf_transformation,[],[f164])).
fof(f580,plain,(
  s(bool,'T_0') = s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14))) | $spl216),
  inference(cnf_transformation,[],[f580_D])).
fof(f580_D,plain,(
  s(bool,'T_0') = s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14))) <=> ~$spl216),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl216])])).
fof(f576,plain,(
  s(bool,'T_0') = s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14))) | ($spl4 | $spl14)),
  inference(resolution,[],[f457,f445])).
fof(f449,plain,(
  p(s(bool,'T_0')) | $spl8),
  inference(cnf_transformation,[],[f449_D])).
fof(f449_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f254,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_spaceProof.bvp_spaceProof_|48|_prove_ltb',aHL_TRUTH)).
fof(f442,plain,(
  s('type.sptree.spt'(sK13),sK14) != s('type.sptree.spt'(sK13),sK15) | $spl1),
  inference(cnf_transformation,[],[f442_D])).
fof(f442_D,plain,(
  s('type.sptree.spt'(sK13),sK14) != s('type.sptree.spt'(sK13),sK15) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f253,plain,(
  s('type.sptree.spt'(sK13),sK14) != s('type.sptree.spt'(sK13),sK15)),
  inference(cnf_transformation,[],[f164])).
fof(f3408,plain,(
  $false | ($spl1 | $spl8 | $spl216 | $spl1134)),
  inference(subsumption_resolution,[],[f3407,f449])).
fof(f3407,plain,(
  ~p(s(bool,'T_0')) | ($spl1 | $spl216 | $spl1134)),
  inference(forward_demodulation,[],[f3406,f580])).
fof(f3406,plain,(
  ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14)))) | ($spl1 | $spl1134)),
  inference(subsumption_resolution,[],[f3405,f442])).
fof(f3405,plain,(
  s('type.sptree.spt'(sK13),sK14) = s('type.sptree.spt'(sK13),sK15) | ~p(s(bool,'const.sptree.wf_1'(s('type.sptree.spt'(sK13),sK14)))) | $spl1134),
  inference(equality_resolution,[],[f2741])).
% SZS output end Proof for thm.bvp_spaceProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 251
% Passive clauses: 743
% Generated clauses: 3179
% Final active clauses: 245
% Final passive clauses: 460
% Input formulas: 43
% Initial clauses: 182
% 
% Duplicate literals: 87
% Trivial inequalities: 6
% Fw subsumption resolutions: 279
% Fw demodulations: 59
% Bw demodulations: 34
% Condensations: 48
% Global subsumptions: 14
% 
% Simple tautologies: 168
% Equational tautologies: 8
% Forward subsumptions: 942
% 
% Binary resolution: 1285
% Factoring: 109
% Forward superposition: 231
% Backward superposition: 82
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 7
% 
% Split clauses: 4
% Split components: 8
% SAT solver clauses: 1033
% SAT solver unit clauses: 195
% SAT solver binary clauses: 61
% SAT solver learnt clauses: 29
% SAT solver learnt literals: 12
% 
% Sat splits: 4
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 976
% TWLsolver calls for satisfiability: 1799
% 
% Memory used [KB]: 3582
% Time elapsed: 0.193 s
% ------------------------------
% ------------------------------
% Success in time 0.86 s
