Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.stack_removeProof
% (74816)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 1222
% Passive clauses: 9380
% Generated clauses: 32359
% Final active clauses: 1074
% Final passive clauses: 7552
% Input formulas: 117
% Initial clauses: 316
% 
% Duplicate literals: 274
% Trivial inequalities: 64
% Fw subsumption resolutions: 2589
% Fw demodulations: 3336
% Bw demodulations: 145
% 
% Simple tautologies: 271
% Equational tautologies: 30
% Forward subsumptions: 16164
% Fw demodulations to eq. taut.: 18
% 
% Binary resolution: 9458
% Factoring: 1176
% Forward superposition: 9006
% Backward superposition: 5735
% Self superposition: 48
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 367
% Split components: 735
% SAT solver clauses: 635
% SAT solver unit clauses: 21
% SAT solver binary clauses: 75
% 
% Sat splits: 367
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 635
% TWLsolver calls for satisfiability: 497
% 
% Memory used [KB]: 18293
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.stack_removeProof
% (74852)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 804
% Passive clauses: 3359
% Generated clauses: 26486
% Final active clauses: 679
% Final passive clauses: 2402
% Input formulas: 117
% Initial clauses: 316
% 
% Duplicate literals: 133
% Trivial inequalities: 101
% Fw subsumption resolutions: 1679
% Fw demodulations: 4146
% Bw demodulations: 175
% Condensations: 26
% Global subsumptions: 23
% 
% Simple tautologies: 315
% Equational tautologies: 10
% Forward subsumptions: 12469
% Fw demodulations to eq. taut.: 15
% Bw demodulations to eq. taut.: 3
% 
% Binary resolution: 2298
% Factoring: 49
% Forward superposition: 8187
% Backward superposition: 4946
% Self superposition: 63
% Equality factoring: 2
% Equality resolution: 22
% 
% Split clauses: 23
% Split components: 46
% SAT solver clauses: 4402
% SAT solver unit clauses: 410
% SAT solver binary clauses: 110
% SAT solver learnt clauses: 48
% SAT solver learnt literals: 16
% 
% Sat splits: 23
% Sat splitting refutations: 150
% 
% TWLsolver clauses: 4308
% TWLsolver calls for satisfiability: 2115
% 
% Memory used [KB]: 22643
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.stack_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.stack_removeProof
% SZS output start Proof for thm.stack_removeProof
fof(f13928,plain,(
  $false),
  inference(subsumption_resolution,[],[f13927,f758])).
fof(f758,plain,(
  ~p(s(bool,'F_0'))),
  inference(subsumption_resolution,[],[f465,f459])).
fof(f459,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.stack_removeProof.stack_removeProof_62_prove_ltb',aHL_TRUTH)).
fof(f465,plain,(
  ~p(s(bool,'F_0')) | ~p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f315])).
fof(f315,plain,(
  (p(s(bool,'F_0')) | p(s(bool,'T_0'))) & (~p(s(bool,'T_0')) | ~p(s(bool,'F_0')))),
  inference(nnf_transformation,[],[f121])).
fof(f121,plain,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  inference(flattening,[],[f47])).
fof(f47,axiom,(
  ~p(s(bool,'F_0')) <=> p(s(bool,'T_0'))),
  file('thm.stack_removeProof.stack_removeProof_62_prove_ltb','thm.bool.NOT_CLAUSES|split|2')).
fof(f13927,plain,(
  p(s(bool,'F_0'))),
  inference(forward_demodulation,[],[f13188,f941])).
fof(f941,plain,(
  s(bool,'F_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.num.num',sK16)))),
  inference(unit_resulting_resolution,[],[f448,f513])).
fof(f513,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f319])).
fof(f319,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f165])).
fof(f165,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f164])).
fof(f164,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X20] : (s(bool,'F_0') = s(bool,X20) <=> ~p(s(bool,X20)))),
  file('thm.stack_removeProof.stack_removeProof_62_prove_ltb','thm.bool.EQ_CLAUSES|split|3')).
fof(f448,plain,(
  ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.num.num',sK16))))),
  inference(cnf_transformation,[],[f314])).
fof(f314,plain,(
  p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',sK17),s('type.sptree.spt'('type.stackLang.prog'(sK13)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.sptree.spt'('type.stackLang.prog'(sK13)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK13,sK12),sK14)))))) & p(s(bool,happ(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s(fun('type.fcp.cart'(bool,sK13),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK13,sK12),sK15))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,sK13),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,sK13),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK13)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(sK13),'const.bool.the_value_0'))))),s('type.list.list'('type.wordSem.word_loc'(sK13)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,sK13)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(sK13,sK12),sK15))))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),bool),bool),'const.stack_removeProof.word_store_2'(s('type.fcp.cart'(bool,sK13),sK18),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK13)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK13,sK12),sK15))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,sK13),sK18),s('type.list.list'('type.wordSem.word_loc'(sK13)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK13,sK12),sK15))))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),fun('type.fcp.cart'(bool,sK13),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(sK13,sK12),sK14))),s(fun('type.fcp.cart'(bool,sK13),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(sK13,sK12),sK14)))))))))) & p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK17),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK13,sK12),sK14)))))) & p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK17),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK13,sK12),sK14)))))) & p(s(bool,'const.bool.IN_2'(s('type.num.num',sK17),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK13,sK12),sK14)))))) & s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK13)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK13)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK13,sK12),sK14))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK17),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.option.SOME_1'(s('type.wordSem.word_loc'(sK13),happ(s(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,sK13),sK18))))) = s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK13)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK13,sK12),sK14))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK17),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK13)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK13,sK12),sK14))),s('type.num.num',sK17))) = s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.option.SOME_1'(s('type.wordSem.word_loc'(sK13),happ(s(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,sK13),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK13),sK18),s('type.fcp.cart'(bool,sK13),'const.words.word_mul_2'(s('type.fcp.cart'(bool,sK13),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,sK13),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))))))))))))) & s('type.option.option'('type.stackLang.prog'(sK13)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(sK13)),'const.stackSem.state_code_1'(s('type.stackSem.state'(sK13,sK12),sK14))))) = s('type.option.option'('type.stackLang.prog'(sK13)),'const.option.SOME_1'(s('type.stackLang.prog'(sK13),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,sK13),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK13,sK12),sK14))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(sK13,sK12),sK15))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK13)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK13),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK13))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK13)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK13)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK13,sK12),sK14))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK13)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK13),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK13))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(sK13)),'type.pair.prod'(fun('type.fcp.cart'(bool,sK13),'type.wordSem.word_loc'(sK13)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK13)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(sK13,sK12),sK15))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK13,sK12),sK14))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(sK13,sK12),sK15))) & s('type.ffi.ffi_state'(sK12),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK13,sK12),sK14))) = s('type.ffi.ffi_state'(sK12),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(sK13,sK12),sK15))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK13,sK12),sK14))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(sK13,sK12),sK15))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK13),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK13),sK18)))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(sK13)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK13,sK12),sK15)))))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK16),s('type.num.num','const.stack_remove.max_stack_alloc_0')))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK13),sK18))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,sK13),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(sK13)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(sK13,sK12),sK15))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK13),'const.bool.the_value_0')))))) & ~p(s(bool,'const.words.word_lo_2'(s('type.fcp.cart'(bool,sK13),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK13),'const.words.word_add_2'(s('type.fcp.cart'(bool,sK13),sK18),s('type.fcp.cart'(bool,sK13),'const.words.word_mul_2'(s('type.fcp.cart'(bool,sK13),'const.words.word_2comp_1'(s('type.fcp.cart'(bool,sK13),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.fcp.cart'(bool,sK13),'const.stack_remove.word_offset_1'(s('type.num.num',sK16))))))),s('type.fcp.cart'(bool,sK13),'const.words.word_mul_2'(s('type.fcp.cart'(bool,sK13),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,sK13),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))))))))),s('type.fcp.cart'(bool,sK13),sK18)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',sK16) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.num.num',sK16)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK13,sK12),sK14)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK13,sK12),sK14)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK13,sK12),sK14)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(sK13,sK12),sK15)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(sK13,sK12),sK15)))) & p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(sK13,sK12),sK15)))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(sK13)),'const.stackSem.state_store_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(sK13),'const.bool.the_value_0')))) & ! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',sK17)))) | s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK13)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK13,sK12),sK14))),s('type.num.num',X7))) = s('type.option.option'('type.wordSem.word_loc'(sK13)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(sK13)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.num.num',X7)))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK16),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK13),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK13),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18])],[f262])).
fof(f262,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X5),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X2)))))) & p(s(bool,happ(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X1,X0),X3))),s(fun('type.fcp.cart'(bool,X1),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X1,X0),X3))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X1),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X1),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))))),s('type.list.list'('type.wordSem.word_loc'(X1)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X1)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.stack_removeProof.word_store_2'(s('type.fcp.cart'(bool,X1),X6),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X1),X6),s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3))))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X1,X0),X2))),s(fun('type.fcp.cart'(bool,X1),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X1,X0),X2)))))))))) & p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) & p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) & p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) & s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & s('type.option.option'('type.wordSem.word_loc'(X1)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X1),happ(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X1),X6))))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X1),happ(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X6),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))))))))))))) & s('type.option.option'('type.stackLang.prog'(X1)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X2))))) = s('type.option.option'('type.stackLang.prog'(X1)),'const.option.SOME_1'(s('type.stackLang.prog'(X1),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X1,X0),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X1,X0),X3))) & s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X1,X0),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X1,X0),X3))) & s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X3))) & s('type.ffi.ffi_state'(X0),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X1,X0),X2))) = s('type.ffi.ffi_state'(X0),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X1,X0),X3))) & s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X1,X0),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X1,X0),X3))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),X6)))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3)))))))) & p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.stack_remove.max_stack_alloc_0')))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))) & ~p(s(bool,'const.words.word_lo_2'(s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X6),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.words.word_2comp_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.fcp.cart'(bool,X1),'const.stack_remove.word_offset_1'(s('type.num.num',X4))))))),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s('type.fcp.cart'(bool,X1),X6)))) & s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) & ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num',X4)))) & ~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X1,X0),X2)))) & ~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X1,X0),X2)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X1,X0),X2)))) & ~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X1,X0),X3)))) & p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X1,X0),X3)))) & p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X1,X0),X3)))) & p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) & ! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X5)))) | s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num',X7))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num',X7)))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))))))))))))))),
  inference(flattening,[],[f261])).
fof(f261,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X5),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X2)))))) & (p(s(bool,happ(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X1,X0),X3))),s(fun('type.fcp.cart'(bool,X1),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X1,X0),X3))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X1),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X1),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))))),s('type.list.list'('type.wordSem.word_loc'(X1)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X1)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.stack_removeProof.word_store_2'(s('type.fcp.cart'(bool,X1),X6),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X1),X6),s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3))))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X1,X0),X2))),s(fun('type.fcp.cart'(bool,X1),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X1,X0),X2)))))))))) & (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) & (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) & (p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) & (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X1),happ(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X1),X6))))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) & (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X1),happ(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X6),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))))))))))))) & (s('type.option.option'('type.stackLang.prog'(X1)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X2))))) = s('type.option.option'('type.stackLang.prog'(X1)),'const.option.SOME_1'(s('type.stackLang.prog'(X1),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) & (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X1,X0),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X1,X0),X3))) & (s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X1,X0),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X1,X0),X3))) & (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X3))) & (s('type.ffi.ffi_state'(X0),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X1,X0),X2))) = s('type.ffi.ffi_state'(X0),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X1,X0),X3))) & (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X1,X0),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X1,X0),X3))) & (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),X6)))))) & (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3)))))))) & (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.stack_remove.max_stack_alloc_0')))) & (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))) & (~p(s(bool,'const.words.word_lo_2'(s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X6),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.words.word_2comp_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.fcp.cart'(bool,X1),'const.stack_remove.word_offset_1'(s('type.num.num',X4))))))),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s('type.fcp.cart'(bool,X1),X6)))) & (s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) & (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num',X4)))) & (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X1,X0),X2)))) & (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X1,X0),X2)))) & (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X1,X0),X2)))) & (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X1,X0),X3)))) & (p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X1,X0),X3)))) & (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X1,X0),X3)))) & (p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) & (p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) & (! [X7] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X5)))) | s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num',X7))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num',X7)))) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))))))))),
  inference(ennf_transformation,[],[f120])).
fof(f120,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6] : (p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X5),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X2)))))) => (p(s(bool,happ(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X1,X0),X3))),s(fun('type.fcp.cart'(bool,X1),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X1,X0),X3))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X1),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X1),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))))),s('type.list.list'('type.wordSem.word_loc'(X1)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X1)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.stack_removeProof.word_store_2'(s('type.fcp.cart'(bool,X1),X6),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X1),X6),s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3))))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X1,X0),X2))),s(fun('type.fcp.cart'(bool,X1),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X1,X0),X2)))))))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) => (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X1),happ(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X1),X6))))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X1),happ(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X6),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))))))))))))) => (s('type.option.option'('type.stackLang.prog'(X1)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X2))))) = s('type.option.option'('type.stackLang.prog'(X1)),'const.option.SOME_1'(s('type.stackLang.prog'(X1),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) => (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X1,X0),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X1,X0),X3))) => (s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X1,X0),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X1,X0),X3))) => (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X3))) => (s('type.ffi.ffi_state'(X0),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X1,X0),X2))) = s('type.ffi.ffi_state'(X0),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X1,X0),X3))) => (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X1,X0),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X1,X0),X3))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),X6)))))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3)))))))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.stack_remove.max_stack_alloc_0')))) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))) => (~p(s(bool,'const.words.word_lo_2'(s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X6),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.words.word_2comp_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.fcp.cart'(bool,X1),'const.stack_remove.word_offset_1'(s('type.num.num',X4))))))),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s('type.fcp.cart'(bool,X1),X6)))) => (s('type.num.num','const.num.|48|_0') != s('type.num.num',X4) => (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num',X4)))) => (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X1,X0),X2)))) => (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X1,X0),X2)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X1,X0),X2)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X1,X0),X3)))) => (p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X1,X0),X3)))) => (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X1,X0),X3)))) => (p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) => (p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) => (! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X5)))) => s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num',X7))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num',X7)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))))))))),
  inference(flattening,[],[f119])).
fof(f119,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6] : (p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X5),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X2)))))) => (p(s(bool,happ(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X1,X0),X3))),s(fun('type.fcp.cart'(bool,X1),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X1,X0),X3))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X1),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X1),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))))),s('type.list.list'('type.wordSem.word_loc'(X1)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X1)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.stack_removeProof.word_store_2'(s('type.fcp.cart'(bool,X1),X6),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X1),X6),s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3))))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),fun('type.fcp.cart'(bool,X1),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X1,X0),X2))),s(fun('type.fcp.cart'(bool,X1),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X1,X0),X2)))))))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num',X5),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2)))))) => (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X1),happ(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X1),X6))))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X5),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => (s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num',X5))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X1),happ(s(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X6),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))))))))))))) => (s('type.option.option'('type.stackLang.prog'(X1)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X1)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X1,X0),X2))))) = s('type.option.option'('type.stackLang.prog'(X1)),'const.option.SOME_1'(s('type.stackLang.prog'(X1),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) => (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X1,X0),X2))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X1,X0),X3))) => (s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X1,X0),X2))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X1)),'type.pair.prod'(fun('type.fcp.cart'(bool,X1),'type.wordSem.word_loc'(X1)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X1,X0),X3))) => (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X2))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X1,X0),X3))) => (s('type.ffi.ffi_state'(X0),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X1,X0),X2))) = s('type.ffi.ffi_state'(X0),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X1,X0),X3))) => (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X1,X0),X2))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X1,X0),X3))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),X6)))))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3)))))))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X4),s('type.num.num','const.stack_remove.max_stack_alloc_0')))) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),X6))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X1)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))))) => (~p(s(bool,'const.words.word_lo_2'(s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),'const.words.word_add_2'(s('type.fcp.cart'(bool,X1),X6),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.words.word_2comp_1'(s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.fcp.cart'(bool,X1),'const.stack_remove.word_offset_1'(s('type.num.num',X4))))))),s('type.fcp.cart'(bool,X1),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X1),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X1),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))))))))),s('type.fcp.cart'(bool,X1),X6)))) => (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X4) => (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num',X4)))) => (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X1,X0),X2)))) => (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X1,X0),X2)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X1,X0),X2)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X1,X0),X3)))) => (p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X1,X0),X3)))) => (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X1,X0),X3)))) => (p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X1)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) => (p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0')))) => (! [X7] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X7),s('type.num.num',X5)))) => s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X2))),s('type.num.num',X7))) = s('type.option.option'('type.wordSem.word_loc'(X1)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X1)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num',X7)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X4),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X1,X0),X3))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X1),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12] : (p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X11),s('type.sptree.spt'('type.stackLang.prog'(X7)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.sptree.spt'('type.stackLang.prog'(X7)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X7,X6),X8)))))) => (p(s(bool,happ(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X7,X6),X9))),s(fun('type.fcp.cart'(bool,X7),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X7,X6),X9))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X7),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X7),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))),s('type.list.list'('type.wordSem.word_loc'(X7)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X7)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X7,X6),X9))))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.stack_removeProof.word_store_2'(s('type.fcp.cart'(bool,X7),X12),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X7,X6),X9))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X7),X12),s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),X9))))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),fun('type.fcp.cart'(bool,X7),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X7,X6),X8))),s(fun('type.fcp.cart'(bool,X7),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X7,X6),X8)))))))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X8)))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X8)))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num',X11),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X8)))))) => (s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => (s('type.option.option'('type.wordSem.word_loc'(X7)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X7),happ(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X7),X12))))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => (s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X8))),s('type.num.num',X11))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X7),happ(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X7),'const.words.word_add_2'(s('type.fcp.cart'(bool,X7),X12),s('type.fcp.cart'(bool,X7),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X7),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))))))))))))) => (s('type.option.option'('type.stackLang.prog'(X7)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X7)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X7,X6),X8))))) = s('type.option.option'('type.stackLang.prog'(X7)),'const.option.SOME_1'(s('type.stackLang.prog'(X7),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) => (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X7,X6),X8))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X7,X6),X9))) => (s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X7,X6),X8))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X7,X6),X9))) => (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X8))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X9))) => (s('type.ffi.ffi_state'(X6),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X7,X6),X8))) = s('type.ffi.ffi_state'(X6),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X7,X6),X9))) => (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X7,X6),X8))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X7,X6),X9))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X7),X12)))))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),X9)))))))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.stack_remove.max_stack_alloc_0')))) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X7),X12))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X7),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),X9))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0')))))) => (~p(s(bool,'const.words.word_lo_2'(s('type.fcp.cart'(bool,X7),'const.words.word_add_2'(s('type.fcp.cart'(bool,X7),'const.words.word_add_2'(s('type.fcp.cart'(bool,X7),X12),s('type.fcp.cart'(bool,X7),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X7),'const.words.word_2comp_1'(s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.fcp.cart'(bool,X7),'const.stack_remove.word_offset_1'(s('type.num.num',X10))))))),s('type.fcp.cart'(bool,X7),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X7),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))))))))),s('type.fcp.cart'(bool,X7),X12)))) => (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) => (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.num.num',X10)))) => (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X7,X6),X8)))) => (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X7,X6),X8)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X7,X6),X8)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X7,X6),X9)))) => (p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X7,X6),X9)))) => (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X7,X6),X9)))) => (p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) => (p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0')))) => (! [X13] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X11)))) => s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X8))),s('type.num.num',X13))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.num.num',X13)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12] : (p(s(bool,'const.stack_removeProof.code_rel_3'(s('type.num.num',X11),s('type.sptree.spt'('type.stackLang.prog'(X7)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.sptree.spt'('type.stackLang.prog'(X7)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X7,X6),X8)))))) => (p(s(bool,happ(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.set_sep.STAR_2'(s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.stack_removeProof.memory_2'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X7,X6),X9))),s(fun('type.fcp.cart'(bool,X7),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X7,X6),X9))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X7),'const.words.word_lsl_2'(s('type.fcp.cart'(bool,X7),'const.stack_removeProof.the_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0'))))),s('type.num.num','const.stackLang.word_shift_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))))),s('type.list.list'('type.wordSem.word_loc'(X7)),'const.list.MAP_2'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.wordSem.Word_0'),s('type.list.list'('type.fcp.cart'(bool,X7)),'const.stackSem.state_bitmaps_1'(s('type.stackSem.state'(X7,X6),X9))))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.stack_removeProof.word_store_2'(s('type.fcp.cart'(bool,X7),X12),s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X7,X6),X9))))))),s(fun(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),bool),'const.misc.word_list_2'(s('type.fcp.cart'(bool,X7),X12),s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),X9))))))),s(fun('type.pair.prod'('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),bool),'const.set_sep.fun2set_1'(s('type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),fun('type.fcp.cart'(bool,X7),bool)),'const.pair.,_2'(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.stackSem.state_memory_1'(s('type.stackSem.state'(X7,X6),X8))),s(fun('type.fcp.cart'(bool,X7),bool),'const.stackSem.state_mdomain_1'(s('type.stackSem.state'(X7,X6),X8)))))))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X8)))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X8)))))) => (p(s(bool,'const.bool.IN_2'(s('type.num.num',X11),s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X8)))))) => (s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.wordLang.store_name','const.wordLang.CurrHeap_0'))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => (s('type.option.option'('type.wordSem.word_loc'(X7)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X7),happ(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X7),X12))))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X8))),s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X11),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))) => (s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X8))),s('type.num.num',X11))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.option.SOME_1'(s('type.wordSem.word_loc'(X7),happ(s(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'const.wordSem.Word_0'),s('type.fcp.cart'(bool,X7),'const.words.word_add_2'(s('type.fcp.cart'(bool,X7),X12),s('type.fcp.cart'(bool,X7),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X7),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))))))))))))) => (s('type.option.option'('type.stackLang.prog'(X7)),'const.sptree.lookup_2'(s('type.num.num','const.stack_remove.stack_err_lab_0'),s('type.sptree.spt'('type.stackLang.prog'(X7)),'const.stackSem.state_code_1'(s('type.stackSem.state'(X7,X6),X8))))) = s('type.option.option'('type.stackLang.prog'(X7)),'const.option.SOME_1'(s('type.stackLang.prog'(X7),'const.stack_remove.halt_inst_1'(s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))) => (s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X7,X6),X8))) = s('type.num.num','const.stackSem.state_clock_1'(s('type.stackSem.state'(X7,X6),X9))) => (s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X7,X6),X8))) = s(fun('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),bool),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7))))),'type.option.option'('type.pair.prod'('type.list.list'('type.wordSem.word_loc'(X7)),'type.pair.prod'(fun('type.fcp.cart'(bool,X7),'type.wordSem.word_loc'(X7)),'type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)))))),'const.stackSem.state_gc_fun_1'(s('type.stackSem.state'(X7,X6),X9))) => (s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X8))) = s(fun('type.num.num',bool),'const.stackSem.state_ffi_save_regs_1'(s('type.stackSem.state'(X7,X6),X9))) => (s('type.ffi.ffi_state'(X6),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X7,X6),X8))) = s('type.ffi.ffi_state'(X6),'const.stackSem.state_ffi_1'(s('type.stackSem.state'(X7,X6),X9))) => (s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X7,X6),X8))) = s(bool,'const.stackSem.state_be_1'(s('type.stackSem.state'(X7,X6),X9))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))),s('type.num.num','const.stack_remove.max_stack_alloc_0'))),s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X7),X12)))))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),X9)))))))) => (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num','const.stack_remove.max_stack_alloc_0')))) => (p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X7),X12))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.words.w2n_1'(s('type.fcp.cart'(bool,X7),'const.misc.bytes_in_word_0'))),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.wordSem.word_loc'(X7)),'const.stackSem.state_stack_1'(s('type.stackSem.state'(X7,X6),X9))))))))),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X7),'const.bool.the_value_0')))))) => (~p(s(bool,'const.words.word_lo_2'(s('type.fcp.cart'(bool,X7),'const.words.word_add_2'(s('type.fcp.cart'(bool,X7),'const.words.word_add_2'(s('type.fcp.cart'(bool,X7),X12),s('type.fcp.cart'(bool,X7),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X7),'const.words.word_2comp_1'(s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))),s('type.fcp.cart'(bool,X7),'const.stack_remove.word_offset_1'(s('type.num.num',X10))))))),s('type.fcp.cart'(bool,X7),'const.words.word_mul_2'(s('type.fcp.cart'(bool,X7),'const.misc.bytes_in_word_0'),s('type.fcp.cart'(bool,X7),'const.words.n2w_1'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))))))))),s('type.fcp.cart'(bool,X7),X12)))) => (~s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) => (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.num.num',X10)))) => (~p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X7,X6),X8)))) => (~p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X7,X6),X8)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X7,X6),X8)))) => (~p(s(bool,'const.stackSem.state_use_alloc_1'(s('type.stackSem.state'(X7,X6),X9)))) => (p(s(bool,'const.stackSem.state_use_store_1'(s('type.stackSem.state'(X7,X6),X9)))) => (p(s(bool,'const.stackSem.state_use_stack_1'(s('type.stackSem.state'(X7,X6),X9)))) => (p(s(bool,'const.stack_removeProof.is_SOME_Word_1'(s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.wordLang.store_name','type.wordSem.word_loc'(X7)),'const.stackSem.state_store_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.wordLang.store_name','const.wordLang.BitmapBase_0')))))) => (p(s(bool,'const.labProps.good_dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0')))) => (! [X13] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X13),s('type.num.num',X11)))) => s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X8))),s('type.num.num',X13))) = s('type.option.option'('type.wordSem.word_loc'(X7)),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.num.num','type.wordSem.word_loc'(X7)),'const.stackSem.state_regs_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.num.num',X13)))) => p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X10),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(X7,X6),X9))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(X7),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))))))))))))))))))))))))))))))))),
  file('thm.stack_removeProof.stack_removeProof_62_prove_ltb','thm.stack_removeProof.stack_removeProof_62_prove_ltb')).
fof(f13188,plain,(
  p(s(bool,'const.prim_rec.<_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.num.num',sK16))))),
  inference(unit_resulting_resolution,[],[f9474,f639])).
fof(f639,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) )),
  inference(cnf_transformation,[],[f379])).
fof(f379,plain,(
  ! [X0,X1] : ((p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0))))) & (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1))))))),
  inference(nnf_transformation,[],[f238])).
fof(f238,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(flattening,[],[f237])).
fof(f237,plain,(
  ! [X0,X1] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X0),s('type.num.num',X1)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X1),s('type.num.num',X0)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X14,X10] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X14),s('type.num.num',X10)))) <=> p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X10),s('type.num.num',X14)))))),
  file('thm.stack_removeProof.stack_removeProof_62_prove_ltb','thm.arithmetic.NOT_LESS')).
fof(f9474,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',sK16),s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))))))),
  inference(unit_resulting_resolution,[],[f458,f663])).
fof(f663,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))))))) )),
  inference(cnf_transformation,[],[f390])).
fof(f390,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2))))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))))))))),
  inference(flattening,[],[f389])).
fof(f389,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1)))))) | (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2)))))) & ((s('type.num.num','const.num.|48|_0') != s('type.num.num',X1) & ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2))))) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1))))))))),
  inference(nnf_transformation,[],[f251])).
fof(f251,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X0),s('type.num.num',X1))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X2),s('type.num.num',X1)))))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X1) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X0),s('type.num.num',X2))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X14,X10,X15] : (p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X14),s('type.num.num',X10))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num',X15),s('type.num.num',X10)))))) <=> (s('type.num.num','const.num.|48|_0') = s('type.num.num',X10) | p(s(bool,'const.arithmetic.<=_2'(s('type.num.num',X14),s('type.num.num',X15))))))),
  file('thm.stack_removeProof.stack_removeProof_62_prove_ltb','thm.arithmetic.LE_MULT_RCANCEL')).
fof(f458,plain,(
  ~p(s(bool,'const.arithmetic.<=_2'(s('type.num.num','const.arithmetic.*_2'(s('type.num.num',sK16),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK13),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))),s('type.num.num','const.arithmetic.*_2'(s('type.num.num','const.stackSem.state_stack_space_1'(s('type.stackSem.state'(sK13,sK12),sK15))),s('type.num.num','const.arithmetic.DIV_2'(s('type.num.num','const.fcp.dimindex_1'(s('type.bool.itself'(sK13),'const.bool.the_value_0'))),s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT2_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))))))))))))),
  inference(cnf_transformation,[],[f314])).
% SZS output end Proof for thm.stack_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 635
% Passive clauses: 3086
% Generated clauses: 13481
% Final active clauses: 610
% Final passive clauses: 2383
% Input formulas: 117
% Initial clauses: 316
% 
% Duplicate literals: 7
% Trivial inequalities: 21
% Fw subsumption resolutions: 162
% Fw demodulations: 2989
% Bw demodulations: 92
% Condensations: 4
% 
% Simple tautologies: 86
% Equational tautologies: 17
% Forward subsumptions: 7042
% Fw demodulations to eq. taut.: 53
% Bw demodulations to eq. taut.: 1
% 
% Unit resulting resolution: 5883
% Factoring: 1
% Forward superposition: 2403
% Backward superposition: 1547
% Self superposition: 39
% Equality factoring: 2
% Equality resolution: 10
% 
% Split clauses: 9
% Split components: 18
% SAT solver clauses: 3106
% SAT solver unit clauses: 2408
% SAT solver binary clauses: 284
% 
% Sat splits: 9
% 
% Memory used [KB]: 14711
% Time elapsed: 0.447 s
% ------------------------------
% ------------------------------
% Success in time 1.78 s
