Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.bvp_to_wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvp_to_wordProps
% SZS output start Proof for thm.bvp_to_wordProps
fof(f1277,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f1248,f90,f152,f1276,f89,f146,f144,f1255,f87,f150,f149])).
fof(f149,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),X5))))) ) | $spl6),
  inference(cnf_transformation,[],[f149_D])).
fof(f149_D,plain,(
  ( ! [X5] : (p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),X5))))) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f150,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',X4)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) ) | $spl8),
  inference(cnf_transformation,[],[f150_D])).
fof(f150_D,plain,(
  ( ! [X4] : (p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',X4)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f87,plain,(
  ( ! [X4,X5] : (p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',X4)))))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) | p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),X5))))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  (! [X5] : p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),X5)))) | ! [X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) | p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',X4)))))))) & (~p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),sK2)))) | (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0')))))) & ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK3))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f62])).
fof(f62,plain,(
  ? [X0,X1] : ((! [X5] : p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),X5)))) | ! [X4] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X4),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) | p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X4)))))))) & (? [X3] : ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),X3)))) | ? [X2] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) & ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2)))))))))),
  inference(rectify,[],[f61])).
fof(f61,plain,(
  ? [X0,X1] : ((! [X2] : p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),X2)))) | ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) | p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X3)))))))) & (? [X2] : ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),X2)))) | ? [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) & ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X3)))))))))),
  inference(nnf_transformation,[],[f48])).
fof(f48,plain,(
  ? [X0,X1] : (! [X2] : p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),X2)))) <~> ! [X3] : (~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) | p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X3))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1] : (! [X2] : p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),X2)))) <=> ! [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) => p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X3))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1] : (! [X2] : p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),X2)))) <=> ! [X3] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X3),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))) => p(s(bool,happ(s(fun('type.fcp.cart'(bool,X0),bool),X1),s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X3))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : (! [X8] : p(s(bool,happ(s(fun('type.fcp.cart'(bool,X6),bool),X7),s('type.fcp.cart'(bool,X6),X8)))) <=> ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))) => p(s(bool,happ(s(fun('type.fcp.cart'(bool,X6),bool),X7),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X9))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : (! [X8] : p(s(bool,happ(s(fun('type.fcp.cart'(bool,X6),bool),X7),s('type.fcp.cart'(bool,X6),X8)))) <=> ! [X9] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))) => p(s(bool,happ(s(fun('type.fcp.cart'(bool,X6),bool),X7),s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X9))))))))),
  file('thm.bvp_to_wordProps.FORALL_WORD','thm.bvp_to_wordProps.FORALL_WORD')).
fof(f1255,plain,(
  $false | ($spl3 | $spl6)),
  inference(resolution,[],[f149,f146])).
fof(f144,plain,(
  ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),sK2)))) | $spl1),
  inference(cnf_transformation,[],[f144_D])).
fof(f144_D,plain,(
  ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),sK2)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f146,plain,(
  ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK3)))))) | $spl3),
  inference(cnf_transformation,[],[f146_D])).
fof(f146_D,plain,(
  ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK3)))))) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f89,plain,(
  ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),'const.words.n2w_1'(s('type.num.num',sK3)))))) | ~p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),sK2))))),
  inference(cnf_transformation,[],[f63])).
fof(f1276,plain,(
  $false | ($spl1 | $spl6)),
  inference(subsumption_resolution,[],[f144,f149])).
fof(f152,plain,(
  p(s(bool,'T_0')) | $spl10),
  inference(cnf_transformation,[],[f152_D])).
fof(f152_D,plain,(
  p(s(bool,'T_0')) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f90,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.bvp_to_wordProps.FORALL_WORD',aHL_TRUTH)).
fof(f1248,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),X0))))) ) | ($spl8 | $spl10)),
  inference(subsumption_resolution,[],[f1247,f152])).
fof(f1247,plain,(
  ( ! [X0] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),X0))))) ) | $spl8),
  inference(forward_demodulation,[],[f1235,f222])).
fof(f222,plain,(
  ( ! [X4,X3] : (s(bool,'T_0') = s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X3,X4)),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X4),'const.bool.the_value_0')))))) )),
  inference(resolution,[],[f120,f95])).
fof(f95,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f64])).
fof(f64,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X12] : (s(bool,'T_0') = s(bool,X12) <=> p(s(bool,X12)))),
  file('thm.bvp_to_wordProps.FORALL_WORD','thm.bool.EQ_CLAUSES|split|0')).
fof(f120,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X1,X0)),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0'))))))) )),
  inference(cnf_transformation,[],[f80])).
fof(f80,plain,(
  ! [X0,X1] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',sK4(X1,X0)))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X1,X0)),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f40])).
fof(f40,plain,(
  ! [X0,X1] : ? [X2] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ! [X0] : ! [X1] : ? [X2] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',X2))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X2),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X0),'const.bool.the_value_0')))))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X6] : ! [X18] : ? [X9] : (s('type.fcp.cart'(bool,X6),X18) = s('type.fcp.cart'(bool,X6),'const.words.n2w_1'(s('type.num.num',X9))) & p(s(bool,'const.prim_rec.<_2'(s('type.num.num',X9),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(X6),'const.bool.the_value_0')))))))),
  file('thm.bvp_to_wordProps.FORALL_WORD','thm.words.ranged_word_nchotomy')).
fof(f1235,plain,(
  ( ! [X0] : (p(s(bool,happ(s(fun('type.fcp.cart'(bool,sK0),bool),sK1),s('type.fcp.cart'(bool,sK0),X0)))) | ~p(s(bool,'const.prim_rec.<_2'(s('type.num.num',sK4(X0,sK0)),s('type.num.num','const.words.dimword_1'(s('type.bool.itself'(sK0),'const.bool.the_value_0'))))))) ) | $spl8),
  inference(superposition,[],[f150,f119])).
fof(f119,plain,(
  ( ! [X0,X1] : (s('type.fcp.cart'(bool,X0),X1) = s('type.fcp.cart'(bool,X0),'const.words.n2w_1'(s('type.num.num',sK4(X1,X0))))) )),
  inference(cnf_transformation,[],[f80])).
% SZS output end Proof for thm.bvp_to_wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 37
% Passive clauses: 226
% Generated clauses: 1136
% Final active clauses: 26
% Final passive clauses: 137
% Input formulas: 21
% Initial clauses: 55
% 
% Duplicate literals: 106
% Trivial inequalities: 30
% Fw subsumption resolutions: 163
% Fw demodulations: 9
% Bw demodulations: 3
% 
% Simple tautologies: 85
% Equational tautologies: 28
% Forward subsumptions: 451
% 
% Binary resolution: 62
% Factoring: 1
% Forward superposition: 207
% Backward superposition: 376
% Self superposition: 44
% Equality factoring: 50
% Equality resolution: 8
% 
% Split clauses: 37
% Split components: 76
% SAT solver clauses: 63
% SAT solver unit clauses: 5
% SAT solver binary clauses: 34
% SAT solver learnt clauses: 2
% SAT solver learnt literals: 1
% 
% Sat splits: 37
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 60
% TWLsolver calls for satisfiability: 18
% 
% Memory used [KB]: 1023
% Time elapsed: 0.058 s
% ------------------------------
% ------------------------------
% Success in time 0.071 s
