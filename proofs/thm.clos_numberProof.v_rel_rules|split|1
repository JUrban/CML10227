Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_numberProof
% (39460)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 218
% Passive clauses: 5104
% Generated clauses: 30586
% Final active clauses: 175
% Final passive clauses: 4605
% Input formulas: 69
% Initial clauses: 206
% 
% Duplicate literals: 1011
% Trivial inequalities: 549
% Fw subsumption resolutions: 3928
% Fw demodulations: 5987
% Bw demodulations: 40
% 
% Simple tautologies: 567
% Equational tautologies: 56
% Forward subsumptions: 12734
% 
% Binary resolution: 846
% Factoring: 2
% Forward superposition: 8640
% Backward superposition: 9005
% Self superposition: 126
% Equality factoring: 110
% Equality resolution: 30
% 
% Split clauses: 359
% Split components: 720
% SAT solver clauses: 717
% SAT solver unit clauses: 6
% SAT solver binary clauses: 71
% 
% Sat splits: 359
% Sat splitting refutations: 7
% 
% TWLsolver clauses: 717
% TWLsolver calls for satisfiability: 119
% 
% Memory used [KB]: 14328
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_numberProof
% (39486)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 146
% Passive clauses: 2002
% Generated clauses: 10265
% Final active clauses: 137
% Final passive clauses: 1819
% Input formulas: 69
% Initial clauses: 206
% 
% Duplicate literals: 76
% Trivial inequalities: 25
% Fw subsumption resolutions: 529
% Fw demodulations: 1812
% Bw demodulations: 46
% Condensations: 55
% Global subsumptions: 17
% 
% Simple tautologies: 109
% Equational tautologies: 6
% Forward subsumptions: 3284
% 
% Binary resolution: 1312
% Factoring: 1
% Forward superposition: 2267
% Backward superposition: 1877
% Self superposition: 31
% Equality factoring: 2
% Equality resolution: 2
% 
% Split clauses: 30
% Split components: 60
% SAT solver clauses: 2519
% SAT solver unit clauses: 192
% SAT solver binary clauses: 69
% SAT solver learnt clauses: 34
% SAT solver learnt literals: 2
% 
% Sat splits: 29
% 
% TWLsolver clauses: 2451
% TWLsolver calls for satisfiability: 1740
% 
% Memory used [KB]: 15223
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_numberProof
% (39520)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 180
% Passive clauses: 1765
% Generated clauses: 753366
% Final active clauses: 128
% Final passive clauses: 389
% Input formulas: 69
% Initial clauses: 206
% Discarded non-redundant clauses: 188767
% 
% Duplicate literals: 186
% Trivial inequalities: 162
% Fw subsumption resolutions: 1029
% Fw demodulations: 445433
% Bw demodulations: 44
% Condensations: 117
% Global subsumptions: 1
% 
% Simple tautologies: 173
% Equational tautologies: 82
% Forward subsumptions: 67265
% Fw demodulations to eq. taut.: 48983
% 
% Unit resulting resolution: 306146
% Factoring: 1
% Forward superposition: 3941
% Backward superposition: 4621
% Self superposition: 54
% Equality factoring: 16
% Equality resolution: 11
% 
% Split clauses: 19
% Split components: 38
% SAT solver clauses: 2026
% SAT solver unit clauses: 272
% SAT solver binary clauses: 552
% 
% Sat splits: 19
% Sat splitting refutations: 220
% 
% Memory used [KB]: 249590
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_numberProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_numberProof
% SZS output start Proof for thm.clos_numberProof
fof(f8635,plain,(
  $false),
  inference(equality_resolution,[],[f3920])).
fof(f3920,plain,(
  ( ! [X1] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))) )),
  inference(duplicate_literal_removal,[],[f3914])).
fof(f3914,plain,(
  ( ! [X1] : (s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1))) | s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X1)))) )),
  inference(resolution,[],[f2705,f391])).
fof(f391,plain,(
  ( ! [X4,X2,X0,X1] : (sP3(X0,X1,X2) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4))) | s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4)))) )),
  inference(cnf_transformation,[],[f234])).
fof(f234,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK10(X2,X1,X0)))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',sK10(X2,X1,X0))))) | (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK11(X2,X1,X0)))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK11(X2,X1,X0))))) | sP2(X0,X1,X2) | (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK12(X2,X1,X0)))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',sK12(X2,X1,X0))))) | sP0(X0,X1,X2) | sP1(X0,X1,X2)) & ((! [X5] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5)))) & ! [X4] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4)))) & ~sP2(X0,X1,X2) & ! [X3] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X3))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X3)))) & ~sP0(X0,X1,X2) & ~sP1(X0,X1,X2)) | sP3(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK10,sK11,sK12])],[f233])).
fof(f233,plain,(
  ! [X0,X1,X2] : ((~sP3(X0,X1,X2) | ? [X8] : (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X8))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X8)))) | ? [X7] : (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X7)))) | sP2(X0,X1,X2) | ? [X6] : (s('type.closSem.v',X2) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X6))) & s('type.closSem.v',X1) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X6)))) | sP0(X0,X1,X2) | sP1(X0,X1,X2)) & ((! [X5] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X5)))) & ! [X4] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X4)))) & ~sP2(X0,X1,X2) & ! [X3] : (s('type.closSem.v',X2) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X3))) | s('type.closSem.v',X1) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X3)))) & ~sP0(X0,X1,X2) & ~sP1(X0,X1,X2)) | sP3(X0,X1,X2)))),
  inference(rectify,[],[f232])).
fof(f232,plain,(
  ! [X2,X4,X3] : ((~sP3(X2,X4,X3) | ? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | sP2(X2,X4,X3) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | sP0(X2,X4,X3) | sP1(X2,X4,X3)) & ((! [X30] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) & ! [X29] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) & ~sP2(X2,X4,X3) & ! [X25] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) & ~sP0(X2,X4,X3) & ~sP1(X2,X4,X3)) | sP3(X2,X4,X3)))),
  inference(flattening,[],[f231])).
fof(f231,plain,(
  ! [X2,X4,X3] : ((~sP3(X2,X4,X3) | (? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | sP2(X2,X4,X3) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | sP0(X2,X4,X3) | sP1(X2,X4,X3))) & ((! [X30] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) & ! [X29] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) & ~sP2(X2,X4,X3) & ! [X25] : (s('type.closSem.v',X3) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) | s('type.closSem.v',X4) != s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) & ~sP0(X2,X4,X3) & ~sP1(X2,X4,X3)) | sP3(X2,X4,X3)))),
  inference(nnf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X2,X4,X3] : (sP3(X2,X4,X3) <=> (? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | sP2(X2,X4,X3) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | sP0(X2,X4,X3) | sP1(X2,X4,X3)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f2705,plain,(
  ~sP3(sK38('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)))),
  inference(subsumption_resolution,[],[f2704,f373])).
fof(f373,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f121])).
fof(f121,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.clos_numberProof.v_rel_rules|split|1',aHL_FALSITY)).
fof(f2704,plain,(
  p(s(bool,'F_0')) | ~sP3(sK38('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)))),
  inference(forward_demodulation,[],[f2655,f441])).
fof(f441,plain,(
  s(bool,'F_0') = s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)))))),
  inference(resolution,[],[f248,f324])).
fof(f324,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f197])).
fof(f197,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0)) | p(s(bool,'F_0'))))),
  inference(flattening,[],[f196])).
fof(f196,plain,(
  ! [X0] : (((p(s(bool,X0)) & ~p(s(bool,'F_0'))) | s(bool,'F_0') = s(bool,X0)) & (s(bool,'F_0') != s(bool,X0) | (~p(s(bool,X0)) | p(s(bool,'F_0')))))),
  inference(nnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0] : ((~p(s(bool,X0)) | p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(ennf_transformation,[],[f99])).
fof(f99,plain,(
  ! [X0] : ((p(s(bool,X0)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X0))),
  inference(rectify,[],[f46])).
fof(f46,axiom,(
  ! [X16] : ((p(s(bool,X16)) => p(s(bool,'F_0'))) <=> s(bool,'F_0') = s(bool,X16))),
  file('thm.clos_numberProof.v_rel_rules|split|1','thm.bool.IMP_F_EQ_F')).
fof(f248,plain,(
  ~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))))))),
  inference(cnf_transformation,[],[f165])).
fof(f165,plain,(
  ~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4])],[f135])).
fof(f135,plain,(
  ? [X0] : ~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0] : p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X0))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))))))),
  file('thm.clos_numberProof.v_rel_rules|split|1','thm.clos_numberProof.v_rel_rules|split|1')).
fof(f2655,plain,(
  p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)))))) | ~sP3(sK38('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)))),
  inference(resolution,[],[f430,f416])).
fof(f416,plain,(
  ( ! [X4,X0,X3,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK38(X1,X0)),s('type.closSem.v',X3))),s('type.closSem.v',X4)))) | ~sP3(sK38(X1,X0),X4,X3)) )),
  inference(cnf_transformation,[],[f246])).
fof(f246,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X5] : ((sP3(X5,sK37(X5,X1,X0),sK36(X5,X1,X0)) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X5),s('type.closSem.v',sK36(X5,X1,X0)))),s('type.closSem.v',sK37(X5,X1,X0)))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X5),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & ((! [X3,X4] : (~sP3(sK38(X1,X0),X4,X3) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK38(X1,X0)),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK38(X1,X0)),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK36,sK37,sK38])],[f245])).
fof(f245,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X5] : (? [X6,X7] : (sP3(X5,X7,X6) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X5),s('type.closSem.v',X6))),s('type.closSem.v',X7))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X5),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & (? [X2] : (! [X3,X4] : (~sP3(X2,X4,X3) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(rectify,[],[f244])).
fof(f244,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ! [X2] : (? [X3,X4] : (sP3(X2,X4,X3) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1)))))) & (? [X2] : (! [X3,X4] : (~sP3(X2,X4,X3) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) | p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1))))))),
  inference(nnf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2] : (? [X3,X4] : (sP3(X2,X4,X3) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(definition_folding,[],[f159,f163,f162,f161,f160])).
fof(f160,plain,(
  ! [X2,X4,X3] : (sP0(X2,X4,X3) <=> ? [X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X22),s('type.closLang.exp',X17))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X22),s('type.closLang.exp',X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X17),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X18) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X21),s('type.closLang.exp',X17)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f161,plain,(
  ! [X2,X4,X3] : (sP1(X2,X4,X3) <=> ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.num.num',X11))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10),s('type.num.num',X11))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X12),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f162,plain,(
  ! [X2,X4,X3] : (sP2(X2,X4,X3) <=> ? [X26,X27,X28] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f159,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2] : (? [X3,X4] : ((? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | ? [X26,X27,X28] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | ? [X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X22),s('type.closLang.exp',X17))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X22),s('type.closLang.exp',X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X17),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X18) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X21),s('type.closLang.exp',X17)))))) | ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.num.num',X11))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10),s('type.num.num',X11))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X12),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))))))) & ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) | p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(ennf_transformation,[],[f126])).
fof(f126,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2] : (! [X3,X4] : ((? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | ? [X26,X27,X28] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | ? [X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X22),s('type.closLang.exp',X17))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X22),s('type.closLang.exp',X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X17),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X18) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X21),s('type.closLang.exp',X17)))))) | ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.num.num',X11))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10),s('type.num.num',X11))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X12),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(flattening,[],[f125])).
fof(f125,plain,(
  ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) <=> ! [X2] : (! [X3,X4] : ((? [X30] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X30)))) | ? [X29] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29)))) | ? [X26,X27,X28] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X27))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.closSem.v'),X28))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X27),s('type.list.list'('type.closSem.v'),X28))))) | ? [X25] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X25)))) | ? [X15,X16,X17,X18,X19,X20,X21,X22,X23,X24] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X23),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X19),s('type.num.num',X22),s('type.closLang.exp',X17))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X24),s('type.list.list'('type.closSem.v'),X16),s('type.list.list'('type.closSem.v'),X20),s('type.num.num',X22),s('type.closLang.exp',X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X19),s('type.list.list'('type.closSem.v'),X20)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X15),s('type.list.list'('type.closSem.v'),X16)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X17),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X18) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X21),s('type.closLang.exp',X17)))))) | ? [X5,X6,X7,X8,X9,X10,X11,X12,X13,X14] : (s('type.closSem.v',X3) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X13),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9),s('type.num.num',X11))) & s('type.closSem.v',X4) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X14),s('type.list.list'('type.closSem.v'),X6),s('type.list.list'('type.closSem.v'),X8),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10),s('type.num.num',X11))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X7),s('type.list.list'('type.closSem.v'),X8)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.list.list'('type.closSem.v'),X5),s('type.list.list'('type.closSem.v'),X6)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X10) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X12),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X9))))))))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X3))),s('type.closSem.v',X4))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X2),s('type.closSem.v',X0))),s('type.closSem.v',X1))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X5,X11] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X5),s('type.closSem.v',X11)))) <=> ! [X12] : (! [X13,X14] : ((? [X15] : (s('type.closSem.v',X13) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X15))) & s('type.closSem.v',X14) = s('type.closSem.v','const.closSem.Number_1'(s('type.integer.int',X15)))) | ? [X6] : (s('type.closSem.v',X13) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6))) & s('type.closSem.v',X14) = s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X6)))) | ? [X16,X17,X18] : (s('type.closSem.v',X13) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X16),s('type.list.list'('type.closSem.v'),X17))) & s('type.closSem.v',X14) = s('type.closSem.v','const.closSem.Block_2'(s('type.num.num',X16),s('type.list.list'('type.closSem.v'),X18))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X12),s('type.list.list'('type.closSem.v'),X17),s('type.list.list'('type.closSem.v'),X18))))) | ? [X19] : (s('type.closSem.v',X13) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X19))) & s('type.closSem.v',X14) = s('type.closSem.v','const.closSem.RefPtr_1'(s('type.num.num',X19)))) | ? [X20,X21,X22,X23,X24,X25,X26,X27,X28,X29] : (s('type.closSem.v',X13) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X24),s('type.num.num',X27),s('type.closLang.exp',X22))) & s('type.closSem.v',X14) = s('type.closSem.v','const.closSem.Closure_5'(s('type.option.option'('type.num.num'),X29),s('type.list.list'('type.closSem.v'),X21),s('type.list.list'('type.closSem.v'),X25),s('type.num.num',X27),s('type.closLang.exp',X23))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X12),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X12),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X21)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X22),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) & s('type.closLang.exp',X23) = s('type.closLang.exp',happ(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.closLang.exp'),'const.clos_number.renumber_code_locs_2'(s('type.num.num',X26),s('type.closLang.exp',X22)))))) | ? [X20,X21,X24,X25,X30,X31,X32,X26,X28,X29] : (s('type.closSem.v',X13) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X28),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X30),s('type.num.num',X32))) & s('type.closSem.v',X14) = s('type.closSem.v','const.closSem.Recclosure_5'(s('type.option.option'('type.num.num'),X29),s('type.list.list'('type.closSem.v'),X21),s('type.list.list'('type.closSem.v'),X25),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X31),s('type.num.num',X32))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X12),s('type.list.list'('type.closSem.v'),X24),s('type.list.list'('type.closSem.v'),X25)))) & p(s(bool,'const.list.LIST_REL_3'(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X12),s('type.list.list'('type.closSem.v'),X20),s('type.list.list'('type.closSem.v'),X21)))) & ~p(s(bool,'const.closProps.contains_App_SOME_1'(s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X30)))))) & s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X31) = s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),'const.list.ZIP_1'(s('type.pair.prod'('type.list.list'('type.num.num'),'type.list.list'('type.closLang.exp')),'const.pair.,_2'(s('type.list.list'('type.num.num'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.num.num'),'const.pair.FST_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X30))),s('type.list.list'('type.closLang.exp'),happ(s(fun('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'type.list.list'('type.closLang.exp')),'const.pair.SND_0'),s('type.pair.prod'('type.num.num','type.list.list'('type.closLang.exp')),'const.clos_number.renumber_code_locs_list_2'(s('type.num.num',X26),s('type.list.list'('type.closLang.exp'),'const.list.MAP_2'(s(fun('type.pair.prod'('type.num.num','type.closLang.exp'),'type.closLang.exp'),'const.pair.SND_0'),s('type.list.list'('type.pair.prod'('type.num.num','type.closLang.exp')),X30))))))))))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X12),s('type.closSem.v',X13))),s('type.closSem.v',X14))))) => p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),X12),s('type.closSem.v',X5))),s('type.closSem.v',X11))))))),
  file('thm.clos_numberProof.v_rel_rules|split|1','thm.clos_numberProof.v_rel_def')).
fof(f430,plain,(
  ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK38('const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)),'const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4)))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))))),s('type.closSem.v','const.closSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK4))))))),
  inference(resolution,[],[f248,f417])).
fof(f417,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.clos_numberProof.v_rel_2'(s('type.closSem.v',X0),s('type.closSem.v',X1)))) | ~p(s(bool,happ(s(fun('type.closSem.v',bool),happ(s(fun('type.closSem.v',fun('type.closSem.v',bool)),sK38(X1,X0)),s('type.closSem.v',X0))),s('type.closSem.v',X1))))) )),
  inference(cnf_transformation,[],[f246])).
% SZS output end Proof for thm.clos_numberProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 215
% Passive clauses: 1815
% Generated clauses: 8160
% Final active clauses: 200
% Final passive clauses: 1505
% Input formulas: 69
% Initial clauses: 177
% 
% Selected by SInE selection: 51
% SInE iterations: 1
% 
% Duplicate literals: 298
% Trivial inequalities: 144
% Fw subsumption resolutions: 1294
% Fw demodulations: 242
% Bw demodulations: 4
% 
% Simple tautologies: 476
% Equational tautologies: 8
% Forward subsumptions: 3474
% 
% Binary resolution: 2524
% Forward superposition: 2596
% Backward superposition: 946
% Equality resolution: 20
% 
% Split clauses: 530
% Split components: 1156
% SAT solver clauses: 566
% SAT solver unit clauses: 32
% SAT solver binary clauses: 102
% 
% Sat splits: 530
% Sat splitting refutations: 35
% 
% Memory used [KB]: 4861
% Time elapsed: 0.247 s
% ------------------------------
% ------------------------------
% Success in time 12 s
