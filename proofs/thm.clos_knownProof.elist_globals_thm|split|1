Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (6295)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 58
% Passive clauses: 1438
% Generated clauses: 10990
% Final active clauses: 56
% Final passive clauses: 1334
% Input formulas: 20
% Initial clauses: 32
% 
% Duplicate literals: 941
% Trivial inequalities: 135
% Fw subsumption resolutions: 1178
% Fw demodulations: 271
% Bw demodulations: 1
% 
% Simple tautologies: 248
% Equational tautologies: 103
% Forward subsumptions: 4855
% 
% Binary resolution: 24
% Forward superposition: 4301
% Backward superposition: 3343
% Self superposition: 361
% Equality factoring: 288
% Equality resolution: 11
% 
% Split clauses: 573
% Split components: 1158
% SAT solver clauses: 1687
% SAT solver unit clauses: 387
% SAT solver binary clauses: 566
% 
% Sat splits: 573
% 
% TWLsolver clauses: 1679
% TWLsolver calls for satisfiability: 56
% 
% Memory used [KB]: 7419
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% (6327)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 41
% Passive clauses: 238
% Generated clauses: 6480
% Final active clauses: 38
% Final passive clauses: 195
% Input formulas: 20
% Initial clauses: 32
% 
% Duplicate literals: 1009
% Trivial inequalities: 51
% Fw subsumption resolutions: 285
% Fw demodulations: 59
% Bw demodulations: 1
% Condensations: 1776
% Global subsumptions: 4
% 
% Simple tautologies: 114
% Equational tautologies: 62
% Forward subsumptions: 2249
% 
% Binary resolution: 12
% Forward superposition: 1404
% Backward superposition: 1269
% Self superposition: 223
% Equality factoring: 188
% Equality resolution: 5
% 
% Split clauses: 76
% Split components: 153
% SAT solver clauses: 646
% SAT solver unit clauses: 44
% SAT solver binary clauses: 83
% SAT solver learnt clauses: 8
% 
% Sat splits: 76
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 630
% TWLsolver calls for satisfiability: 86
% 
% Memory used [KB]: 6396
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f16793,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f16792])).
fof(f16792,plain,(
  ( ! [X0] : (s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),X0),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))))) != s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),X0),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0)))))))) )),
  inference(backward_demodulation,[],[f16788,f368])).
fof(f368,plain,(
  ( ! [X0] : (s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),X0),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))))) != s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),X0),s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK1))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK0)))))))) )),
  inference(unit_resulting_resolution,[],[f63,f88])).
fof(f88,plain,(
  ( ! [X2,X0,X3,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X2))) != s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X3))) | s(fun(X0,'type.num.num'),X2) = s(fun(X0,'type.num.num'),X3)) )),
  inference(cnf_transformation,[],[f61])).
fof(f61,plain,(
  ! [X0,X1,X2,X3] : ((s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X2))) != s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X3))) | s(fun(X0,'type.num.num'),X2) = s(fun(X0,'type.num.num'),X3)) & (s(fun(X0,'type.num.num'),X2) != s(fun(X0,'type.num.num'),X3) | s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X2))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X3)))))),
  inference(nnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1,X2,X3] : (s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X2))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X3))) <=> s(fun(X0,'type.num.num'),X2) = s(fun(X0,'type.num.num'),X3))),
  inference(flattening,[],[f35])).
fof(f35,plain,(
  ! [X0] : ! [X1,X2,X3] : (s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X2))) = s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X3))) <=> s(fun(X0,'type.num.num'),X2) = s(fun(X0,'type.num.num'),X3))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8] : ! [X9,X10,X11] : (s(fun(X8,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X8,'type.num.num'),X9),s(fun(X8,'type.num.num'),X10))) = s(fun(X8,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X8,'type.num.num'),X9),s(fun(X8,'type.num.num'),X11))) <=> s(fun(X8,'type.num.num'),X10) = s(fun(X8,'type.num.num'),X11))),
  file('thm.clos_knownProof.elist_globals_thm|split|1','thm.bag.BAG_UNION_LEFT_CANCEL')).
fof(f63,plain,(
  s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK1))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK0)))))),
  inference(cnf_transformation,[],[f49])).
fof(f49,plain,(
  s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK1),s('type.list.list'('type.closLang.exp'),sK0))))) != s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',sK1))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),sK0)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f47])).
fof(f47,plain,(
  ? [X0,X1] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))))) != s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X1))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X0)))))),
  inference(ennf_transformation,[],[f22])).
fof(f22,plain,(
  ~! [X0,X1] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),X0))))) = s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X1))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X0)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),X6))))) = s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X6)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),X6))))) = s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X7))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X6)))))),
  file('thm.clos_knownProof.elist_globals_thm|split|1','thm.clos_knownProof.elist_globals_thm|split|1')).
fof(f16788,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X0))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1)))))) )),
  inference(forward_demodulation,[],[f16760,f68])).
fof(f68,plain,(
  ( ! [X0] : (s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X0))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X0)))))) )),
  inference(cnf_transformation,[],[f25])).
fof(f25,plain,(
  ! [X0] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X0))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X0)))))),
  inference(rectify,[],[f15])).
fof(f15,axiom,(
  ! [X14] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X14))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X14)))))),
  file('thm.clos_knownProof.elist_globals_thm|split|1','thm.clos_knownProof.elist_globals_def')).
fof(f16760,plain,(
  ( ! [X0,X1] : (s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X0))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X1))))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1)))))))) )),
  inference(superposition,[],[f4459,f808])).
fof(f808,plain,(
  ( ! [X45,X46] : (s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X45),s('type.list.list'('type.closLang.exp'),X46))))) = s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.CONS_2'(s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X45))),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X46)))))) )),
  inference(superposition,[],[f93,f67])).
fof(f67,plain,(
  ( ! [X0] : (s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X0))) = s(fun('type.num.num','type.num.num'),happ(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.closLang.exp',X0)))) )),
  inference(cnf_transformation,[],[f24])).
fof(f24,plain,(
  ! [X0] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X0))) = s(fun('type.num.num','type.num.num'),happ(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.closLang.exp',X0)))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X20] : s(fun('type.num.num','type.num.num'),'const.clos_knownProof.set_globals_1'(s('type.closLang.exp',X20))) = s(fun('type.num.num','type.num.num'),happ(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.closLang.exp',X20)))),
  file('thm.clos_knownProof.elist_globals_thm|split|1','ARITY_0_1_const.clos_knownProof.set_globals')).
fof(f93,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))) )),
  inference(cnf_transformation,[],[f44])).
fof(f44,plain,(
  ! [X0,X1,X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(flattening,[],[f43])).
fof(f43,plain,(
  ! [X0,X1] : ! [X2,X3,X4] : s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X3),s('type.list.list'(X1),X4))))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,happ(s(fun(X1,X0),X2),s(X1,X3))),s('type.list.list'(X0),'const.list.MAP_2'(s(fun(X1,X0),X2),s('type.list.list'(X1),X4)))))),
  inference(rectify,[],[f17])).
fof(f17,axiom,(
  ! [X15,X8] : ! [X16,X17,X12] : s('type.list.list'(X15),'const.list.MAP_2'(s(fun(X8,X15),X16),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X17),s('type.list.list'(X8),X12))))) = s('type.list.list'(X15),'const.list.CONS_2'(s(X15,happ(s(fun(X8,X15),X16),s(X8,X17))),s('type.list.list'(X15),'const.list.MAP_2'(s(fun(X8,X15),X16),s('type.list.list'(X8),X12)))))),
  file('thm.clos_knownProof.elist_globals_thm|split|1','thm.list.MAP|split|1')).
fof(f4459,plain,(
  ( ! [X169,X170] : (s(fun('type.num.num','type.num.num'),'const.bag.BAG_UNION_2'(s(fun('type.num.num','type.num.num'),X170),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X169))))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.CONS_2'(s(fun('type.num.num','type.num.num'),X170),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X169)))))))) )),
  inference(forward_demodulation,[],[f4328,f87])).
fof(f87,plain,(
  ( ! [X2,X0,X1] : (s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X2))) = s(fun(X0,'type.num.num'),happ(s(fun(fun(X0,'type.num.num'),fun(X0,'type.num.num')),happ(s(fun(fun(X0,'type.num.num'),fun(fun(X0,'type.num.num'),fun(X0,'type.num.num'))),'const.bag.BAG_UNION_0'),s(fun(X0,'type.num.num'),X1))),s(fun(X0,'type.num.num'),X2)))) )),
  inference(cnf_transformation,[],[f34])).
fof(f34,plain,(
  ! [X0,X1,X2] : s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X2))) = s(fun(X0,'type.num.num'),happ(s(fun(fun(X0,'type.num.num'),fun(X0,'type.num.num')),happ(s(fun(fun(X0,'type.num.num'),fun(fun(X0,'type.num.num'),fun(X0,'type.num.num'))),'const.bag.BAG_UNION_0'),s(fun(X0,'type.num.num'),X1))),s(fun(X0,'type.num.num'),X2)))),
  inference(flattening,[],[f33])).
fof(f33,plain,(
  ! [X0] : ! [X1,X2] : s(fun(X0,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X0,'type.num.num'),X1),s(fun(X0,'type.num.num'),X2))) = s(fun(X0,'type.num.num'),happ(s(fun(fun(X0,'type.num.num'),fun(X0,'type.num.num')),happ(s(fun(fun(X0,'type.num.num'),fun(fun(X0,'type.num.num'),fun(X0,'type.num.num'))),'const.bag.BAG_UNION_0'),s(fun(X0,'type.num.num'),X1))),s(fun(X0,'type.num.num'),X2)))),
  inference(rectify,[],[f21])).
fof(f21,axiom,(
  ! [X8] : ! [X20,X21] : s(fun(X8,'type.num.num'),'const.bag.BAG_UNION_2'(s(fun(X8,'type.num.num'),X20),s(fun(X8,'type.num.num'),X21))) = s(fun(X8,'type.num.num'),happ(s(fun(fun(X8,'type.num.num'),fun(X8,'type.num.num')),happ(s(fun(fun(X8,'type.num.num'),fun(fun(X8,'type.num.num'),fun(X8,'type.num.num'))),'const.bag.BAG_UNION_0'),s(fun(X8,'type.num.num'),X20))),s(fun(X8,'type.num.num'),X21)))),
  file('thm.clos_knownProof.elist_globals_thm|split|1','ARITY_0_2_const.bag.BAG_UNION')).
fof(f4328,plain,(
  ( ! [X169,X170] : (s(fun('type.num.num','type.num.num'),happ(s(fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num')),happ(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),X170))),s(fun('type.num.num','type.num.num'),'const.clos_knownProof.elist_globals_1'(s('type.list.list'('type.closLang.exp'),X169))))) = s(fun('type.num.num','type.num.num'),'const.list.FOLDR_3'(s(fun(fun('type.num.num','type.num.num'),fun(fun('type.num.num','type.num.num'),fun('type.num.num','type.num.num'))),'const.bag.BAG_UNION_0'),s(fun('type.num.num','type.num.num'),'const.bag.EMPTY_BAG_0'),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.CONS_2'(s(fun('type.num.num','type.num.num'),X170),s('type.list.list'(fun('type.num.num','type.num.num')),'const.list.MAP_2'(s(fun('type.closLang.exp',fun('type.num.num','type.num.num')),'const.clos_knownProof.set_globals_0'),s('type.list.list'('type.closLang.exp'),X169)))))))) )),
  inference(superposition,[],[f94,f68])).
fof(f94,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X1,fun(X0,X0)),X2),s(X1,X4))),s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),X5)))))) )),
  inference(cnf_transformation,[],[f46])).
fof(f46,plain,(
  ! [X0,X1,X2,X3,X4,X5] : s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X1,fun(X0,X0)),X2),s(X1,X4))),s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),X5)))))),
  inference(flattening,[],[f45])).
fof(f45,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5))))) = s(X0,happ(s(fun(X0,X0),happ(s(fun(X1,fun(X0,X0)),X2),s(X1,X4))),s(X0,'const.list.FOLDR_3'(s(fun(X1,fun(X0,X0)),X2),s(X0,X3),s('type.list.list'(X1),X5)))))),
  inference(rectify,[],[f19])).
fof(f19,axiom,(
  ! [X15,X8] : ! [X16,X18,X13,X19] : s(X15,'const.list.FOLDR_3'(s(fun(X8,fun(X15,X15)),X16),s(X15,X18),s('type.list.list'(X8),'const.list.CONS_2'(s(X8,X13),s('type.list.list'(X8),X19))))) = s(X15,happ(s(fun(X15,X15),happ(s(fun(X8,fun(X15,X15)),X16),s(X8,X13))),s(X15,'const.list.FOLDR_3'(s(fun(X8,fun(X15,X15)),X16),s(X15,X18),s('type.list.list'(X8),X19)))))),
  file('thm.clos_knownProof.elist_globals_thm|split|1','thm.list.FOLDR|split|1')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 83
% Passive clauses: 991
% Generated clauses: 16787
% Final active clauses: 56
% Final passive clauses: 563
% Input formulas: 20
% Initial clauses: 32
% 
% Duplicate literals: 2393
% Trivial inequalities: 186
% Fw subsumption resolutions: 647
% Fw demodulations: 449
% Bw demodulations: 256
% Condensations: 3530
% Global subsumptions: 1
% 
% Simple tautologies: 270
% Equational tautologies: 582
% Forward subsumptions: 7798
% Fw demodulations to eq. taut.: 14
% Bw demodulations to eq. taut.: 15
% 
% Unit resulting resolution: 977
% Forward superposition: 4410
% Backward superposition: 3090
% Self superposition: 301
% Equality factoring: 244
% Equality resolution: 9
% 
% Split clauses: 82
% Split components: 165
% SAT solver clauses: 1164
% SAT solver unit clauses: 46
% SAT solver binary clauses: 170
% 
% Sat splits: 82
% Sat splitting refutations: 6
% 
% Memory used [KB]: 9722
% Time elapsed: 1.314 s
% ------------------------------
% ------------------------------
% Success in time 2.65 s
