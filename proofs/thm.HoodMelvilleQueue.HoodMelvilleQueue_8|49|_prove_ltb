Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.HoodMelvilleQueue
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.HoodMelvilleQueue
% SZS output start Proof for thm.HoodMelvilleQueue
fof(f4551,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4550,f224,f401,f399,f4549])).
fof(f4549,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f401,f225])).
fof(f225,plain,(
  ( ! [X6,X10,X8,X7,X11,X9] : (s('type.HoodMelvilleQueue.queue'(sK12),sK13) != s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X6),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X7),s('type.list.list'(sK12),X8))),s('type.HoodMelvilleQueue.status'(sK12),X9),s('type.num.num',X10),s('type.list.list'(sK12),X11)))) )),
  inference(cnf_transformation,[],[f139])).
fof(f139,plain,(
  (s('type.HoodMelvilleQueue.queue'(sK12),sK13) = s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK14),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(sK12),sK15),s('type.num.num',sK16),s('type.list.list'(sK12),sK17))) | s('type.HoodMelvilleQueue.queue'(sK12),sK13) = s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK18),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK19),s('type.list.list'(sK12),sK20))),s('type.HoodMelvilleQueue.status'(sK12),sK21),s('type.num.num',sK22),s('type.list.list'(sK12),sK23)))) & ! [X6,X7,X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(sK12),sK13) != s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X6),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,X7),s('type.list.list'(sK12),X8))),s('type.HoodMelvilleQueue.status'(sK12),X9),s('type.num.num',X10),s('type.list.list'(sK12),X11))) & ! [X2,X3,X4,X5] : s('type.HoodMelvilleQueue.queue'(sK12),sK13) != s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(sK12),X3),s('type.num.num',X4),s('type.list.list'(sK12),X5)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23])],[f138])).
fof(f138,plain,(
  ? [X0,X1] : ((? [X18,X19,X20,X21] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X18),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X19),s('type.num.num',X20),s('type.list.list'(X0),X21))) | ? [X12,X13,X14,X15,X16,X17] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X13),s('type.list.list'(X0),X14))),s('type.HoodMelvilleQueue.status'(X0),X15),s('type.num.num',X16),s('type.list.list'(X0),X17)))) & ! [X6,X7,X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X0),X1) != s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X6),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X7),s('type.list.list'(X0),X8))),s('type.HoodMelvilleQueue.status'(X0),X9),s('type.num.num',X10),s('type.list.list'(X0),X11))) & ! [X2,X3,X4,X5] : s('type.HoodMelvilleQueue.queue'(X0),X1) != s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X3),s('type.num.num',X4),s('type.list.list'(X0),X5))))),
  inference(rectify,[],[f98])).
fof(f98,plain,(
  ? [X0,X1] : ((? [X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X9),s('type.num.num',X10),s('type.list.list'(X0),X11))) | ? [X2,X3,X4,X5,X6,X7] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.HoodMelvilleQueue.status'(X0),X5),s('type.num.num',X6),s('type.list.list'(X0),X7)))) & ! [X16,X17,X18,X19,X20,X21] : s('type.HoodMelvilleQueue.queue'(X0),X1) != s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),X18))),s('type.HoodMelvilleQueue.status'(X0),X19),s('type.num.num',X20),s('type.list.list'(X0),X21))) & ! [X12,X13,X14,X15] : s('type.HoodMelvilleQueue.queue'(X0),X1) != s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X13),s('type.num.num',X14),s('type.list.list'(X0),X15))))),
  inference(flattening,[],[f97])).
fof(f97,plain,(
  ? [X0,X1] : ((? [X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X9),s('type.num.num',X10),s('type.list.list'(X0),X11))) | ? [X2,X3,X4,X5,X6,X7] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.HoodMelvilleQueue.status'(X0),X5),s('type.num.num',X6),s('type.list.list'(X0),X7)))) & (! [X16,X17,X18,X19,X20,X21] : s('type.HoodMelvilleQueue.queue'(X0),X1) != s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),X18))),s('type.HoodMelvilleQueue.status'(X0),X19),s('type.num.num',X20),s('type.list.list'(X0),X21))) & ! [X12,X13,X14,X15] : s('type.HoodMelvilleQueue.queue'(X0),X1) != s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X13),s('type.num.num',X14),s('type.list.list'(X0),X15)))))),
  inference(ennf_transformation,[],[f40])).
fof(f40,plain,(
  ~! [X0,X1] : ((? [X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X9),s('type.num.num',X10),s('type.list.list'(X0),X11))) | ? [X2,X3,X4,X5,X6,X7] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.HoodMelvilleQueue.status'(X0),X5),s('type.num.num',X6),s('type.list.list'(X0),X7)))) => (? [X16,X17,X18,X19,X20,X21] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),X18))),s('type.HoodMelvilleQueue.status'(X0),X19),s('type.num.num',X20),s('type.list.list'(X0),X21))) | ? [X12,X13,X14,X15] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X13),s('type.num.num',X14),s('type.list.list'(X0),X15)))))),
  inference(flattening,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ! [X1] : ((? [X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X9),s('type.num.num',X10),s('type.list.list'(X0),X11))) | ? [X2,X3,X4,X5,X6,X7] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s('type.HoodMelvilleQueue.status'(X0),X5),s('type.num.num',X6),s('type.list.list'(X0),X7)))) => (? [X16,X17,X18,X19,X20,X21] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X16),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X17),s('type.list.list'(X0),X18))),s('type.HoodMelvilleQueue.status'(X0),X19),s('type.num.num',X20),s('type.list.list'(X0),X21))) | ? [X12,X13,X14,X15] : s('type.HoodMelvilleQueue.queue'(X0),X1) = s('type.HoodMelvilleQueue.queue'(X0),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X0),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X0),X13),s('type.num.num',X14),s('type.list.list'(X0),X15)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7] : ((? [X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X6),X7) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X6),X9),s('type.num.num',X10),s('type.list.list'(X6),X11))) | ? [X12,X13,X14,X15,X16,X17] : s('type.HoodMelvilleQueue.queue'(X6),X7) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),X14))),s('type.HoodMelvilleQueue.status'(X6),X15),s('type.num.num',X16),s('type.list.list'(X6),X17)))) => (? [X12,X13,X14,X15,X16,X17] : s('type.HoodMelvilleQueue.queue'(X6),X7) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),X14))),s('type.HoodMelvilleQueue.status'(X6),X15),s('type.num.num',X16),s('type.list.list'(X6),X17))) | ? [X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X6),X7) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X6),X9),s('type.num.num',X10),s('type.list.list'(X6),X11)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7] : ((? [X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X6),X7) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X6),X9),s('type.num.num',X10),s('type.list.list'(X6),X11))) | ? [X12,X13,X14,X15,X16,X17] : s('type.HoodMelvilleQueue.queue'(X6),X7) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),X14))),s('type.HoodMelvilleQueue.status'(X6),X15),s('type.num.num',X16),s('type.list.list'(X6),X17)))) => (? [X12,X13,X14,X15,X16,X17] : s('type.HoodMelvilleQueue.queue'(X6),X7) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X12),s('type.list.list'(X6),'const.list.CONS_2'(s(X6,X13),s('type.list.list'(X6),X14))),s('type.HoodMelvilleQueue.status'(X6),X15),s('type.num.num',X16),s('type.list.list'(X6),X17))) | ? [X8,X9,X10,X11] : s('type.HoodMelvilleQueue.queue'(X6),X7) = s('type.HoodMelvilleQueue.queue'(X6),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X8),s('type.list.list'(X6),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(X6),X9),s('type.num.num',X10),s('type.list.list'(X6),X11)))))),
  file('thm.HoodMelvilleQueue.HoodMelvilleQueue_8|49|_prove_ltb','thm.HoodMelvilleQueue.HoodMelvilleQueue_8|49|_prove_ltb')).
fof(f399,plain,(
  s('type.HoodMelvilleQueue.queue'(sK12),sK13) = s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK14),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(sK12),sK15),s('type.num.num',sK16),s('type.list.list'(sK12),sK17))) | $spl0),
  inference(cnf_transformation,[],[f399_D])).
fof(f399_D,plain,(
  s('type.HoodMelvilleQueue.queue'(sK12),sK13) = s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK14),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(sK12),sK15),s('type.num.num',sK16),s('type.list.list'(sK12),sK17))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f401,plain,(
  s('type.HoodMelvilleQueue.queue'(sK12),sK13) = s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK18),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK19),s('type.list.list'(sK12),sK20))),s('type.HoodMelvilleQueue.status'(sK12),sK21),s('type.num.num',sK22),s('type.list.list'(sK12),sK23))) | $spl2),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.HoodMelvilleQueue.queue'(sK12),sK13) = s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK18),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK19),s('type.list.list'(sK12),sK20))),s('type.HoodMelvilleQueue.status'(sK12),sK21),s('type.num.num',sK22),s('type.list.list'(sK12),sK23))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f224,plain,(
  s('type.HoodMelvilleQueue.queue'(sK12),sK13) = s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK18),s('type.list.list'(sK12),'const.list.CONS_2'(s(sK12,sK19),s('type.list.list'(sK12),sK20))),s('type.HoodMelvilleQueue.status'(sK12),sK21),s('type.num.num',sK22),s('type.list.list'(sK12),sK23))) | s('type.HoodMelvilleQueue.queue'(sK12),sK13) = s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',sK14),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(sK12),sK15),s('type.num.num',sK16),s('type.list.list'(sK12),sK17)))),
  inference(cnf_transformation,[],[f139])).
fof(f4550,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f399,f226])).
fof(f226,plain,(
  ( ! [X4,X2,X5,X3] : (s('type.HoodMelvilleQueue.queue'(sK12),sK13) != s('type.HoodMelvilleQueue.queue'(sK12),'const.HoodMelvilleQueue.QUEUE_5'(s('type.num.num',X2),s('type.list.list'(sK12),'const.list.NIL_0'),s('type.HoodMelvilleQueue.status'(sK12),X3),s('type.num.num',X4),s('type.list.list'(sK12),X5)))) )),
  inference(cnf_transformation,[],[f139])).
% SZS output end Proof for thm.HoodMelvilleQueue
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 355
% Passive clauses: 1444
% Generated clauses: 4320
% Final active clauses: 355
% Final passive clauses: 938
% Input formulas: 37
% Initial clauses: 170
% 
% Duplicate literals: 153
% Trivial inequalities: 13
% Fw subsumption resolutions: 292
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2233
% 
% Binary resolution: 2688
% Factoring: 766
% Forward superposition: 130
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 95
% Split components: 191
% SAT solver clauses: 171
% SAT solver unit clauses: 8
% SAT solver binary clauses: 30
% SAT solver learnt clauses: 1
% 
% Sat splits: 95
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 170
% TWLsolver calls for satisfiability: 142
% 
% Memory used [KB]: 2302
% Time elapsed: 0.101 s
% ------------------------------
% ------------------------------
% Success in time 0.11 s
