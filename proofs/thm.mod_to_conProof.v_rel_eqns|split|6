Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (31691)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 902
% Passive clauses: 9524
% Generated clauses: 21623
% Final active clauses: 900
% Final passive clauses: 8213
% Input formulas: 69
% Initial clauses: 705
% 
% Duplicate literals: 492
% Trivial inequalities: 40
% Fw subsumption resolutions: 1387
% Fw demodulations: 384
% 
% Simple tautologies: 242
% Equational tautologies: 56
% Forward subsumptions: 9291
% 
% Binary resolution: 13297
% Factoring: 3210
% Forward superposition: 1247
% Backward superposition: 696
% Self superposition: 9
% Equality factoring: 4
% Equality resolution: 38
% 
% Split clauses: 249
% Split components: 499
% SAT solver clauses: 582
% SAT solver unit clauses: 17
% SAT solver binary clauses: 69
% SAT solver learnt clauses: 1
% SAT solver learnt literals: 1
% 
% Sat splits: 249
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 581
% TWLsolver calls for satisfiability: 533
% 
% Memory used [KB]: 10490
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (31721)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 600
% Passive clauses: 3262
% Generated clauses: 13688
% Final active clauses: 555
% Final passive clauses: 2164
% Input formulas: 69
% Initial clauses: 705
% 
% Duplicate literals: 364
% Trivial inequalities: 4
% Fw subsumption resolutions: 1051
% Fw demodulations: 200
% Bw demodulations: 517
% Condensations: 668
% Global subsumptions: 11
% 
% Simple tautologies: 206
% Equational tautologies: 18
% Forward subsumptions: 4780
% Bw demodulations to eq. taut.: 20
% 
% Binary resolution: 5092
% Factoring: 1033
% Forward superposition: 693
% Backward superposition: 56
% Self superposition: 3
% Equality factoring: 2
% Equality resolution: 18
% 
% Split clauses: 19
% Split components: 38
% SAT solver clauses: 3613
% SAT solver unit clauses: 683
% SAT solver binary clauses: 280
% SAT solver learnt clauses: 23
% SAT solver learnt literals: 11
% 
% Sat splits: 19
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 3568
% TWLsolver calls for satisfiability: 13102
% 
% Memory used [KB]: 16119
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f74734,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f659,f1374,f1372,f658,f1373,f1371,f1377,f4362,f4366,f4369,f4372,f4375,f4378,f4379,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f4414,f4417,f4420,f4423,f4426,f4429,f4470,f4363,f4472,f4367,f4474,f4370,f4476,f4373,f4478,f4376,f4481,f4483,f4382,f4485,f4385,f4487,f4388,f4489,f4391,f4491,f4394,f4493,f4397,f4495,f4400,f4497,f4403,f4499,f4406,f4501,f4409,f4503,f4412,f4505,f4415,f4507,f4418,f4509,f4421,f4511,f4424,f4513,f4427,f4515,f4430,f4871,f4873,f4881,f4885,f4889,f4891,f4911,f4921,f4925,f4929,f4933,f4937,f4941,f4945,f4949,f4953,f4957,f4959,f4961,f4963,f4967,f4969,f4971,f4973,f4977,f4979,f4981,f4983,f5011,f5015,f5017,f5019,f5021,f5031,f5035,f5039,f5043,f5047,f5051,f5055,f5059,f5063,f5067,f5069,f5071,f5075,f5077,f5079,f5083,f5085,f5087,f5101,f5103,f5105,f5107,f5109,f5111,f5113,f5115,f5117,f5119,f5121,f5125,f5127,f5129,f5133,f5137,f5139,f5141,f5143,f5145,f5147,f5151,f5153,f6259,f6262,f6260,f6264,f6265,f6266,f6268,f6273,f6275,f6279,f6281,f6283,f6285,f6293,f6295,f6303,f6305,f6311,f6317,f6328,f6342,f6366,f6368,f6393,f6402,f6421,f6427,f6451,f6458,f6466,f6473,f6475,f6482,f6488,f6495,f6501,f6503,f6505,f6507,f6509,f7348,f7349,f6525,f6527,f6529,f6531,f6545,f6547,f6553,f6559,f6572,f6575,f6581,f6583,f6590,f6592,f6605,f6610,f6616,f6618,f6625,f6627,f6634,f6640,f6651,f6653,f6655,f6671,f6673,f6684,f6686,f6704,f6706,f6717,f6719,f6738,f6740,f6751,f6753,f6760,f6766,f6773,f6779,f6794,f6809,f6826,f6828,f6849,f6851,f6853,f6864,f6866,f6868,f6877,f6879,f6888,f6890,f6899,f6901,f6910,f6912,f6928,f6942,f6956,f6958,f6970,f6972,f6974,f7006,f7008,f7010,f7012,f7032,f7034,f7053,f7055,f7068,f7070,f7082,f7084,f7086,f7100,f7113,f7126,f7128,f7141,f7143,f7154,f7168,f7183,f7197,f7210,f7212,f7214,f7216,f7226,f7228,f7230,f7232,f7234,f7238,f7240,f7242,f7247,f7252,f7255,f7260,f7264,f7272,f7277,f7280,f7282,f7284,f7289,f7292,f7295,f7302,f7307,f7312,f7314,f7316,f7322,f7324,f7329,f7361,f7362,f7363,f7364,f7365,f7366,f7367,f7368,f7369,f7370,f7371,f7372,f7373,f7374,f7375,f7376,f7377,f7378,f7379,f7380,f7381,f7382,f7383,f7384,f7385,f7386,f7387,f7388,f7389,f7390,f7391,f7392,f7393,f7394,f7395,f7396,f7397,f7398,f7399,f7400,f7401,f7402,f7403,f7404,f7405,f7406,f7407,f7408,f7409,f7410,f7411,f7412,f7413,f7414,f7415,f7416,f7417,f7418,f7419,f7420,f7421,f7422,f7423,f7424,f7425,f7426,f7427,f7428,f7429,f7430,f7431,f7432,f7433,f7434,f7435,f7436,f7437,f7438,f7439,f7440,f7441,f7442,f7443,f7444,f7445,f7446,f7447,f7448,f7449,f7450,f7451,f7452,f7453,f7454,f7455,f7456,f7457,f7458,f7459,f7460,f7461,f7462,f7463,f7464,f7465,f7466,f7467,f7468,f7469,f7470,f7471,f7472,f7473,f7474,f7475,f7476,f7477,f7478,f7479,f7480,f7481,f7482,f7483,f7484,f7485,f7486,f7487,f7488,f7489,f7490,f7491,f7492,f7493,f7494,f7495,f7496,f7497,f7498,f7499,f7500,f7501,f7503,f7504,f7506,f7507,f7511,f7512,f7514,f7515,f7516,f7517,f7520,f7521,f7522,f7523,f7524,f7525,f7526,f7527,f7528,f7529,f7530,f7531,f7532,f7533,f7534,f7535,f7536,f7537,f7538,f7539,f7540,f7541,f7542,f7543,f7544,f7545,f7546,f7547,f7548,f7549,f7550,f7551,f7552,f7553,f7554,f7593,f7595,f7594,f7597,f7598,f9434,f9419,f9407,f9402,f9393,f9442,f9392,f9372,f9450,f9696,f9699,f9701,f9697,f9747,f9755,f9834,f9837,f9839,f9835,f10515,f10516,f10591,f10593,f10592,f10644,f10650,f13744,f13720,f13719,f13708,f13703,f13701,f13692,f13691,f13752,f13690,f13794,f13795,f13796,f13532,f13887,f13888,f13894,f13896,f13519,f13745,f13511,f13751,f13981,f13983,f13985,f13982,f13501,f13991,f13988,f15012,f15013,f15058,f15059,f15825,f15903,f15824,f15904,f16650,f16653,f16657,f16659,f16660,f16662,f16663,f16666,f16670,f16672,f16673,f16675,f16690,f16774,f16785,f17305,f17309,f17311,f17313,f17306,f17314,f17318,f17315,f17320,f17321,f17849,f17850,f16652,f17851,f17852,f16658,f17853,f16651,f17854,f16661,f16654,f17855,f17856,f16665,f17857,f17858,f16671,f17859,f16664,f17860,f16674,f16667,f17871,f24414,f25770,f25766,f24404,f25786,f25785,f26116,f26117,f28693,f28696,f28698,f28699,f28694,f28778,f28781,f28783,f28784,f6261,f28779,f34304,f34284,f34402,f38016,f38061,f37907,f38017,f38091,f38062,f38636,f38644,f38696,f38637,f39114,f37465,f37462,f39115,f39118,f37461,f39119,f39128,f39129,f39160,f37448,f39161,f39163,f39184,f13889,f39116,f60418,f60460,f61171,f61180,f61197,f61198,f4364,f63831,f17316,f63832,f71686,f71737,f72365,f15902,f72424,f74730,f74732,f74733])).
fof(f74733,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f74726,f718])).
fof(f718,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))) )),
  inference(cnf_transformation,[],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2] : s('type.list.list'(X0),'const.list.NIL_0') != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))),
  inference(flattening,[],[f108])).
fof(f108,plain,(
  ! [X0] : ! [X1,X2] : ~s('type.list.list'(X0),'const.list.NIL_0') = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X1)))),
  inference(rectify,[],[f43])).
fof(f43,axiom,(
  ! [X48] : ! [X14,X13] : ~s('type.list.list'(X48),'const.list.NIL_0') = s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X13),s('type.list.list'(X48),X14)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.list.list_distinct')).
fof(f74726,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK421('const.list.NIL_0',sK80,sK79)),s('type.modSem.v',sK422('const.list.NIL_0',sK80,sK79)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK423('const.list.NIL_0',sK80,sK79)))) | ($spl0 | $spl3)),
  inference(unit_resulting_resolution,[],[f11248,f1374,f1179])).
fof(f1179,plain,(
  ( ! [X2,X0,X1] : (~sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK421(X2,X1,X0)),s('type.modSem.v',sK422(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK423(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f584])).
fof(f584,plain,(
  ! [X0,X1,X2] : ((~sP60(X0,X1,X2) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK421(X2,X1,X0)),s('type.modSem.v',sK422(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK423(X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK421(X2,X1,X0)),s('type.conSem.v',sK425(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK424(X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK423(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK424(X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK422(X2,X1,X0)),s('type.conSem.v',sK425(X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)) & ! [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))))) | sP60(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK421,sK422,sK423,sK424,sK425])],[f583])).
fof(f583,plain,(
  ! [X0,X1,X2] : ((~sP60(X0,X1,X2) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)) | ? [X8,X9,X10,X11,X12] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.modSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.conSem.v',X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X11))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X11)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X9),s('type.conSem.v',X12)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)) & ! [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))))) | sP60(X0,X1,X2)))),
  inference(rectify,[],[f582])).
fof(f582,plain,(
  ! [X0,X2,X1] : ((~sP60(X0,X2,X1) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)) | ? [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)) & ! [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))))) | sP60(X0,X2,X1)))),
  inference(flattening,[],[f581])).
fof(f581,plain,(
  ! [X0,X2,X1] : ((~sP60(X0,X2,X1) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)) | ? [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)) & ! [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))))) | sP60(X0,X2,X1)))),
  inference(nnf_transformation,[],[f293])).
fof(f293,plain,(
  ! [X0,X2,X1] : (sP60(X0,X2,X1) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)) | ? [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP60])])).
fof(f11248,plain,(
  sP60(sK79,sK80,'const.list.NIL_0') | $spl0),
  inference(subsumption_resolution,[],[f11239,f660])).
fof(f660,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,axiom,(
  p(s(bool,'T_0'))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.TRUTH')).
fof(f11239,plain,(
  ~p(s(bool,'T_0')) | sP60(sK79,sK80,'const.list.NIL_0') | $spl0),
  inference(superposition,[],[f1188,f1578])).
fof(f1578,plain,(
  s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f674])).
fof(f674,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f320])).
fof(f320,plain,(
  ! [X0] : ((s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) & (~p(s(bool,X0)) | s(bool,'T_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f82])).
fof(f82,plain,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) <=> p(s(bool,X0)))),
  inference(rectify,[],[f68])).
fof(f68,axiom,(
  ! [X53] : (s(bool,'T_0') = s(bool,X53) <=> p(s(bool,X53)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.EQ_CLAUSES|split|1')).
fof(f1188,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | sP60(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f585])).
fof(f585,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | sP60(X0,X2,X1)) & (~sP60(X0,X2,X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(nnf_transformation,[],[f294])).
fof(f294,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> sP60(X0,X2,X1))),
  inference(definition_folding,[],[f146,f293])).
fof(f146,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)) | ? [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X42,X43,X44] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)))) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)) | ? [X23,X34,X22,X7,X35] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42),s('type.modSem.v',X34),s('type.conSem.v',X35)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_cases|split|2')).
fof(f74732,plain,(
  $false | ($spl0 | $spl3)),
  inference(subsumption_resolution,[],[f74727,f1374])).
fof(f74727,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80) | $spl0),
  inference(unit_resulting_resolution,[],[f11248,f718,f1179])).
fof(f74730,plain,(
  $false | ($spl0 | $spl3)),
  inference(unit_resulting_resolution,[],[f11248,f1374,f718,f1179])).
fof(f72424,plain,(
  ( ! [X182,X180,X178,X183,X179] : (s(bool,X182) = s(bool,'const.bool.BOUNDED_1'(s(bool,X183))) | s(bool,X182) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X178),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X179),s('type.list.list'('type.modSem.v'),X180))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl170),
  inference(cnf_transformation,[],[f72424_D])).
fof(f72424_D,plain,(
  ( ! [X182,X180,X178,X183,X179] : (s(bool,X182) = s(bool,'const.bool.BOUNDED_1'(s(bool,X183))) | s(bool,X182) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X178),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X179),s('type.list.list'('type.modSem.v'),X180))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) <=> ~$spl170),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl170])])).
fof(f15902,plain,(
  ( ! [X543] : (s(bool,'F_0') = s(bool,X543)) ) | $spl96),
  inference(cnf_transformation,[],[f15902_D])).
fof(f15902_D,plain,(
  ( ! [X543] : (s(bool,'F_0') = s(bool,X543)) ) <=> ~$spl96),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl96])])).
fof(f72365,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (s(bool,'F_0') = s(bool,X181) | s(bool,X182) = s(bool,'const.bool.BOUNDED_1'(s(bool,X183))) | s(bool,X182) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X178),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X179),s('type.list.list'('type.modSem.v'),X180))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f71978])).
fof(f71978,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (s(bool,'F_0') = s(bool,X181) | s(bool,X182) = s(bool,'const.bool.BOUNDED_1'(s(bool,X183))) | s(bool,'F_0') = s(bool,X181) | s(bool,X182) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X178),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X179),s('type.list.list'('type.modSem.v'),X180))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(superposition,[],[f29926,f34481])).
fof(f34481,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X131) = s(bool,'const.bool.BOUNDED_1'(s(bool,X132))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134) | s(bool,X131) = s(bool,X133)) ) | $spl0),
  inference(subsumption_resolution,[],[f34480,f1403])).
fof(f1403,plain,(
  s(bool,'T_0') != s(bool,'F_0')),
  inference(unit_resulting_resolution,[],[f662,f673])).
fof(f673,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f320])).
fof(f662,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f72])).
fof(f72,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6',aHL_FALSITY)).
fof(f34480,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X131) = s(bool,'const.bool.BOUNDED_1'(s(bool,X132))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134) | s(bool,X131) = s(bool,X133)) ) | $spl0),
  inference(forward_demodulation,[],[f30815,f663])).
fof(f663,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(cnf_transformation,[],[f73])).
fof(f73,plain,(
  ! [X0] : s(bool,'T_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))),
  inference(rectify,[],[f59])).
fof(f59,axiom,(
  ! [X34] : s(bool,'T_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X34)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.BOUNDED_THM')).
fof(f30815,plain,(
  ( ! [X134,X132,X133,X131] : (s(bool,X131) = s(bool,'const.bool.BOUNDED_1'(s(bool,X132))) | s(bool,X133) = s(bool,X134) | s(bool,'F_0') = s(bool,X134) | s(bool,X131) = s(bool,X133) | s(bool,'F_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X131)))) ) | $spl0),
  inference(superposition,[],[f15265,f15289])).
fof(f15289,plain,(
  ( ! [X62,X63] : (s(bool,X63) = s(bool,'const.bool.BOUNDED_1'(s(bool,X62))) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(subsumption_resolution,[],[f15263,f660])).
fof(f15263,plain,(
  ( ! [X62,X63] : (~p(s(bool,'T_0')) | s(bool,X63) = s(bool,'const.bool.BOUNDED_1'(s(bool,X62))) | s(bool,'F_0') = s(bool,X63)) ) | $spl0),
  inference(superposition,[],[f14759,f663])).
fof(f14759,plain,(
  ( ! [X19,X18] : (~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,'F_0') = s(bool,X18)) ) | $spl0),
  inference(subsumption_resolution,[],[f14758,f660])).
fof(f14758,plain,(
  ( ! [X19,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,'F_0') = s(bool,X18)) ) | $spl0),
  inference(forward_demodulation,[],[f14287,f1578])).
fof(f14287,plain,(
  ( ! [X19,X18] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,'F_0') = s(bool,X18)) ) | $spl0),
  inference(superposition,[],[f725,f14137])).
fof(f14137,plain,(
  ( ! [X588] : (s(bool,X588) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X588)) ) | $spl0),
  inference(subsumption_resolution,[],[f13275,f660])).
fof(f13275,plain,(
  ( ! [X588] : (~p(s(bool,'T_0')) | s(bool,X588) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X588)) ) | $spl0),
  inference(superposition,[],[f662,f11848])).
fof(f11848,plain,(
  ( ! [X47,X46] : (s(bool,X46) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X46) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) ) | $spl0),
  inference(subsumption_resolution,[],[f11828,f660])).
fof(f11828,plain,(
  ( ! [X47,X46] : (~p(s(bool,'T_0')) | s(bool,X46) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X46) = s(bool,X47) | s(bool,'T_0') = s(bool,X47)) ) | $spl0),
  inference(superposition,[],[f4432,f1578])).
fof(f4432,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) )),
  inference(subsumption_resolution,[],[f3452,f660])).
fof(f3452,plain,(
  ( ! [X19,X20,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | s(bool,X18) = s(bool,X19) | s(bool,X18) = s(bool,X20) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f725,f1649])).
fof(f1649,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f665,f665])).
fof(f665,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6',aHL_BOOL_CASES)).
fof(f725,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f180])).
fof(f180,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1))),
  inference(flattening,[],[f179])).
fof(f179,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) & ~p(s(bool,X1))) | ((p(s(bool,X1)) & ~p(s(bool,X0))) | s(bool,X0) = s(bool,X1)))),
  inference(ennf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1] : ((p(s(bool,X0)) => p(s(bool,X1))) => ((p(s(bool,X1)) => p(s(bool,X0))) => s(bool,X0) = s(bool,X1)))),
  inference(rectify,[],[f12])).
fof(f12,axiom,(
  ! [X51,X52] : ((p(s(bool,X51)) => p(s(bool,X52))) => ((p(s(bool,X52)) => p(s(bool,X51))) => s(bool,X51) = s(bool,X52)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.IMP_ANTISYM_AX')).
fof(f15265,plain,(
  ( ! [X14,X15,X16] : (s(bool,X14) = s(bool,X15) | s(bool,'F_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16)) ) | $spl0),
  inference(subsumption_resolution,[],[f15245,f660])).
fof(f15245,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s(bool,X14) = s(bool,X15) | s(bool,'F_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f14759,f3313])).
fof(f3313,plain,(
  ( ! [X6,X7] : (s(bool,X6) = s(bool,'const.bool.BOUNDED_1'(s(bool,X6))) | s(bool,X6) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f663,f1649])).
fof(f29926,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f11458,f14878])).
fof(f14878,plain,(
  ( ! [X424,X423,X425] : (sP43(X423,X425,X424) | s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X423),s('type.list.list'('type.modSem.v'),X424),s('type.list.list'('type.conSem.v'),X425)))) ) | $spl0),
  inference(subsumption_resolution,[],[f14877,f660])).
fof(f14877,plain,(
  ( ! [X424,X423,X425] : (~p(s(bool,'T_0')) | sP43(X423,X425,X424) | s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X423),s('type.list.list'('type.modSem.v'),X424),s('type.list.list'('type.conSem.v'),X425)))) ) | $spl0),
  inference(forward_demodulation,[],[f14468,f1578])).
fof(f14468,plain,(
  ( ! [X424,X423,X425] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | sP43(X423,X425,X424) | s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X423),s('type.list.list'('type.modSem.v'),X424),s('type.list.list'('type.conSem.v'),X425)))) ) | $spl0),
  inference(superposition,[],[f1044,f14137])).
fof(f1044,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | sP43(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f520])).
fof(f520,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | sP43(X0,X2,X1)) & (~sP43(X0,X2,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(nnf_transformation,[],[f273])).
fof(f273,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> sP43(X0,X2,X1))),
  inference(definition_folding,[],[f142,f272])).
fof(f272,plain,(
  ! [X0,X2,X1] : (sP43(X0,X2,X1) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X1) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X2)) | ? [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) & s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP43])])).
fof(f142,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X1) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X2)) | ? [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) & s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))))),
  inference(rectify,[],[f33])).
fof(f33,axiom,(
  ! [X31,X32,X33] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31),s('type.list.list'('type.modSem.v'),X32),s('type.list.list'('type.conSem.v'),X33)))) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X32) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X33)) | ? [X34,X17,X35,X18] : (s('type.list.list'('type.modSem.v'),X32) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X34),s('type.list.list'('type.modSem.v'),X17))) & s('type.list.list'('type.conSem.v'),X33) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X35),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31),s('type.modSem.v',X34),s('type.conSem.v',X35)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_cases|split|1')).
fof(f11458,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,'const.list.NIL_0','const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2)))) )),
  inference(unit_resulting_resolution,[],[f718,f718,f1036])).
fof(f1036,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.conSem.v'),X1) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK330(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK331(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f519])).
fof(f519,plain,(
  ! [X0,X1,X2] : ((~sP43(X0,X1,X2) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1)) | (s('type.list.list'('type.modSem.v'),X2) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK328(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK329(X2,X1,X0)))) & s('type.list.list'('type.conSem.v'),X1) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK330(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK331(X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK328(X2,X1,X0)),s('type.conSem.v',sK330(X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK329(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK331(X2,X1,X0))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X1)) & ! [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) | sP43(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK328,sK329,sK330,sK331])],[f518])).
fof(f518,plain,(
  ! [X0,X1,X2] : ((~sP43(X0,X1,X2) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1)) | ? [X7,X8,X9,X10] : (s('type.list.list'('type.modSem.v'),X2) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X7),s('type.list.list'('type.modSem.v'),X8))) & s('type.list.list'('type.conSem.v'),X1) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X9),s('type.list.list'('type.conSem.v'),X10))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X7),s('type.conSem.v',X9)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X10)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X1)) & ! [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) | sP43(X0,X1,X2)))),
  inference(rectify,[],[f517])).
fof(f517,plain,(
  ! [X0,X2,X1] : ((~sP43(X0,X2,X1) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X1) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X2)) | ? [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) & s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X1) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X2)) & ! [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X2) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) | sP43(X0,X2,X1)))),
  inference(flattening,[],[f516])).
fof(f516,plain,(
  ! [X0,X2,X1] : ((~sP43(X0,X2,X1) | ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X1) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X2)) | ? [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) & s('type.list.list'('type.conSem.v'),X2) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X1) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X2)) & ! [X3,X4,X5,X6] : (s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))) | s('type.list.list'('type.conSem.v'),X2) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))))) | sP43(X0,X2,X1)))),
  inference(nnf_transformation,[],[f272])).
fof(f71737,plain,(
  ( ! [X182,X180,X178,X183,X179] : (s(bool,X182) = s(bool,'const.bool.BOUNDED_1'(s(bool,X183))) | s(bool,X182) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X178),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X179),s('type.list.list'('type.conSem.v'),X180)))))) ) | $spl168),
  inference(cnf_transformation,[],[f71737_D])).
fof(f71737_D,plain,(
  ( ! [X182,X180,X178,X183,X179] : (s(bool,X182) = s(bool,'const.bool.BOUNDED_1'(s(bool,X183))) | s(bool,X182) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X178),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X179),s('type.list.list'('type.conSem.v'),X180)))))) ) <=> ~$spl168),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl168])])).
fof(f71686,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (s(bool,'F_0') = s(bool,X181) | s(bool,X182) = s(bool,'const.bool.BOUNDED_1'(s(bool,X183))) | s(bool,X182) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X178),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X179),s('type.list.list'('type.conSem.v'),X180)))))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f71298])).
fof(f71298,plain,(
  ( ! [X182,X180,X178,X183,X181,X179] : (s(bool,'F_0') = s(bool,X181) | s(bool,X182) = s(bool,'const.bool.BOUNDED_1'(s(bool,X183))) | s(bool,'F_0') = s(bool,X181) | s(bool,X182) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X178),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X179),s('type.list.list'('type.conSem.v'),X180)))))) ) | $spl0),
  inference(superposition,[],[f29925,f34481])).
fof(f29925,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),X2)))))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f11424,f14878])).
fof(f11424,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),X2)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f718,f718,f1035])).
fof(f1035,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1) | s('type.list.list'('type.modSem.v'),X2) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK328(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK329(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f519])).
fof(f63832,plain,(
  ( ! [X216] : (s(bool,'F_0') != s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X216,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,'T_0')))) ) | $spl166),
  inference(cnf_transformation,[],[f63832_D])).
fof(f63832_D,plain,(
  ( ! [X216] : (s(bool,'F_0') != s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X216,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,'T_0')))) ) <=> ~$spl166),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl166])])).
fof(f17316,plain,(
  ( ! [X73] : (~p(s(bool,X73))) ) | $spl128),
  inference(cnf_transformation,[],[f17316_D])).
fof(f17316_D,plain,(
  ( ! [X73] : (~p(s(bool,X73))) ) <=> ~$spl128),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl128])])).
fof(f63831,plain,(
  ( ! [X216,X215] : (~p(s(bool,X215)) | s(bool,'F_0') != s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X216,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,'T_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f63777,f675])).
fof(f675,plain,(
  ( ! [X0] : (~p(s(bool,X0)) | s(bool,'F_0') != s(bool,X0)) )),
  inference(cnf_transformation,[],[f321])).
fof(f321,plain,(
  ! [X0] : ((s(bool,'F_0') != s(bool,X0) | ~p(s(bool,X0))) & (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)))),
  inference(nnf_transformation,[],[f84])).
fof(f84,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(flattening,[],[f83])).
fof(f83,plain,(
  ! [X0] : (s(bool,'F_0') = s(bool,X0) <=> ~p(s(bool,X0)))),
  inference(rectify,[],[f67])).
fof(f67,axiom,(
  ! [X53] : (s(bool,'F_0') = s(bool,X53) <=> ~p(s(bool,X53)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.EQ_CLAUSES|split|3')).
fof(f63777,plain,(
  ( ! [X216,X215] : (~p(s(bool,X215)) | s(bool,'F_0') != s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X216,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X216),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X215)) ) | $spl0),
  inference(superposition,[],[f63401,f14137])).
fof(f63401,plain,(
  ( ! [X17,X16] : (~p(s(bool,X16)) | s(bool,'F_0') != s(bool,sK89(X16,X17,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f62903,f675])).
fof(f62903,plain,(
  ( ! [X17,X16] : (~p(s(bool,X16)) | s(bool,'F_0') != s(bool,sK89(X16,X17,bool)) | s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X17),s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f675,f21339])).
fof(f21339,plain,(
  ( ! [X35,X36] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X36),s(bool,'T_0'))) | s(bool,X35) = s(bool,sK89(X35,X36,bool)) | s(bool,'F_0') = s(bool,X35)) ) | $spl0),
  inference(forward_demodulation,[],[f21060,f1578])).
fof(f21060,plain,(
  ( ! [X35,X36] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X36),s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))))) | s(bool,X35) = s(bool,sK89(X35,X36,bool)) | s(bool,'F_0') = s(bool,X35)) ) | $spl0),
  inference(superposition,[],[f14862,f14137])).
fof(f14862,plain,(
  ( ! [X399,X398,X400] : (s(bool,'F_0') = s(bool,happ(s(fun(X398,bool),X399),s(X398,X400))) | s(X398,X400) = s(X398,sK89(X400,X399,X398))) ) | $spl0),
  inference(subsumption_resolution,[],[f14861,f660])).
fof(f14861,plain,(
  ( ! [X399,X398,X400] : (~p(s(bool,'T_0')) | s(X398,X400) = s(X398,sK89(X400,X399,X398)) | s(bool,'F_0') = s(bool,happ(s(fun(X398,bool),X399),s(X398,X400)))) ) | $spl0),
  inference(forward_demodulation,[],[f14460,f1578])).
fof(f14460,plain,(
  ( ! [X399,X398,X400] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | s(X398,X400) = s(X398,sK89(X400,X399,X398)) | s(bool,'F_0') = s(bool,happ(s(fun(X398,bool),X399),s(X398,X400)))) ) | $spl0),
  inference(superposition,[],[f716,f14137])).
fof(f716,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) = s(X0,sK89(X2,X1,X0))) )),
  inference(cnf_transformation,[],[f353])).
fof(f353,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | (s(X0,X2) = s(X0,sK89(X2,X1,X0)) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK89(X2,X1,X0))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK89])],[f352])).
fof(f352,plain,(
  ! [X0,X1,X2] : ((! [X4] : (s(X0,X2) != s(X0,X4) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(rectify,[],[f351])).
fof(f351,plain,(
  ! [X0,X1,X2] : ((! [X3] : (s(X0,X2) != s(X0,X3) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2))))) & (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | ? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f107])).
fof(f107,plain,(
  ! [X0,X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(flattening,[],[f106])).
fof(f106,plain,(
  ! [X0] : ! [X1,X2] : (? [X3] : (s(X0,X2) = s(X0,X3) & p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) <=> p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))))),
  inference(rectify,[],[f63])).
fof(f63,axiom,(
  ! [X48] : ! [X50,X64] : (? [X23] : (s(X48,X23) = s(X48,X64) & p(s(bool,happ(s(fun(X48,bool),X50),s(X48,X23))))) <=> p(s(bool,happ(s(fun(X48,bool),X50),s(X48,X64)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.UNWIND_THM2')).
fof(f4364,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) | $spl6),
  inference(cnf_transformation,[],[f4364_D])).
fof(f4364_D,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,X0)) ) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f61198,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) = s(bool,happ(s(fun(bool,bool),X122),s(bool,X121))) | s(bool,X121) = s(bool,'const.bool.BOUNDED_1'(s(bool,X123))) | s(bool,'F_0') = s(bool,sK89('F_0',X122,bool))) ) | $spl164),
  inference(cnf_transformation,[],[f61198_D])).
fof(f61198_D,plain,(
  ( ! [X123,X121,X122] : (s(bool,X121) = s(bool,happ(s(fun(bool,bool),X122),s(bool,X121))) | s(bool,X121) = s(bool,'const.bool.BOUNDED_1'(s(bool,X123))) | s(bool,'F_0') = s(bool,sK89('F_0',X122,bool))) ) <=> ~$spl164),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl164])])).
fof(f61197,plain,(
  ( ! [X123,X121,X122,X120] : (s(bool,X121) = s(bool,happ(s(fun(bool,bool),X122),s(bool,X121))) | s(bool,'F_0') = s(bool,sK89('F_0',X122,bool)) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,'const.bool.BOUNDED_1'(s(bool,X123)))) ) | $spl0),
  inference(subsumption_resolution,[],[f60715,f15914])).
fof(f15914,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,'const.bool.BOUNDED_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(subsumption_resolution,[],[f15913,f1403])).
fof(f15913,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,'F_0') | s(bool,X0) != s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl0),
  inference(condensation,[],[f15912])).
fof(f15912,plain,(
  ( ! [X681,X680,X682] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X682) != s(bool,'const.bool.BOUNDED_1'(s(bool,X681))) | s(bool,X680) = s(bool,X682) | s(bool,'T_0') = s(bool,X682)) ) | $spl0),
  inference(forward_demodulation,[],[f15559,f663])).
fof(f15559,plain,(
  ( ! [X681,X680,X682] : (s(bool,X682) != s(bool,'const.bool.BOUNDED_1'(s(bool,X681))) | s(bool,X680) = s(bool,X682) | s(bool,'T_0') = s(bool,X682) | s(bool,'F_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,X680)))) ) | $spl0),
  inference(superposition,[],[f9215,f15289])).
fof(f9215,plain,(
  ( ! [X0,X1] : (s(bool,X1) != s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(equality_factoring,[],[f3313])).
fof(f60715,plain,(
  ( ! [X123,X121,X122,X120] : (s(bool,X121) = s(bool,happ(s(fun(bool,bool),X122),s(bool,X121))) | s(bool,'F_0') = s(bool,sK89('F_0',X122,bool)) | s(bool,'T_0') = s(bool,X120) | s(bool,X121) = s(bool,'const.bool.BOUNDED_1'(s(bool,X123))) | s(bool,X120) = s(bool,'const.bool.BOUNDED_1'(s(bool,X120)))) ) | $spl0),
  inference(superposition,[],[f21072,f34447])).
fof(f34447,plain,(
  ( ! [X149,X150,X148] : (s(bool,X149) = s(bool,'const.bool.BOUNDED_1'(s(bool,X148))) | s(bool,X150) = s(bool,'const.bool.BOUNDED_1'(s(bool,X150))) | s(bool,X149) = s(bool,X150)) ) | $spl0),
  inference(subsumption_resolution,[],[f30733,f1403])).
fof(f30733,plain,(
  ( ! [X149,X150,X148] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X149) = s(bool,'const.bool.BOUNDED_1'(s(bool,X148))) | s(bool,X150) = s(bool,'const.bool.BOUNDED_1'(s(bool,X150))) | s(bool,X149) = s(bool,X150)) ) | $spl0),
  inference(superposition,[],[f15265,f663])).
fof(f21072,plain,(
  ( ! [X70,X71] : (s(bool,X70) = s(bool,happ(s(fun(bool,bool),X71),s(bool,X70))) | s(bool,'F_0') = s(bool,sK89('F_0',X71,bool)) | s(bool,'T_0') = s(bool,X70)) ) | $spl0),
  inference(superposition,[],[f14862,f665])).
fof(f61180,plain,(
  ( ! [X33,X34] : (s(bool,X33) = s(bool,happ(s(fun(bool,bool),X34),s(bool,X33))) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,sK89('F_0',X34,bool))) ) | $spl162),
  inference(cnf_transformation,[],[f61180_D])).
fof(f61180_D,plain,(
  ( ! [X33,X34] : (s(bool,X33) = s(bool,happ(s(fun(bool,bool),X34),s(bool,X33))) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,sK89('F_0',X34,bool))) ) <=> ~$spl162),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl162])])).
fof(f61171,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,happ(s(fun(bool,bool),X34),s(bool,X33))) | s(bool,'F_0') = s(bool,sK89('F_0',X34,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f60691])).
fof(f60691,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,happ(s(fun(bool,bool),X34),s(bool,X33))) | s(bool,'F_0') = s(bool,sK89('F_0',X34,bool)) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X32)) ) | $spl0),
  inference(superposition,[],[f21072,f11848])).
fof(f60460,plain,(
  ( ! [X134,X132,X136,X135] : (s(bool,X134) = s(bool,sK89(X134,X132,bool)) | s(bool,X135) = s(bool,'const.bool.BOUNDED_1'(s(bool,X136))) | s(bool,X135) = s(bool,happ(s(fun(bool,bool),X132),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X134)) ) | $spl160),
  inference(cnf_transformation,[],[f60460_D])).
fof(f60460_D,plain,(
  ( ! [X134,X132,X136,X135] : (s(bool,X134) = s(bool,sK89(X134,X132,bool)) | s(bool,X135) = s(bool,'const.bool.BOUNDED_1'(s(bool,X136))) | s(bool,X135) = s(bool,happ(s(fun(bool,bool),X132),s(bool,'F_0'))) | s(bool,'T_0') = s(bool,X134)) ) <=> ~$spl160),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl160])])).
fof(f60418,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(bool,'F_0') = s(bool,X133) | s(bool,X134) = s(bool,sK89(X134,X132,bool)) | s(bool,'T_0') = s(bool,X134) | s(bool,X135) = s(bool,'const.bool.BOUNDED_1'(s(bool,X136))) | s(bool,X135) = s(bool,happ(s(fun(bool,bool),X132),s(bool,'F_0')))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f59680])).
fof(f59680,plain,(
  ( ! [X134,X132,X136,X135,X133] : (s(bool,'F_0') = s(bool,X133) | s(bool,X134) = s(bool,sK89(X134,X132,bool)) | s(bool,'T_0') = s(bool,X134) | s(bool,X135) = s(bool,'const.bool.BOUNDED_1'(s(bool,X136))) | s(bool,'F_0') = s(bool,X133) | s(bool,X135) = s(bool,happ(s(fun(bool,bool),X132),s(bool,'F_0')))) ) | $spl0),
  inference(superposition,[],[f21048,f34481])).
fof(f21048,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0'))) | s(bool,X0) = s(bool,sK89(X0,X1,bool)) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f14862,f665])).
fof(f39116,plain,(
  ( ! [X691,X690] : (s(bool,'T_0') != s(bool,X690) | s(bool,X690) = s(bool,'const.bool.BOUNDED_1'(s(bool,X691)))) ) | $spl152),
  inference(cnf_transformation,[],[f39116_D])).
fof(f39116_D,plain,(
  ( ! [X691,X690] : (s(bool,'T_0') != s(bool,X690) | s(bool,X690) = s(bool,'const.bool.BOUNDED_1'(s(bool,X691)))) ) <=> ~$spl152),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl152])])).
fof(f13889,plain,(
  ( ! [X531] : (s(bool,X531) = s(bool,'const.bool.BOUNDED_1'(s(bool,X531)))) ) | $spl86),
  inference(cnf_transformation,[],[f13889_D])).
fof(f13889_D,plain,(
  ( ! [X531] : (s(bool,X531) = s(bool,'const.bool.BOUNDED_1'(s(bool,X531)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f39184,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) | s(bool,'T_0') != s(bool,X1) | s(bool,'T_0') = s(bool,X2) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X3)))) ) | $spl0),
  inference(condensation,[],[f39183])).
fof(f39183,plain,(
  ( ! [X990,X988,X987,X989,X986] : (s(bool,'T_0') != s(bool,X987) | s(bool,X986) = s(bool,X988) | s(bool,'T_0') = s(bool,X989) | s(bool,X987) = s(bool,'const.bool.BOUNDED_1'(s(bool,X990))) | s(bool,X986) = s(bool,'const.bool.BOUNDED_1'(s(bool,X986)))) ) | $spl0),
  inference(subsumption_resolution,[],[f37279,f36389])).
fof(f36389,plain,(
  ( ! [X14,X17,X15,X16] : (s(bool,X14) != s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X17))) | s(bool,X14) = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f15914,f34447])).
fof(f37279,plain,(
  ( ! [X990,X988,X987,X989,X986] : (s(bool,'T_0') != s(bool,X987) | s(bool,X986) = s(bool,X988) | s(bool,X988) = s(bool,X989) | s(bool,'T_0') = s(bool,X989) | s(bool,X987) = s(bool,'const.bool.BOUNDED_1'(s(bool,X990))) | s(bool,X986) = s(bool,'const.bool.BOUNDED_1'(s(bool,X986)))) ) | $spl0),
  inference(superposition,[],[f22434,f34447])).
fof(f22434,plain,(
  ( ! [X8,X7,X9] : (s(bool,'T_0') != s(bool,X7) | s(bool,X7) = s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) ) | $spl0),
  inference(superposition,[],[f1403,f14262])).
fof(f14262,plain,(
  ( ! [X4,X2,X3] : (s(bool,X2) = s(bool,X3) | s(bool,'F_0') = s(bool,X3) | s(bool,X2) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) ) | $spl0),
  inference(superposition,[],[f14137,f11848])).
fof(f39163,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2)))) ) | ($spl0 | $spl134)),
  inference(condensation,[],[f39162])).
fof(f39162,plain,(
  ( ! [X942,X944,X943,X941] : (s(bool,'T_0') != s(bool,X942) | s(bool,X941) = s(bool,X943) | s(bool,'F_0') = s(bool,X943) | s(bool,X942) = s(bool,'const.bool.BOUNDED_1'(s(bool,X944)))) ) | ($spl0 | $spl134)),
  inference(subsumption_resolution,[],[f37270,f25785])).
fof(f37270,plain,(
  ( ! [X942,X944,X943,X941] : (s(bool,'T_0') != s(bool,X942) | s(bool,X941) = s(bool,X943) | s(bool,'F_0') = s(bool,X943) | s(bool,X942) = s(bool,'const.bool.BOUNDED_1'(s(bool,X944))) | s(bool,X941) = s(bool,'const.bool.BOUNDED_1'(s(bool,X941)))) ) | $spl0),
  inference(superposition,[],[f18797,f34447])).
fof(f18797,plain,(
  ( ! [X6,X5] : (s(bool,'T_0') != s(bool,X5) | s(bool,X5) = s(bool,X6) | s(bool,'F_0') = s(bool,X6)) ) | $spl0),
  inference(superposition,[],[f1403,f14261])).
fof(f14261,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1) | s(bool,'F_0') = s(bool,X1) | s(bool,'F_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f14137,f14137])).
fof(f39161,plain,(
  ( ! [X905,X906,X904] : (s(bool,X904) != s(bool,'const.bool.BOUNDED_1'(s(bool,X905))) | s(bool,X904) = s(bool,'const.bool.BOUNDED_1'(s(bool,X906)))) ) | $spl158),
  inference(cnf_transformation,[],[f39161_D])).
fof(f39161_D,plain,(
  ( ! [X905,X906,X904] : (s(bool,X904) != s(bool,'const.bool.BOUNDED_1'(s(bool,X905))) | s(bool,X904) = s(bool,'const.bool.BOUNDED_1'(s(bool,X906)))) ) <=> ~$spl158),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl158])])).
fof(f37448,plain,(
  ( ! [X918,X916,X915,X917] : (s(bool,X916) != s(bool,'const.bool.BOUNDED_1'(s(bool,X917))) | s(bool,X915) = s(bool,'const.bool.BOUNDED_1'(s(bool,X915))) | s(bool,X916) = s(bool,'const.bool.BOUNDED_1'(s(bool,X918)))) ) | ($spl0 | $spl68)),
  inference(duplicate_literal_removal,[],[f37265])).
fof(f37265,plain,(
  ( ! [X918,X916,X915,X917] : (s(bool,X916) != s(bool,'const.bool.BOUNDED_1'(s(bool,X917))) | s(bool,X915) = s(bool,'const.bool.BOUNDED_1'(s(bool,X915))) | s(bool,X916) = s(bool,'const.bool.BOUNDED_1'(s(bool,X918))) | s(bool,X915) = s(bool,'const.bool.BOUNDED_1'(s(bool,X915)))) ) | ($spl0 | $spl68)),
  inference(superposition,[],[f15916,f34447])).
fof(f15916,plain,(
  ( ! [X691,X690] : (s(bool,X691) != s(bool,'const.bool.BOUNDED_1'(s(bool,X690))) | s(bool,X691) = s(bool,'const.bool.BOUNDED_1'(s(bool,X691)))) ) | ($spl0 | $spl68)),
  inference(subsumption_resolution,[],[f15915,f1403])).
fof(f15915,plain,(
  ( ! [X691,X690] : (s(bool,'T_0') = s(bool,'F_0') | s(bool,X691) != s(bool,'const.bool.BOUNDED_1'(s(bool,X690))) | s(bool,X691) = s(bool,'const.bool.BOUNDED_1'(s(bool,X691)))) ) | ($spl0 | $spl68)),
  inference(forward_demodulation,[],[f15563,f663])).
fof(f15563,plain,(
  ( ! [X691,X690] : (s(bool,X691) != s(bool,'const.bool.BOUNDED_1'(s(bool,X690))) | s(bool,X691) = s(bool,'const.bool.BOUNDED_1'(s(bool,X691))) | s(bool,'F_0') = s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0')))) ) | ($spl0 | $spl68)),
  inference(superposition,[],[f9755,f15289])).
fof(f39160,plain,(
  ( ! [X905,X903,X906,X904] : (s(bool,X904) != s(bool,'const.bool.BOUNDED_1'(s(bool,X905))) | s(bool,'T_0') = s(bool,X903) | s(bool,X904) = s(bool,'const.bool.BOUNDED_1'(s(bool,X906)))) ) | $spl0),
  inference(subsumption_resolution,[],[f37262,f15914])).
fof(f37262,plain,(
  ( ! [X905,X903,X906,X904] : (s(bool,X904) != s(bool,'const.bool.BOUNDED_1'(s(bool,X905))) | s(bool,'T_0') = s(bool,X903) | s(bool,X904) = s(bool,'const.bool.BOUNDED_1'(s(bool,X906))) | s(bool,X903) = s(bool,'const.bool.BOUNDED_1'(s(bool,X903)))) ) | $spl0),
  inference(superposition,[],[f15914,f34447])).
fof(f39129,plain,(
  ( ! [X742] : (s(bool,X742) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl156),
  inference(cnf_transformation,[],[f39129_D])).
fof(f39129_D,plain,(
  ( ! [X742] : (s(bool,X742) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) <=> ~$spl156),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl156])])).
fof(f39128,plain,(
  ( ! [X743,X744,X742] : (s(bool,'T_0') != s(bool,X743) | s(bool,X742) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X743) = s(bool,'const.bool.BOUNDED_1'(s(bool,X744)))) ) | ($spl0 | $spl122)),
  inference(subsumption_resolution,[],[f37227,f16785])).
fof(f37227,plain,(
  ( ! [X743,X744,X742] : (s(bool,'T_0') != s(bool,X743) | s(bool,X742) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X743) = s(bool,'const.bool.BOUNDED_1'(s(bool,X744))) | s(bool,X742) = s(bool,'const.bool.BOUNDED_1'(s(bool,X742)))) ) | $spl0),
  inference(superposition,[],[f13994,f34447])).
fof(f13994,plain,(
  ( ! [X598] : (s(bool,'T_0') != s(bool,X598) | s(bool,X598) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(subsumption_resolution,[],[f12822,f1403])).
fof(f12822,plain,(
  ( ! [X598] : (s(bool,'T_0') != s(bool,X598) | s(bool,X598) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,'F_0')) ) | $spl0),
  inference(superposition,[],[f1403,f11848])).
fof(f39119,plain,(
  ( ! [X712,X713,X711] : (s(bool,X711) != s(bool,X712) | s(bool,X711) = s(bool,'const.bool.BOUNDED_1'(s(bool,X713))) | s(bool,'F_0') = s(bool,X712)) ) | $spl154),
  inference(cnf_transformation,[],[f39119_D])).
fof(f39119_D,plain,(
  ( ! [X712,X713,X711] : (s(bool,X711) != s(bool,X712) | s(bool,X711) = s(bool,'const.bool.BOUNDED_1'(s(bool,X713))) | s(bool,'F_0') = s(bool,X712)) ) <=> ~$spl154),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl154])])).
fof(f37461,plain,(
  ( ! [X724,X722,X725,X723] : (s(bool,X723) != s(bool,X724) | s(bool,X722) = s(bool,'const.bool.BOUNDED_1'(s(bool,X722))) | s(bool,'F_0') = s(bool,X724) | s(bool,X723) = s(bool,'const.bool.BOUNDED_1'(s(bool,X725)))) ) | ($spl0 | $spl76)),
  inference(duplicate_literal_removal,[],[f37222])).
fof(f37222,plain,(
  ( ! [X724,X722,X725,X723] : (s(bool,X723) != s(bool,X724) | s(bool,X722) = s(bool,'const.bool.BOUNDED_1'(s(bool,X722))) | s(bool,'F_0') = s(bool,X724) | s(bool,X723) = s(bool,'const.bool.BOUNDED_1'(s(bool,X725))) | s(bool,X722) = s(bool,'const.bool.BOUNDED_1'(s(bool,X722)))) ) | ($spl0 | $spl76)),
  inference(superposition,[],[f10650,f34447])).
fof(f39118,plain,(
  ( ! [X712,X710,X713,X711] : (s(bool,X711) != s(bool,X712) | s(bool,'T_0') = s(bool,X710) | s(bool,'F_0') = s(bool,X712) | s(bool,X711) = s(bool,'const.bool.BOUNDED_1'(s(bool,X713)))) ) | ($spl0 | $spl72)),
  inference(subsumption_resolution,[],[f37219,f15914])).
fof(f37219,plain,(
  ( ! [X712,X710,X713,X711] : (s(bool,X711) != s(bool,X712) | s(bool,'T_0') = s(bool,X710) | s(bool,'F_0') = s(bool,X712) | s(bool,X711) = s(bool,'const.bool.BOUNDED_1'(s(bool,X713))) | s(bool,X710) = s(bool,'const.bool.BOUNDED_1'(s(bool,X710)))) ) | ($spl0 | $spl72)),
  inference(superposition,[],[f10599,f34447])).
fof(f10599,plain,(
  ( ! [X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1)) ) | $spl72),
  inference(condensation,[],[f10598])).
fof(f10598,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X17) | s(bool,X18) != s(bool,X19) | s(bool,'F_0') = s(bool,X19) | s(bool,'T_0') = s(bool,X18)) ) | $spl72),
  inference(subsumption_resolution,[],[f10597,f674])).
fof(f10597,plain,(
  ( ! [X19,X17,X18] : (s(bool,'T_0') = s(bool,X17) | s(bool,X18) != s(bool,X19) | s(bool,'F_0') = s(bool,X19) | p(s(bool,X17)) | s(bool,'T_0') = s(bool,X18)) ) | $spl72),
  inference(forward_demodulation,[],[f10574,f663])).
fof(f10574,plain,(
  ( ! [X19,X17,X18] : (s(bool,X18) != s(bool,X19) | s(bool,'F_0') = s(bool,X19) | p(s(bool,X17)) | s(bool,X17) = s(bool,'const.bool.BOUNDED_1'(s(bool,X17))) | s(bool,'T_0') = s(bool,X18)) ) | $spl72),
  inference(superposition,[],[f10516,f3313])).
fof(f39115,plain,(
  ( ! [X687,X688] : (s(bool,X687) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X687) = s(bool,'const.bool.BOUNDED_1'(s(bool,X688)))) ) | $spl150),
  inference(cnf_transformation,[],[f39115_D])).
fof(f39115_D,plain,(
  ( ! [X687,X688] : (s(bool,X687) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X687) = s(bool,'const.bool.BOUNDED_1'(s(bool,X688)))) ) <=> ~$spl150),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl150])])).
fof(f37462,plain,(
  ( ! [X699,X700,X701] : (s(bool,X700) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X699) = s(bool,'const.bool.BOUNDED_1'(s(bool,X699))) | s(bool,X700) = s(bool,'const.bool.BOUNDED_1'(s(bool,X701)))) ) | ($spl0 | $spl68)),
  inference(duplicate_literal_removal,[],[f37216])).
fof(f37216,plain,(
  ( ! [X699,X700,X701] : (s(bool,X700) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X699) = s(bool,'const.bool.BOUNDED_1'(s(bool,X699))) | s(bool,X700) = s(bool,'const.bool.BOUNDED_1'(s(bool,X701))) | s(bool,X699) = s(bool,'const.bool.BOUNDED_1'(s(bool,X699)))) ) | ($spl0 | $spl68)),
  inference(superposition,[],[f9755,f34447])).
fof(f37465,plain,(
  ( ! [X689,X691,X690] : (s(bool,'T_0') != s(bool,X690) | s(bool,X689) = s(bool,'const.bool.BOUNDED_1'(s(bool,X689))) | s(bool,X690) = s(bool,'const.bool.BOUNDED_1'(s(bool,X691)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f37213])).
fof(f37213,plain,(
  ( ! [X689,X691,X690] : (s(bool,'T_0') != s(bool,X690) | s(bool,X689) = s(bool,'const.bool.BOUNDED_1'(s(bool,X689))) | s(bool,X690) = s(bool,'const.bool.BOUNDED_1'(s(bool,X691))) | s(bool,X689) = s(bool,'const.bool.BOUNDED_1'(s(bool,X689)))) ) | $spl0),
  inference(superposition,[],[f9546,f34447])).
fof(f9546,plain,(
  ( ! [X509] : (s(bool,'T_0') != s(bool,X509) | s(bool,X509) = s(bool,'const.bool.BOUNDED_1'(s(bool,X509)))) )),
  inference(subsumption_resolution,[],[f8804,f1403])).
fof(f8804,plain,(
  ( ! [X509] : (s(bool,'T_0') != s(bool,X509) | s(bool,X509) = s(bool,'const.bool.BOUNDED_1'(s(bool,X509))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f1403,f3313])).
fof(f39114,plain,(
  ( ! [X687,X688,X686] : (s(bool,X687) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X686) | s(bool,X687) = s(bool,'const.bool.BOUNDED_1'(s(bool,X688)))) ) | $spl0),
  inference(subsumption_resolution,[],[f37212,f15914])).
fof(f37212,plain,(
  ( ! [X687,X688,X686] : (s(bool,X687) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X686) | s(bool,X687) = s(bool,'const.bool.BOUNDED_1'(s(bool,X688))) | s(bool,X686) = s(bool,'const.bool.BOUNDED_1'(s(bool,X686)))) ) | $spl0),
  inference(superposition,[],[f9229,f34447])).
fof(f9229,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f9221])).
fof(f9221,plain,(
  ( ! [X0] : (s(bool,X0) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(equality_factoring,[],[f3313])).
fof(f38637,plain,(
  ( ! [X656,X654,X657] : (s(bool,'F_0') != s(bool,X654) | s(bool,X654) = s(bool,X656) | s(bool,X656) = s(bool,'const.bool.BOUNDED_1'(s(bool,X657)))) ) | $spl148),
  inference(cnf_transformation,[],[f38637_D])).
fof(f38637_D,plain,(
  ( ! [X656,X654,X657] : (s(bool,'F_0') != s(bool,X654) | s(bool,X654) = s(bool,X656) | s(bool,X656) = s(bool,'const.bool.BOUNDED_1'(s(bool,X657)))) ) <=> ~$spl148),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl148])])).
fof(f38696,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | s(bool,'F_0') != s(bool,X1) | s(bool,X2) = s(bool,'const.bool.BOUNDED_1'(s(bool,X3))) | s(bool,X1) = s(bool,X2)) ) | ($spl0 | $spl134)),
  inference(condensation,[],[f38695])).
fof(f38695,plain,(
  ( ! [X1035,X1037,X1034,X1038,X1036] : (s(bool,'F_0') != s(bool,X1034) | s(bool,X1035) = s(bool,X1036) | s(bool,'F_0') = s(bool,X1036) | s(bool,X1037) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1038))) | s(bool,X1034) = s(bool,X1037)) ) | ($spl0 | $spl134)),
  inference(subsumption_resolution,[],[f36627,f25785])).
fof(f36627,plain,(
  ( ! [X1035,X1037,X1034,X1038,X1036] : (s(bool,'F_0') != s(bool,X1034) | s(bool,X1035) = s(bool,X1036) | s(bool,'F_0') = s(bool,X1036) | s(bool,X1035) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1034))) | s(bool,X1037) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1038))) | s(bool,X1034) = s(bool,X1037)) ) | $spl0),
  inference(superposition,[],[f25822,f34447])).
fof(f25822,plain,(
  ( ! [X14,X12,X13] : (s(bool,'F_0') != s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,'F_0') = s(bool,X14) | s(bool,X12) = s(bool,X13)) ) | $spl0),
  inference(subsumption_resolution,[],[f23732,f660])).
fof(f23732,plain,(
  ( ! [X14,X12,X13] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X12) | s(bool,X13) = s(bool,X14) | s(bool,'F_0') = s(bool,X14) | s(bool,X12) = s(bool,X13)) ) | $spl0),
  inference(superposition,[],[f675,f14262])).
fof(f38644,plain,(
  ( ! [X728,X726,X725,X727] : (s(bool,'F_0') != s(bool,X725) | s(bool,X726) = s(bool,'const.bool.BOUNDED_1'(s(bool,X726))) | s(bool,X727) = s(bool,'const.bool.BOUNDED_1'(s(bool,X728))) | s(bool,X725) = s(bool,X727)) ) | ($spl0 | $spl68)),
  inference(subsumption_resolution,[],[f36559,f15916])).
fof(f36559,plain,(
  ( ! [X728,X726,X725,X727] : (s(bool,'F_0') != s(bool,X725) | s(bool,X726) = s(bool,'const.bool.BOUNDED_1'(s(bool,X726))) | s(bool,X726) = s(bool,'const.bool.BOUNDED_1'(s(bool,X725))) | s(bool,X727) = s(bool,'const.bool.BOUNDED_1'(s(bool,X728))) | s(bool,X725) = s(bool,X727)) ) | $spl0),
  inference(superposition,[],[f9594,f34447])).
fof(f9594,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,X8) | s(bool,X9) = s(bool,'const.bool.BOUNDED_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f9021,f660])).
fof(f9021,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X8) | s(bool,X9) = s(bool,'const.bool.BOUNDED_1'(s(bool,X9))) | s(bool,X8) = s(bool,X9)) )),
  inference(superposition,[],[f675,f3313])).
fof(f38636,plain,(
  ( ! [X656,X654,X657,X655] : (s(bool,'F_0') != s(bool,X654) | s(bool,'T_0') = s(bool,X655) | s(bool,X656) = s(bool,'const.bool.BOUNDED_1'(s(bool,X657))) | s(bool,X654) = s(bool,X656)) ) | $spl0),
  inference(subsumption_resolution,[],[f36544,f15914])).
fof(f36544,plain,(
  ( ! [X656,X654,X657,X655] : (s(bool,'F_0') != s(bool,X654) | s(bool,X655) = s(bool,'const.bool.BOUNDED_1'(s(bool,X654))) | s(bool,'T_0') = s(bool,X655) | s(bool,X656) = s(bool,'const.bool.BOUNDED_1'(s(bool,X657))) | s(bool,X654) = s(bool,X656)) ) | $spl0),
  inference(superposition,[],[f4431,f34447])).
fof(f4431,plain,(
  ( ! [X8,X9] : (s(bool,'F_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(subsumption_resolution,[],[f3448,f660])).
fof(f3448,plain,(
  ( ! [X8,X9] : (~p(s(bool,'T_0')) | s(bool,'F_0') != s(bool,X8) | s(bool,X8) = s(bool,X9) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f675,f1649])).
fof(f38062,plain,(
  ( ! [X39,X41,X42] : (s(bool,X41) = s(bool,'const.bool.BOUNDED_1'(s(bool,X42))) | s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X39) = s(bool,X41)) ) | $spl146),
  inference(cnf_transformation,[],[f38062_D])).
fof(f38062_D,plain,(
  ( ! [X39,X41,X42] : (s(bool,X41) = s(bool,'const.bool.BOUNDED_1'(s(bool,X42))) | s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X39) = s(bool,X41)) ) <=> ~$spl146),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl146])])).
fof(f38091,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,X47) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X48) = s(bool,'const.bool.BOUNDED_1'(s(bool,X49))) | s(bool,X47) = s(bool,X48) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(subsumption_resolution,[],[f35629,f15914])).
fof(f35629,plain,(
  ( ! [X47,X50,X48,X49] : (s(bool,X47) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X48) = s(bool,'const.bool.BOUNDED_1'(s(bool,X49))) | s(bool,X47) = s(bool,X48) | s(bool,X50) = s(bool,'const.bool.BOUNDED_1'(s(bool,X47))) | s(bool,'T_0') = s(bool,X50)) ) | $spl0),
  inference(superposition,[],[f34447,f11848])).
fof(f38017,plain,(
  ( ! [X198,X200,X197,X201] : (s(bool,X197) = s(bool,'const.bool.BOUNDED_1'(s(bool,X198))) | s(bool,X197) = s(bool,X200) | s(bool,X200) = s(bool,'const.bool.BOUNDED_1'(s(bool,X201)))) ) | $spl144),
  inference(cnf_transformation,[],[f38017_D])).
fof(f38017_D,plain,(
  ( ! [X198,X200,X197,X201] : (s(bool,X197) = s(bool,'const.bool.BOUNDED_1'(s(bool,X198))) | s(bool,X197) = s(bool,X200) | s(bool,X200) = s(bool,'const.bool.BOUNDED_1'(s(bool,X201)))) ) <=> ~$spl144),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl144])])).
fof(f37907,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,X131) = s(bool,'const.bool.BOUNDED_1'(s(bool,X131))) | s(bool,X132) = s(bool,'const.bool.BOUNDED_1'(s(bool,X133))) | s(bool,X130) = s(bool,X132) | s(bool,X130) = s(bool,'const.bool.BOUNDED_1'(s(bool,X134)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f35593])).
fof(f35593,plain,(
  ( ! [X134,X132,X130,X133,X131] : (s(bool,X131) = s(bool,'const.bool.BOUNDED_1'(s(bool,X131))) | s(bool,X132) = s(bool,'const.bool.BOUNDED_1'(s(bool,X133))) | s(bool,X130) = s(bool,X132) | s(bool,X130) = s(bool,'const.bool.BOUNDED_1'(s(bool,X134))) | s(bool,X131) = s(bool,'const.bool.BOUNDED_1'(s(bool,X131)))) ) | $spl0),
  inference(superposition,[],[f34447,f34447])).
fof(f38061,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X40) = s(bool,'const.bool.BOUNDED_1'(s(bool,X40))) | s(bool,X41) = s(bool,'const.bool.BOUNDED_1'(s(bool,X42))) | s(bool,X39) = s(bool,X41) | s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(subsumption_resolution,[],[f35573,f9546])).
fof(f35573,plain,(
  ( ! [X39,X41,X42,X40] : (s(bool,X40) = s(bool,'const.bool.BOUNDED_1'(s(bool,X40))) | s(bool,X41) = s(bool,'const.bool.BOUNDED_1'(s(bool,X42))) | s(bool,X39) = s(bool,X41) | s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X40)) ) | $spl0),
  inference(superposition,[],[f34447,f11848])).
fof(f38016,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s(bool,X197) = s(bool,'const.bool.BOUNDED_1'(s(bool,X198))) | s(bool,X199) = s(bool,'const.bool.BOUNDED_1'(s(bool,X199))) | s(bool,X200) = s(bool,'const.bool.BOUNDED_1'(s(bool,X201))) | s(bool,X197) = s(bool,X200)) ) | ($spl0 | $spl68)),
  inference(subsumption_resolution,[],[f35466,f15916])).
fof(f35466,plain,(
  ( ! [X198,X200,X199,X197,X201] : (s(bool,X197) = s(bool,'const.bool.BOUNDED_1'(s(bool,X198))) | s(bool,X199) = s(bool,'const.bool.BOUNDED_1'(s(bool,X199))) | s(bool,X199) = s(bool,'const.bool.BOUNDED_1'(s(bool,X197))) | s(bool,X200) = s(bool,'const.bool.BOUNDED_1'(s(bool,X201))) | s(bool,X197) = s(bool,X200)) ) | $spl0),
  inference(superposition,[],[f34447,f34447])).
fof(f34402,plain,(
  ( ! [X123,X124,X122] : (s(bool,X123) = s(bool,'const.bool.BOUNDED_1'(s(bool,X122))) | s(bool,X123) = s(bool,X124) | s(bool,X124) = s(bool,'const.bool.BOUNDED_1'(s(bool,X124)))) ) | $spl142),
  inference(cnf_transformation,[],[f34402_D])).
fof(f34402_D,plain,(
  ( ! [X123,X124,X122] : (s(bool,X123) = s(bool,'const.bool.BOUNDED_1'(s(bool,X122))) | s(bool,X123) = s(bool,X124) | s(bool,X124) = s(bool,'const.bool.BOUNDED_1'(s(bool,X124)))) ) <=> ~$spl142),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl142])])).
fof(f34284,plain,(
  ( ! [X140,X138,X139,X137] : (s(bool,'F_0') = s(bool,X138) | s(bool,X139) = s(bool,'const.bool.BOUNDED_1'(s(bool,X137))) | s(bool,X140) = s(bool,'const.bool.BOUNDED_1'(s(bool,X140))) | s(bool,X139) = s(bool,X140)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f30730])).
fof(f30730,plain,(
  ( ! [X140,X138,X139,X137] : (s(bool,'F_0') = s(bool,X138) | s(bool,X139) = s(bool,'const.bool.BOUNDED_1'(s(bool,X137))) | s(bool,X140) = s(bool,'const.bool.BOUNDED_1'(s(bool,X140))) | s(bool,X139) = s(bool,X140) | s(bool,'F_0') = s(bool,X138)) ) | $spl0),
  inference(superposition,[],[f15265,f15289])).
fof(f34304,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X123) = s(bool,'const.bool.BOUNDED_1'(s(bool,X122))) | s(bool,'F_0') = s(bool,X121) | s(bool,X124) = s(bool,'const.bool.BOUNDED_1'(s(bool,X124))) | s(bool,X123) = s(bool,X124)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f30649])).
fof(f30649,plain,(
  ( ! [X123,X121,X124,X122] : (s(bool,X123) = s(bool,'const.bool.BOUNDED_1'(s(bool,X122))) | s(bool,'F_0') = s(bool,X121) | s(bool,X124) = s(bool,'const.bool.BOUNDED_1'(s(bool,X124))) | s(bool,X123) = s(bool,X124) | s(bool,'F_0') = s(bool,X121)) ) | $spl0),
  inference(superposition,[],[f15265,f15289])).
fof(f28779,plain,(
  ( ! [X4,X2,X3] : (sP1('F_0',X2) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl140),
  inference(cnf_transformation,[],[f28779_D])).
fof(f28779_D,plain,(
  ( ! [X4,X2,X3] : (sP1('F_0',X2) | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) <=> ~$spl140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl140])])).
fof(f6261,plain,(
  ( ! [X9] : (p(s(bool,X9))) ) | $spl54),
  inference(cnf_transformation,[],[f6261_D])).
fof(f6261_D,plain,(
  ( ! [X9] : (p(s(bool,X9))) ) <=> ~$spl54),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl54])])).
fof(f28784,plain,(
  ( ! [X167,X169,X166,X168] : (p(s(bool,X166)) | sP1('F_0',X167) | s(bool,X168) = s(bool,X169) | s(bool,'F_0') = s(bool,X169) | s(bool,X167) = s(bool,X168)) ) | $spl0),
  inference(subsumption_resolution,[],[f28747,f673])).
fof(f28747,plain,(
  ( ! [X167,X169,X166,X168] : (p(s(bool,X166)) | sP1('F_0',X167) | s(bool,X168) = s(bool,X169) | s(bool,'F_0') = s(bool,X169) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X166)) ) | $spl0),
  inference(superposition,[],[f25827,f665])).
fof(f25827,plain,(
  ( ! [X45,X43,X44,X42] : (p(s(bool,X43)) | sP1(X43,X42) | s(bool,X44) = s(bool,X45) | s(bool,'F_0') = s(bool,X45) | s(bool,X42) = s(bool,X44)) ) | $spl0),
  inference(subsumption_resolution,[],[f23740,f660])).
fof(f23740,plain,(
  ( ! [X45,X43,X44,X42] : (~p(s(bool,'T_0')) | p(s(bool,X43)) | sP1(X43,X42) | s(bool,X44) = s(bool,X45) | s(bool,'F_0') = s(bool,X45) | s(bool,X42) = s(bool,X44)) ) | $spl0),
  inference(superposition,[],[f758,f14262])).
fof(f758,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f368])).
fof(f368,plain,(
  ! [X0,X1] : ((~sP1(X0,X1) | ((p(s(bool,X0)) | p(s(bool,X1))) & (~p(s(bool,X1)) | ~p(s(bool,X0))))) & ((~p(s(bool,X0)) & ~p(s(bool,X1))) | (p(s(bool,X1)) & p(s(bool,X0))) | sP1(X0,X1)))),
  inference(rectify,[],[f367])).
fof(f367,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1))) | sP1(X1,X0)))),
  inference(flattening,[],[f366])).
fof(f366,plain,(
  ! [X1,X0] : ((~sP1(X1,X0) | ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1))))) & (((~p(s(bool,X1)) & ~p(s(bool,X0))) | (p(s(bool,X0)) & p(s(bool,X1)))) | sP1(X1,X0)))),
  inference(nnf_transformation,[],[f223])).
fof(f223,plain,(
  ! [X1,X0] : (sP1(X1,X0) <=> ((p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X0)) | ~p(s(bool,X1)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f28783,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X1)) | sP1('F_0',X2) | s(bool,X0) = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) | ($spl0 | $spl72)),
  inference(condensation,[],[f28782])).
fof(f28782,plain,(
  ( ! [X165,X163,X161,X164,X162] : (p(s(bool,X161)) | sP1('F_0',X162) | s(bool,X163) = s(bool,X164) | s(bool,'F_0') = s(bool,X164) | s(bool,X162) = s(bool,X163) | s(bool,'F_0') = s(bool,X165)) ) | ($spl0 | $spl72)),
  inference(subsumption_resolution,[],[f28746,f10516])).
fof(f28746,plain,(
  ( ! [X165,X163,X161,X164,X162] : (p(s(bool,X161)) | sP1('F_0',X162) | s(bool,X163) = s(bool,X164) | s(bool,'F_0') = s(bool,X164) | s(bool,X162) = s(bool,X163) | s(bool,X161) = s(bool,X165) | s(bool,'F_0') = s(bool,X165)) ) | $spl0),
  inference(superposition,[],[f25827,f14261])).
fof(f28781,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X1)) | sP1('F_0',X2) | s(bool,X0) = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) | ($spl0 | $spl72)),
  inference(condensation,[],[f28780])).
fof(f28780,plain,(
  ( ! [X158,X156,X159,X157,X160] : (p(s(bool,X156)) | sP1('F_0',X157) | s(bool,X158) = s(bool,X159) | s(bool,'F_0') = s(bool,X159) | s(bool,X157) = s(bool,X158) | s(bool,'F_0') = s(bool,X160)) ) | ($spl0 | $spl72)),
  inference(subsumption_resolution,[],[f28745,f10516])).
fof(f28745,plain,(
  ( ! [X158,X156,X159,X157,X160] : (p(s(bool,X156)) | sP1('F_0',X157) | s(bool,X158) = s(bool,X159) | s(bool,'F_0') = s(bool,X159) | s(bool,X157) = s(bool,X158) | s(bool,X156) = s(bool,X160) | s(bool,'F_0') = s(bool,X160)) ) | $spl0),
  inference(superposition,[],[f25827,f14261])).
fof(f28778,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('F_0',X2) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4) | s(bool,X2) = s(bool,X3)) ) | $spl0),
  inference(condensation,[],[f28777])).
fof(f28777,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (p(s(bool,X150)) | sP1('F_0',X151) | s(bool,X152) = s(bool,X153) | s(bool,'F_0') = s(bool,X153) | s(bool,X151) = s(bool,X152) | s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) ) | $spl0),
  inference(subsumption_resolution,[],[f28744,f3311])).
fof(f3311,plain,(
  ( ! [X2,X3,X1] : (s(bool,X1) != s(bool,X2) | p(s(bool,X2)) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f673,f1649])).
fof(f28744,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (p(s(bool,X150)) | sP1('F_0',X151) | s(bool,X152) = s(bool,X153) | s(bool,'F_0') = s(bool,X153) | s(bool,X151) = s(bool,X152) | s(bool,X150) = s(bool,X154) | s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) ) | $spl0),
  inference(superposition,[],[f25827,f14262])).
fof(f28694,plain,(
  ( ! [X4,X2,X3] : (sP1(X2,'F_0') | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) | $spl138),
  inference(cnf_transformation,[],[f28694_D])).
fof(f28694_D,plain,(
  ( ! [X4,X2,X3] : (sP1(X2,'F_0') | s(bool,X2) = s(bool,X3) | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4)) ) <=> ~$spl138),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl138])])).
fof(f28699,plain,(
  ( ! [X167,X169,X166,X168] : (p(s(bool,X166)) | sP1(X167,'F_0') | s(bool,X168) = s(bool,X169) | s(bool,'F_0') = s(bool,X169) | s(bool,X167) = s(bool,X168)) ) | $spl0),
  inference(subsumption_resolution,[],[f28662,f673])).
fof(f28662,plain,(
  ( ! [X167,X169,X166,X168] : (p(s(bool,X166)) | sP1(X167,'F_0') | s(bool,X168) = s(bool,X169) | s(bool,'F_0') = s(bool,X169) | s(bool,X167) = s(bool,X168) | s(bool,'T_0') = s(bool,X166)) ) | $spl0),
  inference(superposition,[],[f25826,f665])).
fof(f25826,plain,(
  ( ! [X39,X41,X38,X40] : (p(s(bool,X39)) | sP1(X38,X39) | s(bool,X40) = s(bool,X41) | s(bool,'F_0') = s(bool,X41) | s(bool,X38) = s(bool,X40)) ) | $spl0),
  inference(subsumption_resolution,[],[f23739,f660])).
fof(f23739,plain,(
  ( ! [X39,X41,X38,X40] : (~p(s(bool,'T_0')) | p(s(bool,X39)) | sP1(X38,X39) | s(bool,X40) = s(bool,X41) | s(bool,'F_0') = s(bool,X41) | s(bool,X38) = s(bool,X40)) ) | $spl0),
  inference(superposition,[],[f755,f14262])).
fof(f755,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | sP1(X0,X1)) )),
  inference(cnf_transformation,[],[f368])).
fof(f28698,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X2,'F_0') | s(bool,X0) = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) | ($spl0 | $spl72)),
  inference(condensation,[],[f28697])).
fof(f28697,plain,(
  ( ! [X165,X163,X161,X164,X162] : (p(s(bool,X161)) | sP1(X162,'F_0') | s(bool,X163) = s(bool,X164) | s(bool,'F_0') = s(bool,X164) | s(bool,X162) = s(bool,X163) | s(bool,'F_0') = s(bool,X165)) ) | ($spl0 | $spl72)),
  inference(subsumption_resolution,[],[f28661,f10516])).
fof(f28661,plain,(
  ( ! [X165,X163,X161,X164,X162] : (p(s(bool,X161)) | sP1(X162,'F_0') | s(bool,X163) = s(bool,X164) | s(bool,'F_0') = s(bool,X164) | s(bool,X162) = s(bool,X163) | s(bool,X161) = s(bool,X165) | s(bool,'F_0') = s(bool,X165)) ) | $spl0),
  inference(superposition,[],[f25826,f14261])).
fof(f28696,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'F_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X2,'F_0') | s(bool,X0) = s(bool,X3) | s(bool,X2) = s(bool,X3)) ) | ($spl0 | $spl72)),
  inference(condensation,[],[f28695])).
fof(f28695,plain,(
  ( ! [X158,X156,X159,X157,X160] : (p(s(bool,X156)) | sP1(X157,'F_0') | s(bool,X158) = s(bool,X159) | s(bool,'F_0') = s(bool,X159) | s(bool,X157) = s(bool,X158) | s(bool,'F_0') = s(bool,X160)) ) | ($spl0 | $spl72)),
  inference(subsumption_resolution,[],[f28660,f10516])).
fof(f28660,plain,(
  ( ! [X158,X156,X159,X157,X160] : (p(s(bool,X156)) | sP1(X157,'F_0') | s(bool,X158) = s(bool,X159) | s(bool,'F_0') = s(bool,X159) | s(bool,X157) = s(bool,X158) | s(bool,X156) = s(bool,X160) | s(bool,'F_0') = s(bool,X160)) ) | $spl0),
  inference(superposition,[],[f25826,f14261])).
fof(f28693,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X2,'F_0') | s(bool,X3) = s(bool,X4) | s(bool,'F_0') = s(bool,X4) | s(bool,X2) = s(bool,X3)) ) | $spl0),
  inference(condensation,[],[f28692])).
fof(f28692,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (p(s(bool,X150)) | sP1(X151,'F_0') | s(bool,X152) = s(bool,X153) | s(bool,'F_0') = s(bool,X153) | s(bool,X151) = s(bool,X152) | s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) ) | $spl0),
  inference(subsumption_resolution,[],[f28659,f3311])).
fof(f28659,plain,(
  ( ! [X154,X152,X151,X155,X153,X150] : (p(s(bool,X150)) | sP1(X151,'F_0') | s(bool,X152) = s(bool,X153) | s(bool,'F_0') = s(bool,X153) | s(bool,X151) = s(bool,X152) | s(bool,X150) = s(bool,X154) | s(bool,X154) = s(bool,X155) | s(bool,'T_0') = s(bool,X155)) ) | $spl0),
  inference(superposition,[],[f25826,f14262])).
fof(f26117,plain,(
  ( ! [X47,X46] : (s(bool,X46) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X46) = s(bool,X47) | s(bool,'F_0') = s(bool,X47)) ) | $spl136),
  inference(cnf_transformation,[],[f26117_D])).
fof(f26117_D,plain,(
  ( ! [X47,X46] : (s(bool,X46) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X46) = s(bool,X47) | s(bool,'F_0') = s(bool,X47)) ) <=> ~$spl136),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl136])])).
fof(f26116,plain,(
  ( ! [X47,X48,X46] : (s(bool,X46) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X47) | s(bool,X46) = s(bool,X47) | s(bool,'T_0') = s(bool,X48)) ) | ($spl0 | $spl134)),
  inference(subsumption_resolution,[],[f26024,f15914])).
fof(f26024,plain,(
  ( ! [X47,X45,X48,X46] : (s(bool,X46) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X47) | s(bool,X46) = s(bool,X47) | s(bool,X48) = s(bool,'const.bool.BOUNDED_1'(s(bool,X45))) | s(bool,'T_0') = s(bool,X48)) ) | ($spl0 | $spl134)),
  inference(superposition,[],[f25785,f11848])).
fof(f25785,plain,(
  ( ! [X829,X830,X828] : (s(bool,X828) != s(bool,'const.bool.BOUNDED_1'(s(bool,X829))) | s(bool,'F_0') = s(bool,X830) | s(bool,X828) = s(bool,X830)) ) | $spl134),
  inference(cnf_transformation,[],[f25785_D])).
fof(f25785_D,plain,(
  ( ! [X829,X830,X828] : (s(bool,X828) != s(bool,'const.bool.BOUNDED_1'(s(bool,X829))) | s(bool,'F_0') = s(bool,X830) | s(bool,X828) = s(bool,X830)) ) <=> ~$spl134),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl134])])).
fof(f25786,plain,(
  ( ! [X841,X839,X842,X840] : (s(bool,X840) != s(bool,'const.bool.BOUNDED_1'(s(bool,X841))) | s(bool,X839) = s(bool,'const.bool.BOUNDED_1'(s(bool,X839))) | s(bool,X840) = s(bool,X842) | s(bool,'F_0') = s(bool,X842)) ) | ($spl0 | $spl68)),
  inference(subsumption_resolution,[],[f23411,f9546])).
fof(f23411,plain,(
  ( ! [X841,X839,X842,X840] : (s(bool,X840) != s(bool,'const.bool.BOUNDED_1'(s(bool,X841))) | s(bool,X839) = s(bool,'const.bool.BOUNDED_1'(s(bool,X839))) | s(bool,X840) = s(bool,X842) | s(bool,'F_0') = s(bool,X842) | s(bool,'T_0') = s(bool,X839)) ) | ($spl0 | $spl68)),
  inference(superposition,[],[f15916,f14262])).
fof(f24404,plain,(
  ( ! [X829,X830,X828,X827] : (s(bool,X828) != s(bool,'const.bool.BOUNDED_1'(s(bool,X829))) | s(bool,'T_0') = s(bool,X827) | s(bool,X828) = s(bool,X830) | s(bool,'F_0') = s(bool,X830)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f23408])).
fof(f23408,plain,(
  ( ! [X829,X830,X828,X827] : (s(bool,X828) != s(bool,'const.bool.BOUNDED_1'(s(bool,X829))) | s(bool,'T_0') = s(bool,X827) | s(bool,X828) = s(bool,X830) | s(bool,'F_0') = s(bool,X830) | s(bool,'T_0') = s(bool,X827)) ) | $spl0),
  inference(superposition,[],[f15914,f14262])).
fof(f25766,plain,(
  ( ! [X675,X676] : (s(bool,X675) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X676) | s(bool,X675) = s(bool,X676)) ) | $spl132),
  inference(cnf_transformation,[],[f25766_D])).
fof(f25766_D,plain,(
  ( ! [X675,X676] : (s(bool,X675) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'F_0') = s(bool,X676) | s(bool,X675) = s(bool,X676)) ) <=> ~$spl132),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl132])])).
fof(f25770,plain,(
  ( ! [X689,X687,X688] : (s(bool,X688) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X687) = s(bool,'const.bool.BOUNDED_1'(s(bool,X687))) | s(bool,X688) = s(bool,X689) | s(bool,'F_0') = s(bool,X689)) ) | ($spl0 | $spl68)),
  inference(subsumption_resolution,[],[f23375,f9546])).
fof(f23375,plain,(
  ( ! [X689,X687,X688] : (s(bool,X688) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X687) = s(bool,'const.bool.BOUNDED_1'(s(bool,X687))) | s(bool,X688) = s(bool,X689) | s(bool,'F_0') = s(bool,X689) | s(bool,'T_0') = s(bool,X687)) ) | ($spl0 | $spl68)),
  inference(superposition,[],[f9755,f14262])).
fof(f24414,plain,(
  ( ! [X675,X676,X674] : (s(bool,X675) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X674) | s(bool,X675) = s(bool,X676) | s(bool,'F_0') = s(bool,X676)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f23371])).
fof(f23371,plain,(
  ( ! [X675,X676,X674] : (s(bool,X675) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X674) | s(bool,X675) = s(bool,X676) | s(bool,'F_0') = s(bool,X676) | s(bool,'T_0') = s(bool,X674)) ) | $spl0),
  inference(superposition,[],[f9229,f14262])).
fof(f17871,plain,(
  $false | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17713,f17316])).
fof(f17713,plain,(
  p(s(bool,'F_0')) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f11393])).
fof(f11393,plain,(
  ( ! [X0] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0'))))) )),
  inference(unit_resulting_resolution,[],[f11392,f1120])).
fof(f1120,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X2,X1) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f554])).
fof(f554,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | sP52(X0,X2,X1)) & (~sP52(X0,X2,X1) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(nnf_transformation,[],[f284])).
fof(f284,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> sP52(X0,X2,X1))),
  inference(definition_folding,[],[f144,f283])).
fof(f283,plain,(
  ! [X0,X2,X1] : (sP52(X0,X2,X1) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)) | ? [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) & p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) & p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP52])])).
fof(f144,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)) | ? [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) & p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) & p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))))),
  inference(rectify,[],[f32])).
fof(f32,axiom,(
  ! [X42,X43,X44] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44)))) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44)) | ? [X23,X34,X35,X22,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.exhSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) & p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42),s('type.conSem.v',X34),s('type.exhSem.v',X35)))) & p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.dec_to_exhProof.v_rel_cases|split|2')).
fof(f11392,plain,(
  ( ! [X0] : (sP52(X0,'const.list.NIL_0','const.list.NIL_0')) )),
  inference(equality_resolution,[],[f11391])).
fof(f11391,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) | sP52(X0,'const.list.NIL_0',X1)) )),
  inference(equality_resolution,[],[f1117])).
fof(f1117,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) | sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)) )),
  inference(cnf_transformation,[],[f553])).
fof(f553,plain,(
  ! [X0,X1,X2] : ((~sP52(X0,X1,X2) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK378(X2,X1,X0)),s('type.conSem.v',sK379(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK381(X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK378(X2,X1,X0)),s('type.exhSem.v',sK380(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK382(X2,X1,X0)))) & p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',sK379(X2,X1,X0)),s('type.exhSem.v',sK380(X2,X1,X0))))) & p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK381(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK382(X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1)) & ! [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))) | sP52(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK378,sK379,sK380,sK381,sK382])],[f552])).
fof(f552,plain,(
  ! [X0,X1,X2] : ((~sP52(X0,X1,X2) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1)) | ? [X8,X9,X10,X11,X12] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.exhSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12))) & p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X9),s('type.exhSem.v',X10)))) & p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X11),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1)) & ! [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))) | sP52(X0,X1,X2)))),
  inference(rectify,[],[f551])).
fof(f551,plain,(
  ! [X0,X2,X1] : ((~sP52(X0,X2,X1) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)) | ? [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) & p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) & p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)) & ! [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))) | sP52(X0,X2,X1)))),
  inference(flattening,[],[f550])).
fof(f550,plain,(
  ! [X0,X2,X1] : ((~sP52(X0,X2,X1) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)) | ? [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) & p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) & p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)) & ! [X3,X4,X5,X6,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))) | sP52(X0,X2,X1)))),
  inference(nnf_transformation,[],[f283])).
fof(f17325,plain,(
  ( ! [X2] : (s(bool,'F_0') = s(bool,X2)) ) | ($spl124 | $spl128)),
  inference(global_subsumption,[],[f17324,f659,f658,f660,f663,f665,f674,f673,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f783,f804,f824,f823,f822,f821,f840,f835,f834,f833,f832,f850,f845,f844,f843,f842,f853,f852,f857,f856,f861,f860,f866,f865,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f890,f889,f894,f893,f898,f897,f903,f902,f909,f908,f907,f917,f916,f915,f914,f934,f929,f928,f927,f926,f944,f939,f938,f937,f936,f947,f946,f951,f950,f955,f954,f960,f959,f966,f965,f964,f980,f979,f978,f977,f996,f991,f990,f989,f988,f1006,f1001,f1000,f999,f998,f1009,f1008,f1013,f1012,f1017,f1016,f1022,f1021,f1042,f1037,f1036,f1035,f1034,f1049,f1048,f1047,f1046,f1066,f1061,f1060,f1059,f1058,f1076,f1071,f1070,f1069,f1068,f1079,f1078,f1083,f1082,f1087,f1086,f1092,f1091,f1098,f1097,f1096,f1117,f1112,f1111,f1110,f1109,f1124,f1123,f1122,f1121,f1140,f1135,f1134,f1133,f1132,f1150,f1145,f1144,f1143,f1142,f1153,f1152,f1157,f1156,f1161,f1160,f1166,f1165,f1186,f1181,f1180,f1179,f1178,f1193,f1192,f1191,f1190,f1210,f1205,f1204,f1203,f1202,f1220,f1215,f1214,f1213,f1212,f1223,f1222,f1227,f1226,f1231,f1230,f1236,f1235,f1242,f1241,f1240,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2716,f3005,f3071,f3074,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f664,f2041,f2040,f2027,f2026,f676,f675,f662,f6041,f6038,f6037,f6034,f6031,f6030,f6029,f6028,f6026,f6024,f6022,f6021,f6020,f6019,f6015,f6014,f6006,f6005,f6001,f6000,f5995,f5974,f5973,f5972,f5966,f5960,f5959,f5954,f5943,f5936,f5934,f5933,f5929,f5928,f5927,f5926,f5923,f5921,f5916,f5915,f5911,f5910,f5905,f5892,f5891,f5890,f5889,f5887,f5885,f5884,f5883,f5882,f5881,f5877,f5876,f5870,f5866,f5865,f5853,f5851,f5850,f5847,f5846,f5845,f5844,f5842,f5841,f5840,f5839,f5838,f6213,f6259,f6262,f6263,f6264,f4462,f7593,f7595,f7596,f7597,f7700,f7699,f7698,f7701,f7703,f7705,f7708,f7710,f7749,f7752,f7757,f7765,f7764,f7763,f7766,f7768,f7770,f7773,f7775,f7857,f7855,f7853,f7868,f7870,f7872,f7875,f7877,f7948,f7968,f8066,f8065,f8064,f8086,f8085,f8084,f8132,f8131,f8130,f9434,f9419,f9407,f9402,f8251,f8252,f9393,f9392,f9465,f8623,f8626,f8629,f9372,f9546,f9551,f8847,f8848,f8849,f8850,f9594,f9657,f9662,f9194,f9197,f9200,f9215,f9229,f9696,f9699,f9701,f9703,f9747,f9721,f9722,f9762,f9834,f9837,f9839,f9841,f10091,f10092,f10106,f10032,f10214,f10234,f10358,f10453,f10454,f10515,f10546,f10547,f10662,f10921,f10916,f10911,f10875,f10872,f10871,f10868,f10865,f10864,f10863,f10862,f10860,f10858,f10856,f10855,f10854,f10853,f10847,f10839,f10838,f10833,f10832,f10805,f10804,f10803,f10797,f10791,f10790,f10785,f10774,f10767,f10765,f10764,f10760,f10759,f10758,f10757,f10754,f10752,f10747,f10746,f10742,f10741,f10736,f10723,f10722,f10721,f10720,f10718,f10716,f10715,f10714,f10713,f10712,f10708,f10707,f10701,f10697,f10696,f10684,f10682,f10681,f10678,f10677,f10676,f10675,f10673,f10672,f10671,f10670,f10669,f10664,f11024,f11031,f11058,f11057,f11114,f11116,f11117,f11118,f11121,f11123,f11138,f11135,f11155,f11165,f11182,f11391,f11392,f11394,f11395,f11424,f11458,f11579,f11580,f11581,f11584,f11586,f11587,f11588,f11590,f11626,f11611,f11711,f11724,f11851,f11852,f14174,f14245,f15062,f15131,f15212,f15231,f874,f1114,f1113,f1030,f1167,f1162,f1023,f1018,f867,f862,f11393,f8031,f1174,f1120,f1119,f1118,f1116,f1115,f815,f805,f793,f790,f1041,f1040,f910,f895,f891,f11459,f10537,f737,f736,f4464,f1105,f1045,f1044,f911,f896,f892,f1185,f1184,f1039,f1038,f4463,f1043,f973,f913,f912,f810,f813,f802,f798,f781,f778,f1238,f1233,f1094,f1089,f962,f957,f900,f905,f1147,f1146,f1137,f1136,f1125,f1003,f1002,f993,f992,f981,f847,f846,f837,f836,f825,f1131,f1130,f1129,f1128,f1127,f1126,f987,f986,f985,f984,f983,f982,f870,f831,f830,f829,f828,f827,f826,f877,f1217,f1216,f1209,f1208,f1194,f1073,f1072,f1065,f1064,f1050,f941,f940,f933,f932,f918,f814,f811,f774,f772,f792,f779,f799,f782,f803,f807,f795,f785,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f969,f925,f924,f923,f922,f921,f920,f919,f768,f976,f1243,f1237,f1232,f1228,f1224,f1219,f1218,f1207,f1206,f1099,f1093,f1088,f1084,f1080,f1075,f1074,f1063,f1062,f971,f972,f970,f967,f961,f956,f952,f948,f943,f942,f931,f930,f816,f809,f806,f801,f797,f794,f791,f784,f780,f777,f775,f771,f773,f812,f776,f817,f818,f789,f788,f787,f786,f974,f1106,f975,f1107,f1239,f1234,f1211,f1095,f1090,f1067,f963,f958,f935,f1244,f1229,f1225,f1221,f1104,f1103,f1102,f1101,f1100,f1085,f1081,f1077,f968,f953,f949,f945,f819,f769,f1108,f1158,f1154,f1149,f1148,f1014,f1010,f1005,f1004,f871,f858,f854,f849,f848,f875,f1031,f1175,f1159,f1155,f1151,f1027,f1026,f1015,f1011,f1007,f859,f855,f851,f1033,f1177,f1176,f1032,f876,f1168,f1163,f1139,f1138,f1029,f1028,f1024,f1019,f995,f994,f872,f873,f868,f863,f839,f838,f1173,f1172,f1171,f1170,f1169,f1164,f1141,f1025,f1020,f997,f869,f864,f841,f2948,f2684,f3583,f3582,f2951,f2690,f10452,f10423,f10421,f10405,f10396,f10395,f10394,f10270,f10269,f10268,f10237,f10236,f10235,f10174,f10173,f10172,f8422,f8183,f8181,f8179,f3442,f3441,f3166,f3165,f2949,f2685,f10426,f10287,f10254,f10191,f9842,f9828,f9704,f9690,f8189,f4461,f717,f716,f715,f714,f712,f709,f707,f706,f704,f700,f699,f808,f800,f796,f1183,f1182,f904,f899,f11249,f1362,f1361,f1352,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1189,f1188,f1187,f906,f901,f820,f770,f11131,f11129,f11126,f11125,f11124,f17316])).
fof(f11124,plain,(
  ( ! [X2,X0,X1] : (s(bool,'F_0') != s(bool,f(s(X0,sK90(X1,X2,bool,X0)))) | s(fun(X0,bool),X1) = s(fun(X0,bool),X2) | s(bool,'T_0') = s(bool,g(s(X0,sK90(X1,X2,bool,X0))))) )),
  inference(superposition,[],[f764,f665])).
fof(f11125,plain,(
  ( ! [X6,X4,X5,X3] : (s(bool,'T_0') != s(bool,f(s(X3,sK90(X4,X5,bool,X3)))) | s(fun(X3,bool),X4) = s(fun(X3,bool),X5) | s(bool,X6) = s(bool,g(s(X3,sK90(X4,X5,bool,X3)))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f764,f1649])).
fof(f11126,plain,(
  ( ! [X10,X8,X7,X9] : (s(bool,X10) != s(bool,f(s(X7,sK90(X8,X9,bool,X7)))) | s(fun(X7,bool),X8) = s(fun(X7,bool),X9) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,g(s(X7,sK90(X8,X9,bool,X7))))) )),
  inference(superposition,[],[f764,f1649])).
fof(f11129,plain,(
  ( ! [X21,X19,X22,X20] : (s(bool,'T_0') != s(bool,f(s(X19,sK90(X20,X21,bool,X19)))) | s(fun(X19,bool),X20) = s(fun(X19,bool),X21) | s(bool,X22) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22))) | s(bool,X22) = s(bool,g(s(X19,sK90(X20,X21,bool,X19))))) )),
  inference(superposition,[],[f764,f3313])).
fof(f11131,plain,(
  ( ! [X30,X28,X29,X27] : (s(bool,X30) != s(bool,f(s(X27,sK90(X28,X29,bool,X27)))) | s(fun(X27,bool),X28) = s(fun(X27,bool),X29) | s(bool,X30) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,'T_0') = s(bool,g(s(X27,sK90(X28,X29,bool,X27))))) )),
  inference(superposition,[],[f764,f3313])).
fof(f770,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | ~sP7(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f374])).
fof(f374,plain,(
  ! [X0,X1,X2] : (~sP7(X0,X1,X2) | (! [X9,X10,X11] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11))))) & ! [X6,X7,X8] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) & ! [X3,X4,X5] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))))))),
  inference(rectify,[],[f373])).
fof(f373,plain,(
  ! [X2,X1,X0] : (~sP7(X2,X1,X0) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(nnf_transformation,[],[f230])).
fof(f230,plain,(
  ! [X2,X1,X0] : (~sP7(X2,X1,X0) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP7])])).
fof(f820,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | sP9(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK180(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK179(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK177(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK178(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK178(X2,X1,X0))))))) | sP12(X0,X2) | sP11(X0,X2) | sP10(X0,X1) | sP13(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK175(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK176(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK176(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f414])).
fof(f414,plain,(
  ! [X0,X1,X2] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK175(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK176(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK176(X2,X1,X0))))))) | sP13(X0,X1) | sP10(X0,X1) | sP11(X0,X2) | sP12(X0,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK177(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK178(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK178(X2,X1,X0))))))) | sP14(X0,X1) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK179(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP8(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK180(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP9(X2,X0) | (! [X9,X10,X11] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11))))) & ! [X6,X7,X8] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) & ! [X3,X4,X5] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK175,sK176,sK177,sK178,sK179,sK180])],[f413])).
fof(f413,plain,(
  ! [X0,X1,X2] : (? [X16,X17] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X17))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X17)))))) | sP13(X0,X1) | sP10(X0,X1) | sP11(X0,X2) | sP12(X0,X2) | ? [X14,X15] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X15))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X15)))))) | sP14(X0,X1) | ? [X13] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP8(X1,X0) | ? [X12] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP9(X2,X0) | (! [X9,X10,X11] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11))))) & ! [X6,X7,X8] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) & ! [X3,X4,X5] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))))))),
  inference(rectify,[],[f239])).
fof(f239,plain,(
  ! [X0,X1,X2] : (? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | sP13(X0,X1) | sP10(X0,X1) | sP11(X0,X2) | sP12(X0,X2) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | sP14(X0,X1) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP8(X1,X0) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP9(X2,X0) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(definition_folding,[],[f197,f238,f237,f236,f235,f234,f233,f232])).
fof(f232,plain,(
  ! [X1,X0] : (~sP8(X1,X0) | ? [X10,X11,X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP8])])).
fof(f233,plain,(
  ! [X2,X0] : (~sP9(X2,X0) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP9])])).
fof(f234,plain,(
  ! [X0,X1] : (~sP10(X0,X1) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP10])])).
fof(f235,plain,(
  ! [X0,X2] : (~sP11(X0,X2) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP11])])).
fof(f236,plain,(
  ! [X0,X2] : (~sP12(X0,X2) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP12])])).
fof(f237,plain,(
  ! [X0,X1] : (~sP13(X0,X1) | ? [X43,X44,X45] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP13])])).
fof(f238,plain,(
  ! [X0,X1] : (~sP14(X0,X1) | ? [X16,X17,X18] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP14])])).
fof(f197,plain,(
  ! [X0,X1,X2] : (? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ? [X10,X11,X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(flattening,[],[f196])).
fof(f196,plain,(
  ! [X0,X1,X2] : ((? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | ? [X37,X38,X39,X40,X41,X42] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ? [X10,X11,X12,X13,X14] : ((p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(ennf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1,X2] : ((! [X46,X47] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) & ! [X43,X44,X45] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) & ! [X37,X38,X39,X40,X41,X42] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) & ! [X29,X30,X31,X32,X33,X34,X35,X36] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) & ! [X21,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) & ! [X16,X17,X18] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) & ! [X15] : p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) & ! [X10,X11,X12,X13,X14] : ((p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) & ! [X9] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) & ! [X3,X4,X5,X6,X7,X8] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) => (! [X54,X55,X56] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X10,X11,X12] : ((! [X6,X16] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))))) & ! [X6,X17,X18] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))))))) & ! [X6,X19,X20,X21,X17,X18] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))))))) & ! [X6,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))))))) & ! [X6,X22,X29,X23,X26,X25,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))))))) & ! [X6,X30] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))))) & ! [X6,X17,X18] : ((p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) & ! [X6] : p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) & ! [X6,X34,X17,X35,X18] : ((p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X34),s('type.conSem.v',X35)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X34))),s('type.conSem.v',X35)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X34),s('type.list.list'('type.modSem.v'),X17))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X35),s('type.list.list'('type.conSem.v'),X18))))))) & ! [X6] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) & ! [X6,X23,X34,X22,X7,X35] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X34),s('type.conSem.v',X35)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X34))),s('type.conSem.v',X35))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) => (! [X13,X14,X15] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.modSem.v',X14),s('type.conSem.v',X15)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v',X14))),s('type.conSem.v',X15))))) & ! [X31,X32,X33] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31),s('type.list.list'('type.modSem.v'),X32),s('type.list.list'('type.conSem.v'),X33)))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31))),s('type.list.list'('type.modSem.v'),X32))),s('type.list.list'('type.conSem.v'),X33))))) & ! [X42,X43,X44] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_strongind')).
fof(f901,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP24(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) )),
  inference(cnf_transformation,[],[f453])).
fof(f453,plain,(
  ! [X0,X1,X2] : ((~sP24(X0,X1,X2) | (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK228(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK225(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK226(X2,X1,X0)),s('type.list.list'('type.string.char'),sK227(X2,X1,X0)))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK229(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK231(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK226(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK227(X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK225(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK229(X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK228(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK230(X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK231(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP24(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK225,sK226,sK227,sK228,sK229,sK230,sK231])],[f452])).
fof(f452,plain,(
  ! [X0,X1,X2] : ((~sP24(X0,X1,X2) | ? [X10,X11,X12,X13,X14,X15,X16] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X11),s('type.list.list'('type.string.char'),X12))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X16),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X11))),s('type.list.list'('type.string.char'),X12))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X15),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP24(X0,X1,X2)))),
  inference(rectify,[],[f451])).
fof(f451,plain,(
  ! [X0,X2,X1] : ((~sP24(X0,X2,X1) | ? [X6,X7,X8,X9,X10,X11,X12] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.list.list'('type.string.char'),X8))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.string.char'),X8))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X6,X7,X8,X9,X10,X11,X12] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.list.list'('type.string.char'),X8))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.string.char'),X8))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP24(X0,X2,X1)))),
  inference(nnf_transformation,[],[f250])).
fof(f250,plain,(
  ! [X0,X2,X1] : (sP24(X0,X2,X1) <=> ? [X6,X7,X8,X9,X10,X11,X12] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.list.list'('type.string.char'),X8))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.string.char'),X8))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP24])])).
fof(f906,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP23(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))) )),
  inference(cnf_transformation,[],[f456])).
fof(f456,plain,(
  ! [X0,X1,X2] : ((~sP23(X0,X1,X2) | (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK236(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK232(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK233(X2,X1,X0)),s('type.modLang.exp',sK234(X2,X1,X0)))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK235(X2,X1,X0)),s('type.list.list'('type.string.char'),sK233(X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK238(X2,X1,X0)),s('type.modLang.exp',sK234(X2,X1,X0)))))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK232(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK235(X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK236(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK237(X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK238(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP23(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK232,sK233,sK234,sK235,sK236,sK237,sK238])],[f455])).
fof(f455,plain,(
  ! [X0,X1,X2] : ((~sP23(X0,X1,X2) | ? [X10,X11,X12,X13,X14,X15,X16] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10))),s('type.list.list'('type.string.char'),X11),s('type.modLang.exp',X12))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13),s('type.list.list'('type.string.char'),X11),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X16),s('type.modLang.exp',X12))))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X15),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X16),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X3,X4,X5,X6,X7,X8,X9] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP23(X0,X1,X2)))),
  inference(rectify,[],[f454])).
fof(f454,plain,(
  ! [X0,X2,X1] : ((~sP23(X0,X2,X1) | ? [X13,X14,X15,X16,X17,X18,X19] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13))),s('type.list.list'('type.string.char'),X14),s('type.modLang.exp',X15))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16),s('type.list.list'('type.string.char'),X14),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X19),s('type.modLang.exp',X15))))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X18),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X13,X14,X15,X16,X17,X18,X19] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13))),s('type.list.list'('type.string.char'),X14),s('type.modLang.exp',X15))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16),s('type.list.list'('type.string.char'),X14),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X19),s('type.modLang.exp',X15))))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X18),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP23(X0,X2,X1)))),
  inference(nnf_transformation,[],[f249])).
fof(f249,plain,(
  ! [X0,X2,X1] : (sP23(X0,X2,X1) <=> ? [X13,X14,X15,X16,X17,X18,X19] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13))),s('type.list.list'('type.string.char'),X14),s('type.modLang.exp',X15))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16),s('type.list.list'('type.string.char'),X14),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X19),s('type.modLang.exp',X15))))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X18),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP23])])).
fof(f1187,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP60(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5)))) )),
  inference(cnf_transformation,[],[f584])).
fof(f1189,plain,(
  ( ! [X2,X0,X1] : (~sP60(X0,X2,X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f585])).
fof(f1245,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | sP67(X12,sK466(X14,X13,X12,X2,X1,X0),X14,sK468(X14,X13,X12,X2,X1,X0),sK467(X14,X13,X12,X2,X1,X0)) | sP66(X13,sK463(X14,X13,X12,X2,X1,X0),X12,sK465(X14,X13,X12,X2,X1,X0),sK464(X14,X13,X12,X2,X1,X0)) | sP68(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f614])).
fof(f614,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X12,X13,X14] : (sP68(X12,X13,X14) | (sP66(X13,sK463(X14,X13,X12,X2,X1,X0),X12,sK465(X14,X13,X12,X2,X1,X0),sK464(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK463(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK464(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK465(X14,X13,X12,X2,X1,X0)))))) | (sP67(X12,sK466(X14,X13,X12,X2,X1,X0),X14,sK468(X14,X13,X12,X2,X1,X0),sK467(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK466(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK467(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK468(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & ((~sP68(sK469(X2,X1,X0),sK470(X2,X1,X0),sK471(X2,X1,X0)) & ! [X9,X10,X11] : (~sP66(sK470(X2,X1,X0),X9,sK469(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK470(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP67(sK469(X2,X1,X0),X6,sK471(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK471(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK471(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK463,sK464,sK465,sK466,sK467,sK468,sK469,sK470,sK471])],[f613])).
fof(f613,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X12,X13,X14] : (sP68(X12,X13,X14) | ? [X18,X19,X20] : (sP66(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP67(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP68(X3,X4,X5) & ! [X9,X10,X11] : (~sP66(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP67(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(rectify,[],[f612])).
fof(f612,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ! [X3,X4,X5] : (sP68(X3,X4,X5) | ? [X14,X15,X16] : (sP66(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP67(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP68(X3,X4,X5) & ! [X14,X15,X16] : (~sP66(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP67(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(nnf_transformation,[],[f303])).
fof(f303,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : (sP68(X3,X4,X5) | ? [X14,X15,X16] : (sP66(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP67(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(definition_folding,[],[f209,f302,f301,f300,f299,f298,f297,f296,f295])).
fof(f295,plain,(
  ! [X4,X21,X23,X22] : (sP61(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP61])])).
fof(f296,plain,(
  ! [X21,X5,X23,X22] : (sP62(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP62])])).
fof(f297,plain,(
  ! [X21,X5,X23,X22] : (sP63(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP63])])).
fof(f298,plain,(
  ! [X4,X21,X23,X22] : (sP64(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP64])])).
fof(f299,plain,(
  ! [X4,X21,X23,X22] : (sP65(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP65])])).
fof(f300,plain,(
  ! [X4,X14,X3,X16,X15] : (sP66(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP66])])).
fof(f301,plain,(
  ! [X3,X6,X5,X8,X7] : (sP67(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP67])])).
fof(f302,plain,(
  ! [X3,X4,X5] : (sP68(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP64(X4,X21,X23,X22) | sP61(X4,X21,X23,X22) | sP62(X21,X5,X23,X22) | sP63(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP65(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP68])])).
fof(f209,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(flattening,[],[f208])).
fof(f208,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(ennf_transformation,[],[f147])).
fof(f147,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9)))) <=> ! [X10,X11,X12] : ((! [X13,X14,X15] : ((? [X16] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))) | ? [X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X19,X20,X21,X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X30] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))) | ? [X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v',X14))),s('type.conSem.v',X15))))) & ! [X31,X32,X33] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X32) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X33)) | ? [X34,X17,X35,X18] : (s('type.list.list'('type.modSem.v'),X32) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X34),s('type.list.list'('type.modSem.v'),X17))) & s('type.list.list'('type.conSem.v'),X33) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X35),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31))),s('type.modSem.v',X34))),s('type.conSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31))),s('type.list.list'('type.modSem.v'),X32))),s('type.list.list'('type.conSem.v'),X33))))) & ! [X36,X37,X38] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X37) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38)) | ? [X23,X34,X22,X7,X35] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X37) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X36))),s('type.modSem.v',X34))),s('type.conSem.v',X35)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X38)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel|48|_def')).
fof(f1246,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | sP67(X12,sK466(X14,X13,X12,X2,X1,X0),X14,sK468(X14,X13,X12,X2,X1,X0),sK467(X14,X13,X12,X2,X1,X0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK463(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK464(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK465(X14,X13,X12,X2,X1,X0))))) | sP68(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f614])).
fof(f1247,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK466(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK467(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK468(X14,X13,X12,X2,X1,X0))))) | sP66(X13,sK463(X14,X13,X12,X2,X1,X0),X12,sK465(X14,X13,X12,X2,X1,X0),sK464(X14,X13,X12,X2,X1,X0)) | sP68(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f614])).
fof(f1248,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK466(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK467(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK468(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK463(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK464(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK465(X14,X13,X12,X2,X1,X0))))) | sP68(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f614])).
fof(f1249,plain,(
  ( ! [X2,X0,X1] : (~sP68(sK469(X2,X1,X0),sK470(X2,X1,X0),sK471(X2,X1,X0)) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f614])).
fof(f1250,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK470(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11)))) | ~sP66(sK470(X2,X1,X0),X9,sK469(X2,X1,X0),X11,X10)) )),
  inference(cnf_transformation,[],[f614])).
fof(f1251,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK471(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~sP67(sK469(X2,X1,X0),X6,sK471(X2,X1,X0),X8,X7)) )),
  inference(cnf_transformation,[],[f614])).
fof(f1252,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK471(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f614])).
fof(f1352,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s('type.modSem.v',X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s('type.conSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X2),s('type.conSem.v',X5)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))))) )),
  inference(cnf_transformation,[],[f216])).
fof(f216,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X2),s('type.conSem.v',X5)))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s('type.modSem.v',X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s('type.conSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))))))),
  inference(flattening,[],[f215])).
fof(f215,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X2),s('type.conSem.v',X5))))) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s('type.modSem.v',X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s('type.conSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))))))),
  inference(ennf_transformation,[],[f160])).
fof(f160,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X2),s('type.conSem.v',X5))))) => p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s('type.modSem.v',X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X1),s('type.conSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))))))),
  inference(rectify,[],[f26])).
fof(f26,axiom,(
  ! [X6,X23,X34,X22,X7,X35] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X34),s('type.conSem.v',X35))))) => p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_rules|split|10')).
fof(f1361,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.string.char'),X2),s('type.modLang.exp',X3))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X2),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.modLang.exp',X3)))))))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))))) )),
  inference(cnf_transformation,[],[f218])).
fof(f218,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.string.char'),X2),s('type.modLang.exp',X3))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X2),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.modLang.exp',X3)))))))))),
  inference(flattening,[],[f217])).
fof(f217,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.string.char'),X2),s('type.modLang.exp',X3))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X2),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.modLang.exp',X3)))))))))),
  inference(ennf_transformation,[],[f163])).
fof(f163,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) => p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.string.char'),X2),s('type.modLang.exp',X3))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X2),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.modLang.exp',X3)))))))))),
  inference(rectify,[],[f28])).
fof(f28,axiom,(
  ! [X6,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24)))))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_rules|split|3')).
fof(f1362,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2),s('type.list.list'('type.string.char'),X3))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2))),s('type.list.list'('type.string.char'),X3)))))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))))) )),
  inference(cnf_transformation,[],[f220])).
fof(f220,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2),s('type.list.list'('type.string.char'),X3))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2))),s('type.list.list'('type.string.char'),X3)))))))),
  inference(flattening,[],[f219])).
fof(f219,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2),s('type.list.list'('type.string.char'),X3))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2))),s('type.list.list'('type.string.char'),X3)))))))),
  inference(ennf_transformation,[],[f164])).
fof(f164,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) => p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2),s('type.list.list'('type.string.char'),X3))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X2))),s('type.list.list'('type.string.char'),X3)))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X6,X22,X29,X23,X26,X25,X27,X28] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_rules|split|4')).
fof(f11249,plain,(
  ( ! [X6,X4,X5,X3] : (sP60(X3,X5,X4) | s(bool,X6) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(subsumption_resolution,[],[f11241,f660])).
fof(f11241,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,'T_0')) | sP60(X3,X5,X4) | s(bool,X6) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1188,f1649])).
fof(f899,plain,(
  ( ! [X2,X0,X1] : (~sP24(X0,X1,X2) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK225(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK229(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f453])).
fof(f904,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK232(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK235(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f1182,plain,(
  ( ! [X2,X0,X1] : (~sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK423(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK424(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f584])).
fof(f1183,plain,(
  ( ! [X2,X0,X1] : (~sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK423(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK424(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f584])).
fof(f796,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK142(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK147(X1,X0)))))) )),
  inference(cnf_transformation,[],[f400])).
fof(f400,plain,(
  ! [X0,X1] : (~sP12(X0,X1) | (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK142(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK147(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK142(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK147(X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK146(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK148(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK149(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK142(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK142(X1,X0)))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK146(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK144(X1,X0)),s('type.list.list'('type.string.char'),sK145(X1,X0)))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK147(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK149(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK144(X1,X0)))),s('type.list.list'('type.string.char'),sK145(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK142,sK143,sK144,sK145,sK146,sK147,sK148,sK149])],[f399])).
fof(f399,plain,(
  ! [X0,X1] : (~sP12(X0,X1) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))))))))),
  inference(rectify,[],[f398])).
fof(f398,plain,(
  ! [X0,X2] : (~sP12(X0,X2) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))))),
  inference(nnf_transformation,[],[f236])).
fof(f800,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK150(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK151(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK154(X1,X0)))))) )),
  inference(cnf_transformation,[],[f403])).
fof(f403,plain,(
  ! [X0,X1] : (~sP11(X0,X1) | (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK150(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK151(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK154(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK150(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK151(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK154(X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK155(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK156(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK157(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK150(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK150(X1,X0)))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK155(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK151(X1,X0)))),s('type.list.list'('type.string.char'),sK152(X1,X0)),s('type.modLang.exp',sK153(X1,X0)))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK154(X1,X0)),s('type.list.list'('type.string.char'),sK152(X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK157(X1,X0)),s('type.modLang.exp',sK153(X1,X0)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK150,sK151,sK152,sK153,sK154,sK155,sK156,sK157])],[f402])).
fof(f402,plain,(
  ! [X0,X1] : (~sP11(X0,X1) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))))))))),
  inference(rectify,[],[f401])).
fof(f401,plain,(
  ! [X0,X2] : (~sP11(X0,X2) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))))),
  inference(nnf_transformation,[],[f235])).
fof(f808,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK167(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK168(X1,X0)))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f409,plain,(
  ! [X0,X1] : (~sP9(X0,X1) | (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK167(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK168(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK167(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK168(X1,X0))))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)),s('type.modSem.v',sK166(X1,X0)),s('type.conSem.v',sK169(X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)))),s('type.modSem.v',sK166(X1,X0)))),s('type.conSem.v',sK169(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK165(X1,X0)),s('type.modSem.v',sK166(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK167(X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK165(X1,X0)),s('type.conSem.v',sK169(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK168(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK164,sK165,sK166,sK167,sK168,sK169])],[f408])).
fof(f408,plain,(
  ! [X0,X1] : (~sP9(X0,X1) | ? [X2,X3,X4,X5,X6,X7] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.modSem.v',X4),s('type.conSem.v',X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X4))),s('type.conSem.v',X7)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))))))))),
  inference(rectify,[],[f407])).
fof(f407,plain,(
  ! [X2,X0] : (~sP9(X2,X0) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3),s('type.modSem.v',X5),s('type.conSem.v',X8)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))))),
  inference(nnf_transformation,[],[f233])).
fof(f699,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK82(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK81(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f337])).
fof(f337,plain,(
  ! [X0,X1,X2] : ((p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK81(X2,X1,X0))))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK81(X2,X1,X0)))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK82(X2,X1,X0))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK81,sK82])],[f336])).
fof(f336,plain,(
  ! [X0,X1,X2] : (? [X5] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))))),
  inference(rectify,[],[f178])).
fof(f178,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | ! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))))),
  inference(flattening,[],[f177])).
fof(f177,plain,(
  ! [X0,X1,X2] : (? [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) & ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) | (! [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(ennf_transformation,[],[f97])).
fof(f97,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) => p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) => (? [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) => ? [X5] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5))))))),
  inference(rectify,[],[f11])).
fof(f11,axiom,(
  ! [X48] : ! [X49,X50] : (! [X23] : (p(s(bool,happ(s(fun(X48,bool),X50),s(X48,X23)))) => p(s(bool,happ(s(fun(X48,bool),X49),s(X48,X23))))) => (? [X23] : p(s(bool,happ(s(fun(X48,bool),X50),s(X48,X23)))) => ? [X23] : p(s(bool,happ(s(fun(X48,bool),X49),s(X48,X23))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.MONO_EXISTS')).
fof(f700,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK81(X2,X1,X0))))) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK82(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f337])).
fof(f704,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK83(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f342])).
fof(f342,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK83(X2,X1,X0))))) | ! [X5] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))))) & ((~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK84(X2,X1,X0)))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK83,sK84])],[f341])).
fof(f341,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ? [X6] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6)))) | ! [X5] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f340])).
fof(f340,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,X1)) | ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))) | ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f339])).
fof(f339,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) | ? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & (? [X4] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | (p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f101])).
fof(f101,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f100])).
fof(f100,plain,(
  ! [X0] : ! [X1,X2] : ((p(s(bool,X1)) & ! [X3] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> ! [X4] : (p(s(bool,X1)) & p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f66])).
fof(f66,axiom,(
  ! [X48] : ! [X50,X49] : ((p(s(bool,X50)) & ! [X23] : p(s(bool,happ(s(fun(X48,bool),X49),s(X48,X23))))) <=> ! [X23] : (p(s(bool,X50)) & p(s(bool,happ(s(fun(X48,bool),X49),s(X48,X23))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.RIGHT_AND_FORALL_THM')).
fof(f706,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,X1)) | ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK84(X2,X1,X0))))) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f342])).
fof(f707,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) | ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK85(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f346])).
fof(f346,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK85(X2,X1,X0))))) | ~p(s(bool,X2)) | ! [X5] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & ((~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK86(X2,X1,X0))))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK85,sK86])],[f345])).
fof(f345,plain,(
  ! [X0,X1,X2] : ((? [X6] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X6)))) | ~p(s(bool,X2)) | ! [X5] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X5)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(rectify,[],[f344])).
fof(f344,plain,(
  ! [X0,X1,X2] : ((? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2)) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(flattening,[],[f343])).
fof(f343,plain,(
  ! [X0,X1,X2] : (((? [X3] : ~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2))) | ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2)))) & (? [X4] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | ~p(s(bool,X2))) | (! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2)))))),
  inference(nnf_transformation,[],[f103])).
fof(f103,plain,(
  ! [X0,X1,X2] : ((! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(flattening,[],[f102])).
fof(f102,plain,(
  ! [X0] : ! [X1,X2] : ((! [X3] : p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) & p(s(bool,X2))) <=> ! [X4] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) & p(s(bool,X2))))),
  inference(rectify,[],[f65])).
fof(f65,axiom,(
  ! [X48] : ! [X50,X49] : ((! [X23] : p(s(bool,happ(s(fun(X48,bool),X50),s(X48,X23)))) & p(s(bool,X49))) <=> ! [X23] : (p(s(bool,happ(s(fun(X48,bool),X50),s(X48,X23)))) & p(s(bool,X49))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.LEFT_AND_FORALL_THM')).
fof(f709,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK86(X2,X1,X0))))) | ~p(s(bool,X2)) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f346])).
fof(f712,plain,(
  ( ! [X2,X0,X5,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK87(X2,X1,X0))))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) )),
  inference(cnf_transformation,[],[f350])).
fof(f350,plain,(
  ! [X0,X1,X2] : (((~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK87(X2,X1,X0)))))) | p(s(bool,X1)) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ((~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK88(X2,X1,X0)))))) | ! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK87,sK88])],[f349])).
fof(f349,plain,(
  ! [X0,X1,X2] : ((? [X6] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X6))))) | p(s(bool,X1)) | ! [X5] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X5))))) & ((~p(s(bool,X1)) & ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(rectify,[],[f348])).
fof(f348,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | p(s(bool,X1)) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) & ((~p(s(bool,X1)) & ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(flattening,[],[f347])).
fof(f347,plain,(
  ! [X0,X1,X2] : ((? [X3] : (~p(s(bool,X1)) & ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) | (p(s(bool,X1)) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4)))))) & ((~p(s(bool,X1)) & ? [X4] : ~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))) | ! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3)))))))),
  inference(nnf_transformation,[],[f105])).
fof(f105,plain,(
  ! [X0,X1,X2] : (! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (p(s(bool,X1)) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(flattening,[],[f104])).
fof(f104,plain,(
  ! [X0] : ! [X1,X2] : (! [X3] : (p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) <=> (p(s(bool,X1)) | ! [X4] : p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X4))))))),
  inference(rectify,[],[f69])).
fof(f69,axiom,(
  ! [X48] : ! [X50,X49] : (! [X23] : (p(s(bool,X50)) | p(s(bool,happ(s(fun(X48,bool),X49),s(X48,X23))))) <=> (p(s(bool,X50)) | ! [X23] : p(s(bool,happ(s(fun(X48,bool),X49),s(X48,X23))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.bool.RIGHT_FORALL_OR_THM')).
fof(f714,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(X0,bool),X2),s(X0,sK88(X2,X1,X0))))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(X0,bool),X2),s(X0,X3))))) )),
  inference(cnf_transformation,[],[f350])).
fof(f715,plain,(
  ( ! [X4,X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X4)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | s(X0,X2) != s(X0,X4)) )),
  inference(cnf_transformation,[],[f353])).
fof(f717,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X2)))) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,sK89(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f353])).
fof(f4461,plain,(
  ( ! [X412,X410,X409,X411] : (p(s(bool,happ(s(fun(X409,bool),X410),s(X409,sK89(X411,X410,X409))))) | s(bool,X412) = s(bool,happ(s(fun(X409,bool),X410),s(X409,X411))) | s(bool,'T_0') = s(bool,X412)) )),
  inference(subsumption_resolution,[],[f3578,f660])).
fof(f3578,plain,(
  ( ! [X412,X410,X409,X411] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X409,bool),X410),s(X409,sK89(X411,X410,X409))))) | s(bool,X412) = s(bool,happ(s(fun(X409,bool),X410),s(X409,X411))) | s(bool,'T_0') = s(bool,X412)) )),
  inference(superposition,[],[f717,f1649])).
fof(f8189,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2)) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK83(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f8184,f660])).
fof(f8184,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X0,bool),X1),s(X0,X3)))) | ~p(s(bool,X2)) | s(bool,X4) = s(bool,happ(s(fun(X0,bool),X1),s(X0,sK83(X1,X2,X0)))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f704,f1649])).
fof(f9690,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK84(X6,X4,X5))))) | p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X7)))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f9676,f660])).
fof(f9676,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK84(X6,X4,X5))))) | p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X7)))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f706,f1649])).
fof(f9704,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,happ(s(fun(X67,bool),X68),s(X67,sK84(X68,'const.bool.BOUNDED_1'(s(bool,X66)),X67))))) | p(s(bool,happ(s(fun(X67,bool),X68),s(X67,X69))))) )),
  inference(subsumption_resolution,[],[f9689,f660])).
fof(f9689,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X67,bool),X68),s(X67,sK84(X68,'const.bool.BOUNDED_1'(s(bool,X66)),X67))))) | p(s(bool,happ(s(fun(X67,bool),X68),s(X67,X69))))) )),
  inference(superposition,[],[f706,f663])).
fof(f9828,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X7)))) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK85(X4,X6,X5))))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f9814,f660])).
fof(f9814,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X5,bool),X6),s(X5,X7)))) | ~p(s(bool,happ(s(fun(X5,bool),X6),s(X5,sK85(X4,X6,X5))))) | s(bool,X4) = s(bool,X8) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f707,f1649])).
fof(f9842,plain,(
  ( ! [X68,X66,X69,X67] : (p(s(bool,happ(s(fun(X67,bool),X68),s(X67,X69)))) | ~p(s(bool,happ(s(fun(X67,bool),X68),s(X67,sK85('const.bool.BOUNDED_1'(s(bool,X66)),X68,X67)))))) )),
  inference(subsumption_resolution,[],[f9827,f660])).
fof(f9827,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X67,bool),X68),s(X67,X69)))) | ~p(s(bool,happ(s(fun(X67,bool),X68),s(X67,sK85('const.bool.BOUNDED_1'(s(bool,X66)),X68,X67)))))) )),
  inference(superposition,[],[f707,f663])).
fof(f10191,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,X6)) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(bool,X8) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK86(X6,X5,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f10181,f660])).
fof(f10181,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | ~p(s(bool,X6)) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(bool,X8) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK86(X6,X5,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f709,f1649])).
fof(f10254,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X6)) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(bool,X8) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK87(X5,X6,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f10244,f660])).
fof(f10244,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(bool,X8) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK87(X5,X6,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f712,f1649])).
fof(f10287,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,X6)) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(bool,X8) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK88(X5,X6,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f10277,f660])).
fof(f10277,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(bool,X8) = s(bool,happ(s(fun(X4,bool),X5),s(X4,sK88(X5,X6,X4)))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f714,f1649])).
fof(f10426,plain,(
  ( ! [X6,X4,X8,X7,X5] : (p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(X4,X6) != s(X4,X7) | s(bool,X8) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f10411,f660])).
fof(f10411,plain,(
  ( ! [X6,X4,X8,X7,X5] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X4,bool),X5),s(X4,X7)))) | s(X4,X6) != s(X4,X7) | s(bool,X8) = s(bool,happ(s(fun(X4,bool),X5),s(X4,X6))) | s(bool,'T_0') = s(bool,X8)) )),
  inference(superposition,[],[f715,f1649])).
fof(f2685,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X2)))) | s(bool,'F_0') = s(bool,sK89('F_0',X3,bool)) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f716,f665])).
fof(f2949,plain,(
  ( ! [X2,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X2)))) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,sK89('F_0',X3,bool))))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f717,f665])).
fof(f3165,plain,(
  ( ! [X430,X429,X431] : (~p(s(bool,happ(s(fun(bool,bool),X431),s(bool,X430)))) | p(s(bool,happ(s(fun(bool,bool),X431),s(bool,sK89(X429,X431,bool))))) | s(bool,'T_0') = s(bool,X430) | s(bool,'T_0') = s(bool,X429)) )),
  inference(superposition,[],[f717,f1649])).
fof(f3166,plain,(
  ( ! [X432,X434,X433] : (~p(s(bool,happ(s(fun(bool,bool),X434),s(bool,X433)))) | s(bool,X432) = s(bool,sK89(X432,X434,bool)) | s(bool,'T_0') = s(bool,X433) | s(bool,'T_0') = s(bool,X432)) )),
  inference(superposition,[],[f716,f1649])).
fof(f3441,plain,(
  ( ! [X408,X407,X406] : (~p(s(bool,happ(s(fun(bool,bool),X407),s(bool,X406)))) | p(s(bool,happ(s(fun(bool,bool),X407),s(bool,sK89('T_0',X407,bool))))) | s(bool,X406) = s(bool,X408) | s(bool,'T_0') = s(bool,X408)) )),
  inference(superposition,[],[f717,f1649])).
fof(f3442,plain,(
  ( ! [X410,X409,X411] : (~p(s(bool,happ(s(fun(bool,bool),X410),s(bool,X409)))) | s(bool,'T_0') = s(bool,sK89('T_0',X410,bool)) | s(bool,X409) = s(bool,X411) | s(bool,'T_0') = s(bool,X411)) )),
  inference(superposition,[],[f716,f1649])).
fof(f8179,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | ~p(s(bool,X1)) | s(bool,X3) = s(bool,sK83(X0,X1,bool)) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f704,f1649])).
fof(f8181,plain,(
  ( ! [X10,X8,X11,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X11)))) | ~p(s(bool,X9)) | s(bool,'T_0') = s(bool,sK83(X8,X9,bool)) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f704,f1649])).
fof(f8183,plain,(
  ( ! [X17,X18,X16] : (~p(s(bool,happ(s(fun(bool,bool),X16),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X16),s(bool,X18)))) | ~p(s(bool,X17)) | s(bool,'T_0') = s(bool,sK83(X16,X17,bool))) )),
  inference(superposition,[],[f704,f665])).
fof(f8422,plain,(
  ( ! [X488,X490,X489] : (~p(s(bool,happ(s(fun(bool,bool),X489),s(bool,X488)))) | p(s(bool,happ(s(fun(bool,bool),X489),s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X488)),X489,bool))))) | s(bool,X488) = s(bool,X490) | s(bool,'T_0') = s(bool,X490)) )),
  inference(superposition,[],[f717,f3313])).
fof(f10172,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | ~p(s(bool,X0)) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK86(X0,X1,bool))) )),
  inference(superposition,[],[f709,f665])).
fof(f10173,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | ~p(s(bool,X3)) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | s(bool,X6) = s(bool,sK86(X3,X4,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f709,f1649])).
fof(f10174,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X9)))) | ~p(s(bool,X7)) | p(s(bool,happ(s(fun(bool,bool),X8),s(bool,X10)))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK86(X7,X8,bool))) )),
  inference(superposition,[],[f709,f1649])).
fof(f10235,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK87(X0,X1,bool))) )),
  inference(superposition,[],[f712,f665])).
fof(f10236,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,X6) = s(bool,sK87(X3,X4,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f712,f1649])).
fof(f10237,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X9)))) | p(s(bool,X8)) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X10)))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK87(X7,X8,bool))) )),
  inference(superposition,[],[f712,f1649])).
fof(f10268,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X0),s(bool,'F_0')))) | p(s(bool,X1)) | p(s(bool,happ(s(fun(bool,bool),X0),s(bool,X2)))) | s(bool,'T_0') = s(bool,sK88(X0,X1,bool))) )),
  inference(superposition,[],[f714,f665])).
fof(f10269,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X3),s(bool,'T_0')))) | p(s(bool,X4)) | p(s(bool,happ(s(fun(bool,bool),X3),s(bool,X5)))) | s(bool,X6) = s(bool,sK88(X3,X4,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f714,f1649])).
fof(f10270,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X9)))) | p(s(bool,X8)) | p(s(bool,happ(s(fun(bool,bool),X7),s(bool,X10)))) | s(bool,'T_0') = s(bool,X9) | s(bool,'T_0') = s(bool,sK88(X7,X8,bool))) )),
  inference(superposition,[],[f714,f1649])).
fof(f10394,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X2)))) | s(bool,X0) != s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f715,f665])).
fof(f10395,plain,(
  ( ! [X6,X4,X5,X3] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,X5)))) | s(bool,X3) != s(bool,X5) | s(bool,X3) = s(bool,X6) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f715,f1649])).
fof(f10396,plain,(
  ( ! [X10,X8,X7,X9] : (~p(s(bool,happ(s(fun(bool,bool),X9),s(bool,X8)))) | p(s(bool,happ(s(fun(bool,bool),X9),s(bool,X10)))) | s(bool,X7) != s(bool,X10) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f715,f1649])).
fof(f10405,plain,(
  ( ! [X45,X43,X44] : (~p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X43)))) | p(s(bool,happ(s(fun(bool,bool),X44),s(bool,X45)))) | s(bool,'F_0') != s(bool,X45) | s(bool,'T_0') = s(bool,X43)) )),
  inference(superposition,[],[f715,f665])).
fof(f10421,plain,(
  ( ! [X33,X31,X34,X32] : (s(bool,'T_0') = s(bool,X34) | ~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X31)))) | p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X33)))) | s(bool,'T_0') != s(bool,X33) | s(bool,X31) = s(bool,X34)) )),
  inference(forward_demodulation,[],[f10402,f663])).
fof(f10402,plain,(
  ( ! [X33,X31,X34,X32] : (~p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X31)))) | p(s(bool,happ(s(fun(bool,bool),X32),s(bool,X33)))) | s(bool,'T_0') != s(bool,X33) | s(bool,X34) = s(bool,'const.bool.BOUNDED_1'(s(bool,X34))) | s(bool,X31) = s(bool,X34)) )),
  inference(superposition,[],[f715,f3313])).
fof(f10423,plain,(
  ( ! [X50,X48,X49] : (s(bool,'T_0') != s(bool,X50) | ~p(s(bool,happ(s(fun(bool,bool),X49),s(bool,X48)))) | p(s(bool,happ(s(fun(bool,bool),X49),s(bool,X50)))) | s(bool,'F_0') = s(bool,X48)) )),
  inference(forward_demodulation,[],[f10407,f663])).
fof(f10407,plain,(
  ( ! [X50,X48,X49] : (~p(s(bool,happ(s(fun(bool,bool),X49),s(bool,X48)))) | p(s(bool,happ(s(fun(bool,bool),X49),s(bool,X50)))) | s(bool,X50) != s(bool,'const.bool.BOUNDED_1'(s(bool,X48))) | s(bool,'F_0') = s(bool,X48)) )),
  inference(superposition,[],[f715,f9657])).
fof(f10452,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X3) | ~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X2)),X1,bool)) | s(bool,X0) = s(bool,X3)) )),
  inference(forward_demodulation,[],[f10430,f663])).
fof(f10430,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X2)),X1,bool)) | s(bool,X3) = s(bool,'const.bool.BOUNDED_1'(s(bool,X3))) | s(bool,X0) = s(bool,X3)) )),
  inference(superposition,[],[f2690,f3313])).
fof(f2690,plain,(
  ( ! [X6,X5] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X5)),X6,bool))) )),
  inference(forward_demodulation,[],[f2687,f663])).
fof(f2687,plain,(
  ( ! [X6,X5] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | s(bool,'const.bool.BOUNDED_1'(s(bool,X5))) = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X5)),X6,bool))) )),
  inference(superposition,[],[f716,f663])).
fof(f2951,plain,(
  ( ! [X6,X5] : (~p(s(bool,happ(s(fun(bool,bool),X6),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X6),s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X5)),X6,bool)))))) )),
  inference(superposition,[],[f717,f663])).
fof(f3582,plain,(
  ( ! [X428,X426,X427] : (~p(s(bool,happ(s(fun(bool,bool),X427),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X427),s(bool,sK89(X426,X427,bool))))) | s(bool,X426) = s(bool,X428) | s(bool,'T_0') = s(bool,X428)) )),
  inference(superposition,[],[f717,f1649])).
fof(f3583,plain,(
  ( ! [X430,X429,X431] : (~p(s(bool,happ(s(fun(bool,bool),X430),s(bool,'T_0')))) | s(bool,X429) = s(bool,sK89(X429,X430,bool)) | s(bool,X429) = s(bool,X431) | s(bool,'T_0') = s(bool,X431)) )),
  inference(superposition,[],[f716,f1649])).
fof(f2684,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | s(bool,X0) = s(bool,sK89(X0,X1,bool)) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f716,f665])).
fof(f2948,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,'F_0')))) | p(s(bool,happ(s(fun(bool,bool),X1),s(bool,sK89(X0,X1,bool))))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f717,f665])).
fof(f841,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP20(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) )),
  inference(cnf_transformation,[],[f421])).
fof(f421,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP20(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK186(X4,X3,X2,X1,X0)),s('type.conSem.v',sK187(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK189(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK186(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK188(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK190(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK187(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK188(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK189(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK190(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) | sP20(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK186,sK187,sK188,sK189,sK190])],[f420])).
fof(f420,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP20(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.exhSem.v',X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X14))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X11))),s('type.exhSem.v',X12)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) | sP20(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f419])).
fof(f419,plain,(
  ! [X5,X6,X3,X8,X7] : ((~sP20(X5,X6,X3,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) | sP20(X5,X6,X3,X8,X7)))),
  inference(flattening,[],[f418])).
fof(f418,plain,(
  ! [X5,X6,X3,X8,X7] : ((~sP20(X5,X6,X3,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) | sP20(X5,X6,X3,X8,X7)))),
  inference(nnf_transformation,[],[f245])).
fof(f245,plain,(
  ! [X5,X6,X3,X8,X7] : (sP20(X5,X6,X3,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP20])])).
fof(f864,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP16(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4)))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) )),
  inference(cnf_transformation,[],[f434])).
fof(f434,plain,(
  ! [X0,X1,X2,X3] : ((~sP16(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK201(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK203(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK202(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK200(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK204(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK203(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK202(X3,X2,X1,X0)))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK204(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK201(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK200(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))) | sP16(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK200,sK201,sK202,sK203,sK204])],[f433])).
fof(f433,plain,(
  ! [X0,X1,X2,X3] : ((~sP16(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X12),s('type.list.list'('type.string.char'),X11))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X12))),s('type.list.list'('type.string.char'),X11))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))) | sP16(X0,X1,X2,X3)))),
  inference(rectify,[],[f432])).
fof(f432,plain,(
  ! [X5,X21,X23,X22] : ((~sP16(X5,X21,X23,X22) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27)))))) & (! [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | sP16(X5,X21,X23,X22)))),
  inference(nnf_transformation,[],[f241])).
fof(f241,plain,(
  ! [X5,X21,X23,X22] : (sP16(X5,X21,X23,X22) <=> ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP16])])).
fof(f869,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP15(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) )),
  inference(cnf_transformation,[],[f437])).
fof(f437,plain,(
  ! [X0,X1,X2,X3] : ((~sP15(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK205(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK206(X3,X2,X1,X0)),s('type.conLang.exp',sK207(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK208(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK206(X3,X2,X1,X0)),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK209(X3,X2,X1,X0)),s('type.conLang.exp',sK207(X3,X2,X1,X0)))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK209(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK205(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK208(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | sP15(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK205,sK206,sK207,sK208,sK209])],[f436])).
fof(f436,plain,(
  ! [X0,X1,X2,X3] : ((~sP15(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.string.char'),X10),s('type.conLang.exp',X11))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12),s('type.list.list'('type.string.char'),X10),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.conLang.exp',X11))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12)))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | sP15(X0,X1,X2,X3)))),
  inference(rectify,[],[f435])).
fof(f435,plain,(
  ! [X5,X21,X23,X22] : ((~sP15(X5,X21,X23,X22) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35)))))) & (! [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | sP15(X5,X21,X23,X22)))),
  inference(nnf_transformation,[],[f240])).
fof(f240,plain,(
  ! [X5,X21,X23,X22] : (sP15(X5,X21,X23,X22) <=> ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP15])])).
fof(f997,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP41(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) )),
  inference(cnf_transformation,[],[f496])).
fof(f496,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP41(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK295(X4,X3,X2,X1,X0)),s('type.conSem.v',sK296(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK298(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK295(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK297(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK299(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK296(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK297(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK298(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK299(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) | sP41(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK295,sK296,sK297,sK298,sK299])],[f495])).
fof(f495,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP41(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.exhSem.v',X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X14))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X11))),s('type.exhSem.v',X12)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) | sP41(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f494])).
fof(f494,plain,(
  ! [X5,X6,X3,X8,X7] : ((~sP41(X5,X6,X3,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) | sP41(X5,X6,X3,X8,X7)))),
  inference(flattening,[],[f493])).
fof(f493,plain,(
  ! [X5,X6,X3,X8,X7] : ((~sP41(X5,X6,X3,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) | sP41(X5,X6,X3,X8,X7)))),
  inference(nnf_transformation,[],[f269])).
fof(f269,plain,(
  ! [X5,X6,X3,X8,X7] : (sP41(X5,X6,X3,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP41])])).
fof(f1020,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP37(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4)))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) )),
  inference(cnf_transformation,[],[f509])).
fof(f509,plain,(
  ! [X0,X1,X2,X3] : ((~sP37(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK310(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK312(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK311(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK309(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK313(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK312(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK311(X3,X2,X1,X0)))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK313(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK310(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK309(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))) | sP37(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK309,sK310,sK311,sK312,sK313])],[f508])).
fof(f508,plain,(
  ! [X0,X1,X2,X3] : ((~sP37(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X12),s('type.list.list'('type.string.char'),X11))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X12))),s('type.list.list'('type.string.char'),X11))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))) | sP37(X0,X1,X2,X3)))),
  inference(rectify,[],[f507])).
fof(f507,plain,(
  ! [X5,X21,X23,X22] : ((~sP37(X5,X21,X23,X22) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27)))))) & (! [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | sP37(X5,X21,X23,X22)))),
  inference(nnf_transformation,[],[f265])).
fof(f265,plain,(
  ! [X5,X21,X23,X22] : (sP37(X5,X21,X23,X22) <=> ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP37])])).
fof(f1025,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP36(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) )),
  inference(cnf_transformation,[],[f512])).
fof(f512,plain,(
  ! [X0,X1,X2,X3] : ((~sP36(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK314(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK315(X3,X2,X1,X0)),s('type.conLang.exp',sK316(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK317(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK315(X3,X2,X1,X0)),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK318(X3,X2,X1,X0)),s('type.conLang.exp',sK316(X3,X2,X1,X0)))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK318(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK314(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK317(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | sP36(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK314,sK315,sK316,sK317,sK318])],[f511])).
fof(f511,plain,(
  ! [X0,X1,X2,X3] : ((~sP36(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.string.char'),X10),s('type.conLang.exp',X11))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12),s('type.list.list'('type.string.char'),X10),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.conLang.exp',X11))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12)))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | sP36(X0,X1,X2,X3)))),
  inference(rectify,[],[f510])).
fof(f510,plain,(
  ! [X5,X21,X23,X22] : ((~sP36(X5,X21,X23,X22) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35)))))) & (! [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | sP36(X5,X21,X23,X22)))),
  inference(nnf_transformation,[],[f264])).
fof(f264,plain,(
  ! [X5,X21,X23,X22] : (sP36(X5,X21,X23,X22) <=> ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP36])])).
fof(f1141,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP58(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) )),
  inference(cnf_transformation,[],[f561])).
fof(f561,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP58(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK388(X4,X3,X2,X1,X0)),s('type.conSem.v',sK389(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK391(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK388(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK390(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK392(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK389(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK390(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK391(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK392(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) | sP58(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK388,sK389,sK390,sK391,sK392])],[f560])).
fof(f560,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP58(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.exhSem.v',X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X14))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X11))),s('type.exhSem.v',X12)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) | sP58(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f559])).
fof(f559,plain,(
  ! [X5,X6,X3,X8,X7] : ((~sP58(X5,X6,X3,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) | sP58(X5,X6,X3,X8,X7)))),
  inference(flattening,[],[f558])).
fof(f558,plain,(
  ! [X5,X6,X3,X8,X7] : ((~sP58(X5,X6,X3,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) | sP58(X5,X6,X3,X8,X7)))),
  inference(nnf_transformation,[],[f290])).
fof(f290,plain,(
  ! [X5,X6,X3,X8,X7] : (sP58(X5,X6,X3,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP58])])).
fof(f1164,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP54(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4)))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) )),
  inference(cnf_transformation,[],[f574])).
fof(f574,plain,(
  ! [X0,X1,X2,X3] : ((~sP54(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK403(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK405(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK404(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK402(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK406(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK405(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK404(X3,X2,X1,X0)))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK406(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK403(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK402(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))) | sP54(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK402,sK403,sK404,sK405,sK406])],[f573])).
fof(f573,plain,(
  ! [X0,X1,X2,X3] : ((~sP54(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X12),s('type.list.list'('type.string.char'),X11))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X12))),s('type.list.list'('type.string.char'),X11))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4))))) | sP54(X0,X1,X2,X3)))),
  inference(rectify,[],[f572])).
fof(f572,plain,(
  ! [X5,X21,X23,X22] : ((~sP54(X5,X21,X23,X22) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27)))))) & (! [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | sP54(X5,X21,X23,X22)))),
  inference(nnf_transformation,[],[f286])).
fof(f286,plain,(
  ! [X5,X21,X23,X22] : (sP54(X5,X21,X23,X22) <=> ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP54])])).
fof(f1169,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP53(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) )),
  inference(cnf_transformation,[],[f577])).
fof(f577,plain,(
  ! [X0,X1,X2,X3] : ((~sP53(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK407(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK408(X3,X2,X1,X0)),s('type.conLang.exp',sK409(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK410(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK408(X3,X2,X1,X0)),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK411(X3,X2,X1,X0)),s('type.conLang.exp',sK409(X3,X2,X1,X0)))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK411(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK407(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK410(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | sP53(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK407,sK408,sK409,sK410,sK411])],[f576])).
fof(f576,plain,(
  ! [X0,X1,X2,X3] : ((~sP53(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9),s('type.list.list'('type.string.char'),X10),s('type.conLang.exp',X11))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12),s('type.list.list'('type.string.char'),X10),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.conLang.exp',X11))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X12)))))) & (! [X4,X5,X6,X7,X8] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | sP53(X0,X1,X2,X3)))),
  inference(rectify,[],[f575])).
fof(f575,plain,(
  ! [X5,X21,X23,X22] : ((~sP53(X5,X21,X23,X22) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35)))))) & (! [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | sP53(X5,X21,X23,X22)))),
  inference(nnf_transformation,[],[f285])).
fof(f285,plain,(
  ! [X5,X21,X23,X22] : (sP53(X5,X21,X23,X22) <=> ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP53])])).
fof(f1170,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | sP58(X14,sK415(X14,X13,X12,X2,X1,X0),X12,sK417(X14,X13,X12,X2,X1,X0),sK416(X14,X13,X12,X2,X1,X0)) | sP57(X13,sK412(X14,X13,X12,X2,X1,X0),X12,sK414(X14,X13,X12,X2,X1,X0),sK413(X14,X13,X12,X2,X1,X0)) | sP59(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f580])).
fof(f580,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ! [X12,X13,X14] : (sP59(X12,X13,X14) | (sP57(X13,sK412(X14,X13,X12,X2,X1,X0),X12,sK414(X14,X13,X12,X2,X1,X0),sK413(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK412(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK413(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK414(X14,X13,X12,X2,X1,X0)))))) | (sP58(X14,sK415(X14,X13,X12,X2,X1,X0),X12,sK417(X14,X13,X12,X2,X1,X0),sK416(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK415(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK416(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK417(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))))) & ((~sP59(sK418(X2,X1,X0),sK419(X2,X1,X0),sK420(X2,X1,X0)) & ! [X9,X10,X11] : (~sP57(sK419(X2,X1,X0),X9,sK418(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK419(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11))))) & ! [X6,X7,X8] : (~sP58(sK420(X2,X1,X0),X6,sK418(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK420(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK420(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK412,sK413,sK414,sK415,sK416,sK417,sK418,sK419,sK420])],[f579])).
fof(f579,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ! [X12,X13,X14] : (sP59(X12,X13,X14) | ? [X18,X19,X20] : (sP57(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X18))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20))))) | ? [X15,X16,X17] : (sP58(X14,X15,X12,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP59(X3,X4,X5) & ! [X9,X10,X11] : (~sP57(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11))))) & ! [X6,X7,X8] : (~sP58(X5,X6,X3,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(rectify,[],[f578])).
fof(f578,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ! [X3,X4,X5] : (sP59(X3,X4,X5) | ? [X14,X15,X16] : (sP57(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (sP58(X5,X6,X3,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))))) & (? [X3,X4,X5] : (~sP59(X3,X4,X5) & ! [X14,X15,X16] : (~sP57(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) & ! [X6,X7,X8] : (~sP58(X5,X6,X3,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(nnf_transformation,[],[f292])).
fof(f292,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ! [X3,X4,X5] : (sP59(X3,X4,X5) | ? [X14,X15,X16] : (sP57(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (sP58(X5,X6,X3,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(definition_folding,[],[f207,f291,f290,f289,f288,f287,f286,f285])).
fof(f287,plain,(
  ! [X4,X21,X23,X22] : (sP55(X4,X21,X23,X22) <=> ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP55])])).
fof(f288,plain,(
  ! [X4,X21,X23,X22] : (sP56(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP56])])).
fof(f289,plain,(
  ! [X4,X14,X3,X16,X15] : (sP57(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP57])])).
fof(f291,plain,(
  ! [X3,X4,X5] : (sP59(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | sP55(X4,X21,X23,X22) | sP53(X5,X21,X23,X22) | sP54(X5,X21,X23,X22) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | sP56(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP59])])).
fof(f207,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(flattening,[],[f206])).
fof(f206,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(ennf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))))),
  inference(rectify,[],[f29])).
fof(f29,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9)))) <=> ! [X10,X11,X12] : ((! [X13,X14,X15] : ((? [X58] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X58))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X58)))) | ? [X53,X17,X18] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X53),s('type.list.list'('type.conSem.v'),X17))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X53))),s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18))))) | ? [X22,X23,X24,X7,X59] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp',X24))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X23),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.conLang.exp',X24))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | ? [X7,X22,X23,X29,X59] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | ? [X58] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X58))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X58)))) | ? [X17,X18] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X17))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.conSem.v',X14))),s('type.exhSem.v',X15))))) & ! [X31,X32,X33] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X32) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X33)) | ? [X34,X35,X17,X18] : (s('type.list.list'('type.conSem.v'),X32) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X34),s('type.list.list'('type.conSem.v'),X17))) & s('type.list.list'('type.exhSem.v'),X33) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X35),s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31))),s('type.conSem.v',X34))),s('type.exhSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31))),s('type.list.list'('type.conSem.v'),X32))),s('type.list.list'('type.exhSem.v'),X33))))) & ! [X36,X37,X38] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X38)) | ? [X23,X34,X35,X22,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X38) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.exhSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36))),s('type.conSem.v',X34))),s('type.exhSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X38)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.dec_to_exhProof.v_rel|48|_def')).
fof(f1171,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | sP58(X14,sK415(X14,X13,X12,X2,X1,X0),X12,sK417(X14,X13,X12,X2,X1,X0),sK416(X14,X13,X12,X2,X1,X0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK412(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK413(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK414(X14,X13,X12,X2,X1,X0))))) | sP59(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f580])).
fof(f1172,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK415(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK416(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK417(X14,X13,X12,X2,X1,X0))))) | sP57(X13,sK412(X14,X13,X12,X2,X1,X0),X12,sK414(X14,X13,X12,X2,X1,X0),sK413(X14,X13,X12,X2,X1,X0)) | sP59(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f580])).
fof(f1173,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK415(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK416(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK417(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK412(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK413(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK414(X14,X13,X12,X2,X1,X0))))) | sP59(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f580])).
fof(f838,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK189(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK190(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f839,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK189(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK190(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f863,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK201(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK200(X3,X2,X1,X0))))) | ~sP16(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f434])).
fof(f868,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK205(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK208(X3,X2,X1,X0))))) | ~sP15(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f437])).
fof(f873,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK213(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK214(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK215(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK210(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK211(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK212(X14,X13,X12,X2,X1,X0))))) | sP21(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f440,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) | ! [X12,X13,X14] : (sP21(X12,X13,X14) | (sP19(X13,sK210(X14,X13,X12,X2,X1,X0),X12,sK212(X14,X13,X12,X2,X1,X0),sK211(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK210(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK211(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK212(X14,X13,X12,X2,X1,X0)))))) | (sP20(X14,sK213(X14,X13,X12,X2,X1,X0),X12,sK215(X14,X13,X12,X2,X1,X0),sK214(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK213(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK214(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK215(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2)))))) & ((~sP21(sK216(X2,X1,X0),sK217(X2,X1,X0),sK218(X2,X1,X0)) & ! [X9,X10,X11] : (~sP19(sK217(X2,X1,X0),X9,sK216(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK217(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11))))) & ! [X6,X7,X8] : (~sP20(sK218(X2,X1,X0),X6,sK216(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK218(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),sK216(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2))))) | p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK210,sK211,sK212,sK213,sK214,sK215,sK216,sK217,sK218])],[f439])).
fof(f439,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) | ! [X12,X13,X14] : (sP21(X12,X13,X14) | ? [X18,X19,X20] : (sP19(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X18))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20))))) | ? [X15,X16,X17] : (sP20(X14,X15,X12,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X17))))) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2)))))) & (? [X3,X4,X5] : (~sP21(X3,X4,X5) & ! [X9,X10,X11] : (~sP19(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11))))) & ! [X6,X7,X8] : (~sP20(X5,X6,X3,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2))))) | p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2))))))),
  inference(rectify,[],[f438])).
fof(f438,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) | ! [X3,X4,X5] : (sP21(X3,X4,X5) | ? [X14,X15,X16] : (sP19(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (sP20(X5,X6,X3,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2)))))) & (? [X3,X4,X5] : (~sP21(X3,X4,X5) & ! [X14,X15,X16] : (~sP19(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) & ! [X6,X7,X8] : (~sP20(X5,X6,X3,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2))))) | p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2))))))),
  inference(nnf_transformation,[],[f247])).
fof(f247,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) <=> ! [X3,X4,X5] : (sP21(X3,X4,X5) | ? [X14,X15,X16] : (sP19(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (sP20(X5,X6,X3,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2))))))),
  inference(definition_folding,[],[f199,f246,f245,f244,f243,f242,f241,f240])).
fof(f242,plain,(
  ! [X4,X21,X23,X22] : (sP17(X4,X21,X23,X22) <=> ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP17])])).
fof(f243,plain,(
  ! [X4,X21,X23,X22] : (sP18(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP18])])).
fof(f244,plain,(
  ! [X4,X14,X3,X16,X15] : (sP19(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP19])])).
fof(f246,plain,(
  ! [X3,X4,X5] : (sP21(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | sP17(X4,X21,X23,X22) | sP15(X5,X21,X23,X22) | sP16(X5,X21,X23,X22) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | sP18(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP21])])).
fof(f199,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2))))))),
  inference(flattening,[],[f198])).
fof(f198,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2))))))),
  inference(ennf_transformation,[],[f138])).
fof(f138,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2))))))),
  inference(rectify,[],[f31])).
fof(f31,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.conSem.v',X8),s('type.exhSem.v',X9)))) <=> ! [X10,X11,X12] : ((! [X39,X40,X41] : ((? [X58] : (s('type.conSem.v',X40) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X58))) & s('type.exhSem.v',X41) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X58)))) | ? [X53,X17,X18] : (s('type.conSem.v',X40) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X53),s('type.list.list'('type.conSem.v'),X17))) & s('type.exhSem.v',X41) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X53))),s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18))))) | ? [X22,X23,X24,X7,X59] : (s('type.conSem.v',X40) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp',X24))) & s('type.exhSem.v',X41) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X23),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.conLang.exp',X24))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | ? [X7,X22,X23,X29,X59] : (s('type.conSem.v',X40) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.exhSem.v',X41) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | ? [X58] : (s('type.conSem.v',X40) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X58))) & s('type.exhSem.v',X41) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X58)))) | ? [X17,X18] : (s('type.conSem.v',X40) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X17))) & s('type.exhSem.v',X41) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39))),s('type.conSem.v',X40))),s('type.exhSem.v',X41))))) & ! [X31,X32,X33] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X32) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X33)) | ? [X34,X35,X17,X18] : (s('type.list.list'('type.conSem.v'),X32) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X34),s('type.list.list'('type.conSem.v'),X17))) & s('type.list.list'('type.exhSem.v'),X33) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X35),s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31))),s('type.conSem.v',X34))),s('type.exhSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31))),s('type.list.list'('type.conSem.v'),X32))),s('type.list.list'('type.exhSem.v'),X33))))) & ! [X42,X43,X44] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44)) | ? [X23,X34,X35,X22,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.exhSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42))),s('type.conSem.v',X34))),s('type.exhSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5))),s('type.conSem.v',X8))),s('type.exhSem.v',X9))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.dec_to_exhProof.v_rel2_def')).
fof(f872,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK213(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK214(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK215(X14,X13,X12,X2,X1,X0))))) | sP19(X13,sK210(X14,X13,X12,X2,X1,X0),X12,sK212(X14,X13,X12,X2,X1,X0),sK211(X14,X13,X12,X2,X1,X0)) | sP21(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f994,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK298(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK299(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP41(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f995,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK298(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK299(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP41(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f1019,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK310(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK309(X3,X2,X1,X0))))) | ~sP37(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f509])).
fof(f1024,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK314(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK317(X3,X2,X1,X0))))) | ~sP36(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f512])).
fof(f1028,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK322(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK323(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK324(X14,X13,X12,X2,X1,X0))))) | sP40(X13,sK319(X14,X13,X12,X2,X1,X0),X12,sK321(X14,X13,X12,X2,X1,X0),sK320(X14,X13,X12,X2,X1,X0)) | sP42(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f515])).
fof(f515,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) | ! [X12,X13,X14] : (sP42(X12,X13,X14) | (sP40(X13,sK319(X14,X13,X12,X2,X1,X0),X12,sK321(X14,X13,X12,X2,X1,X0),sK320(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK319(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK320(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK321(X14,X13,X12,X2,X1,X0)))))) | (sP41(X14,sK322(X14,X13,X12,X2,X1,X0),X12,sK324(X14,X13,X12,X2,X1,X0),sK323(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK322(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK323(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK324(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2)))))) & ((~sP42(sK325(X2,X1,X0),sK326(X2,X1,X0),sK327(X2,X1,X0)) & ! [X9,X10,X11] : (~sP40(sK326(X2,X1,X0),X9,sK325(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK326(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11))))) & ! [X6,X7,X8] : (~sP41(sK327(X2,X1,X0),X6,sK325(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK327(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK326(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2))))) | p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK319,sK320,sK321,sK322,sK323,sK324,sK325,sK326,sK327])],[f514])).
fof(f514,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) | ! [X12,X13,X14] : (sP42(X12,X13,X14) | ? [X18,X19,X20] : (sP40(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X18))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20))))) | ? [X15,X16,X17] : (sP41(X14,X15,X12,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2)))))) & (? [X3,X4,X5] : (~sP42(X3,X4,X5) & ! [X9,X10,X11] : (~sP40(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11))))) & ! [X6,X7,X8] : (~sP41(X5,X6,X3,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2))))) | p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2))))))),
  inference(rectify,[],[f513])).
fof(f513,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) | ! [X3,X4,X5] : (sP42(X3,X4,X5) | ? [X14,X15,X16] : (sP40(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (sP41(X5,X6,X3,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2)))))) & (? [X3,X4,X5] : (~sP42(X3,X4,X5) & ! [X14,X15,X16] : (~sP40(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) & ! [X6,X7,X8] : (~sP41(X5,X6,X3,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2))))) | p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2))))))),
  inference(nnf_transformation,[],[f271])).
fof(f271,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) <=> ! [X3,X4,X5] : (sP42(X3,X4,X5) | ? [X14,X15,X16] : (sP40(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (sP41(X5,X6,X3,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2))))))),
  inference(definition_folding,[],[f203,f270,f269,f268,f267,f266,f265,f264])).
fof(f266,plain,(
  ! [X4,X21,X23,X22] : (sP38(X4,X21,X23,X22) <=> ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP38])])).
fof(f267,plain,(
  ! [X4,X21,X23,X22] : (sP39(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP39])])).
fof(f268,plain,(
  ! [X4,X14,X3,X16,X15] : (sP40(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP40])])).
fof(f270,plain,(
  ! [X3,X4,X5] : (sP42(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | sP38(X4,X21,X23,X22) | sP36(X5,X21,X23,X22) | sP37(X5,X21,X23,X22) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | sP39(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP42])])).
fof(f203,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2))))))),
  inference(flattening,[],[f202])).
fof(f202,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2))))))),
  inference(ennf_transformation,[],[f141])).
fof(f141,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | ? [X32,X33,X34,X35,X36] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32),s('type.list.list'('type.string.char'),X33),s('type.conLang.exp',X34))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35),s('type.list.list'('type.string.char'),X33),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.conLang.exp',X34))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X36),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X32))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X35))))) | ? [X27,X28,X29,X30,X31] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30),s('type.list.list'('type.string.char'),X29))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X30))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X31),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X28))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X27))))) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X15))),s('type.list.list'('type.exhSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.exhSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.conSem.v',X10))),s('type.exhSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X5),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2))))))),
  inference(rectify,[],[f30])).
fof(f30,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5),s('type.list.list'('type.conSem.v'),X8),s('type.list.list'('type.exhSem.v'),X9)))) <=> ! [X10,X11,X12] : ((! [X13,X14,X15] : ((? [X58] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X58))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X58)))) | ? [X53,X17,X18] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X53),s('type.list.list'('type.conSem.v'),X17))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X53))),s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18))))) | ? [X22,X23,X24,X7,X59] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp',X24))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X23),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.conLang.exp',X24))))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | ? [X7,X22,X23,X29,X59] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X59),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))))) | ? [X58] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X58))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X58)))) | ? [X17,X18] : (s('type.conSem.v',X14) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X17))) & s('type.exhSem.v',X15) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X13))),s('type.conSem.v',X14))),s('type.exhSem.v',X15))))) & ! [X45,X46,X47] : (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X46) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X47)) | ? [X34,X35,X17,X18] : (s('type.list.list'('type.conSem.v'),X46) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X34),s('type.list.list'('type.conSem.v'),X17))) & s('type.list.list'('type.exhSem.v'),X47) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X35),s('type.list.list'('type.exhSem.v'),X18))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X45))),s('type.conSem.v',X34))),s('type.exhSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X45))),s('type.list.list'('type.conSem.v'),X17))),s('type.list.list'('type.exhSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X45))),s('type.list.list'('type.conSem.v'),X46))),s('type.list.list'('type.exhSem.v'),X47))))) & ! [X42,X43,X44] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44)) | ? [X23,X34,X35,X22,X7] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.exhSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X10),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42))),s('type.conSem.v',X34))),s('type.exhSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X43))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X44)))))) => p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X11),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X5))),s('type.list.list'('type.conSem.v'),X8))),s('type.list.list'('type.exhSem.v'),X9))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.dec_to_exhProof.v_rel|49|_def')).
fof(f1029,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK322(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK323(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK324(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK319(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK320(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK321(X14,X13,X12,X2,X1,X0))))) | sP42(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f515])).
fof(f1138,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK391(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK392(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP58(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1139,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK391(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK392(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP58(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1163,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK403(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK402(X3,X2,X1,X0))))) | ~sP54(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f574])).
fof(f1168,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK407(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK410(X3,X2,X1,X0))))) | ~sP53(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f577])).
fof(f876,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK218(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))) | ~sP20(sK218(X2,X1,X0),X6,sK216(X2,X1,X0),X8,X7)) )),
  inference(cnf_transformation,[],[f440])).
fof(f1032,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK327(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))) | ~sP41(sK327(X2,X1,X0),X6,sK325(X2,X1,X0),X8,X7)) )),
  inference(cnf_transformation,[],[f515])).
fof(f1176,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK420(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X8)))) | ~sP58(sK420(X2,X1,X0),X6,sK418(X2,X1,X0),X8,X7)) )),
  inference(cnf_transformation,[],[f580])).
fof(f1177,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),bool))),sK420(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f580])).
fof(f1033,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK326(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f515])).
fof(f851,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP19(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f425])).
fof(f425,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP19(X0,X1,X2,X3,X4) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3)) | (s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK191(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK193(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK192(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK194(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK191(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK192(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK193(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK194(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))))) | sP19(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK191,sK192,sK193,sK194])],[f424])).
fof(f424,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP19(X0,X1,X2,X3,X4) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X9),s('type.list.list'('type.conSem.v'),X11))) & s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X10),s('type.list.list'('type.exhSem.v'),X12))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X9))),s('type.exhSem.v',X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X11))),s('type.list.list'('type.exhSem.v'),X12)))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))))) | sP19(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f423])).
fof(f423,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP19(X4,X14,X3,X16,X15) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X15) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) | s('type.list.list'('type.exhSem.v'),X16) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) | sP19(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f422])).
fof(f422,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP19(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20))))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X15) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) | s('type.list.list'('type.exhSem.v'),X16) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) | sP19(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f244])).
fof(f855,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP18(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f428])).
fof(f428,plain,(
  ! [X0,X1,X2,X3] : ((~sP18(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK195(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),sK196(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK195(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK196(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5))))) | sP18(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK195,sK196])],[f427])).
fof(f427,plain,(
  ! [X0,X1,X2,X3] : ((~sP18(X0,X1,X2,X3) | ? [X6,X7] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X6))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X6))),s('type.list.list'('type.exhSem.v'),X7)))))) & (! [X4,X5] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5))))) | sP18(X0,X1,X2,X3)))),
  inference(rectify,[],[f426])).
fof(f426,plain,(
  ! [X4,X21,X23,X22] : ((~sP18(X4,X21,X23,X22) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & (! [X24,X25] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25))))) | sP18(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f243])).
fof(f859,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP17(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) )),
  inference(cnf_transformation,[],[f431])).
fof(f431,plain,(
  ! [X0,X1,X2,X3] : ((~sP17(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK197(X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK198(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK197(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK199(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK198(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK199(X3,X2,X1,X0))))))) & (! [X4,X5,X6] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6))))) | sP17(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK197,sK198,sK199])],[f430])).
fof(f430,plain,(
  ! [X0,X1,X2,X3] : ((~sP17(X0,X1,X2,X3) | ? [X7,X8,X9] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X7),s('type.list.list'('type.conSem.v'),X8))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X7))),s('type.list.list'('type.exhSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X8))),s('type.list.list'('type.exhSem.v'),X9)))))) & (! [X4,X5,X6] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6))))) | sP17(X0,X1,X2,X3)))),
  inference(rectify,[],[f429])).
fof(f429,plain,(
  ! [X4,X21,X23,X22] : ((~sP17(X4,X21,X23,X22) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39)))))) & (! [X37,X38,X39] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | sP17(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f242])).
fof(f1007,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP40(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f500])).
fof(f500,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP40(X0,X1,X2,X3,X4) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3)) | (s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK300(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK302(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK301(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK303(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK300(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK301(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK302(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK303(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))))) | sP40(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK300,sK301,sK302,sK303])],[f499])).
fof(f499,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP40(X0,X1,X2,X3,X4) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X9),s('type.list.list'('type.conSem.v'),X11))) & s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X10),s('type.list.list'('type.exhSem.v'),X12))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X9))),s('type.exhSem.v',X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X11))),s('type.list.list'('type.exhSem.v'),X12)))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))))) | sP40(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f498])).
fof(f498,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP40(X4,X14,X3,X16,X15) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X15) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) | s('type.list.list'('type.exhSem.v'),X16) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) | sP40(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f497])).
fof(f497,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP40(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20))))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X15) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) | s('type.list.list'('type.exhSem.v'),X16) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) | sP40(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f268])).
fof(f1011,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP39(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f503])).
fof(f503,plain,(
  ! [X0,X1,X2,X3] : ((~sP39(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK304(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),sK305(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK304(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK305(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5))))) | sP39(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK304,sK305])],[f502])).
fof(f502,plain,(
  ! [X0,X1,X2,X3] : ((~sP39(X0,X1,X2,X3) | ? [X6,X7] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X6))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X6))),s('type.list.list'('type.exhSem.v'),X7)))))) & (! [X4,X5] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5))))) | sP39(X0,X1,X2,X3)))),
  inference(rectify,[],[f501])).
fof(f501,plain,(
  ! [X4,X21,X23,X22] : ((~sP39(X4,X21,X23,X22) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & (! [X24,X25] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25))))) | sP39(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f267])).
fof(f1015,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP38(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) )),
  inference(cnf_transformation,[],[f506])).
fof(f506,plain,(
  ! [X0,X1,X2,X3] : ((~sP38(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK306(X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK307(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK306(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK308(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK307(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK308(X3,X2,X1,X0))))))) & (! [X4,X5,X6] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6))))) | sP38(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK306,sK307,sK308])],[f505])).
fof(f505,plain,(
  ! [X0,X1,X2,X3] : ((~sP38(X0,X1,X2,X3) | ? [X7,X8,X9] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X7),s('type.list.list'('type.conSem.v'),X8))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X7))),s('type.list.list'('type.exhSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X8))),s('type.list.list'('type.exhSem.v'),X9)))))) & (! [X4,X5,X6] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6))))) | sP38(X0,X1,X2,X3)))),
  inference(rectify,[],[f504])).
fof(f504,plain,(
  ! [X4,X21,X23,X22] : ((~sP38(X4,X21,X23,X22) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39)))))) & (! [X37,X38,X39] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | sP38(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f266])).
fof(f1026,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2)))) | sP41(X14,sK322(X14,X13,X12,X2,X1,X0),X12,sK324(X14,X13,X12,X2,X1,X0),sK323(X14,X13,X12,X2,X1,X0)) | sP40(X13,sK319(X14,X13,X12,X2,X1,X0),X12,sK321(X14,X13,X12,X2,X1,X0),sK320(X14,X13,X12,X2,X1,X0)) | sP42(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f515])).
fof(f1027,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.list.list'('type.conSem.v'),X1))),s('type.list.list'('type.exhSem.v'),X2)))) | sP41(X14,sK322(X14,X13,X12,X2,X1,X0),X12,sK324(X14,X13,X12,X2,X1,X0),sK323(X14,X13,X12,X2,X1,X0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK319(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK320(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK321(X14,X13,X12,X2,X1,X0))))) | sP42(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f515])).
fof(f1151,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP57(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f565])).
fof(f565,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP57(X0,X1,X2,X3,X4) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3)) | (s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK393(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK395(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK394(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK396(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK393(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK394(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK395(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK396(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))))) | sP57(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK393,sK394,sK395,sK396])],[f564])).
fof(f564,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP57(X0,X1,X2,X3,X4) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X9),s('type.list.list'('type.conSem.v'),X11))) & s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X10),s('type.list.list'('type.exhSem.v'),X12))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X9))),s('type.exhSem.v',X10)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X11))),s('type.list.list'('type.exhSem.v'),X12)))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X7))),s('type.list.list'('type.exhSem.v'),X8)))))) | sP57(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f563])).
fof(f563,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP57(X4,X14,X3,X16,X15) | (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X15) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) | s('type.list.list'('type.exhSem.v'),X16) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) | sP57(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f562])).
fof(f562,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP57(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) & s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) & s('type.list.list'('type.exhSem.v'),X16) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) & p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20))))))) & (((s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X15) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.conSem.v'),X15) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X17),s('type.list.list'('type.conSem.v'),X19))) | s('type.list.list'('type.exhSem.v'),X16) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X18),s('type.list.list'('type.exhSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.conSem.v',X17))),s('type.exhSem.v',X18)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X14))),s('type.list.list'('type.conSem.v'),X19))),s('type.list.list'('type.exhSem.v'),X20)))))) | sP57(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f289])).
fof(f1155,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP56(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f568])).
fof(f568,plain,(
  ! [X0,X1,X2,X3] : ((~sP56(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK397(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),sK398(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK397(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK398(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5))))) | sP56(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK397,sK398])],[f567])).
fof(f567,plain,(
  ! [X0,X1,X2,X3] : ((~sP56(X0,X1,X2,X3) | ? [X6,X7] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X6))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X6))),s('type.list.list'('type.exhSem.v'),X7)))))) & (! [X4,X5] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X4))),s('type.list.list'('type.exhSem.v'),X5))))) | sP56(X0,X1,X2,X3)))),
  inference(rectify,[],[f566])).
fof(f566,plain,(
  ! [X4,X21,X23,X22] : ((~sP56(X4,X21,X23,X22) | ? [X24,X25] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25)))))) & (! [X24,X25] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X24))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X24))),s('type.list.list'('type.exhSem.v'),X25))))) | sP56(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f288])).
fof(f1159,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP55(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) )),
  inference(cnf_transformation,[],[f571])).
fof(f571,plain,(
  ! [X0,X1,X2,X3] : ((~sP55(X0,X1,X2,X3) | (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK399(X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK400(X3,X2,X1,X0)))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK399(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK401(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK400(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK401(X3,X2,X1,X0))))))) & (! [X4,X5,X6] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6))))) | sP55(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK399,sK400,sK401])],[f570])).
fof(f570,plain,(
  ! [X0,X1,X2,X3] : ((~sP55(X0,X1,X2,X3) | ? [X7,X8,X9] : (s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X7),s('type.list.list'('type.conSem.v'),X8))) & s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X7))),s('type.list.list'('type.exhSem.v'),X9))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X8))),s('type.list.list'('type.exhSem.v'),X9)))))) & (! [X4,X5,X6] : (s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),X5))),s('type.list.list'('type.exhSem.v'),X6))))) | sP55(X0,X1,X2,X3)))),
  inference(rectify,[],[f569])).
fof(f569,plain,(
  ! [X4,X21,X23,X22] : ((~sP55(X4,X21,X23,X22) | ? [X37,X38,X39] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) & p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39)))))) & (! [X37,X38,X39] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37),s('type.list.list'('type.conSem.v'),X38))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X37))),s('type.list.list'('type.exhSem.v'),X39))) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X4),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.list.list'('type.conSem.v'),X38))),s('type.list.list'('type.exhSem.v'),X39))))) | sP55(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f287])).
fof(f1175,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK419(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11)))) | ~sP57(sK419(X2,X1,X0),X9,sK418(X2,X1,X0),X11,X10)) )),
  inference(cnf_transformation,[],[f580])).
fof(f1031,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK326(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11)))) | ~sP40(sK326(X2,X1,X0),X9,sK325(X2,X1,X0),X11,X10)) )),
  inference(cnf_transformation,[],[f515])).
fof(f875,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),sK217(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9))),s('type.list.list'('type.conSem.v'),X10))),s('type.list.list'('type.exhSem.v'),X11)))) | ~sP19(sK217(X2,X1,X0),X9,sK216(X2,X1,X0),X11,X10)) )),
  inference(cnf_transformation,[],[f440])).
fof(f848,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK193(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK194(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | ~sP19(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f425])).
fof(f849,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK193(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK194(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | ~sP19(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f425])).
fof(f854,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK195(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK196(X3,X2,X1,X0))))) | ~sP18(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f428])).
fof(f858,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK198(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK199(X3,X2,X1,X0))))) | ~sP17(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f431])).
fof(f871,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2)))) | sP20(X14,sK213(X14,X13,X12,X2,X1,X0),X12,sK215(X14,X13,X12,X2,X1,X0),sK214(X14,X13,X12,X2,X1,X0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X13),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK210(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK211(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK212(X14,X13,X12,X2,X1,X0))))) | sP21(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f1004,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK302(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK303(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | ~sP40(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f500])).
fof(f1005,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK302(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK303(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | ~sP40(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f500])).
fof(f1010,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK304(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK305(X3,X2,X1,X0))))) | ~sP39(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f503])).
fof(f1014,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK307(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK308(X3,X2,X1,X0))))) | ~sP38(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f506])).
fof(f1148,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK395(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK396(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | ~sP57(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f565])).
fof(f1149,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK395(X4,X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK396(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | ~sP57(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f565])).
fof(f1154,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK397(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK398(X3,X2,X1,X0))))) | ~sP56(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f568])).
fof(f1158,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.exhSem.v'),bool),happ(s(fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.list.list'('type.conSem.v'),fun('type.list.list'('type.exhSem.v'),bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.list.list'('type.conSem.v'),sK400(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK401(X3,X2,X1,X0))))) | ~sP55(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f571])).
fof(f1108,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK376(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f549])).
fof(f549,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X12,X13,X14] : (sP51(X12,X13,X14) | (sP49(X13,sK369(X14,X13,X12,X2,X1,X0),X12,sK371(X14,X13,X12,X2,X1,X0),sK370(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK369(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK370(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK371(X14,X13,X12,X2,X1,X0)))))) | (sP50(X12,sK372(X14,X13,X12,X2,X1,X0),X14,sK374(X14,X13,X12,X2,X1,X0),sK373(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK372(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK373(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK374(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & ((~sP51(sK375(X2,X1,X0),sK376(X2,X1,X0),sK377(X2,X1,X0)) & ! [X9,X10,X11] : (~sP49(sK376(X2,X1,X0),X9,sK375(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK376(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP50(sK375(X2,X1,X0),X6,sK377(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK377(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK376(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK369,sK370,sK371,sK372,sK373,sK374,sK375,sK376,sK377])],[f548])).
fof(f548,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X12,X13,X14] : (sP51(X12,X13,X14) | ? [X18,X19,X20] : (sP49(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP50(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & (? [X3,X4,X5] : (~sP51(X3,X4,X5) & ! [X9,X10,X11] : (~sP49(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP50(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f547])).
fof(f547,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | ! [X3,X4,X5] : (sP51(X3,X4,X5) | ? [X14,X15,X16] : (sP49(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP50(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))))) & (? [X3,X4,X5] : (~sP51(X3,X4,X5) & ! [X14,X15,X16] : (~sP49(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP50(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(nnf_transformation,[],[f282])).
fof(f282,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : (sP51(X3,X4,X5) | ? [X14,X15,X16] : (sP49(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP50(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(definition_folding,[],[f205,f281,f280,f279,f278,f277,f276,f275,f274])).
fof(f274,plain,(
  ! [X4,X21,X23,X22] : (sP44(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP44])])).
fof(f275,plain,(
  ! [X21,X5,X23,X22] : (sP45(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP45])])).
fof(f276,plain,(
  ! [X21,X5,X23,X22] : (sP46(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP46])])).
fof(f277,plain,(
  ! [X4,X21,X23,X22] : (sP47(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP47])])).
fof(f278,plain,(
  ! [X4,X21,X23,X22] : (sP48(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP48])])).
fof(f279,plain,(
  ! [X4,X14,X3,X16,X15] : (sP49(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP49])])).
fof(f280,plain,(
  ! [X3,X6,X5,X8,X7] : (sP50(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP50])])).
fof(f281,plain,(
  ! [X3,X4,X5] : (sP51(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP47(X4,X21,X23,X22) | sP44(X4,X21,X23,X22) | sP45(X21,X5,X23,X22) | sP46(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP48(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP51])])).
fof(f205,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(flattening,[],[f204])).
fof(f204,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(ennf_transformation,[],[f143])).
fof(f143,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.list.list'('type.modSem.v'),X8),s('type.list.list'('type.conSem.v'),X9)))) <=> ! [X10,X11,X12] : ((! [X13,X14,X15] : ((? [X16] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))) | ? [X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X19,X20,X21,X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X30] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))) | ? [X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v',X14))),s('type.conSem.v',X15))))) & ! [X45,X46,X47] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X46) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X47)) | ? [X34,X17,X35,X18] : (s('type.list.list'('type.modSem.v'),X46) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X34),s('type.list.list'('type.modSem.v'),X17))) & s('type.list.list'('type.conSem.v'),X47) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X35),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X45))),s('type.modSem.v',X34))),s('type.conSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X45))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X45))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) & ! [X42,X43,X44] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)) | ? [X23,X34,X22,X7,X35] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.modSem.v',X34))),s('type.conSem.v',X35)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.modSem.v'),X8))),s('type.list.list'('type.conSem.v'),X9))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel|49|_def')).
fof(f769,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | ~sP7(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f374])).
fof(f819,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))) | sP9(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK180(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK179(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK177(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK178(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK178(X2,X1,X0))))))) | sP12(X0,X2) | sP11(X0,X2) | sP10(X0,X1) | sP13(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK175(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK176(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK176(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f414])).
fof(f945,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP33(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) )),
  inference(cnf_transformation,[],[f471])).
fof(f471,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP33(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK254(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK255(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK256(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK257(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK254(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK256(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK255(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK257(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP33(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK254,sK255,sK256,sK257])],[f470])).
fof(f470,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP33(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X9),s('type.list.list'('type.modSem.v'),X10))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X11),s('type.list.list'('type.conSem.v'),X12))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X9))),s('type.conSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X12)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP33(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f469])).
fof(f469,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP33(X4,X14,X3,X16,X15) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP33(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f468])).
fof(f468,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP33(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP33(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f260])).
fof(f260,plain,(
  ! [X4,X14,X3,X16,X15] : (sP33(X4,X14,X3,X16,X15) <=> ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP33])])).
fof(f949,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP32(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f474])).
fof(f474,plain,(
  ! [X0,X1,X2,X3] : ((~sP32(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK258(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK259(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK258(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK259(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP32(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK258,sK259])],[f473])).
fof(f473,plain,(
  ! [X0,X1,X2,X3] : ((~sP32(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP32(X0,X1,X2,X3)))),
  inference(rectify,[],[f472])).
fof(f472,plain,(
  ! [X4,X21,X23,X22] : ((~sP32(X4,X21,X23,X22) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & (! [X24,X25] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))) | sP32(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f259])).
fof(f259,plain,(
  ! [X4,X21,X23,X22] : (sP32(X4,X21,X23,X22) <=> ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP32])])).
fof(f953,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP31(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f477])).
fof(f477,plain,(
  ! [X0,X1,X2,X3] : ((~sP31(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK260(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK261(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK260(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK261(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP31(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK260,sK261])],[f476])).
fof(f476,plain,(
  ! [X0,X1,X2,X3] : ((~sP31(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP31(X0,X1,X2,X3)))),
  inference(rectify,[],[f475])).
fof(f475,plain,(
  ! [X4,X21,X23,X22] : ((~sP31(X4,X21,X23,X22) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47)))))) & (! [X46,X47] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | sP31(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f258])).
fof(f258,plain,(
  ! [X4,X21,X23,X22] : (sP31(X4,X21,X23,X22) <=> ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP31])])).
fof(f968,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP28(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f486])).
fof(f486,plain,(
  ! [X0,X1,X2,X3] : ((~sP28(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK276(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK277(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK279(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK278(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK277(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK280(X3,X2,X1,X0)))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK278(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK279(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK276(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK277(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK279(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK280(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP28(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK276,sK277,sK278,sK279,sK280])],[f485])).
fof(f485,plain,(
  ! [X0,X1,X2,X3] : ((~sP28(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.modSem.v'),X12))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X11),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.conSem.v'),X13))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X12))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X13)))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP28(X0,X1,X2,X3)))),
  inference(rectify,[],[f484])).
fof(f484,plain,(
  ! [X4,X21,X23,X22] : ((~sP28(X4,X21,X23,X22) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))))) & (! [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | sP28(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f255])).
fof(f255,plain,(
  ! [X4,X21,X23,X22] : (sP28(X4,X21,X23,X22) <=> ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP28])])).
fof(f1077,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP49(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) )),
  inference(cnf_transformation,[],[f531])).
fof(f531,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP49(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK342(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK343(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK344(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK345(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK342(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK344(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK343(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK345(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP49(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK342,sK343,sK344,sK345])],[f530])).
fof(f530,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP49(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X9),s('type.list.list'('type.modSem.v'),X10))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X11),s('type.list.list'('type.conSem.v'),X12))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X9))),s('type.conSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X12)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP49(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f529])).
fof(f529,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP49(X4,X14,X3,X16,X15) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP49(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f528])).
fof(f528,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP49(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP49(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f279])).
fof(f1081,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP48(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f534])).
fof(f534,plain,(
  ! [X0,X1,X2,X3] : ((~sP48(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK346(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK347(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK346(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK347(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP48(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK346,sK347])],[f533])).
fof(f533,plain,(
  ! [X0,X1,X2,X3] : ((~sP48(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP48(X0,X1,X2,X3)))),
  inference(rectify,[],[f532])).
fof(f532,plain,(
  ! [X4,X21,X23,X22] : ((~sP48(X4,X21,X23,X22) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & (! [X24,X25] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))) | sP48(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f278])).
fof(f1085,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP47(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f537])).
fof(f537,plain,(
  ! [X0,X1,X2,X3] : ((~sP47(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK348(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK349(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK348(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK349(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP47(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK348,sK349])],[f536])).
fof(f536,plain,(
  ! [X0,X1,X2,X3] : ((~sP47(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP47(X0,X1,X2,X3)))),
  inference(rectify,[],[f535])).
fof(f535,plain,(
  ! [X4,X21,X23,X22] : ((~sP47(X4,X21,X23,X22) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47)))))) & (! [X46,X47] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | sP47(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f277])).
fof(f1100,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP44(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f546])).
fof(f546,plain,(
  ! [X0,X1,X2,X3] : ((~sP44(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK364(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK365(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK367(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK366(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK365(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK368(X3,X2,X1,X0)))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK366(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK367(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK364(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK365(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK367(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK368(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP44(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK364,sK365,sK366,sK367,sK368])],[f545])).
fof(f545,plain,(
  ! [X0,X1,X2,X3] : ((~sP44(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.modSem.v'),X12))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X11),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.conSem.v'),X13))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X12))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X13)))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP44(X0,X1,X2,X3)))),
  inference(rectify,[],[f544])).
fof(f544,plain,(
  ! [X4,X21,X23,X22] : ((~sP44(X4,X21,X23,X22) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))))) & (! [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | sP44(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f274])).
fof(f1101,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))) | sP50(X12,sK372(X14,X13,X12,X2,X1,X0),X14,sK374(X14,X13,X12,X2,X1,X0),sK373(X14,X13,X12,X2,X1,X0)) | sP49(X13,sK369(X14,X13,X12,X2,X1,X0),X12,sK371(X14,X13,X12,X2,X1,X0),sK370(X14,X13,X12,X2,X1,X0)) | sP51(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f549])).
fof(f1102,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))) | sP50(X12,sK372(X14,X13,X12,X2,X1,X0),X14,sK374(X14,X13,X12,X2,X1,X0),sK373(X14,X13,X12,X2,X1,X0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK369(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK370(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK371(X14,X13,X12,X2,X1,X0))))) | sP51(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f549])).
fof(f1103,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK372(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK373(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK374(X14,X13,X12,X2,X1,X0))))) | sP49(X13,sK369(X14,X13,X12,X2,X1,X0),X12,sK371(X14,X13,X12,X2,X1,X0),sK370(X14,X13,X12,X2,X1,X0)) | sP51(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f549])).
fof(f1104,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.modSem.v'),X1))),s('type.list.list'('type.conSem.v'),X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK372(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK373(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK374(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK369(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK370(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK371(X14,X13,X12,X2,X1,X0))))) | sP51(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f549])).
fof(f1221,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP66(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) )),
  inference(cnf_transformation,[],[f596])).
fof(f596,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP66(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK436(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK437(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK438(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK439(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK436(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK438(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK437(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK439(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP66(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK436,sK437,sK438,sK439])],[f595])).
fof(f595,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP66(X0,X1,X2,X3,X4) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3)) | ? [X9,X10,X11,X12] : (s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X9),s('type.list.list'('type.modSem.v'),X10))) & s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X11),s('type.list.list'('type.conSem.v'),X12))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X9))),s('type.conSem.v',X11)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X12)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3)) & ! [X5,X6,X7,X8] : (s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X8)))))) | sP66(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f594])).
fof(f594,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP66(X4,X14,X3,X16,X15) | (s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP66(X4,X14,X3,X16,X15)))),
  inference(flattening,[],[f593])).
fof(f593,plain,(
  ! [X4,X14,X3,X16,X15] : ((~sP66(X4,X14,X3,X16,X15) | ((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20))))))) & (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X15) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X16)) & ! [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) | s('type.list.list'('type.conSem.v'),X16) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) | sP66(X4,X14,X3,X16,X15)))),
  inference(nnf_transformation,[],[f300])).
fof(f1225,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP65(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f599])).
fof(f599,plain,(
  ! [X0,X1,X2,X3] : ((~sP65(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK440(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK441(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK440(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK441(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP65(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK440,sK441])],[f598])).
fof(f598,plain,(
  ! [X0,X1,X2,X3] : ((~sP65(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP65(X0,X1,X2,X3)))),
  inference(rectify,[],[f597])).
fof(f597,plain,(
  ! [X4,X21,X23,X22] : ((~sP65(X4,X21,X23,X22) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & (! [X24,X25] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25))))) | sP65(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f299])).
fof(f1229,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP64(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f602])).
fof(f602,plain,(
  ! [X0,X1,X2,X3] : ((~sP64(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK442(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK443(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK442(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK443(X3,X2,X1,X0))))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP64(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK442,sK443])],[f601])).
fof(f601,plain,(
  ! [X0,X1,X2,X3] : ((~sP64(X0,X1,X2,X3) | ? [X6,X7] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X6))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))))) & (! [X4,X5] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X5))))) | sP64(X0,X1,X2,X3)))),
  inference(rectify,[],[f600])).
fof(f600,plain,(
  ! [X4,X21,X23,X22] : ((~sP64(X4,X21,X23,X22) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47)))))) & (! [X46,X47] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | sP64(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f298])).
fof(f1244,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP61(X0,X1,X2,X3) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) )),
  inference(cnf_transformation,[],[f611])).
fof(f611,plain,(
  ! [X0,X1,X2,X3] : ((~sP61(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK458(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK459(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK461(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK460(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK459(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK462(X3,X2,X1,X0)))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK460(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK461(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK458(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK459(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK461(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK462(X3,X2,X1,X0))))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP61(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK458,sK459,sK460,sK461,sK462])],[f610])).
fof(f610,plain,(
  ! [X0,X1,X2,X3] : ((~sP61(X0,X1,X2,X3) | ? [X9,X10,X11,X12,X13] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.modSem.v'),X12))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X11),s('type.semanticPrimitives.tid_or_exn',X10))))),s('type.list.list'('type.conSem.v'),X13))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X11),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X12))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.semanticPrimitives.tid_or_exn',X10))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X13)))))) & (! [X4,X5,X6,X7,X8] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),X7))),s('type.list.list'('type.conSem.v'),X8))))) | sP61(X0,X1,X2,X3)))),
  inference(rectify,[],[f609])).
fof(f609,plain,(
  ! [X4,X21,X23,X22] : ((~sP61(X4,X21,X23,X22) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))))) & (! [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | sP61(X4,X21,X23,X22)))),
  inference(nnf_transformation,[],[f295])).
fof(f935,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP34(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) )),
  inference(cnf_transformation,[],[f467])).
fof(f467,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP34(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK249(X4,X3,X2,X1,X0)),s('type.modSem.v',sK250(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK249(X4,X3,X2,X1,X0)),s('type.conSem.v',sK253(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK252(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK252(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK250(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK253(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP34(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK249,sK250,sK251,sK252,sK253])],[f466])).
fof(f466,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP34(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.modSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X11))),s('type.conSem.v',X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP34(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f465])).
fof(f465,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP34(X3,X6,X5,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP34(X3,X6,X5,X8,X7)))),
  inference(flattening,[],[f464])).
fof(f464,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP34(X3,X6,X5,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP34(X3,X6,X5,X8,X7)))),
  inference(nnf_transformation,[],[f261])).
fof(f261,plain,(
  ! [X3,X6,X5,X8,X7] : (sP34(X3,X6,X5,X8,X7) <=> ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP34])])).
fof(f958,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP30(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) )),
  inference(cnf_transformation,[],[f480])).
fof(f480,plain,(
  ! [X0,X1,X2,X3] : ((~sP30(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK265(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK262(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK263(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK264(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK266(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK268(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK263(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK264(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK262(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK266(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK265(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK267(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK268(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP30(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK262,sK263,sK264,sK265,sK266,sK267,sK268])],[f479])).
fof(f479,plain,(
  ! [X0,X1,X2,X3] : ((~sP30(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12),s('type.list.list'('type.string.char'),X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12))),s('type.list.list'('type.string.char'),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP30(X0,X1,X2,X3)))),
  inference(rectify,[],[f478])).
fof(f478,plain,(
  ! [X21,X5,X23,X22] : ((~sP30(X21,X5,X23,X22) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP30(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f257])).
fof(f257,plain,(
  ! [X21,X5,X23,X22] : (sP30(X21,X5,X23,X22) <=> ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP30])])).
fof(f963,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP29(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) )),
  inference(cnf_transformation,[],[f483])).
fof(f483,plain,(
  ! [X0,X1,X2,X3] : ((~sP29(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK273(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK269(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK270(X3,X2,X1,X0)),s('type.modLang.exp',sK271(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK272(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK270(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK275(X3,X2,X1,X0)),s('type.modLang.exp',sK271(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK269(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK272(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK273(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK274(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK275(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP29(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK269,sK270,sK271,sK272,sK273,sK274,sK275])],[f482])).
fof(f482,plain,(
  ! [X0,X1,X2,X3] : ((~sP29(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.string.char'),X12),s('type.modLang.exp',X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14),s('type.list.list'('type.string.char'),X12),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.modLang.exp',X13))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP29(X0,X1,X2,X3)))),
  inference(rectify,[],[f481])).
fof(f481,plain,(
  ! [X21,X5,X23,X22] : ((~sP29(X21,X5,X23,X22) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP29(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f256])).
fof(f256,plain,(
  ! [X21,X5,X23,X22] : (sP29(X21,X5,X23,X22) <=> ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP29])])).
fof(f1067,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP50(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) )),
  inference(cnf_transformation,[],[f527])).
fof(f527,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP50(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK337(X4,X3,X2,X1,X0)),s('type.modSem.v',sK338(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK339(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK337(X4,X3,X2,X1,X0)),s('type.conSem.v',sK341(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK340(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK339(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK340(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK338(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK341(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP50(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK337,sK338,sK339,sK340,sK341])],[f526])).
fof(f526,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP50(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.modSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X11))),s('type.conSem.v',X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP50(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f525])).
fof(f525,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP50(X3,X6,X5,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP50(X3,X6,X5,X8,X7)))),
  inference(flattening,[],[f524])).
fof(f524,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP50(X3,X6,X5,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP50(X3,X6,X5,X8,X7)))),
  inference(nnf_transformation,[],[f280])).
fof(f1090,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP46(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) )),
  inference(cnf_transformation,[],[f540])).
fof(f540,plain,(
  ! [X0,X1,X2,X3] : ((~sP46(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK353(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK350(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK351(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK352(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK354(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK356(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK351(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK352(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK350(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK354(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK353(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK355(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK356(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP46(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK350,sK351,sK352,sK353,sK354,sK355,sK356])],[f539])).
fof(f539,plain,(
  ! [X0,X1,X2,X3] : ((~sP46(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12),s('type.list.list'('type.string.char'),X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12))),s('type.list.list'('type.string.char'),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP46(X0,X1,X2,X3)))),
  inference(rectify,[],[f538])).
fof(f538,plain,(
  ! [X21,X5,X23,X22] : ((~sP46(X21,X5,X23,X22) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP46(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f276])).
fof(f1095,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP45(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) )),
  inference(cnf_transformation,[],[f543])).
fof(f543,plain,(
  ! [X0,X1,X2,X3] : ((~sP45(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK361(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK357(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK358(X3,X2,X1,X0)),s('type.modLang.exp',sK359(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK360(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK358(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK363(X3,X2,X1,X0)),s('type.modLang.exp',sK359(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK357(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK360(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK361(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK362(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK363(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP45(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK357,sK358,sK359,sK360,sK361,sK362,sK363])],[f542])).
fof(f542,plain,(
  ! [X0,X1,X2,X3] : ((~sP45(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.string.char'),X12),s('type.modLang.exp',X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14),s('type.list.list'('type.string.char'),X12),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.modLang.exp',X13))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP45(X0,X1,X2,X3)))),
  inference(rectify,[],[f541])).
fof(f541,plain,(
  ! [X21,X5,X23,X22] : ((~sP45(X21,X5,X23,X22) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP45(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f275])).
fof(f1211,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP67(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) )),
  inference(cnf_transformation,[],[f592])).
fof(f592,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP67(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK431(X4,X3,X2,X1,X0)),s('type.modSem.v',sK432(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK433(X4,X3,X2,X1,X0)))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK431(X4,X3,X2,X1,X0)),s('type.conSem.v',sK435(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK434(X4,X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK433(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK434(X4,X3,X2,X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK432(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK435(X4,X3,X2,X1,X0))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP67(X0,X1,X2,X3,X4)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK431,sK432,sK433,sK434,sK435])],[f591])).
fof(f591,plain,(
  ! [X0,X1,X2,X3,X4] : ((~sP67(X0,X1,X2,X3,X4) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) | ? [X10,X11,X12,X13,X14] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.modSem.v',X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X10),s('type.conSem.v',X14))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X12))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X11))),s('type.conSem.v',X14)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3)) & ! [X5,X6,X7,X8,X9] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))))) | sP67(X0,X1,X2,X3,X4)))),
  inference(rectify,[],[f590])).
fof(f590,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP67(X3,X6,X5,X8,X7) | (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP67(X3,X6,X5,X8,X7)))),
  inference(flattening,[],[f589])).
fof(f589,plain,(
  ! [X3,X6,X5,X8,X7] : ((~sP67(X3,X6,X5,X8,X7) | ((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13))))))) & (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) & ! [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) | sP67(X3,X6,X5,X8,X7)))),
  inference(nnf_transformation,[],[f301])).
fof(f1234,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP63(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) )),
  inference(cnf_transformation,[],[f605])).
fof(f605,plain,(
  ! [X0,X1,X2,X3] : ((~sP63(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK447(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK444(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK445(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK446(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK448(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK450(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK445(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK446(X3,X2,X1,X0)))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK444(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK448(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK447(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK449(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK450(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP63(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK444,sK445,sK446,sK447,sK448,sK449,sK450])],[f604])).
fof(f604,plain,(
  ! [X0,X1,X2,X3] : ((~sP63(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12),s('type.list.list'('type.string.char'),X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X12))),s('type.list.list'('type.string.char'),X13))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X15)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP63(X0,X1,X2,X3)))),
  inference(rectify,[],[f603])).
fof(f603,plain,(
  ! [X21,X5,X23,X22] : ((~sP63(X21,X5,X23,X22) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP63(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f297])).
fof(f1239,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP62(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) )),
  inference(cnf_transformation,[],[f608])).
fof(f608,plain,(
  ! [X0,X1,X2,X3] : ((~sP62(X0,X1,X2,X3) | (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK455(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK451(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK452(X3,X2,X1,X0)),s('type.modLang.exp',sK453(X3,X2,X1,X0)))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK454(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK452(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK457(X3,X2,X1,X0)),s('type.modLang.exp',sK453(X3,X2,X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK451(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK454(X3,X2,X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK455(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK456(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK457(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP62(X0,X1,X2,X3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK451,sK452,sK453,sK454,sK455,sK456,sK457])],[f607])).
fof(f607,plain,(
  ! [X0,X1,X2,X3] : ((~sP62(X0,X1,X2,X3) | ? [X11,X12,X13,X14,X15,X16,X17] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.string.char'),X12),s('type.modLang.exp',X13))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14),s('type.list.list'('type.string.char'),X12),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.modLang.exp',X13))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X14)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X15),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X16),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))))) & (! [X4,X5,X6,X7,X8,X9,X10] : (s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | sP62(X0,X1,X2,X3)))),
  inference(rectify,[],[f606])).
fof(f606,plain,(
  ! [X21,X5,X23,X22] : ((~sP62(X21,X5,X23,X22) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))))) & (! [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | sP62(X21,X5,X23,X22)))),
  inference(nnf_transformation,[],[f296])).
fof(f1107,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK377(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~sP50(sK375(X2,X1,X0),X6,sK377(X2,X1,X0),X8,X7)) )),
  inference(cnf_transformation,[],[f549])).
fof(f975,plain,(
  ( ! [X6,X2,X0,X8,X7,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK289(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) | ~sP34(sK287(X2,X1,X0),X6,sK289(X2,X1,X0),X8,X7)) )),
  inference(cnf_transformation,[],[f489])).
fof(f489,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X12,X13,X14] : (sP35(X12,X13,X14) | (sP33(X13,sK281(X14,X13,X12,X2,X1,X0),X12,sK283(X14,X13,X12,X2,X1,X0),sK282(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK281(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK282(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK283(X14,X13,X12,X2,X1,X0)))))) | (sP34(X12,sK284(X14,X13,X12,X2,X1,X0),X14,sK286(X14,X13,X12,X2,X1,X0),sK285(X14,X13,X12,X2,X1,X0)) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK284(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK285(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK286(X14,X13,X12,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & ((~sP35(sK287(X2,X1,X0),sK288(X2,X1,X0),sK289(X2,X1,X0)) & ! [X9,X10,X11] : (~sP33(sK288(X2,X1,X0),X9,sK287(X2,X1,X0),X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK288(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP34(sK287(X2,X1,X0),X6,sK289(X2,X1,X0),X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),sK289(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK287(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK281,sK282,sK283,sK284,sK285,sK286,sK287,sK288,sK289])],[f488])).
fof(f488,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X12,X13,X14] : (sP35(X12,X13,X14) | ? [X18,X19,X20] : (sP33(X13,X18,X12,X20,X19) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X18))),s('type.list.list'('type.modSem.v'),X19))),s('type.list.list'('type.conSem.v'),X20))))) | ? [X15,X16,X17] : (sP34(X12,X15,X14,X17,X16) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X16))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X17))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & (? [X3,X4,X5] : (~sP35(X3,X4,X5) & ! [X9,X10,X11] : (~sP33(X4,X9,X3,X11,X10) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11))))) & ! [X6,X7,X8] : (~sP34(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f487])).
fof(f487,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ! [X3,X4,X5] : (sP35(X3,X4,X5) | ? [X14,X15,X16] : (sP33(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP34(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))))) & (? [X3,X4,X5] : (~sP35(X3,X4,X5) & ! [X14,X15,X16] : (~sP33(X4,X14,X3,X16,X15) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (~sP34(X3,X6,X5,X8,X7) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(nnf_transformation,[],[f263])).
fof(f263,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : (sP35(X3,X4,X5) | ? [X14,X15,X16] : (sP33(X4,X14,X3,X16,X15) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (sP34(X3,X6,X5,X8,X7) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(definition_folding,[],[f201,f262,f261,f260,f259,f258,f257,f256,f255])).
fof(f262,plain,(
  ! [X3,X4,X5] : (sP35(X3,X4,X5) <=> ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP31(X4,X21,X23,X22) | sP28(X4,X21,X23,X22) | sP29(X21,X5,X23,X22) | sP30(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP32(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP35])])).
fof(f201,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : (? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(flattening,[],[f200])).
fof(f200,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : ((? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | ? [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) | ? [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(ennf_transformation,[],[f140])).
fof(f140,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> ! [X3,X4,X5] : ((! [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | ? [X46,X47] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X46))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X47))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X46))),s('type.list.list'('type.conSem.v'),X47))))) | ? [X41,X42,X43,X44,X45] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.modSem.v'),X44))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X43),s('type.semanticPrimitives.tid_or_exn',X42))))),s('type.list.list'('type.conSem.v'),X45))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X43),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X44))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X41),s('type.semanticPrimitives.tid_or_exn',X42))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45))))) | ? [X34,X35,X36,X37,X38,X39,X40] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.string.char'),X35),s('type.modLang.exp',X36))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37),s('type.list.list'('type.string.char'),X35),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.modLang.exp',X36))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X37)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X38),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X39),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X40),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X27,X28,X29,X30,X31,X32,X33] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28),s('type.list.list'('type.string.char'),X29))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X28))),s('type.list.list'('type.string.char'),X29))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X27))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X31)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X30),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X32),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X33),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | ? [X24,X25] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X24))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X25))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.modSem.v'),X24))),s('type.list.list'('type.conSem.v'),X25)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) & ! [X14,X15,X16] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X15) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X16)) | ? [X17,X18,X19,X20] : (s('type.list.list'('type.modSem.v'),X15) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X17),s('type.list.list'('type.modSem.v'),X18))) & s('type.list.list'('type.conSem.v'),X16) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X19),s('type.list.list'('type.conSem.v'),X20))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.modSem.v',X17))),s('type.conSem.v',X19)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X18))),s('type.list.list'('type.conSem.v'),X20)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X4),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.list.list'('type.modSem.v'),X15))),s('type.list.list'('type.conSem.v'),X16))))) & ! [X6,X7,X8] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)) | ? [X9,X10,X11,X12,X13] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.modSem.v',X10))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X9),s('type.conSem.v',X13))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X11))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X12)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X10))),s('type.conSem.v',X13)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X5),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X5,X8,X9] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.modSem.v',X8),s('type.conSem.v',X9)))) <=> ! [X10,X11,X12] : ((! [X39,X40,X41] : ((? [X16] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))) | ? [X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X19,X20,X21,X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))))) | ? [X30] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))) | ? [X17,X18] : (s('type.modSem.v',X40) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X41) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X39))),s('type.modSem.v',X40))),s('type.conSem.v',X41))))) & ! [X31,X32,X33] : (((s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X32) & s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X33)) | ? [X34,X17,X35,X18] : (s('type.list.list'('type.modSem.v'),X32) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X34),s('type.list.list'('type.modSem.v'),X17))) & s('type.list.list'('type.conSem.v'),X33) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X35),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31))),s('type.modSem.v',X34))),s('type.conSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31))),s('type.list.list'('type.modSem.v'),X32))),s('type.list.list'('type.conSem.v'),X33))))) & ! [X42,X43,X44] : (((s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)) | ? [X23,X34,X22,X7,X35] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))) & p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.modSem.v',X34))),s('type.conSem.v',X35)))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.v',X8))),s('type.conSem.v',X9))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel2_def')).
fof(f1106,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK376(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11)))) | ~sP49(sK376(X2,X1,X0),X9,sK375(X2,X1,X0),X11,X10)) )),
  inference(cnf_transformation,[],[f549])).
fof(f974,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),sK288(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.modSem.v'),X10))),s('type.list.list'('type.conSem.v'),X11)))) | ~sP33(sK288(X2,X1,X0),X9,sK287(X2,X1,X0),X11,X10)) )),
  inference(cnf_transformation,[],[f489])).
fof(f786,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK135(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f391])).
fof(f391,plain,(
  ! [X0,X1,X2] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0))))))) | (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0)))))))) | sP2(X0,X1) | sP3(X0,X2) | sP4(X0,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0)))))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK135(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP6(X2,X0) | sP7(X2,X1,X0))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK124,sK125,sK126,sK127,sK128,sK129,sK130,sK131,sK132,sK133,sK134,sK135])],[f390])).
fof(f390,plain,(
  ! [X0,X1,X2] : (? [X13,X14] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X14))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X14)))))) | ? [X10,X11,X12] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X11))),s('type.list.list'('type.conSem.v'),X12)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X11))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X12))))))) | sP2(X0,X1) | sP3(X0,X2) | sP4(X0,X2) | ? [X8,X9] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X9))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X9)))))) | ? [X5,X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X6))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X7))))))) | ? [X4] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP5(X1,X0) | ? [X3] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP6(X2,X0) | sP7(X2,X1,X0))),
  inference(rectify,[],[f231])).
fof(f231,plain,(
  ! [X0,X1,X2] : (? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | sP2(X0,X1) | sP3(X0,X2) | sP4(X0,X2) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP5(X1,X0) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP6(X2,X0) | sP7(X2,X1,X0))),
  inference(definition_folding,[],[f195,f230,f229,f228,f227,f226,f225])).
fof(f225,plain,(
  ! [X0,X1] : (~sP2(X0,X1) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP2])])).
fof(f226,plain,(
  ! [X0,X2] : (~sP3(X0,X2) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP3])])).
fof(f227,plain,(
  ! [X0,X2] : (~sP4(X0,X2) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP4])])).
fof(f228,plain,(
  ! [X1,X0] : (~sP5(X1,X0) | ? [X10,X11,X12,X13,X14] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP5])])).
fof(f229,plain,(
  ! [X2,X0] : (~sP6(X2,X0) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP6])])).
fof(f195,plain,(
  ! [X0,X1,X2] : (? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ? [X10,X11,X12,X13,X14] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(flattening,[],[f194])).
fof(f194,plain,(
  ! [X0,X1,X2] : ((? [X46,X47] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) | ? [X43,X44,X45] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) | ? [X37,X38,X39,X40,X41,X42] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) | ? [X19,X20] : ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) | ? [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) | ? [X15] : ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ? [X10,X11,X12,X13,X14] : ((p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) | ? [X9] : ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ? [X3,X4,X5,X6,X7,X8] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) | (! [X54,X55,X56] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) | p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(ennf_transformation,[],[f136])).
fof(f136,plain,(
  ! [X0,X1,X2] : ((! [X46,X47] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X46))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X47))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X47)))))) & ! [X43,X44,X45] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))) & ! [X37,X38,X39,X40,X41,X42] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))) & ! [X29,X30,X31,X32,X33,X34,X35,X36] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))) & ! [X21,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))) & ! [X19,X20] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X19))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X20))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X20)))))) & ! [X16,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) & ! [X15] : p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X15))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) & ! [X10,X11,X12,X13,X14] : ((p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))) & ! [X9] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) & ! [X3,X4,X5,X6,X7,X8] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) => (! [X54,X55,X56] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54),s('type.modSem.v',X55),s('type.conSem.v',X56)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X54))),s('type.modSem.v',X55))),s('type.conSem.v',X56))))) & ! [X51,X52,X53] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51),s('type.list.list'('type.modSem.v'),X52),s('type.list.list'('type.conSem.v'),X53)))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X51))),s('type.list.list'('type.modSem.v'),X52))),s('type.list.list'('type.conSem.v'),X53))))) & ! [X48,X49,X50] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X48))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X49))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X50)))))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X10,X11,X12] : ((! [X6,X16] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))))) & ! [X6,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))))))) & ! [X6,X19,X20,X21,X17,X18] : ((s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))))))) & ! [X6,X22,X23,X24,X25,X26,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))))))) & ! [X6,X22,X29,X23,X26,X25,X27,X28] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))))))) & ! [X6,X30] : p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))))) & ! [X6,X17,X18] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))) & ! [X6] : p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) & ! [X6,X34,X17,X35,X18] : ((p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X34))),s('type.conSem.v',X35)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18))))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X34),s('type.list.list'('type.modSem.v'),X17))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X35),s('type.list.list'('type.conSem.v'),X18))))))) & ! [X6] : p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) & ! [X6,X23,X34,X22,X7,X35] : ((p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.modSem.v',X34))),s('type.conSem.v',X35))))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.modSem.v',X34))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X23),s('type.conSem.v',X35))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))))))) => (! [X13,X14,X15] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.modSem.v',X14),s('type.conSem.v',X15)))) => p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))),s('type.modSem.v',X14))),s('type.conSem.v',X15))))) & ! [X31,X32,X33] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31),s('type.list.list'('type.modSem.v'),X32),s('type.list.list'('type.conSem.v'),X33)))) => p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X11),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X31))),s('type.list.list'('type.modSem.v'),X32))),s('type.list.list'('type.conSem.v'),X33))))) & ! [X42,X43,X44] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)))) => p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X42))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X43))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X44)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_ind')).
fof(f787,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK135(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f391])).
fof(f788,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK135(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f391])).
fof(f789,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK135(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f391])).
fof(f818,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | sP9(X2,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK180(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | sP8(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK179(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | sP14(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK177(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK178(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK178(X2,X1,X0))))))) | sP12(X0,X2) | sP11(X0,X2) | sP10(X0,X1) | sP13(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK175(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK176(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK176(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f414])).
fof(f817,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK171(X1,X0)),s('type.list.list'('type.modSem.v'),sK172(X1,X0)))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK173(X1,X0)),s('type.list.list'('type.conSem.v'),sK174(X1,X0))))))) | ~sP8(X0,X1)) )),
  inference(cnf_transformation,[],[f412])).
fof(f412,plain,(
  ! [X0,X1] : (~sP8(X0,X1) | (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)),s('type.modSem.v',sK171(X1,X0)),s('type.conSem.v',sK173(X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)))),s('type.modSem.v',sK171(X1,X0)))),s('type.conSem.v',sK173(X1,X0))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)),s('type.list.list'('type.modSem.v'),sK172(X1,X0)),s('type.list.list'('type.conSem.v'),sK174(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)))),s('type.list.list'('type.modSem.v'),sK172(X1,X0)))),s('type.list.list'('type.conSem.v'),sK174(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK171(X1,X0)),s('type.list.list'('type.modSem.v'),sK172(X1,X0)))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK173(X1,X0)),s('type.list.list'('type.conSem.v'),sK174(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK170,sK171,sK172,sK173,sK174])],[f411])).
fof(f411,plain,(
  ! [X0,X1] : (~sP8(X0,X1) | ? [X2,X3,X4,X5,X6] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.modSem.v',X3),s('type.conSem.v',X5)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X3))),s('type.conSem.v',X5)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))))))))),
  inference(rectify,[],[f410])).
fof(f410,plain,(
  ! [X1,X0] : (~sP8(X1,X0) | ? [X10,X11,X12,X13,X14] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.modSem.v',X11),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10),s('type.list.list'('type.modSem.v'),X12),s('type.list.list'('type.conSem.v'),X14)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))))),
  inference(nnf_transformation,[],[f232])).
fof(f776,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK97(X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK98(X1,X0)),s('type.list.list'('type.modSem.v'),sK99(X1,X0)))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK100(X1,X0)),s('type.list.list'('type.conSem.v'),sK101(X1,X0))))))) | ~sP5(X0,X1)) )),
  inference(cnf_transformation,[],[f380])).
fof(f380,plain,(
  ! [X0,X1] : (~sP5(X0,X1) | (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK97(X1,X0)))),s('type.modSem.v',sK98(X1,X0)))),s('type.conSem.v',sK100(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK97(X1,X0)))),s('type.list.list'('type.modSem.v'),sK99(X1,X0)))),s('type.list.list'('type.conSem.v'),sK101(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK97(X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK98(X1,X0)),s('type.list.list'('type.modSem.v'),sK99(X1,X0)))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK100(X1,X0)),s('type.list.list'('type.conSem.v'),sK101(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK97,sK98,sK99,sK100,sK101])],[f379])).
fof(f379,plain,(
  ! [X0,X1] : (~sP5(X0,X1) | ? [X2,X3,X4,X5,X6] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X3))),s('type.conSem.v',X5)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X4))),s('type.list.list'('type.conSem.v'),X6)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))))))))),
  inference(rectify,[],[f378])).
fof(f378,plain,(
  ! [X1,X0] : (~sP5(X1,X0) | ? [X10,X11,X12,X13,X14] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.modSem.v',X11))),s('type.conSem.v',X13)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),X12))),s('type.list.list'('type.conSem.v'),X14)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X10))),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X11),s('type.list.list'('type.modSem.v'),X12))))),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X13),s('type.list.list'('type.conSem.v'),X14))))))))),
  inference(nnf_transformation,[],[f228])).
fof(f812,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK165(X1,X0)),s('type.modSem.v',sK166(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK167(X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK165(X1,X0)),s('type.conSem.v',sK169(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK168(X1,X0))))))) | ~sP9(X0,X1)) )),
  inference(cnf_transformation,[],[f409])).
fof(f773,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK91(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK92(X1,X0)),s('type.modSem.v',sK93(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK94(X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK92(X1,X0)),s('type.conSem.v',sK96(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK95(X1,X0))))))) | ~sP6(X0,X1)) )),
  inference(cnf_transformation,[],[f377])).
fof(f377,plain,(
  ! [X0,X1] : (~sP6(X0,X1) | (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK91(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK94(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK95(X1,X0))))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK91(X1,X0)))),s('type.modSem.v',sK93(X1,X0)))),s('type.conSem.v',sK96(X1,X0))))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK91(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK92(X1,X0)),s('type.modSem.v',sK93(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK94(X1,X0)))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK92(X1,X0)),s('type.conSem.v',sK96(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK95(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK91,sK92,sK93,sK94,sK95,sK96])],[f376])).
fof(f376,plain,(
  ! [X0,X1] : (~sP6(X0,X1) | ? [X2,X3,X4,X5,X6,X7] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v',X4))),s('type.conSem.v',X7)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))))))))),
  inference(rectify,[],[f375])).
fof(f375,plain,(
  ! [X2,X0] : (~sP6(X2,X0) | ? [X3,X4,X5,X6,X7,X8] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X5))),s('type.conSem.v',X8)))) & ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.modSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.conSem.v',X8))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))))))))),
  inference(nnf_transformation,[],[f229])).
fof(f771,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK91(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK94(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK95(X1,X0))))) | ~sP6(X0,X1)) )),
  inference(cnf_transformation,[],[f377])).
fof(f775,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK97(X1,X0)))),s('type.list.list'('type.modSem.v'),sK99(X1,X0)))),s('type.list.list'('type.conSem.v'),sK101(X1,X0))))) | ~sP5(X0,X1)) )),
  inference(cnf_transformation,[],[f380])).
fof(f777,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK103(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK107(X1,X0))))) | ~sP4(X0,X1)) )),
  inference(cnf_transformation,[],[f383])).
fof(f383,plain,(
  ! [X0,X1] : (~sP4(X0,X1) | (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK103(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK107(X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK106(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK108(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK109(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X1,X0)))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK106(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK103(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK104(X1,X0)),s('type.list.list'('type.string.char'),sK105(X1,X0)))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK107(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK109(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK104(X1,X0)))),s('type.list.list'('type.string.char'),sK105(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK102,sK103,sK104,sK105,sK106,sK107,sK108,sK109])],[f382])).
fof(f382,plain,(
  ! [X0,X1] : (~sP4(X0,X1) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))))))))),
  inference(rectify,[],[f381])).
fof(f381,plain,(
  ! [X0,X2] : (~sP4(X0,X2) | ? [X21,X22,X23,X24,X25,X26,X27,X28] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23),s('type.list.list'('type.string.char'),X24))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X23))),s('type.list.list'('type.string.char'),X24))))))))),
  inference(nnf_transformation,[],[f227])).
fof(f780,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK111(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK114(X1,X0))))) | ~sP3(X0,X1)) )),
  inference(cnf_transformation,[],[f386])).
fof(f386,plain,(
  ! [X0,X1] : (~sP3(X0,X1) | (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK111(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK114(X1,X0))))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK115(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK116(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK117(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X1,X0)))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK115(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK111(X1,X0)))),s('type.list.list'('type.string.char'),sK112(X1,X0)),s('type.modLang.exp',sK113(X1,X0)))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK114(X1,X0)),s('type.list.list'('type.string.char'),sK112(X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK117(X1,X0)),s('type.modLang.exp',sK113(X1,X0)))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK110,sK111,sK112,sK113,sK114,sK115,sK116,sK117])],[f385])).
fof(f385,plain,(
  ! [X0,X1] : (~sP3(X0,X1) | ? [X2,X3,X4,X5,X6,X7,X8,X9] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))))))))),
  inference(rectify,[],[f384])).
fof(f384,plain,(
  ! [X0,X2] : (~sP3(X0,X2) | ? [X29,X30,X31,X32,X33,X34,X35,X36] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X35),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X29))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X34),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X30))),s('type.list.list'('type.string.char'),X31),s('type.modLang.exp',X32))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X33),s('type.list.list'('type.string.char'),X31),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X36),s('type.modLang.exp',X32))))))))))),
  inference(nnf_transformation,[],[f226])).
fof(f784,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))),s('type.list.list'('type.modSem.v'),sK122(X1,X0)))),s('type.list.list'('type.conSem.v'),sK123(X1,X0))))) | ~sP2(X0,X1)) )),
  inference(cnf_transformation,[],[f389])).
fof(f389,plain,(
  ! [X0,X1] : (~sP2(X0,X1) | (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK121(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK122(X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK119(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK120(X1,X0)))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))),s('type.list.list'('type.modSem.v'),sK122(X1,X0)))),s('type.list.list'('type.conSem.v'),sK123(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK119(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK120(X1,X0)))))),s('type.list.list'('type.modSem.v'),sK122(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK121(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK120(X1,X0)))))),s('type.list.list'('type.conSem.v'),sK123(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK118,sK119,sK120,sK121,sK122,sK123])],[f388])).
fof(f388,plain,(
  ! [X0,X1] : (~sP2(X0,X1) | ? [X2,X3,X4,X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))))))))),
  inference(rectify,[],[f387])).
fof(f387,plain,(
  ! [X0,X1] : (~sP2(X0,X1) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))))),
  inference(nnf_transformation,[],[f225])).
fof(f791,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK136(X1,X0)))),s('type.list.list'('type.modSem.v'),sK137(X1,X0)))),s('type.list.list'('type.conSem.v'),sK138(X1,X0))))) | ~sP14(X0,X1)) )),
  inference(cnf_transformation,[],[f394])).
fof(f394,plain,(
  ! [X0,X1] : (~sP14(X0,X1) | (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK136(X1,X0)),s('type.list.list'('type.modSem.v'),sK137(X1,X0)),s('type.list.list'('type.conSem.v'),sK138(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK136(X1,X0)))),s('type.list.list'('type.modSem.v'),sK137(X1,X0)))),s('type.list.list'('type.conSem.v'),sK138(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK136(X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK137(X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK138(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK136,sK137,sK138])],[f393])).
fof(f393,plain,(
  ! [X0,X1] : (~sP14(X0,X1) | ? [X2,X3,X4] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),X4)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))))))))),
  inference(rectify,[],[f392])).
fof(f392,plain,(
  ! [X0,X1] : (~sP14(X0,X1) | ? [X16,X17,X18] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.list.list'('type.modSem.v'),X17))),s('type.list.list'('type.conSem.v'),X18)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X16))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))))))))),
  inference(nnf_transformation,[],[f238])).
fof(f794,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK139(X1,X0)))),s('type.list.list'('type.modSem.v'),sK140(X1,X0)))),s('type.list.list'('type.conSem.v'),sK141(X1,X0))))) | ~sP13(X0,X1)) )),
  inference(cnf_transformation,[],[f397])).
fof(f397,plain,(
  ! [X0,X1] : (~sP13(X0,X1) | (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK139(X1,X0)),s('type.list.list'('type.modSem.v'),sK140(X1,X0)),s('type.list.list'('type.conSem.v'),sK141(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK139(X1,X0)))),s('type.list.list'('type.modSem.v'),sK140(X1,X0)))),s('type.list.list'('type.conSem.v'),sK141(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK139(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK140(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK141(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK139,sK140,sK141])],[f396])).
fof(f396,plain,(
  ! [X0,X1] : (~sP13(X0,X1) | ? [X2,X3,X4] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X3))),s('type.list.list'('type.conSem.v'),X4)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X3))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X4))))))))),
  inference(rectify,[],[f395])).
fof(f395,plain,(
  ! [X0,X1] : (~sP13(X0,X1) | ? [X43,X44,X45] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43),s('type.list.list'('type.modSem.v'),X44),s('type.list.list'('type.conSem.v'),X45)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.list.list'('type.modSem.v'),X44))),s('type.list.list'('type.conSem.v'),X45)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X43))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X44))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X45))))))))),
  inference(nnf_transformation,[],[f237])).
fof(f797,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK142(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK147(X1,X0))))) | ~sP12(X0,X1)) )),
  inference(cnf_transformation,[],[f400])).
fof(f801,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK150(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK151(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK154(X1,X0))))) | ~sP11(X0,X1)) )),
  inference(cnf_transformation,[],[f403])).
fof(f806,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK158(X1,X0)))),s('type.list.list'('type.modSem.v'),sK162(X1,X0)))),s('type.list.list'('type.conSem.v'),sK163(X1,X0))))) | ~sP10(X0,X1)) )),
  inference(cnf_transformation,[],[f406])).
fof(f406,plain,(
  ! [X0,X1] : (~sP10(X0,X1) | (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK161(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK162(X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK158(X1,X0)),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK159(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK160(X1,X0)))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK158(X1,X0)),s('type.list.list'('type.modSem.v'),sK162(X1,X0)),s('type.list.list'('type.conSem.v'),sK163(X1,X0))))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK158(X1,X0)))),s('type.list.list'('type.modSem.v'),sK162(X1,X0)))),s('type.list.list'('type.conSem.v'),sK163(X1,X0))))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK158(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK159(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK160(X1,X0)))))),s('type.list.list'('type.modSem.v'),sK162(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK161(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK160(X1,X0)))))),s('type.list.list'('type.conSem.v'),sK163(X1,X0)))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK158,sK159,sK160,sK161,sK162,sK163])],[f405])).
fof(f405,plain,(
  ! [X0,X1] : (~sP10(X0,X1) | ? [X2,X3,X4,X5,X6,X7] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),X6),s('type.list.list'('type.conSem.v'),X7)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.list.list'('type.modSem.v'),X6))),s('type.list.list'('type.conSem.v'),X7)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))))))))),
  inference(rectify,[],[f404])).
fof(f404,plain,(
  ! [X0,X1] : (~sP10(X0,X1) | ? [X37,X38,X39,X40,X41,X42] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X40),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X41))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37),s('type.list.list'('type.modSem.v'),X41),s('type.list.list'('type.conSem.v'),X42)))) & p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.list.list'('type.modSem.v'),X41))),s('type.list.list'('type.conSem.v'),X42)))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X37))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X38),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.modSem.v'),X41))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X40),s('type.semanticPrimitives.tid_or_exn',X39))))),s('type.list.list'('type.conSem.v'),X42))))))))),
  inference(nnf_transformation,[],[f234])).
fof(f809,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK167(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK168(X1,X0))))) | ~sP9(X0,X1)) )),
  inference(cnf_transformation,[],[f409])).
fof(f816,plain,(
  ( ! [X0,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)))),s('type.list.list'('type.modSem.v'),sK172(X1,X0)))),s('type.list.list'('type.conSem.v'),sK174(X1,X0))))) | ~sP8(X0,X1)) )),
  inference(cnf_transformation,[],[f412])).
fof(f930,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK252(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP34(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f931,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK252(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP34(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f942,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK255(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK257(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | ~sP33(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f471])).
fof(f943,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK255(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK257(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | ~sP33(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f471])).
fof(f948,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK258(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK259(X3,X2,X1,X0))))) | ~sP32(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f474])).
fof(f952,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK260(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK261(X3,X2,X1,X0))))) | ~sP31(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f477])).
fof(f956,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK262(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK266(X3,X2,X1,X0))))) | ~sP30(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f480])).
fof(f961,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK269(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK272(X3,X2,X1,X0))))) | ~sP29(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f483])).
fof(f967,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK279(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK280(X3,X2,X1,X0))))) | ~sP28(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f486])).
fof(f970,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))) | sP34(X12,sK284(X14,X13,X12,X2,X1,X0),X14,sK286(X14,X13,X12,X2,X1,X0),sK285(X14,X13,X12,X2,X1,X0)) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK281(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK282(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK283(X14,X13,X12,X2,X1,X0))))) | sP35(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f489])).
fof(f972,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK284(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK285(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK286(X14,X13,X12,X2,X1,X0))))) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK281(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.modSem.v'),sK282(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK283(X14,X13,X12,X2,X1,X0))))) | sP35(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f489])).
fof(f971,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))) | ~p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X14),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK284(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK285(X14,X13,X12,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK286(X14,X13,X12,X2,X1,X0))))) | sP33(X13,sK281(X14,X13,X12,X2,X1,X0),X12,sK283(X14,X13,X12,X2,X1,X0),sK282(X14,X13,X12,X2,X1,X0)) | sP35(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f489])).
fof(f1062,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK339(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK340(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP50(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1063,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK339(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK340(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP50(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1074,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK343(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK345(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | ~sP49(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f531])).
fof(f1075,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK343(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK345(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | ~sP49(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f531])).
fof(f1080,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK346(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK347(X3,X2,X1,X0))))) | ~sP48(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f534])).
fof(f1084,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK348(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK349(X3,X2,X1,X0))))) | ~sP47(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f537])).
fof(f1088,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK350(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK354(X3,X2,X1,X0))))) | ~sP46(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f540])).
fof(f1093,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK357(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK360(X3,X2,X1,X0))))) | ~sP45(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f543])).
fof(f1099,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK367(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK368(X3,X2,X1,X0))))) | ~sP44(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f546])).
fof(f1206,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK433(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK434(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP67(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1207,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK433(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK434(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP67(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1218,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK437(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK439(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | ~sP66(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f596])).
fof(f1219,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK437(X4,X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK439(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | ~sP66(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f596])).
fof(f1224,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK440(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK441(X3,X2,X1,X0))))) | ~sP65(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f599])).
fof(f1228,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK442(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK443(X3,X2,X1,X0))))) | ~sP64(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f602])).
fof(f1232,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK444(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK448(X3,X2,X1,X0))))) | ~sP63(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f605])).
fof(f1237,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool),happ(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK451(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK454(X3,X2,X1,X0))))) | ~sP62(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f608])).
fof(f1243,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.list.list'('type.modSem.v'),sK461(X3,X2,X1,X0)))),s('type.list.list'('type.conSem.v'),sK462(X3,X2,X1,X0))))) | ~sP61(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f611])).
fof(f976,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),sK287(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f489])).
fof(f768,plain,(
  ( ! [X2,X0,X10,X1,X11,X9] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9))),s('type.modSem.v',X10))),s('type.conSem.v',X11)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X9),s('type.modSem.v',X10),s('type.conSem.v',X11)))) | ~sP7(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f374])).
fof(f919,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP35(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f463])).
fof(f463,plain,(
  ! [X0,X1,X2] : ((~sP35(X0,X1,X2) | (((s('type.modSem.v',sK245(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK247(X2,X1,X0)))) & s('type.conSem.v',sK246(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK247(X2,X1,X0))))) | sP31(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP28(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP29(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP30(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | (s('type.modSem.v',sK245(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK248(X2,X1,X0)))) & s('type.conSem.v',sK246(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK248(X2,X1,X0))))) | sP32(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X2,X1,X0)))),s('type.modSem.v',sK245(X2,X1,X0)))),s('type.conSem.v',sK246(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP31(X1,X3,X5,X4) & ~sP28(X1,X3,X5,X4) & ~sP29(X3,X2,X5,X4) & ~sP30(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP32(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP35(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK244,sK245,sK246,sK247,sK248])],[f462])).
fof(f462,plain,(
  ! [X0,X1,X2] : ((~sP35(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP31(X1,X8,X10,X9) | sP28(X1,X8,X10,X9) | sP29(X8,X2,X10,X9) | sP30(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP32(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP31(X1,X3,X5,X4) & ~sP28(X1,X3,X5,X4) & ~sP29(X3,X2,X5,X4) & ~sP30(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP32(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP35(X0,X1,X2)))),
  inference(rectify,[],[f461])).
fof(f461,plain,(
  ! [X3,X4,X5] : ((~sP35(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP31(X4,X21,X23,X22) | sP28(X4,X21,X23,X22) | sP29(X21,X5,X23,X22) | sP30(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP32(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP31(X4,X21,X23,X22) & ~sP28(X4,X21,X23,X22) & ~sP29(X21,X5,X23,X22) & ~sP30(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP32(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP35(X3,X4,X5)))),
  inference(nnf_transformation,[],[f262])).
fof(f920,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP31(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f921,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP28(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f922,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP29(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f923,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP30(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f924,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP35(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f463])).
fof(f925,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP32(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f969,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.modSem.v',X1))),s('type.conSem.v',X2)))) | sP34(X12,sK284(X14,X13,X12,X2,X1,X0),X14,sK286(X14,X13,X12,X2,X1,X0),sK285(X14,X13,X12,X2,X1,X0)) | sP33(X13,sK281(X14,X13,X12,X2,X1,X0),X12,sK283(X14,X13,X12,X2,X1,X0),sK282(X14,X13,X12,X2,X1,X0)) | sP35(X12,X13,X14) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f489])).
fof(f1051,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP51(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f523])).
fof(f523,plain,(
  ! [X0,X1,X2] : ((~sP51(X0,X1,X2) | (((s('type.modSem.v',sK333(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK335(X2,X1,X0)))) & s('type.conSem.v',sK334(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK335(X2,X1,X0))))) | sP47(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP44(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP45(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP46(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | (s('type.modSem.v',sK333(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK336(X2,X1,X0)))) & s('type.conSem.v',sK334(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK336(X2,X1,X0))))) | sP48(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK332(X2,X1,X0)))),s('type.modSem.v',sK333(X2,X1,X0)))),s('type.conSem.v',sK334(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP47(X1,X3,X5,X4) & ~sP44(X1,X3,X5,X4) & ~sP45(X3,X2,X5,X4) & ~sP46(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP48(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP51(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK332,sK333,sK334,sK335,sK336])],[f522])).
fof(f522,plain,(
  ! [X0,X1,X2] : ((~sP51(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP47(X1,X8,X10,X9) | sP44(X1,X8,X10,X9) | sP45(X8,X2,X10,X9) | sP46(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP48(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP47(X1,X3,X5,X4) & ~sP44(X1,X3,X5,X4) & ~sP45(X3,X2,X5,X4) & ~sP46(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP48(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP51(X0,X1,X2)))),
  inference(rectify,[],[f521])).
fof(f521,plain,(
  ! [X3,X4,X5] : ((~sP51(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP47(X4,X21,X23,X22) | sP44(X4,X21,X23,X22) | sP45(X21,X5,X23,X22) | sP46(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP48(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP47(X4,X21,X23,X22) & ~sP44(X4,X21,X23,X22) & ~sP45(X21,X5,X23,X22) & ~sP46(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP48(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP51(X3,X4,X5)))),
  inference(nnf_transformation,[],[f281])).
fof(f1052,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP47(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1053,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP44(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1054,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP45(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1055,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP46(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1056,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP51(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f523])).
fof(f1057,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP48(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1195,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP68(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f588])).
fof(f588,plain,(
  ! [X0,X1,X2] : ((~sP68(X0,X1,X2) | (((s('type.modSem.v',sK427(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK429(X2,X1,X0)))) & s('type.conSem.v',sK428(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK429(X2,X1,X0))))) | sP64(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP61(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP62(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP63(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | (s('type.modSem.v',sK427(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK430(X2,X1,X0)))) & s('type.conSem.v',sK428(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK430(X2,X1,X0))))) | sP65(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK426(X2,X1,X0)))),s('type.modSem.v',sK427(X2,X1,X0)))),s('type.conSem.v',sK428(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP64(X1,X3,X5,X4) & ~sP61(X1,X3,X5,X4) & ~sP62(X3,X2,X5,X4) & ~sP63(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP65(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP68(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK426,sK427,sK428,sK429,sK430])],[f587])).
fof(f587,plain,(
  ! [X0,X1,X2] : ((~sP68(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X12))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12)))) | sP64(X1,X8,X10,X9) | sP61(X1,X8,X10,X9) | sP62(X8,X2,X10,X9) | sP63(X8,X2,X10,X9) | ? [X11] : (s('type.modSem.v',X9) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X11))) & s('type.conSem.v',X10) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11)))) | sP65(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X8))),s('type.modSem.v',X9))),s('type.conSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP64(X1,X3,X5,X4) & ~sP61(X1,X3,X5,X4) & ~sP62(X3,X2,X5,X4) & ~sP63(X3,X2,X5,X4) & ! [X6] : (s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) & ~sP65(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5))))) | sP68(X0,X1,X2)))),
  inference(rectify,[],[f586])).
fof(f586,plain,(
  ! [X3,X4,X5] : ((~sP68(X3,X4,X5) | ? [X21,X22,X23] : ((? [X48] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) | sP64(X4,X21,X23,X22) | sP61(X4,X21,X23,X22) | sP62(X21,X5,X23,X22) | sP63(X21,X5,X23,X22) | ? [X26] : (s('type.modSem.v',X22) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) & s('type.conSem.v',X23) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) | sP65(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X48] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X48))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X48)))) & ~sP64(X4,X21,X23,X22) & ~sP61(X4,X21,X23,X22) & ~sP62(X21,X5,X23,X22) & ~sP63(X21,X5,X23,X22) & ! [X26] : (s('type.modSem.v',X22) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X26))) | s('type.conSem.v',X23) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26)))) & ~sP65(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X21))),s('type.modSem.v',X22))),s('type.conSem.v',X23))))) | sP68(X3,X4,X5)))),
  inference(nnf_transformation,[],[f302])).
fof(f1196,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP64(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f1197,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP61(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f1198,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP62(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f1199,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP63(X3,X2,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f1200,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP68(X0,X1,X2) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f588])).
fof(f1201,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP65(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X3))),s('type.modSem.v',X4))),s('type.conSem.v',X5)))) | sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f785,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK119(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK120(X1,X0)))))),s('type.list.list'('type.modSem.v'),sK122(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK121(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK120(X1,X0)))))),s('type.list.list'('type.conSem.v'),sK123(X1,X0))))))) | ~sP2(X0,X1)) )),
  inference(cnf_transformation,[],[f389])).
fof(f795,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK139(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK140(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK141(X1,X0))))))) | ~sP13(X0,X1)) )),
  inference(cnf_transformation,[],[f397])).
fof(f807,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK158(X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK159(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK160(X1,X0)))))),s('type.list.list'('type.modSem.v'),sK162(X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK161(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK160(X1,X0)))))),s('type.list.list'('type.conSem.v'),sK163(X1,X0))))))) | ~sP10(X0,X1)) )),
  inference(cnf_transformation,[],[f406])).
fof(f803,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK150(X1,X0)))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK155(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK151(X1,X0)))),s('type.list.list'('type.string.char'),sK152(X1,X0)),s('type.modLang.exp',sK153(X1,X0)))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK154(X1,X0)),s('type.list.list'('type.string.char'),sK152(X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK157(X1,X0)),s('type.modLang.exp',sK153(X1,X0))))))))) | ~sP11(X0,X1)) )),
  inference(cnf_transformation,[],[f403])).
fof(f782,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X1,X0)))),s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK115(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK111(X1,X0)))),s('type.list.list'('type.string.char'),sK112(X1,X0)),s('type.modLang.exp',sK113(X1,X0)))))),s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK114(X1,X0)),s('type.list.list'('type.string.char'),sK112(X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK117(X1,X0)),s('type.modLang.exp',sK113(X1,X0))))))))) | ~sP3(X0,X1)) )),
  inference(cnf_transformation,[],[f386])).
fof(f799,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK142(X1,X0)))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK146(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK143(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK144(X1,X0)),s('type.list.list'('type.string.char'),sK145(X1,X0)))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK147(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK149(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK144(X1,X0)))),s('type.list.list'('type.string.char'),sK145(X1,X0))))))) | ~sP12(X0,X1)) )),
  inference(cnf_transformation,[],[f400])).
fof(f779,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X1,X0)))),s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK106(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK103(X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK104(X1,X0)),s('type.list.list'('type.string.char'),sK105(X1,X0)))))),s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK107(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK109(X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK104(X1,X0)))),s('type.list.list'('type.string.char'),sK105(X1,X0))))))) | ~sP4(X0,X1)) )),
  inference(cnf_transformation,[],[f383])).
fof(f792,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK136(X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK137(X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK138(X1,X0))))))) | ~sP14(X0,X1)) )),
  inference(cnf_transformation,[],[f394])).
fof(f772,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK91(X1,X0)))),s('type.modSem.v',sK93(X1,X0)))),s('type.conSem.v',sK96(X1,X0)))))) )),
  inference(cnf_transformation,[],[f377])).
fof(f774,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK97(X1,X0)))),s('type.modSem.v',sK98(X1,X0)))),s('type.conSem.v',sK100(X1,X0)))))) )),
  inference(cnf_transformation,[],[f380])).
fof(f811,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)))),s('type.modSem.v',sK166(X1,X0)))),s('type.conSem.v',sK169(X1,X0)))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f814,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1) | p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)))),s('type.modSem.v',sK171(X1,X0)))),s('type.conSem.v',sK173(X1,X0)))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f918,plain,(
  ( ! [X2,X0,X1] : (~sP35(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK244(X2,X1,X0)))),s('type.modSem.v',sK245(X2,X1,X0)))),s('type.conSem.v',sK246(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f463])).
fof(f932,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK250(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK253(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP34(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f933,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK250(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK253(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP34(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f940,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK254(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK256(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | ~sP33(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f471])).
fof(f941,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK254(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK256(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | ~sP33(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f471])).
fof(f1050,plain,(
  ( ! [X2,X0,X1] : (~sP51(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK332(X2,X1,X0)))),s('type.modSem.v',sK333(X2,X1,X0)))),s('type.conSem.v',sK334(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f523])).
fof(f1064,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK338(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK341(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP50(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1065,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK338(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK341(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP50(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1072,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK342(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK344(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | ~sP49(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f531])).
fof(f1073,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK342(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK344(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | ~sP49(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f531])).
fof(f1194,plain,(
  ( ! [X2,X0,X1] : (~sP68(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK426(X2,X1,X0)))),s('type.modSem.v',sK427(X2,X1,X0)))),s('type.conSem.v',sK428(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f588])).
fof(f1208,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK432(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK435(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP67(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1209,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK432(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK435(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP67(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1216,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK436(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK438(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | ~sP66(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f596])).
fof(f1217,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',sK436(X4,X3,X2,X1,X0)))),s('type.conSem.v',sK438(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | ~sP66(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f596])).
fof(f877,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2)))) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),sK216(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f826,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP21(X0,X1,X2) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f417])).
fof(f417,plain,(
  ! [X0,X1,X2] : ((~sP21(X0,X1,X2) | (((s('type.conSem.v',sK182(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK184(X2,X1,X0)))) & s('type.exhSem.v',sK183(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK184(X2,X1,X0))))) | sP17(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP15(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP16(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | (s('type.conSem.v',sK182(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK185(X2,X1,X0)))) & s('type.exhSem.v',sK183(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK185(X2,X1,X0))))) | sP18(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK181(X2,X1,X0)))),s('type.conSem.v',sK182(X2,X1,X0)))),s('type.exhSem.v',sK183(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP17(X1,X3,X5,X4) & ~sP15(X2,X3,X5,X4) & ~sP16(X2,X3,X5,X4) & ! [X6] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6)))) & ~sP18(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5))))) | sP21(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK181,sK182,sK183,sK184,sK185])],[f416])).
fof(f416,plain,(
  ! [X0,X1,X2] : ((~sP21(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.conSem.v',X9) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12))) & s('type.exhSem.v',X10) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X12)))) | sP17(X1,X8,X10,X9) | sP15(X2,X8,X10,X9) | sP16(X2,X8,X10,X9) | ? [X11] : (s('type.conSem.v',X9) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11))) & s('type.exhSem.v',X10) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X11)))) | sP18(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8))),s('type.conSem.v',X9))),s('type.exhSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP17(X1,X3,X5,X4) & ~sP15(X2,X3,X5,X4) & ~sP16(X2,X3,X5,X4) & ! [X6] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6)))) & ~sP18(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5))))) | sP21(X0,X1,X2)))),
  inference(rectify,[],[f415])).
fof(f415,plain,(
  ! [X3,X4,X5] : ((~sP21(X3,X4,X5) | ? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | sP17(X4,X21,X23,X22) | sP15(X5,X21,X23,X22) | sP16(X5,X21,X23,X22) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | sP18(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X40] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) & ~sP17(X4,X21,X23,X22) & ~sP15(X5,X21,X23,X22) & ~sP16(X5,X21,X23,X22) & ! [X26] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) & ~sP18(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | sP21(X3,X4,X5)))),
  inference(nnf_transformation,[],[f246])).
fof(f827,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP17(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP21(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f417])).
fof(f828,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP15(X2,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP21(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f417])).
fof(f829,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP16(X2,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP21(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f417])).
fof(f830,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP21(X0,X1,X2) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f417])).
fof(f831,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP18(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP21(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f417])).
fof(f870,plain,(
  ( ! [X2,X0,X14,X12,X1,X13] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X12),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0))),s('type.conSem.v',X1))),s('type.exhSem.v',X2)))) | sP20(X14,sK213(X14,X13,X12,X2,X1,X0),X12,sK215(X14,X13,X12,X2,X1,X0),sK214(X14,X13,X12,X2,X1,X0)) | sP19(X13,sK210(X14,X13,X12,X2,X1,X0),X12,sK212(X14,X13,X12,X2,X1,X0),sK211(X14,X13,X12,X2,X1,X0)) | sP21(X12,X13,X14) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f982,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP42(X0,X1,X2) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f492])).
fof(f492,plain,(
  ! [X0,X1,X2] : ((~sP42(X0,X1,X2) | (((s('type.conSem.v',sK291(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK293(X2,X1,X0)))) & s('type.exhSem.v',sK292(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK293(X2,X1,X0))))) | sP38(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP36(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP37(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | (s('type.conSem.v',sK291(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK294(X2,X1,X0)))) & s('type.exhSem.v',sK292(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK294(X2,X1,X0))))) | sP39(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK290(X2,X1,X0)))),s('type.conSem.v',sK291(X2,X1,X0)))),s('type.exhSem.v',sK292(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP38(X1,X3,X5,X4) & ~sP36(X2,X3,X5,X4) & ~sP37(X2,X3,X5,X4) & ! [X6] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6)))) & ~sP39(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5))))) | sP42(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK290,sK291,sK292,sK293,sK294])],[f491])).
fof(f491,plain,(
  ! [X0,X1,X2] : ((~sP42(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.conSem.v',X9) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12))) & s('type.exhSem.v',X10) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X12)))) | sP38(X1,X8,X10,X9) | sP36(X2,X8,X10,X9) | sP37(X2,X8,X10,X9) | ? [X11] : (s('type.conSem.v',X9) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11))) & s('type.exhSem.v',X10) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X11)))) | sP39(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8))),s('type.conSem.v',X9))),s('type.exhSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP38(X1,X3,X5,X4) & ~sP36(X2,X3,X5,X4) & ~sP37(X2,X3,X5,X4) & ! [X6] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6)))) & ~sP39(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5))))) | sP42(X0,X1,X2)))),
  inference(rectify,[],[f490])).
fof(f490,plain,(
  ! [X3,X4,X5] : ((~sP42(X3,X4,X5) | ? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | sP38(X4,X21,X23,X22) | sP36(X5,X21,X23,X22) | sP37(X5,X21,X23,X22) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | sP39(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X40] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) & ~sP38(X4,X21,X23,X22) & ~sP36(X5,X21,X23,X22) & ~sP37(X5,X21,X23,X22) & ! [X26] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) & ~sP39(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | sP42(X3,X4,X5)))),
  inference(nnf_transformation,[],[f270])).
fof(f983,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP38(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f984,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP36(X2,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f985,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP37(X2,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f986,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP42(X0,X1,X2) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f492])).
fof(f987,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP39(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f1126,plain,(
  ( ! [X4,X2,X0,X7,X5,X3,X1] : (sP59(X0,X1,X2) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) )),
  inference(cnf_transformation,[],[f557])).
fof(f557,plain,(
  ! [X0,X1,X2] : ((~sP59(X0,X1,X2) | (((s('type.conSem.v',sK384(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK386(X2,X1,X0)))) & s('type.exhSem.v',sK385(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK386(X2,X1,X0))))) | sP55(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP53(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP54(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | (s('type.conSem.v',sK384(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK387(X2,X1,X0)))) & s('type.exhSem.v',sK385(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK387(X2,X1,X0))))) | sP56(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0))) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK383(X2,X1,X0)))),s('type.conSem.v',sK384(X2,X1,X0)))),s('type.exhSem.v',sK385(X2,X1,X0))))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP55(X1,X3,X5,X4) & ~sP53(X2,X3,X5,X4) & ~sP54(X2,X3,X5,X4) & ! [X6] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6)))) & ~sP56(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5))))) | sP59(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK383,sK384,sK385,sK386,sK387])],[f556])).
fof(f556,plain,(
  ! [X0,X1,X2] : ((~sP59(X0,X1,X2) | ? [X8,X9,X10] : ((? [X12] : (s('type.conSem.v',X9) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X12))) & s('type.exhSem.v',X10) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X12)))) | sP55(X1,X8,X10,X9) | sP53(X2,X8,X10,X9) | sP54(X2,X8,X10,X9) | ? [X11] : (s('type.conSem.v',X9) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X11))) & s('type.exhSem.v',X10) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X11)))) | sP56(X1,X8,X10,X9)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8))),s('type.conSem.v',X9))),s('type.exhSem.v',X10)))))) & (! [X3,X4,X5] : ((! [X7] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7)))) & ~sP55(X1,X3,X5,X4) & ~sP53(X2,X3,X5,X4) & ~sP54(X2,X3,X5,X4) & ! [X6] : (s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6)))) & ~sP56(X1,X3,X5,X4)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5))))) | sP59(X0,X1,X2)))),
  inference(rectify,[],[f555])).
fof(f555,plain,(
  ! [X3,X4,X5] : ((~sP59(X3,X4,X5) | ? [X21,X22,X23] : ((? [X40] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) | sP55(X4,X21,X23,X22) | sP53(X5,X21,X23,X22) | sP54(X5,X21,X23,X22) | ? [X26] : (s('type.conSem.v',X22) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) & s('type.exhSem.v',X23) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) | sP56(X4,X21,X23,X22)) & ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23)))))) & (! [X21,X22,X23] : ((! [X40] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X40))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X40)))) & ~sP55(X4,X21,X23,X22) & ~sP53(X5,X21,X23,X22) & ~sP54(X5,X21,X23,X22) & ! [X26] : (s('type.conSem.v',X22) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X26))) | s('type.exhSem.v',X23) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X26)))) & ~sP56(X4,X21,X23,X22)) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X3),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X21))),s('type.conSem.v',X22))),s('type.exhSem.v',X23))))) | sP59(X3,X4,X5)))),
  inference(nnf_transformation,[],[f291])).
fof(f1127,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP55(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP59(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f557])).
fof(f1128,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP53(X2,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP59(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f557])).
fof(f1129,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP54(X2,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP59(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f557])).
fof(f1130,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP59(X0,X1,X2) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) )),
  inference(cnf_transformation,[],[f557])).
fof(f1131,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~sP56(X1,X3,X5,X4) | p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X3))),s('type.conSem.v',X4))),s('type.exhSem.v',X5)))) | sP59(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f557])).
fof(f825,plain,(
  ( ! [X2,X0,X1] : (~sP21(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK181(X2,X1,X0)))),s('type.conSem.v',sK182(X2,X1,X0)))),s('type.exhSem.v',sK183(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f417])).
fof(f836,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK187(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK188(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f837,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK187(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK188(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f846,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK191(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK192(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | ~sP19(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f425])).
fof(f847,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK191(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK192(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | ~sP19(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f425])).
fof(f981,plain,(
  ( ! [X2,X0,X1] : (~sP42(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK290(X2,X1,X0)))),s('type.conSem.v',sK291(X2,X1,X0)))),s('type.exhSem.v',sK292(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f492])).
fof(f992,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK296(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK297(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP41(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f993,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK296(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK297(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP41(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f1002,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK300(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK301(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | ~sP40(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f500])).
fof(f1003,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK300(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK301(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | ~sP40(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f500])).
fof(f1125,plain,(
  ( ! [X2,X0,X1] : (~sP59(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X0),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK383(X2,X1,X0)))),s('type.conSem.v',sK384(X2,X1,X0)))),s('type.exhSem.v',sK385(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f557])).
fof(f1136,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK389(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK390(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP58(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1137,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK389(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK390(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP58(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1146,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK393(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK394(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | ~sP57(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f565])).
fof(f1147,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',sK393(X4,X3,X2,X1,X0)))),s('type.exhSem.v',sK394(X4,X3,X2,X1,X0))))) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | ~sP57(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f565])).
fof(f905,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK236(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK237(X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK238(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~sP23(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f456])).
fof(f900,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK228(X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK230(X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK231(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~sP24(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f453])).
fof(f957,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK265(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK267(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK268(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~sP30(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f480])).
fof(f962,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK273(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK274(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK275(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~sP29(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f483])).
fof(f1089,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK353(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK355(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK356(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~sP46(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f540])).
fof(f1094,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK361(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK362(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK363(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~sP45(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f543])).
fof(f1233,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK447(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK449(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK450(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~sP63(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f605])).
fof(f1238,plain,(
  ( ! [X2,X0,X3,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK455(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK456(X3,X2,X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK457(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | ~sP62(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f608])).
fof(f778,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK106(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK108(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK109(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK102(X1,X0))))) | ~sP4(X0,X1)) )),
  inference(cnf_transformation,[],[f383])).
fof(f781,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK115(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK116(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK117(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK110(X1,X0))))) | ~sP3(X0,X1)) )),
  inference(cnf_transformation,[],[f386])).
fof(f798,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK146(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK148(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK149(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK142(X1,X0))))) | ~sP12(X0,X1)) )),
  inference(cnf_transformation,[],[f400])).
fof(f802,plain,(
  ( ! [X0,X1] : (p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK155(X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK156(X1,X0)),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK157(X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK150(X1,X0))))) | ~sP11(X0,X1)) )),
  inference(cnf_transformation,[],[f403])).
fof(f813,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)),s('type.modSem.v',sK171(X1,X0)),s('type.conSem.v',sK173(X1,X0)))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f810,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK164(X1,X0)),s('type.modSem.v',sK166(X1,X0)),s('type.conSem.v',sK169(X1,X0)))))) )),
  inference(cnf_transformation,[],[f409])).
fof(f912,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | sP27(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f460])).
fof(f460,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) | sP27(X0,X2,X1)) & (~sP27(X0,X2,X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))))),
  inference(nnf_transformation,[],[f254])).
fof(f254,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> sP27(X0,X2,X1))),
  inference(definition_folding,[],[f139,f253,f252,f251,f250,f249,f248])).
fof(f248,plain,(
  ! [X0,X2,X1] : (sP22(X0,X2,X1) <=> ? [X20,X21,X22,X23,X24] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.semanticPrimitives.tid_or_exn',X21))))),s('type.list.list'('type.modSem.v'),X23))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X22),s('type.semanticPrimitives.tid_or_exn',X21))))),s('type.list.list'('type.conSem.v'),X24))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X22),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X23))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.semanticPrimitives.tid_or_exn',X21))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X23),s('type.list.list'('type.conSem.v'),X24))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP22])])).
fof(f251,plain,(
  ! [X0,X2,X1] : (sP25(X0,X2,X1) <=> ? [X25,X26] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X25))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X26))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X25),s('type.list.list'('type.conSem.v'),X26))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP25])])).
fof(f252,plain,(
  ! [X0,X2,X1] : (sP26(X0,X2,X1) <=> ? [X3,X4] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP26])])).
fof(f253,plain,(
  ! [X0,X2,X1] : (sP27(X0,X2,X1) <=> (? [X27] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X27))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X27)))) | sP25(X0,X2,X1) | sP22(X0,X2,X1) | sP23(X0,X2,X1) | sP24(X0,X2,X1) | ? [X5] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X5)))) | sP26(X0,X2,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP27])])).
fof(f139,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) <=> (? [X27] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X27))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X27)))) | ? [X25,X26] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X25))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X26))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X25),s('type.list.list'('type.conSem.v'),X26))))) | ? [X20,X21,X22,X23,X24] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.semanticPrimitives.tid_or_exn',X21))))),s('type.list.list'('type.modSem.v'),X23))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X22),s('type.semanticPrimitives.tid_or_exn',X21))))),s('type.list.list'('type.conSem.v'),X24))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X22),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X23))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.semanticPrimitives.tid_or_exn',X21))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X23),s('type.list.list'('type.conSem.v'),X24))))) | ? [X13,X14,X15,X16,X17,X18,X19] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13))),s('type.list.list'('type.string.char'),X14),s('type.modLang.exp',X15))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16),s('type.list.list'('type.string.char'),X14),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X19),s('type.modLang.exp',X15))))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X16)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X17),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X18),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X19),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | ? [X6,X7,X8,X9,X10,X11,X12] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7),s('type.list.list'('type.string.char'),X8))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X7))),s('type.list.list'('type.string.char'),X8))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X10)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X11),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X12),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))))) | ? [X5] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X5)))) | ? [X3,X4] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X13,X14,X15] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.modSem.v',X14),s('type.conSem.v',X15)))) <=> (? [X16] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X16))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X16)))) | ? [X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18))))) | ? [X19,X20,X21,X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X21),s('type.semanticPrimitives.tid_or_exn',X20))))),s('type.list.list'('type.conSem.v'),X18))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X21),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X17))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X19),s('type.semanticPrimitives.tid_or_exn',X20))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18))))) | ? [X22,X23,X24,X25,X26,X27,X28] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.string.char'),X23),s('type.modLang.exp',X24))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.string.char'),X23),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.modLang.exp',X24))))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X22,X29,X23,X26,X25,X27,X28] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29),s('type.list.list'('type.string.char'),X23))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X29))),s('type.list.list'('type.string.char'),X23))) & p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X22),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X25)))) & p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X26),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X27),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X28),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13))))) | ? [X30] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X30))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X30)))) | ? [X17,X18] : (s('type.modSem.v',X14) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X17))) & s('type.conSem.v',X15) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X18))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X13),s('type.list.list'('type.modSem.v'),X17),s('type.list.list'('type.conSem.v'),X18)))))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_cases|split|0')).
fof(f913,plain,(
  ( ! [X2,X0,X1] : (~sP27(X0,X2,X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f460])).
fof(f973,plain,(
  ( ! [X2,X0,X1] : (~sP35(sK287(X2,X1,X0),sK288(X2,X1,X0),sK289(X2,X1,X0)) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2))))) )),
  inference(cnf_transformation,[],[f489])).
fof(f1043,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP43(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X5)))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(cnf_transformation,[],[f519])).
fof(f4463,plain,(
  ( ! [X420,X418,X417,X419] : (sP27(X417,X419,X418) | s(bool,X420) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X417),s('type.modSem.v',X418),s('type.conSem.v',X419))) | s(bool,'T_0') = s(bool,X420)) )),
  inference(subsumption_resolution,[],[f3580,f660])).
fof(f3580,plain,(
  ( ! [X420,X418,X417,X419] : (~p(s(bool,'T_0')) | sP27(X417,X419,X418) | s(bool,X420) = s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X417),s('type.modSem.v',X418),s('type.conSem.v',X419))) | s(bool,'T_0') = s(bool,X420)) )),
  inference(superposition,[],[f912,f1649])).
fof(f1038,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK328(X2,X1,X0)),s('type.conSem.v',sK330(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f519])).
fof(f1039,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK328(X2,X1,X0)),s('type.conSem.v',sK330(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f519])).
fof(f1184,plain,(
  ( ! [X2,X0,X1] : (~sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK422(X2,X1,X0)),s('type.conSem.v',sK425(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f584])).
fof(f1185,plain,(
  ( ! [X2,X0,X1] : (~sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) | p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK422(X2,X1,X0)),s('type.conSem.v',sK425(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f584])).
fof(f892,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) | sP26(X0,X1,X2) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3)))) )),
  inference(cnf_transformation,[],[f447])).
fof(f447,plain,(
  ! [X0,X1,X2] : ((~sP26(X0,X1,X2) | (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK221(X2,X1,X0)))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK222(X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK221(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK222(X2,X1,X0))))))) & (! [X3,X4] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4))))) | sP26(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK221,sK222])],[f446])).
fof(f446,plain,(
  ! [X0,X1,X2] : ((~sP26(X0,X1,X2) | ? [X5,X6] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X5))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X5),s('type.list.list'('type.conSem.v'),X6)))))) & (! [X3,X4] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4))))) | sP26(X0,X1,X2)))),
  inference(rectify,[],[f445])).
fof(f445,plain,(
  ! [X0,X2,X1] : ((~sP26(X0,X2,X1) | ? [X3,X4] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))))) & (! [X3,X4] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4))))) | sP26(X0,X2,X1)))),
  inference(nnf_transformation,[],[f252])).
fof(f896,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4)))) | sP25(X0,X1,X2) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X3)))) )),
  inference(cnf_transformation,[],[f450])).
fof(f450,plain,(
  ! [X0,X1,X2] : ((~sP25(X0,X1,X2) | (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK223(X2,X1,X0)))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK224(X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK223(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK224(X2,X1,X0))))))) & (! [X3,X4] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X3))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4))))) | sP25(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK223,sK224])],[f449])).
fof(f449,plain,(
  ! [X0,X1,X2] : ((~sP25(X0,X1,X2) | ? [X5,X6] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X5))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X6))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X5),s('type.list.list'('type.conSem.v'),X6)))))) & (! [X3,X4] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X3))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X4))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X3),s('type.list.list'('type.conSem.v'),X4))))) | sP25(X0,X1,X2)))),
  inference(rectify,[],[f448])).
fof(f448,plain,(
  ! [X0,X2,X1] : ((~sP25(X0,X2,X1) | ? [X25,X26] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X25))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X26))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X25),s('type.list.list'('type.conSem.v'),X26)))))) & (! [X25,X26] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X25))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X26))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X25),s('type.list.list'('type.conSem.v'),X26))))) | sP25(X0,X2,X1)))),
  inference(nnf_transformation,[],[f251])).
fof(f911,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP22(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X6),s('type.list.list'('type.conSem.v'),X7)))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6)))) )),
  inference(cnf_transformation,[],[f459])).
fof(f459,plain,(
  ! [X0,X1,X2] : ((~sP22(X0,X1,X2) | (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK239(X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK242(X2,X1,X0)))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK241(X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK243(X2,X1,X0)))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK241(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK242(X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK239(X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X2,X1,X0)))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK242(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK243(X2,X1,X0))))))) & (! [X3,X4,X5,X6,X7] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X6),s('type.list.list'('type.conSem.v'),X7))))) | sP22(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK239,sK240,sK241,sK242,sK243])],[f458])).
fof(f458,plain,(
  ! [X0,X1,X2] : ((~sP22(X0,X1,X2) | ? [X8,X9,X10,X11,X12] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.semanticPrimitives.tid_or_exn',X9))))),s('type.list.list'('type.modSem.v'),X11))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X10),s('type.semanticPrimitives.tid_or_exn',X9))))),s('type.list.list'('type.conSem.v'),X12))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X10),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X11))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X8),s('type.semanticPrimitives.tid_or_exn',X9))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X11),s('type.list.list'('type.conSem.v'),X12)))))) & (! [X3,X4,X5,X6,X7] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X6),s('type.list.list'('type.conSem.v'),X7))))) | sP22(X0,X1,X2)))),
  inference(rectify,[],[f457])).
fof(f457,plain,(
  ! [X0,X2,X1] : ((~sP22(X0,X2,X1) | ? [X20,X21,X22,X23,X24] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.semanticPrimitives.tid_or_exn',X21))))),s('type.list.list'('type.modSem.v'),X23))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X22),s('type.semanticPrimitives.tid_or_exn',X21))))),s('type.list.list'('type.conSem.v'),X24))) & s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X22),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X23))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.semanticPrimitives.tid_or_exn',X21))))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X23),s('type.list.list'('type.conSem.v'),X24)))))) & (! [X20,X21,X22,X23,X24] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.semanticPrimitives.tid_or_exn',X21))))),s('type.list.list'('type.modSem.v'),X23))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X22),s('type.semanticPrimitives.tid_or_exn',X21))))),s('type.list.list'('type.conSem.v'),X24))) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X22),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X23))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X20),s('type.semanticPrimitives.tid_or_exn',X21))))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X23),s('type.list.list'('type.conSem.v'),X24))))) | sP22(X0,X2,X1)))),
  inference(nnf_transformation,[],[f248])).
fof(f1045,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X2,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f520])).
fof(f1105,plain,(
  ( ! [X2,X0,X1] : (~sP51(sK375(X2,X1,X0),sK376(X2,X1,X0),sK377(X2,X1,X0)) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X1),s('type.list.list'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f549])).
fof(f4464,plain,(
  ( ! [X422,X424,X421,X423] : (sP43(X421,X423,X422) | s(bool,X424) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X421),s('type.list.list'('type.modSem.v'),X422),s('type.list.list'('type.conSem.v'),X423))) | s(bool,'T_0') = s(bool,X424)) )),
  inference(subsumption_resolution,[],[f3581,f660])).
fof(f3581,plain,(
  ( ! [X422,X424,X421,X423] : (~p(s(bool,'T_0')) | sP43(X421,X423,X422) | s(bool,X424) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X421),s('type.list.list'('type.modSem.v'),X422),s('type.list.list'('type.conSem.v'),X423))) | s(bool,'T_0') = s(bool,X424)) )),
  inference(superposition,[],[f1044,f1649])).
fof(f736,plain,(
  ( ! [X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X1)))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1)) )),
  inference(cnf_transformation,[],[f359])).
fof(f359,plain,(
  ! [X0,X1] : ((~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X1)))) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1)) & (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X1))))))),
  inference(nnf_transformation,[],[f123])).
fof(f123,plain,(
  ! [X0,X1] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X1)))) <=> s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1))),
  inference(rectify,[],[f34])).
fof(f34,axiom,(
  ! [X6,X17] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X17)))) <=> s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X17))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_eqns|split|4')).
fof(f737,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X1))))) )),
  inference(cnf_transformation,[],[f359])).
fof(f10537,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X1),s('type.list.list'('type.conSem.v'),X2))))))) )),
  inference(unit_resulting_resolution,[],[f718,f736])).
fof(f11459,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))) )),
  inference(unit_resulting_resolution,[],[f11458,f1044])).
fof(f891,plain,(
  ( ! [X2,X0,X1] : (~sP26(X0,X1,X2) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK221(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK222(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f447])).
fof(f895,plain,(
  ( ! [X2,X0,X1] : (~sP25(X0,X1,X2) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK223(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK224(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f450])).
fof(f910,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK242(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK243(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f459])).
fof(f1040,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK329(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK331(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f519])).
fof(f1041,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),sK329(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK331(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f519])).
fof(f790,plain,(
  ( ! [X0,X1] : (~sP14(X0,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK136(X1,X0)),s('type.list.list'('type.modSem.v'),sK137(X1,X0)),s('type.list.list'('type.conSem.v'),sK138(X1,X0)))))) )),
  inference(cnf_transformation,[],[f394])).
fof(f793,plain,(
  ( ! [X0,X1] : (~sP13(X0,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK139(X1,X0)),s('type.list.list'('type.modSem.v'),sK140(X1,X0)),s('type.list.list'('type.conSem.v'),sK141(X1,X0)))))) )),
  inference(cnf_transformation,[],[f397])).
fof(f805,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK158(X1,X0)),s('type.list.list'('type.modSem.v'),sK162(X1,X0)),s('type.list.list'('type.conSem.v'),sK163(X1,X0)))))) )),
  inference(cnf_transformation,[],[f406])).
fof(f815,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1) | p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK170(X1,X0)),s('type.list.list'('type.modSem.v'),sK172(X1,X0)),s('type.list.list'('type.conSem.v'),sK174(X1,X0)))))) )),
  inference(cnf_transformation,[],[f412])).
fof(f1115,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK381(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK382(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f553])).
fof(f1116,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK381(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK382(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f553])).
fof(f1118,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP52(X0,X1,X2) | ~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7)))) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) )),
  inference(cnf_transformation,[],[f553])).
fof(f1119,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2)))) | sP52(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f554])).
fof(f1174,plain,(
  ( ! [X2,X0,X1] : (~sP59(sK418(X2,X1,X0),sK419(X2,X1,X0),sK420(X2,X1,X0)) | p(s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))))) )),
  inference(cnf_transformation,[],[f580])).
fof(f8031,plain,(
  ( ! [X2,X0,X3,X1] : (sP52(X0,X2,X1) | s(bool,X3) = s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(subsumption_resolution,[],[f8026,f660])).
fof(f8026,plain,(
  ( ! [X2,X0,X3,X1] : (~p(s(bool,'T_0')) | sP52(X0,X2,X1) | s(bool,X3) = s(bool,'const.dec_to_exhProof.env_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X2))) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1119,f1649])).
fof(f862,plain,(
  ( ! [X2,X0,X3,X1] : (~sP16(X0,X1,X2,X3) | p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK204(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))))) )),
  inference(cnf_transformation,[],[f434])).
fof(f867,plain,(
  ( ! [X2,X0,X3,X1] : (~sP15(X0,X1,X2,X3) | p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK209(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))))) )),
  inference(cnf_transformation,[],[f437])).
fof(f1018,plain,(
  ( ! [X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3) | p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK313(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))))) )),
  inference(cnf_transformation,[],[f509])).
fof(f1023,plain,(
  ( ! [X2,X0,X3,X1] : (~sP36(X0,X1,X2,X3) | p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK318(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))))) )),
  inference(cnf_transformation,[],[f512])).
fof(f1162,plain,(
  ( ! [X2,X0,X3,X1] : (~sP54(X0,X1,X2,X3) | p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK406(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))))) )),
  inference(cnf_transformation,[],[f574])).
fof(f1167,plain,(
  ( ! [X2,X0,X3,X1] : (~sP53(X0,X1,X2,X3) | p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK411(X3,X2,X1,X0)),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))))) )),
  inference(cnf_transformation,[],[f577])).
fof(f1030,plain,(
  ( ! [X2,X0,X1] : (~sP42(sK325(X2,X1,X0),sK326(X2,X1,X0),sK327(X2,X1,X0)) | p(s(bool,'const.dec_to_exhProof.vs_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.list.list'('type.conSem.v'),X1),s('type.list.list'('type.exhSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f515])).
fof(f1113,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) | p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',sK379(X2,X1,X0)),s('type.exhSem.v',sK380(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f553])).
fof(f1114,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) | p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',sK379(X2,X1,X0)),s('type.exhSem.v',sK380(X2,X1,X0)))))) )),
  inference(cnf_transformation,[],[f553])).
fof(f874,plain,(
  ( ! [X2,X0,X1] : (~sP21(sK216(X2,X1,X0),sK217(X2,X1,X0),sK218(X2,X1,X0)) | p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X1),s('type.exhSem.v',X2))))) )),
  inference(cnf_transformation,[],[f440])).
fof(f15231,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP40(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)))) )),
  inference(unit_resulting_resolution,[],[f718,f718,f1000])).
fof(f15212,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP40(X0,X1,X2,'const.list.CONS_2'(s('type.exhSem.v',X3),s('type.list.list'('type.exhSem.v'),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f718,f718,f999])).
fof(f15131,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP33(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) )),
  inference(unit_resulting_resolution,[],[f718,f718,f938])).
fof(f15062,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP33(X0,X1,X2,'const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f718,f718,f937])).
fof(f14245,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP19(X0,X1,X2,'const.list.NIL_0','const.list.CONS_2'(s('type.conSem.v',X3),s('type.list.list'('type.conSem.v'),X4)))) )),
  inference(unit_resulting_resolution,[],[f718,f718,f844])).
fof(f14174,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP19(X0,X1,X2,'const.list.CONS_2'(s('type.exhSem.v',X3),s('type.list.list'('type.exhSem.v'),X4)),'const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f718,f718,f843])).
fof(f11852,plain,(
  ( ! [X57,X56,X55] : (s(bool,X56) = s(bool,'const.bool.BOUNDED_1'(s(bool,X55))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(subsumption_resolution,[],[f11831,f660])).
fof(f11831,plain,(
  ( ! [X57,X56,X55] : (~p(s(bool,'T_0')) | s(bool,X56) = s(bool,'const.bool.BOUNDED_1'(s(bool,X55))) | s(bool,X56) = s(bool,X57) | s(bool,'T_0') = s(bool,X57)) )),
  inference(superposition,[],[f4432,f663])).
fof(f11851,plain,(
  ( ! [X54,X52,X53,X51] : (s(bool,X52) = s(bool,'const.bool.BOUNDED_1'(s(bool,X51))) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(subsumption_resolution,[],[f11830,f1758])).
fof(f11830,plain,(
  ( ! [X54,X52,X53,X51] : (~p(s(bool,X51)) | s(bool,X52) = s(bool,'const.bool.BOUNDED_1'(s(bool,X51))) | s(bool,X52) = s(bool,X53) | s(bool,'T_0') = s(bool,X53) | s(bool,X51) = s(bool,X54) | s(bool,'T_0') = s(bool,X54)) )),
  inference(superposition,[],[f4432,f3313])).
fof(f11724,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X2))) | s(X0,X1) != s(X0,X3)) )),
  inference(equality_resolution,[],[f721])).
fof(f11711,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X1),s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X3)))))) )),
  inference(unit_resulting_resolution,[],[f718,f1350])).
fof(f11611,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(X0,X1) != s(X0,X2) | s('type.pair.prod'(X3,X0),'const.pair.,_2'(s(X3,X4),s(X0,X1))) = s('type.pair.prod'(X3,X0),'const.pair.,_2'(s(X3,X4),s(X0,X2)))) )),
  inference(equality_resolution,[],[f767])).
fof(f11626,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s('type.pair.prod'(bool,X76),'const.pair.,_2'(s(bool,'T_0'),s(X76,X77))) = s('type.pair.prod'(bool,X76),'const.pair.,_2'(s(bool,X75),s(X76,X78))) | s(bool,X74) != s(bool,X75) | s(X76,X77) != s(X76,X78) | s(bool,'F_0') = s(bool,X74)) )),
  inference(forward_demodulation,[],[f11592,f663])).
fof(f11592,plain,(
  ( ! [X78,X76,X74,X77,X75] : (s(bool,X74) != s(bool,X75) | s(X76,X77) != s(X76,X78) | s('type.pair.prod'(bool,X76),'const.pair.,_2'(s(bool,X75),s(X76,X78))) = s('type.pair.prod'(bool,X76),'const.pair.,_2'(s(bool,'const.bool.BOUNDED_1'(s(bool,X74))),s(X76,X77))) | s(bool,'F_0') = s(bool,X74)) )),
  inference(superposition,[],[f767,f9657])).
fof(f11590,plain,(
  ( ! [X68,X66,X69,X67,X65] : (s(bool,X65) != s(bool,X66) | s(X67,X68) != s(X67,X69) | s('type.pair.prod'(bool,X67),'const.pair.,_2'(s(bool,'F_0'),s(X67,X68))) = s('type.pair.prod'(bool,X67),'const.pair.,_2'(s(bool,X66),s(X67,X69))) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f767,f665])).
fof(f11588,plain,(
  ( ! [X57,X54,X58,X56,X55,X53] : (s(bool,X53) != s(bool,X54) | s(X55,X56) != s(X55,X57) | s('type.pair.prod'(bool,X55),'const.pair.,_2'(s(bool,'T_0'),s(X55,X56))) = s('type.pair.prod'(bool,X55),'const.pair.,_2'(s(bool,X54),s(X55,X57))) | s(bool,X53) = s(bool,X58) | s(bool,'T_0') = s(bool,X58)) )),
  inference(superposition,[],[f767,f1649])).
fof(f11587,plain,(
  ( ! [X47,X52,X50,X48,X51,X49] : (s(bool,X47) != s(bool,X48) | s(X49,X50) != s(X49,X51) | s('type.pair.prod'(bool,X49),'const.pair.,_2'(s(bool,'T_0'),s(X49,X50))) = s('type.pair.prod'(bool,X49),'const.pair.,_2'(s(bool,X48),s(X49,X51))) | s(bool,X52) = s(bool,'const.bool.BOUNDED_1'(s(bool,X52))) | s(bool,X47) = s(bool,X52)) )),
  inference(superposition,[],[f767,f3313])).
fof(f11586,plain,(
  ( ! [X45,X43,X41,X46,X44,X42] : (s(bool,X42) != s(bool,X43) | s(X44,X45) != s(X44,X46) | s('type.pair.prod'(bool,X44),'const.pair.,_2'(s(bool,X41),s(X44,X45))) = s('type.pair.prod'(bool,X44),'const.pair.,_2'(s(bool,X43),s(X44,X46))) | s(bool,X42) = s(bool,'const.bool.BOUNDED_1'(s(bool,X42))) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f767,f3313])).
fof(f11584,plain,(
  ( ! [X30,X33,X31,X29,X34,X32] : (s(bool,'T_0') != s(bool,X30) | s(X31,X32) != s(X31,X33) | s('type.pair.prod'(bool,X31),'const.pair.,_2'(s(bool,X29),s(X31,X32))) = s('type.pair.prod'(bool,X31),'const.pair.,_2'(s(bool,X30),s(X31,X33))) | s(bool,X34) = s(bool,'const.bool.BOUNDED_1'(s(bool,X34))) | s(bool,X29) = s(bool,X34)) )),
  inference(superposition,[],[f767,f3313])).
fof(f11581,plain,(
  ( ! [X14,X12,X15,X13,X11,X16] : (s(bool,X12) != s(bool,X13) | s(X14,X15) != s(X14,X16) | s('type.pair.prod'(bool,X14),'const.pair.,_2'(s(bool,X11),s(X14,X15))) = s('type.pair.prod'(bool,X14),'const.pair.,_2'(s(bool,X13),s(X14,X16))) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f767,f1649])).
fof(f11580,plain,(
  ( ! [X6,X10,X8,X7,X5,X9] : (s(bool,'T_0') != s(bool,X6) | s(X7,X8) != s(X7,X9) | s('type.pair.prod'(bool,X7),'const.pair.,_2'(s(bool,X5),s(X7,X8))) = s('type.pair.prod'(bool,X7),'const.pair.,_2'(s(bool,X6),s(X7,X9))) | s(bool,X5) = s(bool,X10) | s(bool,'T_0') = s(bool,X10)) )),
  inference(superposition,[],[f767,f1649])).
fof(f11579,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'F_0') != s(bool,X1) | s(X2,X3) != s(X2,X4) | s('type.pair.prod'(bool,X2),'const.pair.,_2'(s(bool,X0),s(X2,X3))) = s('type.pair.prod'(bool,X2),'const.pair.,_2'(s(bool,X1),s(X2,X4))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f767,f665])).
fof(f11395,plain,(
  ( ! [X0] : (sP60(X0,'const.list.NIL_0','const.list.NIL_0')) )),
  inference(equality_resolution,[],[f11394])).
fof(f11394,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X1) | sP60(X0,'const.list.NIL_0',X1)) )),
  inference(equality_resolution,[],[f1186])).
fof(f11182,plain,(
  ( ! [X0] : (sP72('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f1385,f1382,f10715,f1264])).
fof(f11165,plain,(
  ( ! [X0] : (sP72('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f1384,f1382,f10714,f1265])).
fof(f11155,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f1385,f1381,f10713,f1264])).
fof(f11135,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1388,f1380,f10712,f1263])).
fof(f11138,plain,(
  ( ! [X0,X1] : (sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1388,f10701,f10712,f1263])).
fof(f11123,plain,(
  ( ! [X30,X28,X29,X27] : (s(X29,f(s(bool,X30))) != s(X29,g(s(bool,X30))) | s(fun(bool,X29),X27) = s(fun(bool,X29),X28) | s(bool,X30) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,'T_0') = s(bool,sK90(X27,X28,X29,bool))) )),
  inference(superposition,[],[f764,f3313])).
fof(f11121,plain,(
  ( ! [X21,X19,X22,X20] : (s(X21,f(s(bool,'T_0'))) != s(X21,g(s(bool,'T_0'))) | s(fun(bool,X21),X19) = s(fun(bool,X21),X20) | s(bool,X22) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22))) | s(bool,X22) = s(bool,sK90(X19,X20,X21,bool))) )),
  inference(superposition,[],[f764,f3313])).
fof(f11118,plain,(
  ( ! [X10,X8,X7,X9] : (s(X9,f(s(bool,X10))) != s(X9,g(s(bool,X10))) | s(fun(bool,X9),X7) = s(fun(bool,X9),X8) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,sK90(X7,X8,X9,bool))) )),
  inference(superposition,[],[f764,f1649])).
fof(f11117,plain,(
  ( ! [X6,X4,X5,X3] : (s(X5,f(s(bool,'T_0'))) != s(X5,g(s(bool,'T_0'))) | s(fun(bool,X5),X3) = s(fun(bool,X5),X4) | s(bool,X6) = s(bool,sK90(X3,X4,X5,bool)) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f764,f1649])).
fof(f11116,plain,(
  ( ! [X2,X0,X1] : (s(X2,f(s(bool,'F_0'))) != s(X2,g(s(bool,'F_0'))) | s(fun(bool,X2),X0) = s(fun(bool,X2),X1) | s(bool,'T_0') = s(bool,sK90(X0,X1,X2,bool))) )),
  inference(superposition,[],[f764,f665])).
fof(f11114,plain,(
  ( ! [X0] : (~sP72('F_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10707,f1260])).
fof(f11057,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),'const.list.NIL_0'))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))) )),
  inference(unit_resulting_resolution,[],[f718,f720])).
fof(f11058,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X0),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1))))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X3)))))) )),
  inference(unit_resulting_resolution,[],[f7699,f720])).
fof(f11031,plain,(
  ( ! [X0] : (sP72('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1388,f1383,f10701,f1263])).
fof(f11024,plain,(
  ( ! [X0] : (~sP72('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10696,f1261])).
fof(f10664,plain,(
  ( ! [X0] : (sP43(X0,'const.list.NIL_0','const.list.NIL_0')) )),
  inference(unit_resulting_resolution,[],[f10662,f1044])).
fof(f10669,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f10662,f725])).
fof(f10670,plain,(
  ( ! [X0,X1] : (s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f10662,f725])).
fof(f10671,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f739])).
fof(f10672,plain,(
  ( ! [X0,X1] : (sP0('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f10662,f740])).
fof(f10673,plain,(
  ( ! [X0] : (~sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f10662,f754])).
fof(f10675,plain,(
  ( ! [X0] : (~sP1('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f10662,f754])).
fof(f10676,plain,(
  ( ! [X0,X1] : (~sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f10662,f754])).
fof(f10677,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f755])).
fof(f10678,plain,(
  ( ! [X0] : (sP1('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f758])).
fof(f10681,plain,(
  ( ! [X0] : (~sP72('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f10662,f1262])).
fof(f10682,plain,(
  ( ! [X0,X1] : (~sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f10662,f662,f10662,f1262])).
fof(f10684,plain,(
  ( ! [X0] : (sP72('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f1386,f1380,f1383,f10662,f1263])).
fof(f10696,plain,(
  ( ! [X0] : (~sP71('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f10662,f1266])).
fof(f10697,plain,(
  ( ! [X0,X1] : (~sP71('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f10662,f662,f10662,f1266])).
fof(f10701,plain,(
  ( ! [X2,X0,X1] : (sP71(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f1267])).
fof(f10707,plain,(
  ( ! [X0] : (~sP70('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f10662,f1270])).
fof(f10708,plain,(
  ( ! [X0,X1] : (~sP70('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f10662,f662,f10662,f1270])).
fof(f10712,plain,(
  ( ! [X2,X0,X1] : (sP70(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f1271])).
fof(f10713,plain,(
  ( ! [X2,X0,X1] : (sP69(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f1275])).
fof(f10714,plain,(
  ( ! [X2,X0,X1] : (sP69(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f10662,f1276])).
fof(f10715,plain,(
  ( ! [X2,X0,X1] : (sP69('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f10662,f1277])).
fof(f10716,plain,(
  ( ! [X0,X1] : (sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.bool.BOUNDED_1'(s(bool,X1)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f663,f10662,f1279])).
fof(f10718,plain,(
  ( ! [X0,X1] : (sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f663,f10662,f1279])).
fof(f10720,plain,(
  ( ! [X0] : (~sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1403,f10662,f1280])).
fof(f10721,plain,(
  ( ! [X0] : (~sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f1403,f10662,f1280])).
fof(f10722,plain,(
  ( ! [X0,X1] : (~sP74('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f1283])).
fof(f10723,plain,(
  ( ! [X0,X1] : (~sP74('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f1284])).
fof(f10736,plain,(
  ( ! [X0] : (~sP73('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f10662,f1289])).
fof(f10741,plain,(
  ( ! [X0] : (~sP73('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f10662,f1289])).
fof(f10742,plain,(
  ( ! [X0,X1] : (~sP73('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f10662,f662,f10662,f1289])).
fof(f10746,plain,(
  ( ! [X2,X0,X1] : (sP73(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f1290])).
fof(f10747,plain,(
  ( ! [X0] : (sP74('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f660,f10662,f1295])).
fof(f10752,plain,(
  ( ! [X0] : (sP74('T_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f660,f10662,f1295])).
fof(f10754,plain,(
  ( ! [X0,X1] : (sP74('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f10662,f10662,f1295])).
fof(f10757,plain,(
  ( ! [X0] : (sP74('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f660,f10662,f1295])).
fof(f10758,plain,(
  ( ! [X0,X1] : (sP74('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f10662,f660,f10662,f1295])).
fof(f10759,plain,(
  ( ! [X0,X1] : (sP74('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f10662,f10662,f1295])).
fof(f10760,plain,(
  ( ! [X2,X0,X1] : (sP74('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f10662,f10662,f1295])).
fof(f10764,plain,(
  ( ! [X0] : (~sP74('F_0','T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f662,f10662,f1298])).
fof(f10765,plain,(
  ( ! [X0,X1] : (~sP74('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f662,f10662,f1298])).
fof(f10767,plain,(
  ( ! [X0,X1] : (~sP76('F_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f1299])).
fof(f10774,plain,(
  ( ! [X0,X1] : (~sP76('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f1300])).
fof(f10785,plain,(
  ( ! [X0] : (~sP75('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f662,f10662,f1306])).
fof(f10790,plain,(
  ( ! [X2,X0,X1] : (sP75(X0,X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f1307])).
fof(f10791,plain,(
  ( ! [X2,X0,X1] : (sP75(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f10662,f1308])).
fof(f10797,plain,(
  ( ! [X2,X0,X1] : (sP76('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f10662,f1311])).
fof(f10803,plain,(
  ( ! [X2,X0,X1] : (sP76('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f10662,f10662,f1312])).
fof(f10804,plain,(
  ( ! [X0] : (~sP76('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f662,f10662,f1313])).
fof(f10805,plain,(
  ( ! [X0,X1] : (~sP78('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f1317])).
fof(f10832,plain,(
  ( ! [X0] : (~sP77('T_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f660,f10662,f1323])).
fof(f10833,plain,(
  ( ! [X0,X1] : (~sP77('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f10662,f1323])).
fof(f10838,plain,(
  ( ! [X2,X0,X1] : (sP77(X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f10662,f1325])).
fof(f10839,plain,(
  ( ! [X0] : (sP78('F_0','F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f662,f10662,f1327])).
fof(f10847,plain,(
  ( ! [X2,X0,X1] : (sP78('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f10662,f10662,f1329])).
fof(f10853,plain,(
  ( ! [X0] : (~sP78('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f10662,f1330])).
fof(f10854,plain,(
  ( ! [X0,X1] : (~sP78('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f662,f10662,f1330])).
fof(f10855,plain,(
  ( ! [X0,X1] : (sP78('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f1395,f10662,f1363])).
fof(f10856,plain,(
  ( ! [X0,X1] : (sP78('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f1396,f10662,f1363])).
fof(f10858,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f1392,f10662,f1364])).
fof(f10860,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f1393,f10662,f1364])).
fof(f10862,plain,(
  ( ! [X2,X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f10662,f1477])).
fof(f10863,plain,(
  ( ! [X2,X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f10662,f1488])).
fof(f10864,plain,(
  ( ! [X2,X0,X1] : (sP78('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f10662,f1522])).
fof(f10865,plain,(
  ( ! [X0,X1] : (~sP71('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f1846])).
fof(f10868,plain,(
  ( ! [X0,X1] : (~sP70('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f1860])).
fof(f10871,plain,(
  ( ! [X0,X1] : (~sP74('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f1924])).
fof(f10872,plain,(
  ( ! [X0,X1] : (~sP77('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f2082])).
fof(f10875,plain,(
  ( ! [X0,X1] : (~sP78('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f10662,f2124])).
fof(f10911,plain,(
  ( ! [X0,X1] : (sP76('T_0',X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f1403,f1403,f10662,f4442])).
fof(f10916,plain,(
  ( ! [X0,X1] : (sP76('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f1403,f1403,f10662,f4443])).
fof(f10921,plain,(
  ( ! [X0,X1] : (sP78('T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f1403,f1403,f10662,f4448])).
fof(f10662,plain,(
  ( ! [X0] : (p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0'))))) )),
  inference(equality_resolution,[],[f737])).
fof(f10547,plain,(
  ( ! [X14,X15,X16] : (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X16) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X15)))) )),
  inference(subsumption_resolution,[],[f10543,f660])).
fof(f10543,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X15) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X16) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X15)))) )),
  inference(superposition,[],[f736,f3313])).
fof(f10546,plain,(
  ( ! [X4,X2,X3] : (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s(bool,X4) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f10539,f660])).
fof(f10539,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s(bool,X4) = s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),X3))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f736,f1649])).
fof(f10454,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X15)),X14,bool)) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X16) = s(bool,happ(s(fun(bool,bool),X14),s(bool,'T_0')))) )),
  inference(subsumption_resolution,[],[f10445,f660])).
fof(f10445,plain,(
  ( ! [X14,X15,X16] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X15)),X14,bool)) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X16) = s(bool,happ(s(fun(bool,bool),X14),s(bool,'T_0')))) )),
  inference(superposition,[],[f2690,f3313])).
fof(f10453,plain,(
  ( ! [X4,X2,X3] : (s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X3)),X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f10441,f660])).
fof(f10441,plain,(
  ( ! [X4,X2,X3] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X3)),X2,bool)) | s(bool,X4) = s(bool,happ(s(fun(bool,bool),X2),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f2690,f1649])).
fof(f10358,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X2) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f9594,f665])).
fof(f10234,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X4) | ~sP75('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP76('const.bool.BOUNDED_1'(s(bool,X3)),X1,X2) | s(bool,'F_0') = s(bool,X3) | s(bool,X0) = s(bool,X4)) )),
  inference(forward_demodulation,[],[f10222,f663])).
fof(f10222,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP75('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP76('const.bool.BOUNDED_1'(s(bool,X3)),X1,X2) | s(bool,'F_0') = s(bool,X3) | s(bool,X4) = s(bool,'const.bool.BOUNDED_1'(s(bool,X4))) | s(bool,X0) = s(bool,X4)) )),
  inference(superposition,[],[f10092,f3313])).
fof(f10214,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X4) | ~sP77('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP78('const.bool.BOUNDED_1'(s(bool,X3)),X1,X2) | s(bool,'F_0') = s(bool,X3) | s(bool,X0) = s(bool,X4)) )),
  inference(forward_demodulation,[],[f10202,f663])).
fof(f10202,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP77('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP78('const.bool.BOUNDED_1'(s(bool,X3)),X1,X2) | s(bool,'F_0') = s(bool,X3) | s(bool,X4) = s(bool,'const.bool.BOUNDED_1'(s(bool,X4))) | s(bool,X0) = s(bool,X4)) )),
  inference(superposition,[],[f10091,f3313])).
fof(f10032,plain,(
  ( ! [X354,X355] : (~p(s(bool,happ(s(fun(bool,bool),X355),s(bool,X354)))) | p(s(bool,happ(s(fun(bool,bool),X355),s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X354)),X355,bool))))) | s(bool,'F_0') = s(bool,X354)) )),
  inference(superposition,[],[f717,f9657])).
fof(f10106,plain,(
  ( ! [X352,X353] : (s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X352)),X353,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X353),s(bool,X352)))) | s(bool,'F_0') = s(bool,X352)) )),
  inference(forward_demodulation,[],[f10031,f663])).
fof(f10031,plain,(
  ( ! [X352,X353] : (~p(s(bool,happ(s(fun(bool,bool),X353),s(bool,X352)))) | s(bool,'const.bool.BOUNDED_1'(s(bool,X352))) = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X352)),X353,bool)) | s(bool,'F_0') = s(bool,X352)) )),
  inference(superposition,[],[f716,f9657])).
fof(f10092,plain,(
  ( ! [X130,X131,X129] : (~sP75('const.bool.BOUNDED_1'(s(bool,'T_0')),X130,X131) | sP76('const.bool.BOUNDED_1'(s(bool,X129)),X130,X131) | s(bool,'F_0') = s(bool,X129)) )),
  inference(forward_demodulation,[],[f9922,f663])).
fof(f9922,plain,(
  ( ! [X130,X131,X129] : (sP76('const.bool.BOUNDED_1'(s(bool,X129)),X130,X131) | ~sP75('const.bool.BOUNDED_1'(s(bool,'const.bool.BOUNDED_1'(s(bool,X129)))),X130,X131) | s(bool,'F_0') = s(bool,X129)) )),
  inference(superposition,[],[f1556,f9657])).
fof(f10091,plain,(
  ( ! [X121,X122,X120] : (~sP77('const.bool.BOUNDED_1'(s(bool,'T_0')),X121,X122) | sP78('const.bool.BOUNDED_1'(s(bool,X120)),X121,X122) | s(bool,'F_0') = s(bool,X120)) )),
  inference(forward_demodulation,[],[f9919,f663])).
fof(f9919,plain,(
  ( ! [X121,X122,X120] : (sP78('const.bool.BOUNDED_1'(s(bool,X120)),X121,X122) | ~sP77('const.bool.BOUNDED_1'(s(bool,'const.bool.BOUNDED_1'(s(bool,X120)))),X121,X122) | s(bool,'F_0') = s(bool,X120)) )),
  inference(superposition,[],[f1540,f9657])).
fof(f9841,plain,(
  ( ! [X61,X64,X62,X65,X63] : (p(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))) | ~p(s(bool,happ(s(fun(X62,bool),X63),s(X62,sK85('const.bool.BOUNDED_1'(s(bool,X61)),X63,X62))))) | s(bool,X61) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f9826,f1758])).
fof(f9826,plain,(
  ( ! [X61,X64,X62,X65,X63] : (~p(s(bool,X61)) | p(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))) | ~p(s(bool,happ(s(fun(X62,bool),X63),s(X62,sK85('const.bool.BOUNDED_1'(s(bool,X61)),X63,X62))))) | s(bool,X61) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f707,f3313])).
fof(f9762,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1))) | s(bool,X2) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2))) | s(bool,X0) = s(bool,X2)) )),
  inference(superposition,[],[f9546,f3313])).
fof(f9722,plain,(
  ( ! [X4,X5,X3] : (s(bool,X4) != s(bool,'const.bool.BOUNDED_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,X4) | s(bool,X3) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f9229,f1649])).
fof(f9721,plain,(
  ( ! [X2,X0,X1] : (s(bool,X1) != s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) | s(bool,'T_0') = s(bool,X1) | s(bool,X2) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2))) | s(bool,X0) = s(bool,X2)) )),
  inference(superposition,[],[f9229,f3313])).
fof(f9703,plain,(
  ( ! [X61,X64,X62,X65,X63] : (~p(s(bool,happ(s(fun(X62,bool),X63),s(X62,sK84(X63,'const.bool.BOUNDED_1'(s(bool,X61)),X62))))) | p(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))) | s(bool,X61) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(subsumption_resolution,[],[f9688,f1758])).
fof(f9688,plain,(
  ( ! [X61,X64,X62,X65,X63] : (~p(s(bool,X61)) | ~p(s(bool,happ(s(fun(X62,bool),X63),s(X62,sK84(X63,'const.bool.BOUNDED_1'(s(bool,X61)),X62))))) | p(s(bool,happ(s(fun(X62,bool),X63),s(X62,X64)))) | s(bool,X61) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) )),
  inference(superposition,[],[f706,f3313])).
fof(f9200,plain,(
  ( ! [X600,X602,X598,X601,X603,X599] : (s('type.pair.prod'(X599,bool),'const.pair.,_2'(s(X599,X602),s(bool,'T_0'))) != s('type.pair.prod'(X599,bool),'const.pair.,_2'(s(X599,X600),s(bool,X601))) | s(bool,X598) = s(bool,X601) | s(bool,X603) = s(bool,'const.bool.BOUNDED_1'(s(bool,X603))) | s(bool,X598) = s(bool,X603)) )),
  inference(superposition,[],[f766,f3313])).
fof(f9197,plain,(
  ( ! [X584,X580,X582,X585,X581,X583] : (s('type.pair.prod'(bool,X581),'const.pair.,_2'(s(bool,'T_0'),s(X581,X584))) != s('type.pair.prod'(bool,X581),'const.pair.,_2'(s(bool,X582),s(X581,X583))) | s(bool,X580) = s(bool,X582) | s(bool,X585) = s(bool,'const.bool.BOUNDED_1'(s(bool,X585))) | s(bool,X580) = s(bool,X585)) )),
  inference(superposition,[],[f765,f3313])).
fof(f9194,plain,(
  ( ! [X565,X567,X568,X564,X566] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X567))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X565),s('type.list.list'(bool),X566))) | s(bool,X564) = s(bool,X565) | s(bool,X568) = s(bool,'const.bool.BOUNDED_1'(s(bool,X568))) | s(bool,X564) = s(bool,X568)) )),
  inference(superposition,[],[f719,f3313])).
fof(f9662,plain,(
  ( ! [X532,X534,X533,X531] : (s(X531,X533) = s(X531,sK89(X533,X532,X531)) | s(bool,X534) = s(bool,'const.bool.BOUNDED_1'(s(bool,X534))) | s(bool,X534) = s(bool,happ(s(fun(X531,bool),X532),s(X531,X533)))) )),
  inference(subsumption_resolution,[],[f9185,f660])).
fof(f9185,plain,(
  ( ! [X532,X534,X533,X531] : (~p(s(bool,'T_0')) | s(X531,X533) = s(X531,sK89(X533,X532,X531)) | s(bool,X534) = s(bool,'const.bool.BOUNDED_1'(s(bool,X534))) | s(bool,X534) = s(bool,happ(s(fun(X531,bool),X532),s(X531,X533)))) )),
  inference(superposition,[],[f716,f3313])).
fof(f9657,plain,(
  ( ! [X501] : (s(bool,X501) = s(bool,'const.bool.BOUNDED_1'(s(bool,X501))) | s(bool,'F_0') = s(bool,X501)) )),
  inference(subsumption_resolution,[],[f9175,f660])).
fof(f9175,plain,(
  ( ! [X501] : (~p(s(bool,'T_0')) | s(bool,X501) = s(bool,'const.bool.BOUNDED_1'(s(bool,X501))) | s(bool,'F_0') = s(bool,X501)) )),
  inference(superposition,[],[f662,f3313])).
fof(f8850,plain,(
  ( ! [X31,X32] : (s(bool,X31) = s(bool,'const.bool.BOUNDED_1'(s(bool,X31))) | s(bool,X32) = s(bool,'const.bool.BOUNDED_1'(s(bool,X32))) | s(bool,X31) = s(bool,X32)) )),
  inference(superposition,[],[f663,f3313])).
fof(f8849,plain,(
  ( ! [X30,X28,X26,X29,X27] : (s('type.pair.prod'(X27,bool),'const.pair.,_2'(s(X27,X28),s(bool,'F_0'))) != s('type.pair.prod'(X27,bool),'const.pair.,_2'(s(X27,X29),s(bool,X26))) | s(bool,X30) = s(bool,'const.bool.BOUNDED_1'(s(bool,X30))) | s(bool,X26) = s(bool,X30)) )),
  inference(superposition,[],[f7853,f3313])).
fof(f8848,plain,(
  ( ! [X24,X23,X21,X25,X22] : (s('type.pair.prod'(bool,X22),'const.pair.,_2'(s(bool,'F_0'),s(X22,X24))) != s('type.pair.prod'(bool,X22),'const.pair.,_2'(s(bool,X21),s(X22,X23))) | s(bool,X25) = s(bool,'const.bool.BOUNDED_1'(s(bool,X25))) | s(bool,X21) = s(bool,X25)) )),
  inference(superposition,[],[f7764,f3313])).
fof(f8847,plain,(
  ( ! [X19,X17,X20,X18] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X19))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X17),s('type.list.list'(bool),X18))) | s(bool,X20) = s(bool,'const.bool.BOUNDED_1'(s(bool,X20))) | s(bool,X17) = s(bool,X20)) )),
  inference(superposition,[],[f7699,f3313])).
fof(f9551,plain,(
  ( ! [X520,X518,X519] : (s(bool,X518) != s(bool,X519) | s(bool,X519) = s(bool,X520) | s(bool,'T_0') = s(bool,X520) | s(bool,X518) = s(bool,'const.bool.BOUNDED_1'(s(bool,X518)))) )),
  inference(subsumption_resolution,[],[f8807,f1403])).
fof(f8807,plain,(
  ( ! [X520,X518,X519] : (s(bool,X518) != s(bool,X519) | s(bool,X519) = s(bool,X520) | s(bool,'T_0') = s(bool,X520) | s(bool,X518) = s(bool,'const.bool.BOUNDED_1'(s(bool,X518))) | s(bool,'T_0') = s(bool,'F_0')) )),
  inference(superposition,[],[f4431,f3313])).
fof(f8629,plain,(
  ( ! [X606,X609,X605,X607,X608,X610] : (s('type.pair.prod'(X607,bool),'const.pair.,_2'(s(X607,X608),s(bool,X609))) != s('type.pair.prod'(X607,bool),'const.pair.,_2'(s(X607,X610),s(bool,X606))) | s(bool,X605) = s(bool,X609) | s(bool,X605) = s(bool,'const.bool.BOUNDED_1'(s(bool,X605))) | s(bool,'T_0') = s(bool,X606)) )),
  inference(superposition,[],[f766,f3313])).
fof(f8626,plain,(
  ( ! [X592,X588,X590,X589,X591,X587] : (s('type.pair.prod'(bool,X589),'const.pair.,_2'(s(bool,X588),s(X589,X592))) != s('type.pair.prod'(bool,X589),'const.pair.,_2'(s(bool,X590),s(X589,X591))) | s(bool,X587) = s(bool,X590) | s(bool,X587) = s(bool,'const.bool.BOUNDED_1'(s(bool,X587))) | s(bool,'T_0') = s(bool,X588)) )),
  inference(superposition,[],[f765,f3313])).
fof(f8623,plain,(
  ( ! [X573,X575,X571,X572,X574] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X572),s('type.list.list'(bool),X575))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X573),s('type.list.list'(bool),X574))) | s(bool,X571) = s(bool,X573) | s(bool,X571) = s(bool,'const.bool.BOUNDED_1'(s(bool,X571))) | s(bool,'T_0') = s(bool,X572)) )),
  inference(superposition,[],[f719,f3313])).
fof(f9465,plain,(
  ( ! [X486,X485,X487] : (s(bool,'T_0') = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X485)),X486,bool)) | ~p(s(bool,happ(s(fun(bool,bool),X486),s(bool,X485)))) | s(bool,X485) = s(bool,X487) | s(bool,'T_0') = s(bool,X487)) )),
  inference(forward_demodulation,[],[f8421,f663])).
fof(f8421,plain,(
  ( ! [X486,X485,X487] : (~p(s(bool,happ(s(fun(bool,bool),X486),s(bool,X485)))) | s(bool,'const.bool.BOUNDED_1'(s(bool,X485))) = s(bool,sK89('const.bool.BOUNDED_1'(s(bool,X485)),X486,bool)) | s(bool,X485) = s(bool,X487) | s(bool,'T_0') = s(bool,X487)) )),
  inference(superposition,[],[f716,f3313])).
fof(f8252,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.bool.BOUNDED_1'(s(bool,X6))) | s(bool,X5) = s(bool,X6) | s(bool,X4) = s(bool,X7) | s(bool,'T_0') = s(bool,X7)) )),
  inference(superposition,[],[f3313,f1649])).
fof(f8251,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.bool.BOUNDED_1'(s(bool,X2))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.bool.BOUNDED_1'(s(bool,X3))) | s(bool,X0) = s(bool,X3)) )),
  inference(superposition,[],[f3313,f3313])).
fof(f8130,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'(X1,bool)),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,X3),s(bool,'T_0'))))) != s('type.pair.prod'(X0,'type.pair.prod'(X1,bool)),'const.pair.,_2'(s(X0,X4),s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,X5),s(bool,'F_0')))))) )),
  inference(unit_resulting_resolution,[],[f7853,f766])).
fof(f8131,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'(X0,bool),X1),'const.pair.,_2'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X2),s(bool,'T_0'))),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'(X0,bool),X1),'const.pair.,_2'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X4),s(bool,'F_0'))),s(X1,X5)))) )),
  inference(unit_resulting_resolution,[],[f7853,f765])).
fof(f8132,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(X0,bool)),'const.list.CONS_2'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X1),s(bool,'T_0'))),s('type.list.list'('type.pair.prod'(X0,bool)),X2))) != s('type.list.list'('type.pair.prod'(X0,bool)),'const.list.CONS_2'(s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X3),s(bool,'F_0'))),s('type.list.list'('type.pair.prod'(X0,bool)),X4)))) )),
  inference(unit_resulting_resolution,[],[f7853,f719])).
fof(f8084,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.pair.prod'(bool,X1)),'const.pair.,_2'(s(X0,X2),s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,'F_0'),s(X1,X3))))) != s('type.pair.prod'(X0,'type.pair.prod'(bool,X1)),'const.pair.,_2'(s(X0,X4),s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,'T_0'),s(X1,X5)))))) )),
  inference(unit_resulting_resolution,[],[f7764,f766])).
fof(f8085,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'(bool,X0),X1),'const.pair.,_2'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X2))),s(X1,X3))) != s('type.pair.prod'('type.pair.prod'(bool,X0),X1),'const.pair.,_2'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'F_0'),s(X0,X4))),s(X1,X5)))) )),
  inference(unit_resulting_resolution,[],[f7764,f765])).
fof(f8086,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'(bool,X0)),'const.list.CONS_2'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X1))),s('type.list.list'('type.pair.prod'(bool,X0)),X2))) != s('type.list.list'('type.pair.prod'(bool,X0)),'const.list.CONS_2'(s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'F_0'),s(X0,X3))),s('type.list.list'('type.pair.prod'(bool,X0)),X4)))) )),
  inference(unit_resulting_resolution,[],[f7764,f719])).
fof(f8064,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'(bool)),'const.pair.,_2'(s(X0,X1),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X2))))) != s('type.pair.prod'(X0,'type.list.list'(bool)),'const.pair.,_2'(s(X0,X3),s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X4)))))) )),
  inference(unit_resulting_resolution,[],[f7699,f766])).
fof(f8065,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.list.list'(bool),X0),'const.pair.,_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))),s(X0,X2))) != s('type.pair.prod'('type.list.list'(bool),X0),'const.pair.,_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X3))),s(X0,X4)))) )),
  inference(unit_resulting_resolution,[],[f7699,f765])).
fof(f8066,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))),s('type.list.list'('type.list.list'(bool)),X1))) != s('type.list.list'('type.list.list'(bool)),'const.list.CONS_2'(s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X2))),s('type.list.list'('type.list.list'(bool)),X3)))) )),
  inference(unit_resulting_resolution,[],[f7699,f719])).
fof(f7968,plain,(
  ( ! [X0,X1] : (sP77('T_0','const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f7948,f1318])).
fof(f7948,plain,(
  ( ! [X0,X1] : (sP78('T_0','const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(unit_resulting_resolution,[],[f1403,f1403,f7757])).
fof(f7877,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s('type.pair.prod'(X51,bool),'const.pair.,_2'(s(X51,X52),s(bool,'T_0'))) != s('type.pair.prod'(X51,bool),'const.pair.,_2'(s(X51,X53),s(bool,X54))) | s(bool,X54) = s(bool,'const.bool.BOUNDED_1'(s(bool,X50)))) )),
  inference(superposition,[],[f766,f663])).
fof(f7875,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.pair.prod'(X42,bool),'const.pair.,_2'(s(X42,X43),s(bool,X41))) != s('type.pair.prod'(X42,bool),'const.pair.,_2'(s(X42,X44),s(bool,X45))) | s(bool,'F_0') = s(bool,X45) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f766,f665])).
fof(f7872,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.pair.prod'(X25,bool),'const.pair.,_2'(s(X25,X26),s(bool,'F_0'))) != s('type.pair.prod'(X25,bool),'const.pair.,_2'(s(X25,X27),s(bool,X28))) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f766,f665])).
fof(f7870,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.pair.prod'(X14,bool),'const.pair.,_2'(s(X14,X15),s(bool,X13))) != s('type.pair.prod'(X14,bool),'const.pair.,_2'(s(X14,X16),s(bool,X17))) | s(bool,X12) = s(bool,X17) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f766,f1649])).
fof(f7868,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,X2),s(bool,'T_0'))) != s('type.pair.prod'(X1,bool),'const.pair.,_2'(s(X1,X3),s(bool,X4))) | s(bool,X0) = s(bool,X4) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f766,f1649])).
fof(f7853,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X1),s(bool,'F_0'))) != s('type.pair.prod'(X0,bool),'const.pair.,_2'(s(X0,X2),s(bool,'T_0')))) )),
  inference(unit_resulting_resolution,[],[f1403,f766])).
fof(f7855,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X2),s('type.list.list'(X1),'const.list.NIL_0'))) != s('type.pair.prod'(X0,'type.list.list'(X1)),'const.pair.,_2'(s(X0,X3),s('type.list.list'(X1),'const.list.CONS_2'(s(X1,X4),s('type.list.list'(X1),X5)))))) )),
  inference(unit_resulting_resolution,[],[f718,f766])).
fof(f7857,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X1),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))) != s('type.pair.prod'(X0,'type.modSem.v'),'const.pair.,_2'(s(X0,X2),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))))))) )),
  inference(unit_resulting_resolution,[],[f2716,f766])).
fof(f7775,plain,(
  ( ! [X54,X52,X50,X53,X51] : (s('type.pair.prod'(bool,X51),'const.pair.,_2'(s(bool,'T_0'),s(X51,X52))) != s('type.pair.prod'(bool,X51),'const.pair.,_2'(s(bool,X53),s(X51,X54))) | s(bool,X53) = s(bool,'const.bool.BOUNDED_1'(s(bool,X50)))) )),
  inference(superposition,[],[f765,f663])).
fof(f7773,plain,(
  ( ! [X45,X43,X41,X44,X42] : (s('type.pair.prod'(bool,X42),'const.pair.,_2'(s(bool,X41),s(X42,X43))) != s('type.pair.prod'(bool,X42),'const.pair.,_2'(s(bool,X44),s(X42,X45))) | s(bool,'F_0') = s(bool,X44) | s(bool,'T_0') = s(bool,X41)) )),
  inference(superposition,[],[f765,f665])).
fof(f7770,plain,(
  ( ! [X28,X26,X24,X27,X25] : (s('type.pair.prod'(bool,X25),'const.pair.,_2'(s(bool,'F_0'),s(X25,X26))) != s('type.pair.prod'(bool,X25),'const.pair.,_2'(s(bool,X27),s(X25,X28))) | s(bool,X24) = s(bool,X27) | s(bool,'T_0') = s(bool,X24)) )),
  inference(superposition,[],[f765,f665])).
fof(f7768,plain,(
  ( ! [X14,X12,X17,X15,X13,X16] : (s('type.pair.prod'(bool,X14),'const.pair.,_2'(s(bool,X13),s(X14,X15))) != s('type.pair.prod'(bool,X14),'const.pair.,_2'(s(bool,X16),s(X14,X17))) | s(bool,X12) = s(bool,X16) | s(bool,'T_0') = s(bool,X12) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f765,f1649])).
fof(f7766,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,'T_0'),s(X1,X2))) != s('type.pair.prod'(bool,X1),'const.pair.,_2'(s(bool,X3),s(X1,X4))) | s(bool,X0) = s(bool,X3) | s(bool,X0) = s(bool,X5) | s(bool,'T_0') = s(bool,X5)) )),
  inference(superposition,[],[f765,f1649])).
fof(f7763,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.NIL_0'),s(X1,X2))) != s('type.pair.prod'('type.list.list'(X0),X1),'const.pair.,_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))),s(X1,X5)))) )),
  inference(unit_resulting_resolution,[],[f718,f765])).
fof(f7764,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'T_0'),s(X0,X1))) != s('type.pair.prod'(bool,X0),'const.pair.,_2'(s(bool,'F_0'),s(X0,X2)))) )),
  inference(unit_resulting_resolution,[],[f1403,f765])).
fof(f7765,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s(X0,X1))) != s('type.pair.prod'('type.modSem.v',X0),'const.pair.,_2'(s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X2),s('type.list.list'('type.modSem.v'),X3))))),s(X0,X4)))) )),
  inference(unit_resulting_resolution,[],[f2716,f765])).
fof(f7757,plain,(
  ( ! [X43,X41,X44,X42] : (sP78(X42,'const.bool.BOUNDED_1'(s(bool,X41)),X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f7748,f660])).
fof(f7748,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | sP78(X42,'const.bool.BOUNDED_1'(s(bool,X41)),X43) | s(bool,X42) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f4448,f663])).
fof(f7752,plain,(
  ( ! [X2,X0,X1] : (sP78(X0,'T_0',X2) | s(bool,X0) = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(duplicate_literal_removal,[],[f7751])).
fof(f7751,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) = s(bool,X1) | sP78(X0,'T_0',X2) | s(bool,'T_0') = s(bool,X1) | s(bool,'T_0') = s(bool,X1)) )),
  inference(condensation,[],[f7750])).
fof(f7750,plain,(
  ( ! [X28,X26,X24,X27,X25] : (sP78(X25,'T_0',X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(subsumption_resolution,[],[f7744,f1758])).
fof(f7744,plain,(
  ( ! [X28,X26,X24,X27,X25] : (~p(s(bool,X24)) | sP78(X25,'T_0',X26) | s(bool,X25) = s(bool,X27) | s(bool,'T_0') = s(bool,X27) | s(bool,X24) = s(bool,X28) | s(bool,'T_0') = s(bool,X28)) )),
  inference(superposition,[],[f4448,f1649])).
fof(f7749,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP78(X1,X0,X2) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f7739,f660])).
fof(f7739,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | sP78(X1,X0,X2) | s(bool,X1) = s(bool,X3) | s(bool,'T_0') = s(bool,X3) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f4448,f1649])).
fof(f7710,plain,(
  ( ! [X43,X41,X44,X42] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X42))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X43),s('type.list.list'(bool),X44))) | s(bool,X43) = s(bool,'const.bool.BOUNDED_1'(s(bool,X41)))) )),
  inference(superposition,[],[f719,f663])).
fof(f7708,plain,(
  ( ! [X37,X35,X36,X34] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X34),s('type.list.list'(bool),X35))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X36),s('type.list.list'(bool),X37))) | s(bool,'F_0') = s(bool,X36) | s(bool,'T_0') = s(bool,X34)) )),
  inference(superposition,[],[f719,f665])).
fof(f7705,plain,(
  ( ! [X23,X21,X22,X20] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X21))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X22),s('type.list.list'(bool),X23))) | s(bool,X20) = s(bool,X22) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f719,f665])).
fof(f7703,plain,(
  ( ! [X14,X12,X10,X13,X11] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X11),s('type.list.list'(bool),X12))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X13),s('type.list.list'(bool),X14))) | s(bool,X10) = s(bool,X13) | s(bool,'T_0') = s(bool,X10) | s(bool,'T_0') = s(bool,X11)) )),
  inference(superposition,[],[f719,f1649])).
fof(f7701,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X1))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X2),s('type.list.list'(bool),X3))) | s(bool,X0) = s(bool,X2) | s(bool,X0) = s(bool,X4) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f719,f1649])).
fof(f7698,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.NIL_0'),s('type.list.list'('type.list.list'(X0)),X1))) != s('type.list.list'('type.list.list'(X0)),'const.list.CONS_2'(s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X2),s('type.list.list'(X0),X3))),s('type.list.list'('type.list.list'(X0)),X4)))) )),
  inference(unit_resulting_resolution,[],[f718,f719])).
fof(f7699,plain,(
  ( ! [X0,X1] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X0))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'F_0'),s('type.list.list'(bool),X1)))) )),
  inference(unit_resulting_resolution,[],[f1403,f719])).
fof(f7700,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.modSem.v'),X0))) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X1),s('type.list.list'('type.modSem.v'),X2))))),s('type.list.list'('type.modSem.v'),X3)))) )),
  inference(unit_resulting_resolution,[],[f2716,f719])).
fof(f7596,plain,(
  ( ! [X17,X18,X16] : (sP1(X16,X17) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f7586,f662])).
fof(f7586,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'F_0')) | sP1(X16,X17) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f4436,f665])).
fof(f4462,plain,(
  ( ! [X414,X416,X413,X415] : (s(X413,X415) = s(X413,sK89(X415,X414,X413)) | s(bool,X416) = s(bool,happ(s(fun(X413,bool),X414),s(X413,X415))) | s(bool,'T_0') = s(bool,X416)) )),
  inference(subsumption_resolution,[],[f3579,f660])).
fof(f3579,plain,(
  ( ! [X414,X416,X413,X415] : (~p(s(bool,'T_0')) | s(X413,X415) = s(X413,sK89(X415,X414,X413)) | s(bool,X416) = s(bool,happ(s(fun(X413,bool),X414),s(X413,X415))) | s(bool,'T_0') = s(bool,X416)) )),
  inference(superposition,[],[f716,f1649])).
fof(f6263,plain,(
  ( ! [X17,X18,X16] : (sP1(X17,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(subsumption_resolution,[],[f6252,f662])).
fof(f6252,plain,(
  ( ! [X17,X18,X16] : (p(s(bool,'F_0')) | sP1(X17,X16) | s(bool,X17) = s(bool,X18) | s(bool,'T_0') = s(bool,X18) | s(bool,'T_0') = s(bool,X16)) )),
  inference(superposition,[],[f4435,f665])).
fof(f6213,plain,(
  ( ! [X2,X0,X1] : (s(bool,X0) != s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f4431,f665])).
fof(f5838,plain,(
  ( ! [X0] : (s(bool,'T_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f664,f725])).
fof(f5839,plain,(
  ( ! [X0,X1] : (s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f664,f725])).
fof(f5840,plain,(
  ( ! [X0,X1] : (sP0(X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f739])).
fof(f5841,plain,(
  ( ! [X0,X1] : (sP0('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f664,f740])).
fof(f5842,plain,(
  ( ! [X0] : (~sP1('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f664,f754])).
fof(f5844,plain,(
  ( ! [X0] : (~sP1('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f664,f754])).
fof(f5845,plain,(
  ( ! [X0,X1] : (~sP1('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f664,f754])).
fof(f5846,plain,(
  ( ! [X0] : (sP1('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f664,f755])).
fof(f5847,plain,(
  ( ! [X0] : (sP1('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f664,f758])).
fof(f5850,plain,(
  ( ! [X0] : (~sP72('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f664,f1262])).
fof(f5851,plain,(
  ( ! [X0,X1] : (~sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f664,f662,f664,f1262])).
fof(f5853,plain,(
  ( ! [X0] : (sP72('T_0','T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f1386,f1380,f1383,f664,f1263])).
fof(f5865,plain,(
  ( ! [X0] : (~sP71('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f664,f1266])).
fof(f5866,plain,(
  ( ! [X0,X1] : (~sP71('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f664,f662,f664,f1266])).
fof(f5870,plain,(
  ( ! [X2,X0,X1] : (sP71(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f1267])).
fof(f5876,plain,(
  ( ! [X0] : (~sP70('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f664,f1270])).
fof(f5877,plain,(
  ( ! [X0,X1] : (~sP70('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f664,f662,f664,f1270])).
fof(f5881,plain,(
  ( ! [X2,X0,X1] : (sP70(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f1271])).
fof(f5882,plain,(
  ( ! [X2,X0,X1] : (sP69(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f1275])).
fof(f5883,plain,(
  ( ! [X2,X0,X1] : (sP69(X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f664,f1276])).
fof(f5884,plain,(
  ( ! [X2,X0,X1] : (sP69('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1,X2)) )),
  inference(unit_resulting_resolution,[],[f664,f1277])).
fof(f5885,plain,(
  ( ! [X0,X1] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.bool.BOUNDED_1'(s(bool,X1)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f663,f664,f1279])).
fof(f5887,plain,(
  ( ! [X0,X1] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f663,f664,f1279])).
fof(f5889,plain,(
  ( ! [X0] : (~sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1403,f664,f1280])).
fof(f5890,plain,(
  ( ! [X0] : (~sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f1403,f664,f1280])).
fof(f5891,plain,(
  ( ! [X0,X1] : (~sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f664,f1283])).
fof(f5892,plain,(
  ( ! [X0,X1] : (~sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f662,f664,f1284])).
fof(f5905,plain,(
  ( ! [X0] : (~sP73('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f664,f1289])).
fof(f5910,plain,(
  ( ! [X0] : (~sP73('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f664,f1289])).
fof(f5911,plain,(
  ( ! [X0,X1] : (~sP73('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0')) )),
  inference(unit_resulting_resolution,[],[f664,f662,f664,f1289])).
fof(f5915,plain,(
  ( ! [X2,X0,X1] : (sP73(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f1290])).
fof(f5916,plain,(
  ( ! [X0] : (sP74('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f660,f664,f1295])).
fof(f5921,plain,(
  ( ! [X0] : (sP74('T_0','T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f660,f664,f1295])).
fof(f5923,plain,(
  ( ! [X0,X1] : (sP74('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f664,f664,f1295])).
fof(f5926,plain,(
  ( ! [X0] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f660,f664,f1295])).
fof(f5927,plain,(
  ( ! [X0,X1] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0')) )),
  inference(unit_resulting_resolution,[],[f664,f660,f664,f1295])).
fof(f5928,plain,(
  ( ! [X0,X1] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f664,f664,f1295])).
fof(f5929,plain,(
  ( ! [X2,X0,X1] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f664,f664,f1295])).
fof(f5933,plain,(
  ( ! [X0] : (~sP74('F_0','T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f662,f664,f1298])).
fof(f5934,plain,(
  ( ! [X0,X1] : (~sP74('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f662,f664,f1298])).
fof(f5936,plain,(
  ( ! [X0,X1] : (~sP76('F_0',X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f664,f1299])).
fof(f5943,plain,(
  ( ! [X0,X1] : (~sP76('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f662,f664,f1300])).
fof(f5954,plain,(
  ( ! [X0] : (~sP75('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f662,f664,f1306])).
fof(f5959,plain,(
  ( ! [X2,X0,X1] : (sP75(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f1307])).
fof(f5960,plain,(
  ( ! [X2,X0,X1] : (sP75(X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f664,f1308])).
fof(f5966,plain,(
  ( ! [X2,X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f664,f1311])).
fof(f5972,plain,(
  ( ! [X2,X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f664,f664,f1312])).
fof(f5973,plain,(
  ( ! [X0] : (~sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f662,f664,f1313])).
fof(f5974,plain,(
  ( ! [X0,X1] : (~sP78('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1)) )),
  inference(unit_resulting_resolution,[],[f662,f664,f1317])).
fof(f5995,plain,(
  ( ! [X0] : (~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f662,f660,f664,f1323])).
fof(f6000,plain,(
  ( ! [X0] : (~sP77('T_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f660,f664,f1323])).
fof(f6001,plain,(
  ( ! [X0,X1] : (~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f664,f664,f1323])).
fof(f6005,plain,(
  ( ! [X2,X0,X1] : (sP77(X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f664,f1325])).
fof(f6006,plain,(
  ( ! [X0] : (sP78('F_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f662,f664,f1327])).
fof(f6014,plain,(
  ( ! [X2,X0,X1] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f664,f664,f1329])).
fof(f6015,plain,(
  ( ! [X0] : (~sP78('T_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f660,f662,f664,f1330])).
fof(f6019,plain,(
  ( ! [X0] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f664,f1330])).
fof(f6020,plain,(
  ( ! [X0,X1] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f662,f664,f1330])).
fof(f6021,plain,(
  ( ! [X0,X1] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f1395,f664,f1363])).
fof(f6022,plain,(
  ( ! [X0,X1] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f1396,f664,f1363])).
fof(f6024,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f1392,f664,f1364])).
fof(f6026,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f1393,f664,f1364])).
fof(f6028,plain,(
  ( ! [X2,X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X2),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f664,f1477])).
fof(f6029,plain,(
  ( ! [X2,X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f664,f1488])).
fof(f6030,plain,(
  ( ! [X2,X0,X1] : (sP78('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X2)) )),
  inference(unit_resulting_resolution,[],[f664,f1522])).
fof(f6031,plain,(
  ( ! [X0,X1] : (~sP71('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f664,f1846])).
fof(f6034,plain,(
  ( ! [X0,X1] : (~sP70('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f664,f1860])).
fof(f6037,plain,(
  ( ! [X0,X1] : (~sP74('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f662,f664,f1924])).
fof(f6038,plain,(
  ( ! [X0,X1] : (~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f662,f664,f2082])).
fof(f6041,plain,(
  ( ! [X0,X1] : (~sP78('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) )),
  inference(unit_resulting_resolution,[],[f662,f664,f2124])).
fof(f676,plain,(
  ( ! [X0] : (p(s(bool,X0)) | s(bool,'F_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f321])).
fof(f2026,plain,(
  ( ! [X4,X5,X3] : (~sP77('const.bool.BOUNDED_1'(s(bool,'F_0')),X4,X5) | sP78('const.bool.BOUNDED_1'(s(bool,X3)),X4,X5) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1540,f665])).
fof(f2027,plain,(
  ( ! [X6,X8,X7] : (~sP77('const.bool.BOUNDED_1'(s(bool,X6)),X7,X8) | sP78('const.bool.BOUNDED_1'(s(bool,'F_0')),X7,X8) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1540,f665])).
fof(f2040,plain,(
  ( ! [X4,X5,X3] : (~sP75('const.bool.BOUNDED_1'(s(bool,'F_0')),X4,X5) | sP76('const.bool.BOUNDED_1'(s(bool,X3)),X4,X5) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1556,f665])).
fof(f2041,plain,(
  ( ! [X6,X8,X7] : (~sP75('const.bool.BOUNDED_1'(s(bool,X6)),X7,X8) | sP76('const.bool.BOUNDED_1'(s(bool,'F_0')),X7,X8) | s(bool,'T_0') = s(bool,X6)) )),
  inference(superposition,[],[f1556,f665])).
fof(f664,plain,(
  ( ! [X0] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))) )),
  inference(cnf_transformation,[],[f74])).
fof(f74,plain,(
  ! [X0] : p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6] : p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0'))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_rules|split|9')).
fof(f4480,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP75('T_0',X1,X2) | p(s(bool,X1)) | sP76('T_0',X1,X2)) )),
  inference(condensation,[],[f4479])).
fof(f4479,plain,(
  ( ! [X52,X50,X51,X49] : (~sP75('T_0',X50,X51) | p(s(bool,X50)) | sP76('T_0',X50,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f3602,f1758])).
fof(f3602,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X49)) | ~sP75('T_0',X50,X51) | p(s(bool,X50)) | sP76('T_0',X50,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f1304,f1649])).
fof(f4459,plain,(
  ( ! [X255,X253,X254,X256] : (p(s(bool,X254)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X255)),X254,X253) | s(bool,X253) = s(bool,X256) | s(bool,'T_0') = s(bool,X256)) )),
  inference(subsumption_resolution,[],[f3519,f660])).
fof(f3519,plain,(
  ( ! [X255,X253,X254,X256] : (~p(s(bool,'T_0')) | p(s(bool,X254)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X255)),X254,X253) | s(bool,X253) = s(bool,X256) | s(bool,'T_0') = s(bool,X256)) )),
  inference(superposition,[],[f2124,f1649])).
fof(f4458,plain,(
  ( ! [X237,X235,X238,X236] : (p(s(bool,X236)) | ~sP77(X235,X236,'const.bool.BOUNDED_1'(s(bool,X237))) | s(bool,X235) = s(bool,X238) | s(bool,'T_0') = s(bool,X238)) )),
  inference(subsumption_resolution,[],[f3514,f660])).
fof(f3514,plain,(
  ( ! [X237,X235,X238,X236] : (~p(s(bool,'T_0')) | p(s(bool,X236)) | ~sP77(X235,X236,'const.bool.BOUNDED_1'(s(bool,X237))) | s(bool,X235) = s(bool,X238) | s(bool,'T_0') = s(bool,X238)) )),
  inference(superposition,[],[f2082,f1649])).
fof(f4457,plain,(
  ( ! [X225,X223,X226,X224] : (p(s(bool,X224)) | ~sP74(X224,X223,'const.bool.BOUNDED_1'(s(bool,X225))) | s(bool,X223) = s(bool,X226) | s(bool,'T_0') = s(bool,X226)) )),
  inference(subsumption_resolution,[],[f3511,f660])).
fof(f3511,plain,(
  ( ! [X225,X223,X226,X224] : (~p(s(bool,'T_0')) | p(s(bool,X224)) | ~sP74(X224,X223,'const.bool.BOUNDED_1'(s(bool,X225))) | s(bool,X223) = s(bool,X226) | s(bool,'T_0') = s(bool,X226)) )),
  inference(superposition,[],[f1924,f1649])).
fof(f4456,plain,(
  ( ! [X222,X220,X219,X221] : (p(s(bool,X220)) | ~sP70(X219,'const.bool.BOUNDED_1'(s(bool,X221)),X220) | s(bool,X219) = s(bool,X222) | s(bool,'T_0') = s(bool,X222)) )),
  inference(subsumption_resolution,[],[f3510,f660])).
fof(f3510,plain,(
  ( ! [X222,X220,X219,X221] : (~p(s(bool,'T_0')) | p(s(bool,X220)) | ~sP70(X219,'const.bool.BOUNDED_1'(s(bool,X221)),X220) | s(bool,X219) = s(bool,X222) | s(bool,'T_0') = s(bool,X222)) )),
  inference(superposition,[],[f1860,f1649])).
fof(f4455,plain,(
  ( ! [X218,X216,X215,X217] : (p(s(bool,X216)) | ~sP71(X215,'const.bool.BOUNDED_1'(s(bool,X217)),X216) | s(bool,X215) = s(bool,X218) | s(bool,'T_0') = s(bool,X218)) )),
  inference(subsumption_resolution,[],[f3509,f660])).
fof(f3509,plain,(
  ( ! [X218,X216,X215,X217] : (~p(s(bool,'T_0')) | p(s(bool,X216)) | ~sP71(X215,'const.bool.BOUNDED_1'(s(bool,X217)),X216) | s(bool,X215) = s(bool,X218) | s(bool,'T_0') = s(bool,X218)) )),
  inference(superposition,[],[f1846,f1649])).
fof(f3493,plain,(
  ( ! [X167,X169,X170,X168] : (sP76('const.bool.BOUNDED_1'(s(bool,'T_0')),X168,X169) | ~sP75('const.bool.BOUNDED_1'(s(bool,X167)),X168,X169) | s(bool,X167) = s(bool,X170) | s(bool,'T_0') = s(bool,X170)) )),
  inference(superposition,[],[f1556,f1649])).
fof(f3490,plain,(
  ( ! [X158,X156,X157,X155] : (sP78('const.bool.BOUNDED_1'(s(bool,'T_0')),X156,X157) | ~sP77('const.bool.BOUNDED_1'(s(bool,X155)),X156,X157) | s(bool,X155) = s(bool,X158) | s(bool,'T_0') = s(bool,X158)) )),
  inference(superposition,[],[f1540,f1649])).
fof(f4454,plain,(
  ( ! [X154,X152,X151,X153] : (sP78('const.bool.BOUNDED_1'(s(bool,X152)),X151,X153) | s(bool,X151) = s(bool,X154) | s(bool,'T_0') = s(bool,X154)) )),
  inference(subsumption_resolution,[],[f3489,f660])).
fof(f3489,plain,(
  ( ! [X154,X152,X151,X153] : (~p(s(bool,'T_0')) | sP78('const.bool.BOUNDED_1'(s(bool,X152)),X151,X153) | s(bool,X151) = s(bool,X154) | s(bool,'T_0') = s(bool,X154)) )),
  inference(superposition,[],[f1522,f1649])).
fof(f4453,plain,(
  ( ! [X127,X125,X126,X124] : (sP76('const.bool.BOUNDED_1'(s(bool,X125)),X124,X126) | s(bool,X124) = s(bool,X127) | s(bool,'T_0') = s(bool,X127)) )),
  inference(subsumption_resolution,[],[f3482,f660])).
fof(f3482,plain,(
  ( ! [X127,X125,X126,X124] : (~p(s(bool,'T_0')) | sP76('const.bool.BOUNDED_1'(s(bool,X125)),X124,X126) | s(bool,X124) = s(bool,X127) | s(bool,'T_0') = s(bool,X127)) )),
  inference(superposition,[],[f1488,f1649])).
fof(f4452,plain,(
  ( ! [X111,X109,X112,X110] : (sP76('const.bool.BOUNDED_1'(s(bool,X110)),X111,X109) | s(bool,X109) = s(bool,X112) | s(bool,'T_0') = s(bool,X112)) )),
  inference(subsumption_resolution,[],[f3478,f660])).
fof(f3478,plain,(
  ( ! [X111,X109,X112,X110] : (~p(s(bool,'T_0')) | sP76('const.bool.BOUNDED_1'(s(bool,X110)),X111,X109) | s(bool,X109) = s(bool,X112) | s(bool,'T_0') = s(bool,X112)) )),
  inference(superposition,[],[f1477,f1649])).
fof(f4451,plain,(
  ( ! [X92,X90,X91,X89] : (~sP75(X89,X90,X91) | sP76(X89,X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(subsumption_resolution,[],[f3471,f660])).
fof(f3471,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,'T_0')) | ~sP75(X89,X90,X91) | sP76(X89,X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f1364,f1649])).
fof(f4450,plain,(
  ( ! [X88,X87,X85,X86] : (~sP77(X85,X86,X87) | sP78(X85,X86,X87) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f3470,f660])).
fof(f3470,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,'T_0')) | ~sP77(X85,X86,X87) | sP78(X85,X86,X87) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f1363,f1649])).
fof(f4449,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X82)) | p(s(bool,X83)) | ~sP78(X81,X83,X82) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f3469,f660])).
fof(f3469,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,'T_0')) | ~p(s(bool,X82)) | p(s(bool,X83)) | ~sP78(X81,X83,X82) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f1330,f1649])).
fof(f4448,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,X78)) | sP78(X77,X78,X79) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(subsumption_resolution,[],[f3468,f660])).
fof(f3468,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,'T_0')) | ~p(s(bool,X78)) | sP78(X77,X78,X79) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f1329,f1649])).
fof(f4447,plain,(
  ( ! [X76,X74,X75,X73] : (sP78(X73,X75,X74) | p(s(bool,X74)) | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f3467,f660])).
fof(f3467,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,'T_0')) | p(s(bool,X74)) | sP78(X73,X75,X74) | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f1328,f1649])).
fof(f4446,plain,(
  ( ! [X70,X72,X71,X69] : (p(s(bool,X70)) | sP78(X71,X70,X69) | p(s(bool,X71)) | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f3466,f660])).
fof(f3466,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,'T_0')) | p(s(bool,X70)) | sP78(X71,X70,X69) | p(s(bool,X71)) | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f1327,f1649])).
fof(f4445,plain,(
  ( ! [X68,X66,X67,X65] : (p(s(bool,X66)) | ~p(s(bool,X67)) | ~sP77(X67,X66,X65) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f3465,f660])).
fof(f3465,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,'T_0')) | p(s(bool,X66)) | ~p(s(bool,X67)) | ~sP77(X67,X66,X65) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f1323,f1649])).
fof(f4444,plain,(
  ( ! [X61,X64,X62,X63] : (p(s(bool,X62)) | p(s(bool,X63)) | ~sP76(X61,X63,X62) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f3464,f660])).
fof(f3464,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,'T_0')) | p(s(bool,X62)) | p(s(bool,X63)) | ~sP76(X61,X63,X62) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f1313,f1649])).
fof(f4443,plain,(
  ( ! [X59,X57,X60,X58] : (sP76(X57,X58,X59) | ~p(s(bool,X58)) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f3463,f660])).
fof(f3463,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,X58)) | sP76(X57,X58,X59) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f1312,f1649])).
fof(f4442,plain,(
  ( ! [X54,X56,X55,X53] : (sP76(X53,X55,X54) | ~p(s(bool,X54)) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f3462,f660])).
fof(f3462,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,'T_0')) | ~p(s(bool,X54)) | sP76(X53,X55,X54) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f1311,f1649])).
fof(f4441,plain,(
  ( ! [X52,X50,X51,X49] : (p(s(bool,X50)) | p(s(bool,X51)) | ~sP75(X49,X50,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f3461,f660])).
fof(f3461,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,'T_0')) | p(s(bool,X50)) | p(s(bool,X51)) | ~sP75(X49,X50,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f1306,f1649])).
fof(f4440,plain,(
  ( ! [X47,X45,X48,X46] : (~sP75(X45,X46,X47) | p(s(bool,X46)) | sP76(X45,X46,X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f3460,f660])).
fof(f3460,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,'T_0')) | ~sP75(X45,X46,X47) | p(s(bool,X46)) | sP76(X45,X46,X47) | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f1304,f1649])).
fof(f4439,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X42)) | p(s(bool,X43)) | ~sP74(X43,X42,X41) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f3459,f660])).
fof(f3459,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,'T_0')) | ~p(s(bool,X42)) | p(s(bool,X43)) | ~sP74(X43,X42,X41) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f1298,f1649])).
fof(f4438,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X38)) | p(s(bool,X39)) | ~sP70(X38,X37,X39) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f3458,f660])).
fof(f3458,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,'T_0')) | ~p(s(bool,X38)) | p(s(bool,X39)) | ~sP70(X38,X37,X39) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1270,f1649])).
fof(f4437,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | ~sP71(X34,X33,X35) | s(bool,X33) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f3457,f660])).
fof(f3457,plain,(
  ( ! [X35,X33,X36,X34] : (~p(s(bool,'T_0')) | ~p(s(bool,X34)) | p(s(bool,X35)) | ~sP71(X34,X33,X35) | s(bool,X33) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f1266,f1649])).
fof(f4436,plain,(
  ( ! [X30,X31,X32] : (p(s(bool,X31)) | sP1(X31,X30) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(subsumption_resolution,[],[f3456,f660])).
fof(f3456,plain,(
  ( ! [X30,X31,X32] : (~p(s(bool,'T_0')) | p(s(bool,X31)) | sP1(X31,X30) | s(bool,X30) = s(bool,X32) | s(bool,'T_0') = s(bool,X32)) )),
  inference(superposition,[],[f758,f1649])).
fof(f4435,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X28)) | sP1(X27,X28) | s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f3455,f660])).
fof(f3455,plain,(
  ( ! [X28,X29,X27] : (~p(s(bool,'T_0')) | p(s(bool,X28)) | sP1(X27,X28) | s(bool,X27) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(superposition,[],[f755,f1649])).
fof(f4434,plain,(
  ( ! [X26,X24,X25] : (sP0(X24,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(subsumption_resolution,[],[f3454,f660])).
fof(f3454,plain,(
  ( ! [X26,X24,X25] : (~p(s(bool,'T_0')) | sP0(X24,X25) | s(bool,X24) = s(bool,X26) | s(bool,'T_0') = s(bool,X26)) )),
  inference(superposition,[],[f740,f1649])).
fof(f4433,plain,(
  ( ! [X23,X21,X22] : (sP0(X22,X21) | s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) )),
  inference(subsumption_resolution,[],[f3453,f660])).
fof(f3453,plain,(
  ( ! [X23,X21,X22] : (~p(s(bool,'T_0')) | sP0(X22,X21) | s(bool,X21) = s(bool,X23) | s(bool,'T_0') = s(bool,X23)) )),
  inference(superposition,[],[f739,f1649])).
fof(f3361,plain,(
  ( ! [X173,X171,X174,X172] : (sP76('const.bool.BOUNDED_1'(s(bool,X171)),X172,X173) | ~sP75('const.bool.BOUNDED_1'(s(bool,'T_0')),X172,X173) | s(bool,X171) = s(bool,X174) | s(bool,'T_0') = s(bool,X174)) )),
  inference(superposition,[],[f1556,f1649])).
fof(f3358,plain,(
  ( ! [X161,X159,X162,X160] : (sP78('const.bool.BOUNDED_1'(s(bool,X159)),X160,X161) | ~sP77('const.bool.BOUNDED_1'(s(bool,'T_0')),X160,X161) | s(bool,X159) = s(bool,X162) | s(bool,'T_0') = s(bool,X162)) )),
  inference(superposition,[],[f1540,f1649])).
fof(f3074,plain,(
  ( ! [X167,X169,X170,X168] : (sP76('const.bool.BOUNDED_1'(s(bool,X168)),X169,X170) | ~sP75('const.bool.BOUNDED_1'(s(bool,X167)),X169,X170) | s(bool,'T_0') = s(bool,X168) | s(bool,'T_0') = s(bool,X167)) )),
  inference(superposition,[],[f1556,f1649])).
fof(f3071,plain,(
  ( ! [X158,X156,X157,X155] : (sP78('const.bool.BOUNDED_1'(s(bool,X156)),X157,X158) | ~sP77('const.bool.BOUNDED_1'(s(bool,X155)),X157,X158) | s(bool,'T_0') = s(bool,X156) | s(bool,'T_0') = s(bool,X155)) )),
  inference(superposition,[],[f1540,f1649])).
fof(f3005,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X1) = s(bool,X2) | s(bool,'T_0') = s(bool,X2) | s(bool,X0) = s(bool,X3) | s(bool,'T_0') = s(bool,X3)) )),
  inference(superposition,[],[f1649,f1649])).
fof(f2716,plain,(
  ( ! [X0,X1] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X0),s('type.list.list'('type.modSem.v'),X1)))))) )),
  inference(unit_resulting_resolution,[],[f718,f734])).
fof(f2639,plain,(
  sP72('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1386,f1381,f1384,f662,f1264])).
fof(f2599,plain,(
  ( ! [X0] : (~sP70('const.bool.BOUNDED_1'(s(bool,X0)),'T_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f1388,f1811,f1382,f660,f1263])).
fof(f2603,plain,(
  sP72('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1388,f1380,f1383,f660,f1263])).
fof(f2397,plain,(
  ( ! [X0] : (~sP77('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f2385,f1322])).
fof(f2393,plain,(
  ( ! [X2,X0,X1] : (~sP78('const.bool.BOUNDED_1'(s(bool,X2)),X1,'const.bool.BOUNDED_1'(s(bool,X0))) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f2389,f660])).
fof(f2389,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X2)),X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f2124,f663])).
fof(f2385,plain,(
  ( ! [X0] : (~sP78('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f2124])).
fof(f2368,plain,(
  ( ! [X0] : (sP78('F_0','F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f662,f662,f2102])).
fof(f2349,plain,(
  ( ! [X0,X1] : (~sP78('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f2334,f1318])).
fof(f2334,plain,(
  ( ! [X0,X1] : (~sP77('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f662,f2317])).
fof(f2321,plain,(
  ( ! [X0] : (~sP78('T_0','F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f2309,f1318])).
fof(f2317,plain,(
  ( ! [X2,X0,X1] : (~sP77('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f2313,f660])).
fof(f2313,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~sP77('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(superposition,[],[f2082,f663])).
fof(f2309,plain,(
  ( ! [X0] : (~sP77('T_0','F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f660,f662,f2082])).
fof(f2285,plain,(
  ( ! [X0] : (~sP76('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f2268,f1301])).
fof(f2268,plain,(
  ( ! [X0] : (~sP75('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f662,f1983])).
fof(f2245,plain,(
  ( ! [X0,X1] : (~sP73('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f2238,f1365])).
fof(f2238,plain,(
  ( ! [X0,X1] : (~sP74('F_0','const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f662,f2221])).
fof(f2222,plain,(
  ( ! [X0] : (~sP73('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f2216,f1365])).
fof(f2221,plain,(
  ( ! [X2,X0,X1] : (~sP74(X1,'const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f2218,f660])).
fof(f2218,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~sP74(X1,'const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(superposition,[],[f1924,f663])).
fof(f2216,plain,(
  ( ! [X0] : (~sP74('F_0','T_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f660,f662,f1924])).
fof(f2198,plain,(
  ( ! [X0,X1] : (~sP72('F_0','const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f2184,f1260])).
fof(f2184,plain,(
  ( ! [X0,X1] : (~sP70('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f2174])).
fof(f2174,plain,(
  ( ! [X2,X0,X1] : (~sP70('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f2170,f660])).
fof(f2170,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~sP70('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(superposition,[],[f1860,f663])).
fof(f2166,plain,(
  ( ! [X0] : (~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f1860])).
fof(f2151,plain,(
  ( ! [X0,X1] : (~sP72('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.bool.BOUNDED_1'(s(bool,X1)))) )),
  inference(unit_resulting_resolution,[],[f2138,f1261])).
fof(f2138,plain,(
  ( ! [X0,X1] : (~sP71('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f2114])).
fof(f2128,plain,(
  ( ! [X0] : (~sP72('T_0','F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f2106,f1261])).
fof(f2124,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(subsumption_resolution,[],[f2120,f660])).
fof(f2120,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(superposition,[],[f1330,f663])).
fof(f2114,plain,(
  ( ! [X2,X0,X1] : (~sP71('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f2110,f660])).
fof(f2110,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~sP71('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(superposition,[],[f1846,f663])).
fof(f2106,plain,(
  ( ! [X0] : (~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f1846])).
fof(f2102,plain,(
  ( ! [X2,X0,X1] : (sP78(X2,X1,'const.bool.BOUNDED_1'(s(bool,X0))) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(subsumption_resolution,[],[f2098,f660])).
fof(f2098,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | sP78(X2,X1,'const.bool.BOUNDED_1'(s(bool,X0))) | p(s(bool,X2))) )),
  inference(superposition,[],[f1327,f663])).
fof(f2086,plain,(
  ~sP78('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f2077,f1318])).
fof(f2082,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | ~sP77(X2,X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(subsumption_resolution,[],[f2078,f660])).
fof(f2078,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP77(X2,X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f1323,f663])).
fof(f2077,plain,(
  ~sP77('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f660,f662,f660,f1323])).
fof(f2063,plain,(
  sP78('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f1397,f660,f662,f1322])).
fof(f2018,plain,(
  ( ! [X2,X0,X1] : (~sP76('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f2013,f660])).
fof(f2013,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP76('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(superposition,[],[f1313,f663])).
fof(f1987,plain,(
  ~sP76('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1977,f1301])).
fof(f1983,plain,(
  ( ! [X2,X0,X1] : (~sP75('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | p(s(bool,X2)) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f1978,f660])).
fof(f1978,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP75('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f1306,f663])).
fof(f1977,plain,(
  ~sP75('T_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f662,f662,f660,f1306])).
fof(f1964,plain,(
  sP76('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1394,f662,f662,f1305])).
fof(f1924,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP74(X2,X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(subsumption_resolution,[],[f1921,f660])).
fof(f1921,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP74(X2,X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f1298,f663])).
fof(f1894,plain,(
  ~sP74('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1889,f1282])).
fof(f1889,plain,(
  ~sP73('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f660,f662,f660,f1289])).
fof(f1881,plain,(
  sP74('T_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1389,f660,f660,f1285])).
fof(f1877,plain,(
  ~sP72('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f1870,f1259])).
fof(f1870,plain,(
  ~sP69('F_0','F_0','F_0')),
  inference(unit_resulting_resolution,[],[f662,f662,f662,f1274])).
fof(f1864,plain,(
  ~sP72('F_0','T_0','T_0')),
  inference(unit_resulting_resolution,[],[f1855,f1260])).
fof(f1860,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP70(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1856,f660])).
fof(f1856,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP70(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f1270,f663])).
fof(f1855,plain,(
  ~sP70('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f662,f660,f660,f1270])).
fof(f1846,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X2)) | ~sP71(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1841,f660])).
fof(f1841,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP71(X1,'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f1266,f663])).
fof(f1840,plain,(
  ~sP71('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f662,f660,f660,f1266])).
fof(f1811,plain,(
  ( ! [X0] : (~sP72('F_0','const.bool.BOUNDED_1'(s(bool,X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f662,f663,f1281])).
fof(f1813,plain,(
  ( ! [X0] : (~sP72('F_0','T_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f662,f663,f1281])).
fof(f1802,plain,(
  ~sP72('T_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f660,f1403,f1280])).
fof(f1804,plain,(
  ~sP72('T_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f660,f1403,f1280])).
fof(f1787,plain,(
  ( ! [X0] : (sP71('T_0','T_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f1785,f1261])).
fof(f1785,plain,(
  ( ! [X0] : (sP72('T_0','const.bool.BOUNDED_1'(s(bool,X0)),'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f663,f1279])).
fof(f1786,plain,(
  ( ! [X0] : (sP72('T_0','T_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f660,f663,f1279])).
fof(f1777,plain,(
  sP72('F_0','F_0','T_0')),
  inference(unit_resulting_resolution,[],[f662,f1403,f1278])).
fof(f1778,plain,(
  sP72('F_0','T_0','F_0')),
  inference(unit_resulting_resolution,[],[f662,f1403,f1278])).
fof(f1758,plain,(
  ( ! [X4,X5] : (p(s(bool,X5)) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(subsumption_resolution,[],[f1754,f662])).
fof(f1754,plain,(
  ( ! [X4,X5] : (p(s(bool,'F_0')) | p(s(bool,X5)) | s(bool,X4) = s(bool,X5) | s(bool,'T_0') = s(bool,X4)) )),
  inference(superposition,[],[f722,f665])).
fof(f1641,plain,(
  ( ! [X2,X0,X1] : (sP77('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f1571,f1318])).
fof(f1571,plain,(
  ( ! [X2,X0,X1] : (sP78('const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1570,f660])).
fof(f1570,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP78('const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f1522,f663])).
fof(f1569,plain,(
  ( ! [X0,X1] : (sP78('const.bool.BOUNDED_1'(s(bool,X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f660,f1522])).
fof(f1557,plain,(
  ( ! [X0,X1] : (sP78('const.bool.BOUNDED_1'(s(bool,X0)),X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f1511])).
fof(f1556,plain,(
  ( ! [X2,X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | ~sP75('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(subsumption_resolution,[],[f1555,f660])).
fof(f1555,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP75('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP76('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f1364,f663])).
fof(f1542,plain,(
  ( ! [X2,X0,X1] : (sP75('const.bool.BOUNDED_1'(s(bool,X0)),'const.bool.BOUNDED_1'(s(bool,X1)),X2)) )),
  inference(unit_resulting_resolution,[],[f1517,f1301])).
fof(f1540,plain,(
  ( ! [X2,X0,X1] : (sP78('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | ~sP77('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(subsumption_resolution,[],[f1539,f660])).
fof(f1539,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP77('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2) | sP78('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f1363,f663])).
fof(f1522,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | sP78('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(subsumption_resolution,[],[f1521,f660])).
fof(f1521,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | sP78('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f1329,f663])).
fof(f1520,plain,(
  ( ! [X0] : (sP78('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f660,f660,f1329])).
fof(f1517,plain,(
  ( ! [X2,X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(subsumption_resolution,[],[f1516,f660])).
fof(f1516,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP76('const.bool.BOUNDED_1'(s(bool,X1)),'const.bool.BOUNDED_1'(s(bool,X0)),X2)) )),
  inference(superposition,[],[f1488,f663])).
fof(f1515,plain,(
  ( ! [X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f660,f1488])).
fof(f1511,plain,(
  ( ! [X2,X0,X1] : (sP78('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f1510,f660])).
fof(f1510,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | sP78('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(superposition,[],[f1328,f663])).
fof(f1509,plain,(
  ( ! [X0] : (sP78('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f660,f1328])).
fof(f1504,plain,(
  ( ! [X0] : (~sP78('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f660,f662,f1317])).
fof(f1500,plain,(
  ( ! [X2,X0,X1] : (sP75('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(unit_resulting_resolution,[],[f1483,f1301])).
fof(f1498,plain,(
  ( ! [X0] : (~sP78('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f662,f1316])).
fof(f1488,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | sP76('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(subsumption_resolution,[],[f1487,f660])).
fof(f1487,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | sP76('const.bool.BOUNDED_1'(s(bool,X0)),X1,X2)) )),
  inference(superposition,[],[f1312,f663])).
fof(f1486,plain,(
  ( ! [X0] : (sP76('T_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f660,f660,f1312])).
fof(f1483,plain,(
  ( ! [X2,X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X1)),X2,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(subsumption_resolution,[],[f1482,f660])).
fof(f1482,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP76('const.bool.BOUNDED_1'(s(bool,X1)),X2,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f1477,f663])).
fof(f1481,plain,(
  ( ! [X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1477])).
fof(f1477,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | sP76('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(subsumption_resolution,[],[f1476,f660])).
fof(f1476,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~p(s(bool,X1)) | sP76('const.bool.BOUNDED_1'(s(bool,X0)),X2,X1)) )),
  inference(superposition,[],[f1311,f663])).
fof(f1475,plain,(
  ( ! [X0] : (sP76('T_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f660,f1311])).
fof(f1472,plain,(
  ( ! [X0] : (~sP76('F_0','T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f660,f662,f1300])).
fof(f1471,plain,(
  ( ! [X0] : (~sP76('F_0',X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f1299])).
fof(f1467,plain,(
  ( ! [X0] : (sP74('F_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f662,f662,f1294])).
fof(f1458,plain,(
  ( ! [X0] : (sP74('F_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f662,f1293])).
fof(f1454,plain,(
  ( ! [X0] : (sP1('F_0','const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(unit_resulting_resolution,[],[f662,f1433])).
fof(f1453,plain,(
  ( ! [X0] : (~sP74('T_0','F_0',X0)) )),
  inference(unit_resulting_resolution,[],[f660,f662,f1284])).
fof(f1449,plain,(
  ( ! [X0] : (~sP74('T_0',X0,'F_0')) )),
  inference(unit_resulting_resolution,[],[f660,f662,f1283])).
fof(f1447,plain,(
  ( ! [X0] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f1428])).
fof(f1442,plain,(
  ~sP0('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f662,f662,f1375])).
fof(f1433,plain,(
  ( ! [X0,X1] : (sP1(X1,'const.bool.BOUNDED_1'(s(bool,X0))) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f1432,f660])).
fof(f1432,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | sP1(X1,'const.bool.BOUNDED_1'(s(bool,X0)))) )),
  inference(superposition,[],[f758,f663])).
fof(f1431,plain,(
  sP1('F_0','T_0')),
  inference(unit_resulting_resolution,[],[f662,f660,f758])).
fof(f1428,plain,(
  ( ! [X0,X1] : (sP1('const.bool.BOUNDED_1'(s(bool,X0)),X1) | p(s(bool,X1))) )),
  inference(subsumption_resolution,[],[f1427,f660])).
fof(f1427,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | p(s(bool,X1)) | sP1('const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(superposition,[],[f755,f663])).
fof(f1426,plain,(
  sP1('T_0','F_0')),
  inference(unit_resulting_resolution,[],[f662,f660,f755])).
fof(f1423,plain,(
  ~sP1('T_0','T_0')),
  inference(unit_resulting_resolution,[],[f660,f660,f754])).
fof(f1422,plain,(
  ~sP1('F_0','F_0')),
  inference(unit_resulting_resolution,[],[f662,f662,f753])).
fof(f1402,plain,(
  ( ! [X2,X3] : (sP0(X3,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(subsumption_resolution,[],[f1400,f660])).
fof(f1400,plain,(
  ( ! [X2,X3] : (~p(s(bool,'T_0')) | sP0(X3,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(superposition,[],[f739,f663])).
fof(f1401,plain,(
  ( ! [X0,X1] : (sP0('const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(subsumption_resolution,[],[f1399,f660])).
fof(f1399,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | sP0('const.bool.BOUNDED_1'(s(bool,X0)),X1)) )),
  inference(superposition,[],[f740,f663])).
fof(f1397,plain,(
  ( ! [X0,X1] : (sP77('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f662,f1326])).
fof(f1396,plain,(
  ( ! [X0,X1] : (sP77(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f660,f1325])).
fof(f1395,plain,(
  ( ! [X0,X1] : (sP77(X0,X1,'F_0')) )),
  inference(unit_resulting_resolution,[],[f662,f1324])).
fof(f1394,plain,(
  ( ! [X0,X1] : (sP75('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f662,f1309])).
fof(f1393,plain,(
  ( ! [X0,X1] : (sP75(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f660,f1308])).
fof(f1392,plain,(
  ( ! [X0,X1] : (sP75(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1307])).
fof(f1391,plain,(
  ( ! [X0,X1] : (sP73('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f662,f1292])).
fof(f1390,plain,(
  ( ! [X0,X1] : (sP73(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f662,f1291])).
fof(f1389,plain,(
  ( ! [X0,X1] : (sP73(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1290])).
fof(f1388,plain,(
  ( ! [X0,X1] : (sP69('T_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f660,f1277])).
fof(f1387,plain,(
  ( ! [X0,X1] : (sP69(X0,'T_0',X1)) )),
  inference(unit_resulting_resolution,[],[f660,f1276])).
fof(f1386,plain,(
  ( ! [X0,X1] : (sP69(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1275])).
fof(f1385,plain,(
  ( ! [X0,X1] : (sP70('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f662,f1273])).
fof(f1384,plain,(
  ( ! [X0,X1] : (sP70(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f662,f1272])).
fof(f1383,plain,(
  ( ! [X0,X1] : (sP70(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1271])).
fof(f1382,plain,(
  ( ! [X0,X1] : (sP71('F_0',X0,X1)) )),
  inference(unit_resulting_resolution,[],[f662,f1269])).
fof(f1381,plain,(
  ( ! [X0,X1] : (sP71(X0,'F_0',X1)) )),
  inference(unit_resulting_resolution,[],[f662,f1268])).
fof(f1380,plain,(
  ( ! [X0,X1] : (sP71(X0,X1,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f1267])).
fof(f1379,plain,(
  ( ! [X0] : (sP0('T_0',X0)) )),
  inference(unit_resulting_resolution,[],[f660,f740])).
fof(f1378,plain,(
  ( ! [X0] : (sP0(X0,'T_0')) )),
  inference(unit_resulting_resolution,[],[f660,f739])).
fof(f1357,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) )),
  inference(cnf_transformation,[],[f657])).
fof(f657,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) & s('type.list.list'('type.string.char'),X2) = s('type.list.list'('type.string.char'),X5))) & (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) | s('type.list.list'('type.string.char'),X2) != s('type.list.list'('type.string.char'),X5) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))))),
  inference(flattening,[],[f656])).
fof(f656,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) & s('type.list.list'('type.string.char'),X2) = s('type.list.list'('type.string.char'),X5))) & ((s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) | s('type.list.list'('type.string.char'),X2) != s('type.list.list'('type.string.char'),X5)) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))))),
  inference(nnf_transformation,[],[f162])).
fof(f162,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) <=> (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) & s('type.list.list'('type.string.char'),X2) = s('type.list.list'('type.string.char'),X5)))),
  inference(rectify,[],[f42])).
fof(f42,axiom,(
  ! [X13,X14,X15,X61,X62,X63] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X13),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X14),s('type.list.list'('type.string.char'),X15))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X61),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X62),s('type.list.list'('type.string.char'),X63))) <=> (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X13) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X61) & s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X14) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X62) & s('type.list.list'('type.string.char'),X15) = s('type.list.list'('type.string.char'),X63)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.modSem.v_|49||49||split|3')).
fof(f1358,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) )),
  inference(cnf_transformation,[],[f657])).
fof(f1359,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.string.char'),X2) = s('type.list.list'('type.string.char'),X5) | s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) )),
  inference(cnf_transformation,[],[f657])).
fof(f1360,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1),s('type.list.list'('type.string.char'),X2))) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5))) | s('type.list.list'('type.string.char'),X2) != s('type.list.list'('type.string.char'),X5) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4) | s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3)) )),
  inference(cnf_transformation,[],[f657])).
fof(f1353,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))) )),
  inference(cnf_transformation,[],[f655])).
fof(f655,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.string.char'),X1) = s('type.list.list'('type.string.char'),X4) & s('type.modLang.exp',X2) = s('type.modLang.exp',X5))) & (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.string.char'),X1) != s('type.list.list'('type.string.char'),X4) | s('type.modLang.exp',X2) != s('type.modLang.exp',X5) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))))),
  inference(flattening,[],[f654])).
fof(f654,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.string.char'),X1) = s('type.list.list'('type.string.char'),X4) & s('type.modLang.exp',X2) = s('type.modLang.exp',X5))) & ((s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) | s('type.list.list'('type.string.char'),X1) != s('type.list.list'('type.string.char'),X4) | s('type.modLang.exp',X2) != s('type.modLang.exp',X5)) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))))),
  inference(nnf_transformation,[],[f161])).
fof(f161,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) <=> (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3) & s('type.list.list'('type.string.char'),X1) = s('type.list.list'('type.string.char'),X4) & s('type.modLang.exp',X2) = s('type.modLang.exp',X5)))),
  inference(rectify,[],[f39])).
fof(f39,axiom,(
  ! [X13,X14,X15,X61,X62,X63] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X13),s('type.list.list'('type.string.char'),X14),s('type.modLang.exp',X15))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X61),s('type.list.list'('type.string.char'),X62),s('type.modLang.exp',X63))) <=> (s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X13) = s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X61) & s('type.list.list'('type.string.char'),X14) = s('type.list.list'('type.string.char'),X62) & s('type.modLang.exp',X15) = s('type.modLang.exp',X63)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.modSem.v_|49||49||split|2')).
fof(f1354,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.list.list'('type.string.char'),X1) = s('type.list.list'('type.string.char'),X4) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))) )),
  inference(cnf_transformation,[],[f655])).
fof(f1355,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modLang.exp',X2) = s('type.modLang.exp',X5) | s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))) )),
  inference(cnf_transformation,[],[f655])).
fof(f1356,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0),s('type.list.list'('type.string.char'),X1),s('type.modLang.exp',X2))) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5))) | s('type.modLang.exp',X2) != s('type.modLang.exp',X5) | s('type.list.list'('type.string.char'),X1) != s('type.list.list'('type.string.char'),X4) | s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0) != s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3)) )),
  inference(cnf_transformation,[],[f655])).
fof(f1349,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) | s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2)) )),
  inference(cnf_transformation,[],[f653])).
fof(f653,plain,(
  ! [X0,X1,X2,X3] : ((s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) | (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) & s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),X3))) & (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) | s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),X3) | s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3)))))),
  inference(flattening,[],[f652])).
fof(f652,plain,(
  ! [X0,X1,X2,X3] : ((s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) | (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) & s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),X3))) & ((s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) | s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),X3)) | s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3)))))),
  inference(nnf_transformation,[],[f159])).
fof(f159,plain,(
  ! [X0,X1,X2,X3] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) <=> (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) & s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),X3)))),
  inference(rectify,[],[f64])).
fof(f64,axiom,(
  ! [X13,X14,X61,X62] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X13),s('type.list.list'('type.modSem.v'),X14))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X61),s('type.list.list'('type.modSem.v'),X62))) <=> (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X13) = s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X61) & s('type.list.list'('type.modSem.v'),X14) = s('type.list.list'('type.modSem.v'),X62)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.modSem.v_|49||49||split|1')).
fof(f1350,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3))) | s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),X3)) )),
  inference(cnf_transformation,[],[f653])).
fof(f1351,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0) != s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2) | s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),X3) | s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X0),s('type.list.list'('type.modSem.v'),X1))) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),X2),s('type.list.list'('type.modSem.v'),X3)))) )),
  inference(cnf_transformation,[],[f653])).
fof(f1327,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | p(s(bool,X0)) | sP78(X2,X0,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f651])).
fof(f651,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP78(X2,X0,X1)) & (~sP78(X2,X0,X1) | ((~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f650])).
fof(f650,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (p(s(bool,X1)) & ~p(s(bool,X0))))) | sP78(X2,X0,X1)) & (~sP78(X2,X0,X1) | ((~p(s(bool,X2)) | (~p(s(bool,X1)) | p(s(bool,X0)))) & ((p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f317])).
fof(f317,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> sP78(X2,X0,X1))),
  inference(definition_folding,[],[f210,f316,f315])).
fof(f315,plain,(
  ! [X2,X0,X1] : (sP77(X2,X0,X1) <=> (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP77])])).
fof(f316,plain,(
  ! [X2,X0,X1] : (sP78(X2,X0,X1) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP77(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP78])])).
fof(f210,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (~p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(ennf_transformation,[],[f156])).
fof(f156,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f155])).
fof(f155,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) => p(s(bool,X0)))) <=> ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f52])).
fof(f52,axiom,(
  ! [X69,X67,X68] : ((p(s(bool,X68)) <=> (p(s(bool,X67)) => p(s(bool,X69)))) <=> ((p(s(bool,X68)) | p(s(bool,X67))) & (p(s(bool,X68)) | ~p(s(bool,X69))) & (~p(s(bool,X67)) | p(s(bool,X69)) | ~p(s(bool,X68)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.sat.sat_27_prove_ltb')).
fof(f1328,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | sP78(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f651])).
fof(f1329,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP78(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f651])).
fof(f1330,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~sP78(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f651])).
fof(f1323,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~sP77(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f649])).
fof(f649,plain,(
  ! [X0,X1,X2] : ((~sP77(X0,X1,X2) | ~p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP77(X0,X1,X2)))),
  inference(rectify,[],[f648])).
fof(f648,plain,(
  ! [X2,X0,X1] : ((~sP77(X2,X0,X1) | ~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP77(X2,X0,X1)))),
  inference(flattening,[],[f647])).
fof(f647,plain,(
  ! [X2,X0,X1] : ((~sP77(X2,X0,X1) | (~p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP77(X2,X0,X1)))),
  inference(nnf_transformation,[],[f315])).
fof(f1324,plain,(
  ( ! [X2,X0,X1] : (sP77(X0,X1,X2) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f649])).
fof(f1325,plain,(
  ( ! [X2,X0,X1] : (sP77(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f649])).
fof(f1326,plain,(
  ( ! [X2,X0,X1] : (sP77(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f649])).
fof(f1316,plain,(
  ( ! [X2,X0,X1] : (~sP78(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f646])).
fof(f646,plain,(
  ! [X0,X1,X2] : ((~sP78(X0,X1,X2) | ((p(s(bool,X0)) | p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP77(X0,X1,X2))) & ((~p(s(bool,X0)) & ~p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP77(X0,X1,X2) | sP78(X0,X1,X2)))),
  inference(rectify,[],[f645])).
fof(f645,plain,(
  ! [X2,X0,X1] : ((~sP78(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP77(X2,X0,X1))) & ((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP77(X2,X0,X1) | sP78(X2,X0,X1)))),
  inference(flattening,[],[f644])).
fof(f644,plain,(
  ! [X2,X0,X1] : ((~sP78(X2,X0,X1) | ((p(s(bool,X2)) | p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP77(X2,X0,X1))) & (((~p(s(bool,X2)) & ~p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP77(X2,X0,X1)) | sP78(X2,X0,X1)))),
  inference(nnf_transformation,[],[f316])).
fof(f1317,plain,(
  ( ! [X2,X0,X1] : (~sP78(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f646])).
fof(f1318,plain,(
  ( ! [X2,X0,X1] : (~sP78(X0,X1,X2) | sP77(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f646])).
fof(f1363,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP77(X0,X1,X2) | sP78(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f1319])).
fof(f1319,plain,(
  ( ! [X2,X0,X1] : (sP78(X0,X1,X2) | ~sP77(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f646])).
fof(f1320,plain,(
  ( ! [X2,X0,X1] : (sP78(X0,X1,X2) | ~sP77(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f646])).
fof(f1321,plain,(
  ( ! [X2,X0,X1] : (sP78(X0,X1,X2) | ~sP77(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f646])).
fof(f1322,plain,(
  ( ! [X2,X0,X1] : (sP78(X0,X1,X2) | ~sP77(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f646])).
fof(f1310,plain,(
  ( ! [X2,X0,X1] : (sP76(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f643])).
fof(f643,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP76(X2,X0,X1)) & (~sP76(X2,X0,X1) | ((~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(flattening,[],[f642])).
fof(f642,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) & ~p(s(bool,X0))))) | sP76(X2,X0,X1)) & (~sP76(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f314])).
fof(f314,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> sP76(X2,X0,X1))),
  inference(definition_folding,[],[f154,f313,f312])).
fof(f312,plain,(
  ! [X2,X0,X1] : (sP75(X2,X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP75])])).
fof(f313,plain,(
  ! [X2,X0,X1] : (sP76(X2,X0,X1) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP75(X2,X0,X1)))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP76])])).
fof(f154,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) | p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f61])).
fof(f61,axiom,(
  ! [X69,X67,X68] : ((p(s(bool,X68)) <=> (p(s(bool,X67)) | p(s(bool,X69)))) <=> ((p(s(bool,X68)) | ~p(s(bool,X67))) & (p(s(bool,X68)) | ~p(s(bool,X69))) & (p(s(bool,X67)) | p(s(bool,X69)) | ~p(s(bool,X68)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.sat.sat_25_prove_ltb')).
fof(f1311,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X1)) | sP76(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f643])).
fof(f1312,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | ~p(s(bool,X0)) | sP76(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f643])).
fof(f1313,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)) | ~sP76(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f643])).
fof(f1306,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP75(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f641])).
fof(f641,plain,(
  ! [X0,X1,X2] : ((~sP75(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & p(s(bool,X0))) | sP75(X0,X1,X2)))),
  inference(rectify,[],[f640])).
fof(f640,plain,(
  ! [X2,X0,X1] : ((~sP75(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP75(X2,X0,X1)))),
  inference(flattening,[],[f639])).
fof(f639,plain,(
  ! [X2,X0,X1] : ((~sP75(X2,X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & p(s(bool,X2))) | sP75(X2,X0,X1)))),
  inference(nnf_transformation,[],[f312])).
fof(f1307,plain,(
  ( ! [X2,X0,X1] : (sP75(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f641])).
fof(f1308,plain,(
  ( ! [X2,X0,X1] : (sP75(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f641])).
fof(f1309,plain,(
  ( ! [X2,X0,X1] : (sP75(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f641])).
fof(f1299,plain,(
  ( ! [X2,X0,X1] : (~sP76(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f638])).
fof(f638,plain,(
  ! [X0,X1,X2] : ((~sP76(X0,X1,X2) | ((p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1))) & sP75(X0,X1,X2))) & ((~p(s(bool,X0)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X1))) | ~sP75(X0,X1,X2) | sP76(X0,X1,X2)))),
  inference(rectify,[],[f637])).
fof(f637,plain,(
  ! [X2,X0,X1] : ((~sP76(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP75(X2,X0,X1))) & ((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP75(X2,X0,X1) | sP76(X2,X0,X1)))),
  inference(flattening,[],[f636])).
fof(f636,plain,(
  ! [X2,X0,X1] : ((~sP76(X2,X0,X1) | ((p(s(bool,X2)) | ~p(s(bool,X1))) & (p(s(bool,X2)) | ~p(s(bool,X0))) & sP75(X2,X0,X1))) & (((~p(s(bool,X2)) & p(s(bool,X1))) | (~p(s(bool,X2)) & p(s(bool,X0))) | ~sP75(X2,X0,X1)) | sP76(X2,X0,X1)))),
  inference(nnf_transformation,[],[f313])).
fof(f1300,plain,(
  ( ! [X2,X0,X1] : (~sP76(X0,X1,X2) | p(s(bool,X0)) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f638])).
fof(f1301,plain,(
  ( ! [X2,X0,X1] : (~sP76(X0,X1,X2) | sP75(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f638])).
fof(f1364,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP75(X0,X1,X2) | sP76(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f1302])).
fof(f1302,plain,(
  ( ! [X2,X0,X1] : (sP76(X0,X1,X2) | ~sP75(X0,X1,X2) | ~p(s(bool,X0)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f638])).
fof(f1303,plain,(
  ( ! [X2,X0,X1] : (sP76(X0,X1,X2) | ~sP75(X0,X1,X2) | ~p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f638])).
fof(f1304,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X0)) | ~sP75(X0,X1,X2) | p(s(bool,X1)) | sP76(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f638])).
fof(f1305,plain,(
  ( ! [X2,X0,X1] : (sP76(X0,X1,X2) | ~sP75(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f638])).
fof(f1293,plain,(
  ( ! [X2,X0,X1] : (sP74(X2,X0,X1) | p(s(bool,X1)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f635])).
fof(f635,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) | sP74(X2,X0,X1)) & (~sP74(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2))))))),
  inference(flattening,[],[f634])).
fof(f634,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & (~p(s(bool,X2)) | (~p(s(bool,X1)) | ~p(s(bool,X0))))) | sP74(X2,X0,X1)) & (~sP74(X2,X0,X1) | ((~p(s(bool,X2)) | (p(s(bool,X1)) & p(s(bool,X0)))) & ((~p(s(bool,X1)) | ~p(s(bool,X0))) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f311])).
fof(f311,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> sP74(X2,X0,X1))),
  inference(definition_folding,[],[f152,f310,f309])).
fof(f309,plain,(
  ! [X0,X1,X2] : (sP73(X0,X1,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP73])])).
fof(f310,plain,(
  ! [X2,X0,X1] : (sP74(X2,X0,X1) <=> (sP73(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP74])])).
fof(f152,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f151])).
fof(f151,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> (p(s(bool,X1)) & p(s(bool,X0)))) <=> ((p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f55])).
fof(f55,axiom,(
  ! [X69,X67,X68] : ((p(s(bool,X68)) <=> (p(s(bool,X67)) & p(s(bool,X69)))) <=> ((p(s(bool,X68)) | ~p(s(bool,X67)) | ~p(s(bool,X69))) & (p(s(bool,X67)) | ~p(s(bool,X68))) & (p(s(bool,X69)) | ~p(s(bool,X68)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.sat.sat_23_prove_ltb')).
fof(f1294,plain,(
  ( ! [X2,X0,X1] : (sP74(X2,X0,X1) | p(s(bool,X0)) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f635])).
fof(f1295,plain,(
  ( ! [X2,X0,X1] : (sP74(X2,X0,X1) | ~p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f635])).
fof(f1298,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP74(X2,X0,X1)) )),
  inference(cnf_transformation,[],[f635])).
fof(f1289,plain,(
  ( ! [X2,X0,X1] : (~sP73(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f633])).
fof(f633,plain,(
  ! [X0,X1,X2] : ((~sP73(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP73(X0,X1,X2)))),
  inference(flattening,[],[f632])).
fof(f632,plain,(
  ! [X0,X1,X2] : ((~sP73(X0,X1,X2) | (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0)))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP73(X0,X1,X2)))),
  inference(nnf_transformation,[],[f309])).
fof(f1290,plain,(
  ( ! [X2,X0,X1] : (sP73(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f633])).
fof(f1291,plain,(
  ( ! [X2,X0,X1] : (sP73(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f633])).
fof(f1292,plain,(
  ( ! [X2,X0,X1] : (sP73(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f633])).
fof(f1282,plain,(
  ( ! [X2,X0,X1] : (~sP74(X0,X1,X2) | sP73(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f631])).
fof(f631,plain,(
  ! [X0,X1,X2] : ((~sP74(X0,X1,X2) | (sP73(X1,X2,X0) & (p(s(bool,X2)) | ~p(s(bool,X0))) & (p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP73(X1,X2,X0) | (~p(s(bool,X2)) & p(s(bool,X0))) | (~p(s(bool,X1)) & p(s(bool,X0))) | sP74(X0,X1,X2)))),
  inference(rectify,[],[f630])).
fof(f630,plain,(
  ! [X2,X0,X1] : ((~sP74(X2,X0,X1) | (sP73(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & (~sP73(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2))) | sP74(X2,X0,X1)))),
  inference(flattening,[],[f629])).
fof(f629,plain,(
  ! [X2,X0,X1] : ((~sP74(X2,X0,X1) | (sP73(X0,X1,X2) & (p(s(bool,X1)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X2))))) & ((~sP73(X0,X1,X2) | (~p(s(bool,X1)) & p(s(bool,X2))) | (~p(s(bool,X0)) & p(s(bool,X2)))) | sP74(X2,X0,X1)))),
  inference(nnf_transformation,[],[f310])).
fof(f1283,plain,(
  ( ! [X2,X0,X1] : (~sP74(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f631])).
fof(f1284,plain,(
  ( ! [X2,X0,X1] : (~sP74(X0,X1,X2) | p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f631])).
fof(f1285,plain,(
  ( ! [X2,X0,X1] : (sP74(X0,X1,X2) | ~p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP73(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f631])).
fof(f1365,plain,(
  ( ! [X2,X0,X1] : (sP74(X0,X1,X2) | p(s(bool,X0)) | ~sP73(X1,X2,X0)) )),
  inference(duplicate_literal_removal,[],[f1288])).
fof(f1288,plain,(
  ( ! [X2,X0,X1] : (sP74(X0,X1,X2) | p(s(bool,X0)) | p(s(bool,X0)) | ~sP73(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f631])).
fof(f1278,plain,(
  ( ! [X2,X0,X1] : (sP72(X2,X1,X0) | s(bool,X0) = s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f628])).
fof(f628,plain,(
  ! [X0,X1,X2] : ((((p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (~p(s(bool,X2)) | s(bool,X0) != s(bool,X1))) | sP72(X2,X1,X0)) & (~sP72(X2,X1,X0) | ((~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) & (s(bool,X0) != s(bool,X1) | p(s(bool,X2))))))),
  inference(nnf_transformation,[],[f308])).
fof(f308,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> sP72(X2,X1,X0))),
  inference(definition_folding,[],[f150,f307,f306,f305,f304])).
fof(f304,plain,(
  ! [X0,X1,X2] : (sP69(X0,X1,X2) <=> (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP69])])).
fof(f305,plain,(
  ! [X1,X0,X2] : (sP70(X1,X0,X2) <=> (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP70])])).
fof(f306,plain,(
  ! [X2,X0,X1] : (sP71(X2,X0,X1) <=> (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP71])])).
fof(f307,plain,(
  ! [X2,X1,X0] : (sP72(X2,X1,X0) <=> (sP69(X0,X1,X2) & sP70(X1,X0,X2) & sP71(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP72])])).
fof(f150,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(flattening,[],[f149])).
fof(f149,plain,(
  ! [X0,X1,X2] : ((p(s(bool,X2)) <=> s(bool,X0) = s(bool,X1)) <=> ((p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2)))))),
  inference(rectify,[],[f53])).
fof(f53,axiom,(
  ! [X69,X67,X68] : ((p(s(bool,X68)) <=> s(bool,X67) = s(bool,X69)) <=> ((p(s(bool,X68)) | p(s(bool,X67)) | p(s(bool,X69))) & (p(s(bool,X68)) | ~p(s(bool,X69)) | ~p(s(bool,X67))) & (p(s(bool,X67)) | ~p(s(bool,X69)) | ~p(s(bool,X68))) & (p(s(bool,X69)) | ~p(s(bool,X67)) | ~p(s(bool,X68)))))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.sat.sat_2|49|_prove_ltb')).
fof(f1279,plain,(
  ( ! [X2,X0,X1] : (sP72(X2,X1,X0) | s(bool,X0) != s(bool,X1) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f628])).
fof(f1280,plain,(
  ( ! [X2,X0,X1] : (~sP72(X2,X1,X0) | ~p(s(bool,X2)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f628])).
fof(f1281,plain,(
  ( ! [X2,X0,X1] : (~sP72(X2,X1,X0) | s(bool,X0) != s(bool,X1) | p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f628])).
fof(f1274,plain,(
  ( ! [X2,X0,X1] : (~sP69(X0,X1,X2) | p(s(bool,X1)) | p(s(bool,X2)) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f627])).
fof(f627,plain,(
  ! [X0,X1,X2] : ((~sP69(X0,X1,X2) | p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP69(X0,X1,X2)))),
  inference(flattening,[],[f626])).
fof(f626,plain,(
  ! [X0,X1,X2] : ((~sP69(X0,X1,X2) | (p(s(bool,X2)) | p(s(bool,X1)) | p(s(bool,X0)))) & ((~p(s(bool,X2)) & ~p(s(bool,X1)) & ~p(s(bool,X0))) | sP69(X0,X1,X2)))),
  inference(nnf_transformation,[],[f304])).
fof(f1275,plain,(
  ( ! [X2,X0,X1] : (sP69(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f627])).
fof(f1276,plain,(
  ( ! [X2,X0,X1] : (sP69(X0,X1,X2) | ~p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f627])).
fof(f1277,plain,(
  ( ! [X2,X0,X1] : (sP69(X0,X1,X2) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f627])).
fof(f1270,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP70(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f625])).
fof(f625,plain,(
  ! [X0,X1,X2] : ((~sP70(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP70(X0,X1,X2)))),
  inference(rectify,[],[f624])).
fof(f624,plain,(
  ! [X1,X0,X2] : ((~sP70(X1,X0,X2) | p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP70(X1,X0,X2)))),
  inference(flattening,[],[f623])).
fof(f623,plain,(
  ! [X1,X0,X2] : ((~sP70(X1,X0,X2) | (p(s(bool,X2)) | ~p(s(bool,X0)) | ~p(s(bool,X1)))) & ((~p(s(bool,X2)) & p(s(bool,X0)) & p(s(bool,X1))) | sP70(X1,X0,X2)))),
  inference(nnf_transformation,[],[f305])).
fof(f1271,plain,(
  ( ! [X2,X0,X1] : (sP70(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f625])).
fof(f1272,plain,(
  ( ! [X2,X0,X1] : (sP70(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f625])).
fof(f1273,plain,(
  ( ! [X2,X0,X1] : (sP70(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f625])).
fof(f1266,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,X1)) | ~p(s(bool,X0)) | p(s(bool,X2)) | ~sP71(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f622])).
fof(f622,plain,(
  ! [X0,X1,X2] : ((~sP71(X0,X1,X2) | p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))) & ((~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP71(X0,X1,X2)))),
  inference(rectify,[],[f621])).
fof(f621,plain,(
  ! [X2,X0,X1] : ((~sP71(X2,X0,X1) | p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP71(X2,X0,X1)))),
  inference(flattening,[],[f620])).
fof(f620,plain,(
  ! [X2,X0,X1] : ((~sP71(X2,X0,X1) | (p(s(bool,X1)) | ~p(s(bool,X0)) | ~p(s(bool,X2)))) & ((~p(s(bool,X1)) & p(s(bool,X0)) & p(s(bool,X2))) | sP71(X2,X0,X1)))),
  inference(nnf_transformation,[],[f306])).
fof(f1267,plain,(
  ( ! [X2,X0,X1] : (sP71(X0,X1,X2) | ~p(s(bool,X2))) )),
  inference(cnf_transformation,[],[f622])).
fof(f1268,plain,(
  ( ! [X2,X0,X1] : (sP71(X0,X1,X2) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f622])).
fof(f1269,plain,(
  ( ! [X2,X0,X1] : (sP71(X0,X1,X2) | p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f622])).
fof(f1259,plain,(
  ( ! [X2,X0,X1] : (~sP72(X0,X1,X2) | sP69(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f619])).
fof(f619,plain,(
  ! [X0,X1,X2] : ((~sP72(X0,X1,X2) | (sP69(X2,X1,X0) & sP70(X1,X2,X0) & sP71(X0,X2,X1) & (p(s(bool,X2)) | ~p(s(bool,X1)) | ~p(s(bool,X0))))) & (~sP69(X2,X1,X0) | ~sP70(X1,X2,X0) | ~sP71(X0,X2,X1) | (~p(s(bool,X2)) & p(s(bool,X1)) & p(s(bool,X0))) | sP72(X0,X1,X2)))),
  inference(rectify,[],[f618])).
fof(f618,plain,(
  ! [X2,X1,X0] : ((~sP72(X2,X1,X0) | (sP69(X0,X1,X2) & sP70(X1,X0,X2) & sP71(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & (~sP69(X0,X1,X2) | ~sP70(X1,X0,X2) | ~sP71(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2))) | sP72(X2,X1,X0)))),
  inference(flattening,[],[f617])).
fof(f617,plain,(
  ! [X2,X1,X0] : ((~sP72(X2,X1,X0) | (sP69(X0,X1,X2) & sP70(X1,X0,X2) & sP71(X2,X0,X1) & (p(s(bool,X0)) | ~p(s(bool,X1)) | ~p(s(bool,X2))))) & ((~sP69(X0,X1,X2) | ~sP70(X1,X0,X2) | ~sP71(X2,X0,X1) | (~p(s(bool,X0)) & p(s(bool,X1)) & p(s(bool,X2)))) | sP72(X2,X1,X0)))),
  inference(nnf_transformation,[],[f307])).
fof(f1260,plain,(
  ( ! [X2,X0,X1] : (~sP72(X0,X1,X2) | sP70(X1,X2,X0)) )),
  inference(cnf_transformation,[],[f619])).
fof(f1261,plain,(
  ( ! [X2,X0,X1] : (~sP72(X0,X1,X2) | sP71(X0,X2,X1)) )),
  inference(cnf_transformation,[],[f619])).
fof(f1262,plain,(
  ( ! [X2,X0,X1] : (~sP72(X0,X1,X2) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f619])).
fof(f1263,plain,(
  ( ! [X2,X0,X1] : (~sP70(X1,X2,X0) | ~p(s(bool,X2)) | ~sP71(X0,X2,X1) | sP72(X0,X1,X2) | ~sP69(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f619])).
fof(f1264,plain,(
  ( ! [X2,X0,X1] : (~sP70(X1,X2,X0) | p(s(bool,X1)) | ~sP71(X0,X2,X1) | sP72(X0,X1,X2) | ~sP69(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f619])).
fof(f1265,plain,(
  ( ! [X2,X0,X1] : (~sP70(X1,X2,X0) | p(s(bool,X0)) | ~sP71(X0,X2,X1) | sP72(X0,X1,X2) | ~sP69(X2,X1,X0)) )),
  inference(cnf_transformation,[],[f619])).
fof(f1240,plain,(
  ( ! [X2,X0,X3,X1] : (~sP61(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK458(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK459(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK461(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f611])).
fof(f1241,plain,(
  ( ! [X2,X0,X3,X1] : (~sP61(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK460(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK459(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK462(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f611])).
fof(f1242,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK460(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK461(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK458(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK459(X3,X2,X1,X0)))))) | ~sP61(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f611])).
fof(f1235,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK455(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK451(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK452(X3,X2,X1,X0)),s('type.modLang.exp',sK453(X3,X2,X1,X0)))) | ~sP62(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f608])).
fof(f1236,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK454(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK452(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK457(X3,X2,X1,X0)),s('type.modLang.exp',sK453(X3,X2,X1,X0)))))) | ~sP62(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f608])).
fof(f1230,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK447(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK444(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK445(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK446(X3,X2,X1,X0)))) | ~sP63(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f605])).
fof(f1231,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK448(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK450(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK445(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK446(X3,X2,X1,X0)))) | ~sP63(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f605])).
fof(f1226,plain,(
  ( ! [X2,X0,X3,X1] : (~sP64(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK442(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f602])).
fof(f1227,plain,(
  ( ! [X2,X0,X3,X1] : (~sP64(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK443(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f602])).
fof(f1222,plain,(
  ( ! [X2,X0,X3,X1] : (~sP65(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK440(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f599])).
fof(f1223,plain,(
  ( ! [X2,X0,X3,X1] : (~sP65(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK441(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f599])).
fof(f1212,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP66(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK436(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK437(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f596])).
fof(f1213,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP66(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK436(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK437(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f596])).
fof(f1214,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP66(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK438(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK439(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f596])).
fof(f1215,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP66(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK438(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK439(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f596])).
fof(f1220,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP66(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4)) )),
  inference(cnf_transformation,[],[f596])).
fof(f1202,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK431(X4,X3,X2,X1,X0)),s('type.modSem.v',sK432(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK433(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP67(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1203,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK431(X4,X3,X2,X1,X0)),s('type.modSem.v',sK432(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK433(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP67(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1204,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK431(X4,X3,X2,X1,X0)),s('type.conSem.v',sK435(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK434(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP67(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1205,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK431(X4,X3,X2,X1,X0)),s('type.conSem.v',sK435(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK434(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP67(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1210,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP67(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)) )),
  inference(cnf_transformation,[],[f592])).
fof(f1190,plain,(
  ( ! [X2,X0,X1] : (sP65(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | s('type.modSem.v',sK427(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK430(X2,X1,X0)))) | sP63(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP62(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP61(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP64(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | s('type.modSem.v',sK427(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK429(X2,X1,X0)))) | ~sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f1191,plain,(
  ( ! [X2,X0,X1] : (sP65(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | s('type.modSem.v',sK427(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK430(X2,X1,X0)))) | sP63(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP62(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP61(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP64(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | s('type.conSem.v',sK428(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK429(X2,X1,X0)))) | ~sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f1192,plain,(
  ( ! [X2,X0,X1] : (sP65(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | s('type.conSem.v',sK428(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK430(X2,X1,X0)))) | sP63(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP62(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP61(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP64(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | s('type.modSem.v',sK427(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK429(X2,X1,X0)))) | ~sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f1193,plain,(
  ( ! [X2,X0,X1] : (sP65(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | s('type.conSem.v',sK428(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK430(X2,X1,X0)))) | sP63(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP62(sK426(X2,X1,X0),X2,sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP61(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | sP64(X1,sK426(X2,X1,X0),sK428(X2,X1,X0),sK427(X2,X1,X0)) | s('type.conSem.v',sK428(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK429(X2,X1,X0)))) | ~sP68(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f588])).
fof(f1178,plain,(
  ( ! [X2,X0,X1] : (~sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK421(X2,X1,X0)),s('type.modSem.v',sK422(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK423(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f584])).
fof(f1180,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK421(X2,X1,X0)),s('type.conSem.v',sK425(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK424(X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) | ~sP60(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f584])).
fof(f1181,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK421(X2,X1,X0)),s('type.conSem.v',sK425(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK424(X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) | ~sP60(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f584])).
fof(f1186,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) | sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2)) )),
  inference(cnf_transformation,[],[f584])).
fof(f1165,plain,(
  ( ! [X2,X0,X3,X1] : (~sP53(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK407(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK408(X3,X2,X1,X0)),s('type.conLang.exp',sK409(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f577])).
fof(f1166,plain,(
  ( ! [X2,X0,X3,X1] : (~sP53(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK410(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK408(X3,X2,X1,X0)),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK411(X3,X2,X1,X0)),s('type.conLang.exp',sK409(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f577])).
fof(f1160,plain,(
  ( ! [X2,X0,X3,X1] : (~sP54(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK403(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK405(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK404(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f574])).
fof(f1161,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK402(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK406(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK405(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK404(X3,X2,X1,X0)))) | ~sP54(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f574])).
fof(f1156,plain,(
  ( ! [X2,X0,X3,X1] : (~sP55(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK399(X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK400(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f571])).
fof(f1157,plain,(
  ( ! [X2,X0,X3,X1] : (~sP55(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK399(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK401(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f571])).
fof(f1152,plain,(
  ( ! [X2,X0,X3,X1] : (~sP56(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK397(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f568])).
fof(f1153,plain,(
  ( ! [X2,X0,X3,X1] : (~sP56(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),sK398(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f568])).
fof(f1142,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP57(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK393(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK395(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f565])).
fof(f1143,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP57(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK393(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK395(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f565])).
fof(f1144,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP57(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK394(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK396(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f565])).
fof(f1145,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP57(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK394(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK396(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f565])).
fof(f1150,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP57(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4)) )),
  inference(cnf_transformation,[],[f565])).
fof(f1132,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK388(X4,X3,X2,X1,X0)),s('type.conSem.v',sK389(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK391(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP58(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1133,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK388(X4,X3,X2,X1,X0)),s('type.conSem.v',sK389(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK391(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP58(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1134,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK388(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK390(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK392(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP58(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1135,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK388(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK390(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK392(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP58(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1140,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP58(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)) )),
  inference(cnf_transformation,[],[f561])).
fof(f1121,plain,(
  ( ! [X2,X0,X1] : (sP56(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | s('type.conSem.v',sK384(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK387(X2,X1,X0)))) | sP54(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP53(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP55(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | s('type.conSem.v',sK384(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK386(X2,X1,X0)))) | ~sP59(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f557])).
fof(f1122,plain,(
  ( ! [X2,X0,X1] : (sP56(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | s('type.conSem.v',sK384(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK387(X2,X1,X0)))) | sP54(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP53(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP55(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | s('type.exhSem.v',sK385(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK386(X2,X1,X0)))) | ~sP59(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f557])).
fof(f1123,plain,(
  ( ! [X2,X0,X1] : (sP56(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | s('type.exhSem.v',sK385(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK387(X2,X1,X0)))) | sP54(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP53(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP55(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | s('type.conSem.v',sK384(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK386(X2,X1,X0)))) | ~sP59(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f557])).
fof(f1124,plain,(
  ( ! [X2,X0,X1] : (sP56(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | s('type.exhSem.v',sK385(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK387(X2,X1,X0)))) | sP54(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP53(X2,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | sP55(X1,sK383(X2,X1,X0),sK385(X2,X1,X0),sK384(X2,X1,X0)) | s('type.exhSem.v',sK385(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK386(X2,X1,X0)))) | ~sP59(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f557])).
fof(f1109,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK378(X2,X1,X0)),s('type.conSem.v',sK379(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK381(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f553])).
fof(f1110,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK378(X2,X1,X0)),s('type.conSem.v',sK379(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK381(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f553])).
fof(f1111,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK378(X2,X1,X0)),s('type.exhSem.v',sK380(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK382(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f553])).
fof(f1112,plain,(
  ( ! [X2,X0,X1] : (~sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK378(X2,X1,X0)),s('type.exhSem.v',sK380(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK382(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f553])).
fof(f1096,plain,(
  ( ! [X2,X0,X3,X1] : (~sP44(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK364(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK365(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK367(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f546])).
fof(f1097,plain,(
  ( ! [X2,X0,X3,X1] : (~sP44(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK366(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK365(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK368(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f546])).
fof(f1098,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK366(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK367(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK364(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK365(X3,X2,X1,X0)))))) | ~sP44(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f546])).
fof(f1091,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK361(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK357(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK358(X3,X2,X1,X0)),s('type.modLang.exp',sK359(X3,X2,X1,X0)))) | ~sP45(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f543])).
fof(f1092,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK360(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK358(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK363(X3,X2,X1,X0)),s('type.modLang.exp',sK359(X3,X2,X1,X0)))))) | ~sP45(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f543])).
fof(f1086,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK353(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK350(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK351(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK352(X3,X2,X1,X0)))) | ~sP46(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f540])).
fof(f1087,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK354(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK356(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK351(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK352(X3,X2,X1,X0)))) | ~sP46(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f540])).
fof(f1082,plain,(
  ( ! [X2,X0,X3,X1] : (~sP47(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK348(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f537])).
fof(f1083,plain,(
  ( ! [X2,X0,X3,X1] : (~sP47(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK349(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f537])).
fof(f1078,plain,(
  ( ! [X2,X0,X3,X1] : (~sP48(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK346(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f534])).
fof(f1079,plain,(
  ( ! [X2,X0,X3,X1] : (~sP48(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK347(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f534])).
fof(f1068,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP49(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK342(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK343(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f531])).
fof(f1069,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP49(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK342(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK343(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f531])).
fof(f1070,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP49(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK344(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK345(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f531])).
fof(f1071,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP49(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK344(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK345(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f531])).
fof(f1076,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP49(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4)) )),
  inference(cnf_transformation,[],[f531])).
fof(f1058,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK337(X4,X3,X2,X1,X0)),s('type.modSem.v',sK338(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK339(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP50(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1059,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK337(X4,X3,X2,X1,X0)),s('type.modSem.v',sK338(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK339(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP50(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1060,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK337(X4,X3,X2,X1,X0)),s('type.conSem.v',sK341(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK340(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP50(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1061,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK337(X4,X3,X2,X1,X0)),s('type.conSem.v',sK341(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK340(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP50(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1066,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP50(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)) )),
  inference(cnf_transformation,[],[f527])).
fof(f1046,plain,(
  ( ! [X2,X0,X1] : (sP48(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | s('type.modSem.v',sK333(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK336(X2,X1,X0)))) | sP46(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP45(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP44(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP47(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | s('type.modSem.v',sK333(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK335(X2,X1,X0)))) | ~sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1047,plain,(
  ( ! [X2,X0,X1] : (sP48(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | s('type.modSem.v',sK333(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK336(X2,X1,X0)))) | sP46(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP45(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP44(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP47(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | s('type.conSem.v',sK334(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK335(X2,X1,X0)))) | ~sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1048,plain,(
  ( ! [X2,X0,X1] : (sP48(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | s('type.conSem.v',sK334(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK336(X2,X1,X0)))) | sP46(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP45(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP44(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP47(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | s('type.modSem.v',sK333(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK335(X2,X1,X0)))) | ~sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1049,plain,(
  ( ! [X2,X0,X1] : (sP48(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | s('type.conSem.v',sK334(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK336(X2,X1,X0)))) | sP46(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP45(sK332(X2,X1,X0),X2,sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP44(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | sP47(X1,sK332(X2,X1,X0),sK334(X2,X1,X0),sK333(X2,X1,X0)) | s('type.conSem.v',sK334(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK335(X2,X1,X0)))) | ~sP51(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f523])).
fof(f1034,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X1,X2) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X2) | s('type.list.list'('type.modSem.v'),X2) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK328(X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK329(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f519])).
fof(f1037,plain,(
  ( ! [X2,X0,X1] : (~sP43(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1) | s('type.list.list'('type.conSem.v'),X1) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK330(X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK331(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f519])).
fof(f1042,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,X1,X2) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X1) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X2)) )),
  inference(cnf_transformation,[],[f519])).
fof(f1021,plain,(
  ( ! [X2,X0,X3,X1] : (~sP36(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK314(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK315(X3,X2,X1,X0)),s('type.conLang.exp',sK316(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f512])).
fof(f1022,plain,(
  ( ! [X2,X0,X3,X1] : (~sP36(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK317(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK315(X3,X2,X1,X0)),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK318(X3,X2,X1,X0)),s('type.conLang.exp',sK316(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f512])).
fof(f1016,plain,(
  ( ! [X2,X0,X3,X1] : (~sP37(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK310(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK312(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK311(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f509])).
fof(f1017,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK309(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK313(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK312(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK311(X3,X2,X1,X0)))) | ~sP37(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f509])).
fof(f1012,plain,(
  ( ! [X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK306(X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK307(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f506])).
fof(f1013,plain,(
  ( ! [X2,X0,X3,X1] : (~sP38(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK306(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK308(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f506])).
fof(f1008,plain,(
  ( ! [X2,X0,X3,X1] : (~sP39(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK304(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f503])).
fof(f1009,plain,(
  ( ! [X2,X0,X3,X1] : (~sP39(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),sK305(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f503])).
fof(f998,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP40(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK300(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK302(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f500])).
fof(f999,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP40(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK300(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK302(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f500])).
fof(f1000,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP40(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK301(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK303(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f500])).
fof(f1001,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP40(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK301(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK303(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f500])).
fof(f1006,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP40(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4)) )),
  inference(cnf_transformation,[],[f500])).
fof(f988,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK295(X4,X3,X2,X1,X0)),s('type.conSem.v',sK296(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK298(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP41(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f989,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK295(X4,X3,X2,X1,X0)),s('type.conSem.v',sK296(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK298(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP41(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f990,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK295(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK297(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK299(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP41(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f991,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK295(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK297(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK299(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP41(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f996,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP41(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)) )),
  inference(cnf_transformation,[],[f496])).
fof(f977,plain,(
  ( ! [X2,X0,X1] : (sP39(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | s('type.conSem.v',sK291(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK294(X2,X1,X0)))) | sP37(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP36(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP38(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | s('type.conSem.v',sK291(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK293(X2,X1,X0)))) | ~sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f978,plain,(
  ( ! [X2,X0,X1] : (sP39(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | s('type.conSem.v',sK291(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK294(X2,X1,X0)))) | sP37(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP36(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP38(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | s('type.exhSem.v',sK292(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK293(X2,X1,X0)))) | ~sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f979,plain,(
  ( ! [X2,X0,X1] : (sP39(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | s('type.exhSem.v',sK292(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK294(X2,X1,X0)))) | sP37(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP36(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP38(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | s('type.conSem.v',sK291(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK293(X2,X1,X0)))) | ~sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f980,plain,(
  ( ! [X2,X0,X1] : (sP39(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | s('type.exhSem.v',sK292(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK294(X2,X1,X0)))) | sP37(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP36(X2,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | sP38(X1,sK290(X2,X1,X0),sK292(X2,X1,X0),sK291(X2,X1,X0)) | s('type.exhSem.v',sK292(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK293(X2,X1,X0)))) | ~sP42(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f492])).
fof(f964,plain,(
  ( ! [X2,X0,X3,X1] : (~sP28(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK276(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK277(X3,X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK279(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f486])).
fof(f965,plain,(
  ( ! [X2,X0,X3,X1] : (~sP28(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK278(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK277(X3,X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK280(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f486])).
fof(f966,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK278(X3,X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK279(X3,X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK276(X3,X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK277(X3,X2,X1,X0)))))) | ~sP28(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f486])).
fof(f959,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK273(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK269(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK270(X3,X2,X1,X0)),s('type.modLang.exp',sK271(X3,X2,X1,X0)))) | ~sP29(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f483])).
fof(f960,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK272(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK270(X3,X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK275(X3,X2,X1,X0)),s('type.modLang.exp',sK271(X3,X2,X1,X0)))))) | ~sP29(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f483])).
fof(f954,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK265(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK262(X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK263(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK264(X3,X2,X1,X0)))) | ~sP30(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f480])).
fof(f955,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK266(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK268(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK263(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK264(X3,X2,X1,X0)))) | ~sP30(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f480])).
fof(f950,plain,(
  ( ! [X2,X0,X3,X1] : (~sP31(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK260(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f477])).
fof(f951,plain,(
  ( ! [X2,X0,X3,X1] : (~sP31(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK261(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f477])).
fof(f946,plain,(
  ( ! [X2,X0,X3,X1] : (~sP32(X0,X1,X2,X3) | s('type.modSem.v',X3) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK258(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f474])).
fof(f947,plain,(
  ( ! [X2,X0,X3,X1] : (~sP32(X0,X1,X2,X3) | s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK259(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f474])).
fof(f936,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP33(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK254(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK255(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f471])).
fof(f937,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP33(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),X4) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',sK254(X4,X3,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK255(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f471])).
fof(f938,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP33(X0,X1,X2,X3,X4) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') = s('type.list.list'('type.modSem.v'),X4) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK256(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK257(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f471])).
fof(f939,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP33(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.conSem.v'),X3) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK256(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK257(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f471])).
fof(f944,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP33(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X3) | s('type.list.list'('type.modSem.v'),'const.list.NIL_0') != s('type.list.list'('type.modSem.v'),X4)) )),
  inference(cnf_transformation,[],[f471])).
fof(f926,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK249(X4,X3,X2,X1,X0)),s('type.modSem.v',sK250(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP34(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f927,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK249(X4,X3,X2,X1,X0)),s('type.modSem.v',sK250(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK251(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP34(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f928,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK249(X4,X3,X2,X1,X0)),s('type.conSem.v',sK253(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK252(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) | ~sP34(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f929,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK249(X4,X3,X2,X1,X0)),s('type.conSem.v',sK253(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK252(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | ~sP34(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f934,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP34(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4)) )),
  inference(cnf_transformation,[],[f467])).
fof(f914,plain,(
  ( ! [X2,X0,X1] : (sP32(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | s('type.modSem.v',sK245(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK248(X2,X1,X0)))) | sP30(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP29(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP28(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP31(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | s('type.modSem.v',sK245(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK247(X2,X1,X0)))) | ~sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f915,plain,(
  ( ! [X2,X0,X1] : (sP32(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | s('type.modSem.v',sK245(X2,X1,X0)) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK248(X2,X1,X0)))) | sP30(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP29(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP28(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP31(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | s('type.conSem.v',sK246(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK247(X2,X1,X0)))) | ~sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f916,plain,(
  ( ! [X2,X0,X1] : (sP32(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | s('type.conSem.v',sK246(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK248(X2,X1,X0)))) | sP30(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP29(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP28(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP31(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | s('type.modSem.v',sK245(X2,X1,X0)) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK247(X2,X1,X0)))) | ~sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f917,plain,(
  ( ! [X2,X0,X1] : (sP32(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | s('type.conSem.v',sK246(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK248(X2,X1,X0)))) | sP30(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP29(sK244(X2,X1,X0),X2,sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP28(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | sP31(X1,sK244(X2,X1,X0),sK246(X2,X1,X0),sK245(X2,X1,X0)) | s('type.conSem.v',sK246(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK247(X2,X1,X0)))) | ~sP35(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f463])).
fof(f907,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2) | s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK239(X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X2,X1,X0)))))),s('type.list.list'('type.modSem.v'),sK242(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f459])).
fof(f908,plain,(
  ( ! [X2,X0,X1] : (~sP22(X0,X1,X2) | s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',sK241(X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X2,X1,X0)))))),s('type.list.list'('type.conSem.v'),sK243(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f459])).
fof(f909,plain,(
  ( ! [X2,X0,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK241(X2,X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK242(X2,X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK239(X2,X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK240(X2,X1,X0)))))) | ~sP22(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f459])).
fof(f902,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK236(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK232(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK233(X2,X1,X0)),s('type.modLang.exp',sK234(X2,X1,X0)))) | ~sP23(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f456])).
fof(f903,plain,(
  ( ! [X2,X0,X1] : (~sP23(X0,X1,X2) | s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK235(X2,X1,X0)),s('type.list.list'('type.string.char'),sK233(X2,X1,X0)),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK238(X2,X1,X0)),s('type.modLang.exp',sK234(X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f456])).
fof(f897,plain,(
  ( ! [X2,X0,X1] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK228(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),sK225(X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK226(X2,X1,X0)),s('type.list.list'('type.string.char'),sK227(X2,X1,X0)))) | ~sP24(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f453])).
fof(f898,plain,(
  ( ! [X2,X0,X1] : (s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK229(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),sK231(X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),sK226(X2,X1,X0)))),s('type.list.list'('type.string.char'),sK227(X2,X1,X0)))) | ~sP24(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f453])).
fof(f893,plain,(
  ( ! [X2,X0,X1] : (~sP25(X0,X1,X2) | s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK223(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f450])).
fof(f894,plain,(
  ( ! [X2,X0,X1] : (~sP25(X0,X1,X2) | s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK224(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f450])).
fof(f889,plain,(
  ( ! [X2,X0,X1] : (~sP26(X0,X1,X2) | s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK221(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f447])).
fof(f890,plain,(
  ( ! [X2,X0,X1] : (~sP26(X0,X1,X2) | s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK222(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f447])).
fof(f878,plain,(
  ( ! [X2,X0,X1] : (~sP27(X0,X1,X2) | s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK220(X2,X1,X0)))) | sP24(X0,X1,X2) | sP23(X0,X1,X2) | sP22(X0,X1,X2) | sP25(X0,X1,X2) | s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK219(X2,X1,X0)))) | sP26(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f444,plain,(
  ! [X0,X1,X2] : ((~sP27(X0,X1,X2) | (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK219(X2,X1,X0)))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK219(X2,X1,X0))))) | sP25(X0,X1,X2) | sP22(X0,X1,X2) | sP23(X0,X1,X2) | sP24(X0,X1,X2) | (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK220(X2,X1,X0)))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK220(X2,X1,X0))))) | sP26(X0,X1,X2)) & ((! [X4] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X4))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X4)))) & ~sP25(X0,X1,X2) & ~sP22(X0,X1,X2) & ~sP23(X0,X1,X2) & ~sP24(X0,X1,X2) & ! [X3] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X3))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X3)))) & ~sP26(X0,X1,X2)) | sP27(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK219,sK220])],[f443])).
fof(f443,plain,(
  ! [X0,X1,X2] : ((~sP27(X0,X1,X2) | ? [X6] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X6))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X6)))) | sP25(X0,X1,X2) | sP22(X0,X1,X2) | sP23(X0,X1,X2) | sP24(X0,X1,X2) | ? [X5] : (s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5))) & s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X5)))) | sP26(X0,X1,X2)) & ((! [X4] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X4))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X4)))) & ~sP25(X0,X1,X2) & ~sP22(X0,X1,X2) & ~sP23(X0,X1,X2) & ~sP24(X0,X1,X2) & ! [X3] : (s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X3))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X3)))) & ~sP26(X0,X1,X2)) | sP27(X0,X1,X2)))),
  inference(rectify,[],[f442])).
fof(f442,plain,(
  ! [X0,X2,X1] : ((~sP27(X0,X2,X1) | ? [X27] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X27))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X27)))) | sP25(X0,X2,X1) | sP22(X0,X2,X1) | sP23(X0,X2,X1) | sP24(X0,X2,X1) | ? [X5] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X5)))) | sP26(X0,X2,X1)) & ((! [X27] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X27))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X27)))) & ~sP25(X0,X2,X1) & ~sP22(X0,X2,X1) & ~sP23(X0,X2,X1) & ~sP24(X0,X2,X1) & ! [X5] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X5)))) & ~sP26(X0,X2,X1)) | sP27(X0,X2,X1)))),
  inference(flattening,[],[f441])).
fof(f441,plain,(
  ! [X0,X2,X1] : ((~sP27(X0,X2,X1) | (? [X27] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X27))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X27)))) | sP25(X0,X2,X1) | sP22(X0,X2,X1) | sP23(X0,X2,X1) | sP24(X0,X2,X1) | ? [X5] : (s('type.modSem.v',X1) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5))) & s('type.conSem.v',X2) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X5)))) | sP26(X0,X2,X1))) & ((! [X27] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X27))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X27)))) & ~sP25(X0,X2,X1) & ~sP22(X0,X2,X1) & ~sP23(X0,X2,X1) & ~sP24(X0,X2,X1) & ! [X5] : (s('type.modSem.v',X1) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X5))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X5)))) & ~sP26(X0,X2,X1)) | sP27(X0,X2,X1)))),
  inference(nnf_transformation,[],[f253])).
fof(f879,plain,(
  ( ! [X2,X0,X1] : (~sP27(X0,X1,X2) | s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK220(X2,X1,X0)))) | sP24(X0,X1,X2) | sP23(X0,X1,X2) | sP22(X0,X1,X2) | sP25(X0,X1,X2) | s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK219(X2,X1,X0)))) | sP26(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f880,plain,(
  ( ! [X2,X0,X1] : (~sP27(X0,X1,X2) | s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK220(X2,X1,X0)))) | sP24(X0,X1,X2) | sP23(X0,X1,X2) | sP22(X0,X1,X2) | sP25(X0,X1,X2) | s('type.modSem.v',X2) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK219(X2,X1,X0)))) | sP26(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f881,plain,(
  ( ! [X2,X0,X1] : (~sP27(X0,X1,X2) | s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK220(X2,X1,X0)))) | sP24(X0,X1,X2) | sP23(X0,X1,X2) | sP22(X0,X1,X2) | sP25(X0,X1,X2) | s('type.conSem.v',X1) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK219(X2,X1,X0)))) | sP26(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f882,plain,(
  ( ! [X4,X2,X0,X1] : (sP27(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X4))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X4)))) )),
  inference(cnf_transformation,[],[f444])).
fof(f883,plain,(
  ( ! [X2,X0,X1] : (sP27(X0,X1,X2) | ~sP25(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f884,plain,(
  ( ! [X2,X0,X1] : (sP27(X0,X1,X2) | ~sP22(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f885,plain,(
  ( ! [X2,X0,X1] : (sP27(X0,X1,X2) | ~sP23(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f886,plain,(
  ( ! [X2,X0,X1] : (sP27(X0,X1,X2) | ~sP24(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f887,plain,(
  ( ! [X2,X0,X3,X1] : (sP27(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X3))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X3)))) )),
  inference(cnf_transformation,[],[f444])).
fof(f888,plain,(
  ( ! [X2,X0,X1] : (sP27(X0,X1,X2) | ~sP26(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f444])).
fof(f865,plain,(
  ( ! [X2,X0,X3,X1] : (~sP15(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK205(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK206(X3,X2,X1,X0)),s('type.conLang.exp',sK207(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f437])).
fof(f866,plain,(
  ( ! [X2,X0,X3,X1] : (~sP15(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK208(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK206(X3,X2,X1,X0)),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK209(X3,X2,X1,X0)),s('type.conLang.exp',sK207(X3,X2,X1,X0))))))) )),
  inference(cnf_transformation,[],[f437])).
fof(f860,plain,(
  ( ! [X2,X0,X3,X1] : (~sP16(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK201(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK203(X3,X2,X1,X0)),s('type.list.list'('type.string.char'),sK202(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f434])).
fof(f861,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK200(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),sK204(X3,X2,X1,X0)),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),sK203(X3,X2,X1,X0)))),s('type.list.list'('type.string.char'),sK202(X3,X2,X1,X0)))) | ~sP16(X0,X1,X2,X3)) )),
  inference(cnf_transformation,[],[f434])).
fof(f856,plain,(
  ( ! [X2,X0,X3,X1] : (~sP17(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK197(X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK198(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f431])).
fof(f857,plain,(
  ( ! [X2,X0,X3,X1] : (~sP17(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),sK197(X3,X2,X1,X0)))),s('type.list.list'('type.exhSem.v'),sK199(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f431])).
fof(f852,plain,(
  ( ! [X2,X0,X3,X1] : (~sP18(X0,X1,X2,X3) | s('type.conSem.v',X3) = s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK195(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f853,plain,(
  ( ! [X2,X0,X3,X1] : (~sP18(X0,X1,X2,X3) | s('type.exhSem.v',X2) = s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),sK196(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f428])).
fof(f842,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP19(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK191(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK193(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f425])).
fof(f843,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP19(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.conSem.v'),X4) = s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',sK191(X4,X3,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK193(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f425])).
fof(f844,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP19(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X4) | s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK192(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK194(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f425])).
fof(f845,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~sP19(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') = s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.exhSem.v'),X3) = s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',sK192(X4,X3,X2,X1,X0)),s('type.list.list'('type.exhSem.v'),sK194(X4,X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f425])).
fof(f850,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP19(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),'const.list.NIL_0') != s('type.list.list'('type.exhSem.v'),X3) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') != s('type.list.list'('type.conSem.v'),X4)) )),
  inference(cnf_transformation,[],[f425])).
fof(f832,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK186(X4,X3,X2,X1,X0)),s('type.conSem.v',sK187(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK189(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f833,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK186(X4,X3,X2,X1,X0)),s('type.conSem.v',sK187(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK189(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f834,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK186(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK188(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK190(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) | ~sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f835,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK186(X4,X3,X2,X1,X0)),s('type.exhSem.v',sK188(X4,X3,X2,X1,X0)))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),sK190(X4,X3,X2,X1,X0)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | ~sP20(X0,X1,X2,X3,X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f840,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4)) )),
  inference(cnf_transformation,[],[f421])).
fof(f821,plain,(
  ( ! [X2,X0,X1] : (sP18(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | s('type.conSem.v',sK182(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK185(X2,X1,X0)))) | sP16(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP15(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP17(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | s('type.conSem.v',sK182(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK184(X2,X1,X0)))) | ~sP21(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f417])).
fof(f822,plain,(
  ( ! [X2,X0,X1] : (sP18(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | s('type.conSem.v',sK182(X2,X1,X0)) = s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK185(X2,X1,X0)))) | sP16(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP15(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP17(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | s('type.exhSem.v',sK183(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK184(X2,X1,X0)))) | ~sP21(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f417])).
fof(f823,plain,(
  ( ! [X2,X0,X1] : (sP18(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | s('type.exhSem.v',sK183(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK185(X2,X1,X0)))) | sP16(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP15(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP17(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | s('type.conSem.v',sK182(X2,X1,X0)) = s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK184(X2,X1,X0)))) | ~sP21(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f417])).
fof(f824,plain,(
  ( ! [X2,X0,X1] : (sP18(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | s('type.exhSem.v',sK183(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',sK185(X2,X1,X0)))) | sP16(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP15(X2,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | sP17(X1,sK181(X2,X1,X0),sK183(X2,X1,X0),sK182(X2,X1,X0)) | s('type.exhSem.v',sK183(X2,X1,X0)) = s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',sK184(X2,X1,X0)))) | ~sP21(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f417])).
fof(f804,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK161(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK162(X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK158(X1,X0)),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK159(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK160(X1,X0)))))) | ~sP10(X0,X1)) )),
  inference(cnf_transformation,[],[f406])).
fof(f783,plain,(
  ( ! [X0,X1] : (s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK121(X1,X0)),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK122(X1,X0)))))))) = s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK118(X1,X0)),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),sK119(X1,X0)),s('type.semanticPrimitives.tid_or_exn',sK120(X1,X0)))))) | ~sP2(X0,X1)) )),
  inference(cnf_transformation,[],[f389])).
fof(f765,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | s(X0,X2) = s(X0,X4)) )),
  inference(cnf_transformation,[],[f372])).
fof(f372,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5))) & (s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))),
  inference(flattening,[],[f371])).
fof(f371,plain,(
  ! [X0,X1,X2,X3,X4,X5] : ((s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5))) & ((s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5)) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))),
  inference(nnf_transformation,[],[f135])).
fof(f135,plain,(
  ! [X0,X1,X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) <=> (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5)))),
  inference(flattening,[],[f134])).
fof(f134,plain,(
  ! [X0,X1] : ! [X2,X3,X4,X5] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) <=> (s(X0,X2) = s(X0,X4) & s(X1,X3) = s(X1,X5)))),
  inference(rectify,[],[f44])).
fof(f44,axiom,(
  ! [X48,X57] : ! [X23,X55,X64,X66] : (s('type.pair.prod'(X48,X57),'const.pair.,_2'(s(X48,X23),s(X57,X55))) = s('type.pair.prod'(X48,X57),'const.pair.,_2'(s(X48,X64),s(X57,X66))) <=> (s(X48,X23) = s(X48,X64) & s(X57,X55) = s(X57,X66)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.pair.CLOSED_PAIR_EQ')).
fof(f766,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) != s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))) | s(X1,X3) = s(X1,X5)) )),
  inference(cnf_transformation,[],[f372])).
fof(f767,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (s(X0,X2) != s(X0,X4) | s(X1,X3) != s(X1,X5) | s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X2),s(X1,X3))) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))) )),
  inference(cnf_transformation,[],[f372])).
fof(f764,plain,(
  ( ! [X2,X0,X3,X1] : (s(X1,f(s(X0,sK90(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK90(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3)) )),
  inference(cnf_transformation,[],[f370])).
fof(f370,plain,(
  ! [X0,X1,X2,X3] : (s(X1,f(s(X0,sK90(X3,X2,X1,X0)))) != s(X1,g(s(X0,sK90(X3,X2,X1,X0)))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK90])],[f193])).
fof(f193,plain,(
  ! [X0,X1,X2,X3] : (? [X4] : s(X1,f(s(X0,X4))) != s(X1,g(s(X0,X4))) | s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(ennf_transformation,[],[f133])).
fof(f133,plain,(
  ! [X0,X1,X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(flattening,[],[f132])).
fof(f132,plain,(
  ! [X0,X1] : ! [X2,X3] : (! [X4] : s(X1,f(s(X0,X4))) = s(X1,g(s(X0,X4))) => s(fun(X0,X1),X2) = s(fun(X0,X1),X3))),
  inference(rectify,[],[f4])).
fof(f4,axiom,(
  ! [X1,X2] : ! [X3,X4] : (! [X5] : s(X2,f(s(X1,X5))) = s(X2,g(s(X1,X5))) => s(fun(X1,X2),X3) = s(fun(X1,X2),X4))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6',aHL_EXT)).
fof(f753,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | p(s(bool,X0)) | p(s(bool,X1))) )),
  inference(cnf_transformation,[],[f368])).
fof(f754,plain,(
  ( ! [X0,X1] : (~sP1(X0,X1) | ~p(s(bool,X1)) | ~p(s(bool,X0))) )),
  inference(cnf_transformation,[],[f368])).
fof(f1375,plain,(
  ( ! [X0,X1] : (~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0))) )),
  inference(subsumption_resolution,[],[f738,f662])).
fof(f738,plain,(
  ( ! [X0,X1] : (p(s(bool,'F_0')) | p(s(bool,X0)) | p(s(bool,X1)) | ~sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f361])).
fof(f361,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(flattening,[],[f360])).
fof(f360,plain,(
  ! [X0,X1] : ((~sP0(X0,X1) | (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0')))) & ((~p(s(bool,X1)) & ~p(s(bool,X0)) & ~p(s(bool,'F_0'))) | sP0(X0,X1)))),
  inference(nnf_transformation,[],[f221])).
fof(f221,plain,(
  ! [X0,X1] : (sP0(X0,X1) <=> (p(s(bool,X1)) | p(s(bool,X0)) | p(s(bool,'F_0'))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f739,plain,(
  ( ! [X0,X1] : (~p(s(bool,X1)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f361])).
fof(f740,plain,(
  ( ! [X0,X1] : (~p(s(bool,X0)) | sP0(X0,X1)) )),
  inference(cnf_transformation,[],[f361])).
fof(f734,plain,(
  ( ! [X0,X1] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))) | s('type.list.list'('type.modSem.v'),X0) = s('type.list.list'('type.modSem.v'),X1)) )),
  inference(cnf_transformation,[],[f358])).
fof(f358,plain,(
  ! [X0,X1] : ((s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))) | s('type.list.list'('type.modSem.v'),X0) = s('type.list.list'('type.modSem.v'),X1)) & (s('type.list.list'('type.modSem.v'),X0) != s('type.list.list'('type.modSem.v'),X1) | s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1)))))),
  inference(nnf_transformation,[],[f122])).
fof(f122,plain,(
  ! [X0,X1] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1))) <=> s('type.list.list'('type.modSem.v'),X0) = s('type.list.list'('type.modSem.v'),X1))),
  inference(rectify,[],[f60])).
fof(f60,axiom,(
  ! [X64,X65] : (s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X64))) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X65))) <=> s('type.list.list'('type.modSem.v'),X64) = s('type.list.list'('type.modSem.v'),X65))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.modSem.v_|49||49||split|5')).
fof(f735,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.modSem.v'),X0) != s('type.list.list'('type.modSem.v'),X1) | s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X0))) = s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X1)))) )),
  inference(cnf_transformation,[],[f358])).
fof(f732,plain,(
  ( ! [X0,X1] : (s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))) | s('type.ast.lit',X0) = s('type.ast.lit',X1)) )),
  inference(cnf_transformation,[],[f357])).
fof(f357,plain,(
  ! [X0,X1] : ((s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))) | s('type.ast.lit',X0) = s('type.ast.lit',X1)) & (s('type.ast.lit',X0) != s('type.ast.lit',X1) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1)))))),
  inference(nnf_transformation,[],[f121])).
fof(f121,plain,(
  ! [X0,X1] : (s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1))) <=> s('type.ast.lit',X0) = s('type.ast.lit',X1))),
  inference(rectify,[],[f40])).
fof(f40,axiom,(
  ! [X64,X65] : (s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X64))) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X65))) <=> s('type.ast.lit',X64) = s('type.ast.lit',X65))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.modSem.v_|49||49||split|0')).
fof(f733,plain,(
  ( ! [X0,X1] : (s('type.ast.lit',X0) != s('type.ast.lit',X1) | s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X0))) = s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X1)))) )),
  inference(cnf_transformation,[],[f357])).
fof(f730,plain,(
  ( ! [X0,X1] : (s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) )),
  inference(cnf_transformation,[],[f356])).
fof(f356,plain,(
  ! [X0,X1] : ((s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1))) | s('type.num.num',X0) = s('type.num.num',X1)) & (s('type.num.num',X0) != s('type.num.num',X1) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1)))))),
  inference(nnf_transformation,[],[f120])).
fof(f120,plain,(
  ! [X0,X1] : (s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1))) <=> s('type.num.num',X0) = s('type.num.num',X1))),
  inference(rectify,[],[f49])).
fof(f49,axiom,(
  ! [X64,X65] : (s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X64))) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X65))) <=> s('type.num.num',X64) = s('type.num.num',X65))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.modSem.v_|49||49||split|4')).
fof(f731,plain,(
  ( ! [X0,X1] : (s('type.num.num',X0) != s('type.num.num',X1) | s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X0))) = s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f356])).
fof(f722,plain,(
  ( ! [X0,X1] : (p(s(bool,X1)) | p(s(bool,X0)) | s(bool,X0) = s(bool,X1)) )),
  inference(cnf_transformation,[],[f180])).
fof(f719,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) = s(X0,X3)) )),
  inference(cnf_transformation,[],[f355])).
fof(f355,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & (s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(flattening,[],[f354])).
fof(f354,plain,(
  ! [X0,X1,X2,X3,X4] : ((s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4))) & ((s(X0,X1) != s(X0,X3) | s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4)) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4)))))),
  inference(nnf_transformation,[],[f111])).
fof(f111,plain,(
  ! [X0,X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(flattening,[],[f110])).
fof(f110,plain,(
  ! [X0] : ! [X1,X2,X3,X4] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) <=> (s(X0,X1) = s(X0,X3) & s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)))),
  inference(rectify,[],[f41])).
fof(f41,axiom,(
  ! [X48] : ! [X13,X14,X61,X62] : (s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X13),s('type.list.list'(X48),X14))) = s('type.list.list'(X48),'const.list.CONS_2'(s(X48,X61),s('type.list.list'(X48),X62))) <=> (s(X48,X13) = s(X48,X61) & s('type.list.list'(X48),X14) = s('type.list.list'(X48),X62)))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.list.list_|49||49|')).
fof(f720,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s('type.list.list'(X0),X2) = s('type.list.list'(X0),X4)) )),
  inference(cnf_transformation,[],[f355])).
fof(f721,plain,(
  ( ! [X4,X2,X0,X3,X1] : (s('type.list.list'(X0),X2) != s('type.list.list'(X0),X4) | s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X1),s('type.list.list'(X0),X2))) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,X3),s('type.list.list'(X0),X4))) | s(X0,X1) != s(X0,X3)) )),
  inference(cnf_transformation,[],[f355])).
fof(f17324,plain,(
  ( ! [X2,X1] : (s(bool,'F_0') = s(bool,X2) | ~sP78(X2,X1,'T_0')) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17306,f17316])).
fof(f16667,plain,(
  ( ! [X6,X4,X5] : (s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | $spl116),
  inference(cnf_transformation,[],[f16667_D])).
fof(f16667_D,plain,(
  ( ! [X6,X4,X5] : (s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) <=> ~$spl116),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl116])])).
fof(f16674,plain,(
  ( ! [X2,X0,X1] : (sP59(X0,X1,X2)) ) | $spl120),
  inference(cnf_transformation,[],[f16674_D])).
fof(f16674_D,plain,(
  ( ! [X2,X0,X1] : (sP59(X0,X1,X2)) ) <=> ~$spl120),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl120])])).
fof(f17860,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP59(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17652,f17316])).
fof(f17652,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP59(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f1130])).
fof(f16664,plain,(
  ( ! [X4,X7,X5] : (s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl112),
  inference(cnf_transformation,[],[f16664_D])).
fof(f16664_D,plain,(
  ( ! [X4,X7,X5] : (s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) <=> ~$spl112),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl112])])).
fof(f17859,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP59(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17648,f17316])).
fof(f17648,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP59(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f1126])).
fof(f16671,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,X1,X2)) ) | $spl118),
  inference(cnf_transformation,[],[f16671_D])).
fof(f16671_D,plain,(
  ( ! [X2,X0,X1] : (sP42(X0,X1,X2)) ) <=> ~$spl118),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl118])])).
fof(f17858,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP42(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17646,f17316])).
fof(f17646,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP42(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f986])).
fof(f17857,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP42(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17642,f17316])).
fof(f17642,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP42(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f982])).
fof(f16665,plain,(
  ( ! [X2,X0,X1] : (sP21(X0,X1,X2)) ) | $spl114),
  inference(cnf_transformation,[],[f16665_D])).
fof(f16665_D,plain,(
  ( ! [X2,X0,X1] : (sP21(X0,X1,X2)) ) <=> ~$spl114),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl114])])).
fof(f17856,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP21(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17639,f17316])).
fof(f17639,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP21(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f830])).
fof(f17855,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP21(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17635,f17316])).
fof(f17635,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP21(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f826])).
fof(f16654,plain,(
  ( ! [X6,X4,X5] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | $spl106),
  inference(cnf_transformation,[],[f16654_D])).
fof(f16654_D,plain,(
  ( ! [X6,X4,X5] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) <=> ~$spl106),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl106])])).
fof(f16661,plain,(
  ( ! [X2,X0,X1] : (sP68(X0,X1,X2)) ) | $spl110),
  inference(cnf_transformation,[],[f16661_D])).
fof(f16661_D,plain,(
  ( ! [X2,X0,X1] : (sP68(X0,X1,X2)) ) <=> ~$spl110),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl110])])).
fof(f17854,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP68(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17605,f17316])).
fof(f17605,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP68(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f1200])).
fof(f16651,plain,(
  ( ! [X4,X7,X5] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl102),
  inference(cnf_transformation,[],[f16651_D])).
fof(f16651_D,plain,(
  ( ! [X4,X7,X5] : (s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) <=> ~$spl102),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl102])])).
fof(f17853,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP68(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17600,f17316])).
fof(f17600,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP68(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f1195])).
fof(f16658,plain,(
  ( ! [X2,X0,X1] : (sP51(X0,X1,X2)) ) | $spl108),
  inference(cnf_transformation,[],[f16658_D])).
fof(f16658_D,plain,(
  ( ! [X2,X0,X1] : (sP51(X0,X1,X2)) ) <=> ~$spl108),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl108])])).
fof(f17852,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP51(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17598,f17316])).
fof(f17598,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP51(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f1056])).
fof(f17851,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP51(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17593,f17316])).
fof(f17593,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP51(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f1051])).
fof(f16652,plain,(
  ( ! [X2,X0,X1] : (sP35(X0,X1,X2)) ) | $spl104),
  inference(cnf_transformation,[],[f16652_D])).
fof(f16652_D,plain,(
  ( ! [X2,X0,X1] : (sP35(X0,X1,X2)) ) <=> ~$spl104),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl104])])).
fof(f17850,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP35(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17590,f17316])).
fof(f17590,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP35(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f924])).
fof(f17849,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP35(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(subsumption_resolution,[],[f17585,f17316])).
fof(f17585,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP35(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | ($spl124 | $spl128)),
  inference(backward_demodulation,[],[f17325,f919])).
fof(f17321,plain,(
  ( ! [X85,X84,X82] : (p(s(bool,X84)) | s(bool,'F_0') = s(bool,X85) | ~sP78(X85,X84,'const.bool.BOUNDED_1'(s(bool,X82)))) ) | $spl130),
  inference(cnf_transformation,[],[f17321_D])).
fof(f17321_D,plain,(
  ( ! [X85,X84,X82] : (p(s(bool,X84)) | s(bool,'F_0') = s(bool,X85) | ~sP78(X85,X84,'const.bool.BOUNDED_1'(s(bool,X82)))) ) <=> ~$spl130),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl130])])).
fof(f17320,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,X83)) | p(s(bool,X84)) | ~sP78(X85,X84,'const.bool.BOUNDED_1'(s(bool,X82))) | s(bool,'F_0') = s(bool,X85)) ) | $spl0),
  inference(subsumption_resolution,[],[f17287,f675])).
fof(f17287,plain,(
  ( ! [X85,X83,X84,X82] : (~p(s(bool,X83)) | p(s(bool,X84)) | ~sP78(X85,X84,'const.bool.BOUNDED_1'(s(bool,X82))) | s(bool,'F_0') = s(bool,X85) | s(bool,'F_0') = s(bool,X83)) ) | $spl0),
  inference(superposition,[],[f14793,f15289])).
fof(f14793,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,X65)) | p(s(bool,X66)) | ~sP78(X64,X66,X65) | s(bool,'F_0') = s(bool,X64)) ) | $spl0),
  inference(subsumption_resolution,[],[f14792,f660])).
fof(f14792,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'T_0')) | ~p(s(bool,X65)) | p(s(bool,X66)) | ~sP78(X64,X66,X65) | s(bool,'F_0') = s(bool,X64)) ) | $spl0),
  inference(forward_demodulation,[],[f14304,f1578])).
fof(f14304,plain,(
  ( ! [X66,X64,X65] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ~p(s(bool,X65)) | p(s(bool,X66)) | ~sP78(X64,X66,X65) | s(bool,'F_0') = s(bool,X64)) ) | $spl0),
  inference(superposition,[],[f1330,f14137])).
fof(f17315,plain,(
  ( ! [X74,X75] : (p(s(bool,X74)) | s(bool,'F_0') = s(bool,X75) | ~sP78(X75,X74,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl126),
  inference(cnf_transformation,[],[f17315_D])).
fof(f17315_D,plain,(
  ( ! [X74,X75] : (p(s(bool,X74)) | s(bool,'F_0') = s(bool,X75) | ~sP78(X75,X74,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) <=> ~$spl126),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl126])])).
fof(f17318,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78(X2,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X2)) ) | $spl0),
  inference(condensation,[],[f17317])).
fof(f17317,plain,(
  ( ! [X78,X76,X79,X77] : (p(s(bool,X77)) | ~sP78(X78,X77,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X78) | s(bool,X76) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) ) | $spl0),
  inference(subsumption_resolution,[],[f17285,f1758])).
fof(f17285,plain,(
  ( ! [X78,X76,X79,X77] : (~p(s(bool,X76)) | p(s(bool,X77)) | ~sP78(X78,X77,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X78) | s(bool,X76) = s(bool,X79) | s(bool,'T_0') = s(bool,X79)) ) | $spl0),
  inference(superposition,[],[f14793,f11848])).
fof(f17314,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,X74)) | ~sP78(X75,X74,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X75)) ) | $spl0),
  inference(subsumption_resolution,[],[f17284,f675])).
fof(f17284,plain,(
  ( ! [X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,X74)) | ~sP78(X75,X74,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X75) | s(bool,'F_0') = s(bool,X73)) ) | $spl0),
  inference(superposition,[],[f14793,f14137])).
fof(f17306,plain,(
  ( ! [X2,X1] : (~sP78(X2,X1,'T_0') | s(bool,'F_0') = s(bool,X2) | p(s(bool,X1))) ) | $spl124),
  inference(cnf_transformation,[],[f17306_D])).
fof(f17306_D,plain,(
  ( ! [X2,X1] : (~sP78(X2,X1,'T_0') | s(bool,'F_0') = s(bool,X2) | p(s(bool,X1))) ) <=> ~$spl124),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl124])])).
fof(f17313,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78(X2,X1,'T_0') | s(bool,'F_0') = s(bool,X2)) ) | $spl0),
  inference(condensation,[],[f17312])).
fof(f17312,plain,(
  ( ! [X68,X66,X69,X67] : (p(s(bool,X67)) | ~sP78(X68,X67,'T_0') | s(bool,'F_0') = s(bool,X68) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) ) | $spl0),
  inference(subsumption_resolution,[],[f17282,f1758])).
fof(f17282,plain,(
  ( ! [X68,X66,X69,X67] : (~p(s(bool,X66)) | p(s(bool,X67)) | ~sP78(X68,X67,'T_0') | s(bool,'F_0') = s(bool,X68) | s(bool,X66) = s(bool,X69) | s(bool,'T_0') = s(bool,X69)) ) | $spl0),
  inference(superposition,[],[f14793,f1649])).
fof(f17311,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78(X2,X1,'T_0') | s(bool,'F_0') = s(bool,X2)) ) | $spl0),
  inference(condensation,[],[f17310])).
fof(f17310,plain,(
  ( ! [X64,X62,X65,X63] : (p(s(bool,X63)) | ~sP78(X64,X63,'T_0') | s(bool,'F_0') = s(bool,X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) ) | $spl0),
  inference(subsumption_resolution,[],[f17281,f1758])).
fof(f17281,plain,(
  ( ! [X64,X62,X65,X63] : (~p(s(bool,X62)) | p(s(bool,X63)) | ~sP78(X64,X63,'T_0') | s(bool,'F_0') = s(bool,X64) | s(bool,X62) = s(bool,X65) | s(bool,'T_0') = s(bool,X65)) ) | $spl0),
  inference(superposition,[],[f14793,f1649])).
fof(f17309,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78(X2,X1,'T_0') | s(bool,'F_0') = s(bool,X2)) ) | $spl0),
  inference(condensation,[],[f17308])).
fof(f17308,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,'T_0') = s(bool,X61) | p(s(bool,X59)) | ~sP78(X60,X59,'T_0') | s(bool,'F_0') = s(bool,X60) | s(bool,X58) = s(bool,X61)) ) | $spl0),
  inference(subsumption_resolution,[],[f17307,f1758])).
fof(f17307,plain,(
  ( ! [X61,X59,X60,X58] : (s(bool,'T_0') = s(bool,X61) | ~p(s(bool,X58)) | p(s(bool,X59)) | ~sP78(X60,X59,'T_0') | s(bool,'F_0') = s(bool,X60) | s(bool,X58) = s(bool,X61)) ) | $spl0),
  inference(forward_demodulation,[],[f17280,f663])).
fof(f17280,plain,(
  ( ! [X61,X59,X60,X58] : (~p(s(bool,X58)) | p(s(bool,X59)) | ~sP78(X60,X59,'T_0') | s(bool,'F_0') = s(bool,X60) | s(bool,X61) = s(bool,'const.bool.BOUNDED_1'(s(bool,X61))) | s(bool,X58) = s(bool,X61)) ) | $spl0),
  inference(superposition,[],[f14793,f3313])).
fof(f17305,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78(X2,X1,'T_0') | s(bool,'F_0') = s(bool,X2)) ) | $spl0),
  inference(condensation,[],[f17304])).
fof(f17304,plain,(
  ( ! [X57,X54,X56,X55] : (s(bool,'T_0') = s(bool,X57) | p(s(bool,X55)) | ~sP78(X56,X55,'T_0') | s(bool,'F_0') = s(bool,X56) | s(bool,X54) = s(bool,X57)) ) | $spl0),
  inference(subsumption_resolution,[],[f17303,f1758])).
fof(f17303,plain,(
  ( ! [X57,X54,X56,X55] : (s(bool,'T_0') = s(bool,X57) | ~p(s(bool,X54)) | p(s(bool,X55)) | ~sP78(X56,X55,'T_0') | s(bool,'F_0') = s(bool,X56) | s(bool,X54) = s(bool,X57)) ) | $spl0),
  inference(forward_demodulation,[],[f17279,f1578])).
fof(f17279,plain,(
  ( ! [X57,X54,X56,X55] : (~p(s(bool,X54)) | p(s(bool,X55)) | ~sP78(X56,X55,'T_0') | s(bool,'F_0') = s(bool,X56) | s(bool,X57) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X54) = s(bool,X57)) ) | $spl0),
  inference(superposition,[],[f14793,f11848])).
fof(f16785,plain,(
  ( ! [X33,X34] : (s(bool,X33) != s(bool,'const.bool.BOUNDED_1'(s(bool,X34))) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl122),
  inference(cnf_transformation,[],[f16785_D])).
fof(f16785_D,plain,(
  ( ! [X33,X34] : (s(bool,X33) != s(bool,'const.bool.BOUNDED_1'(s(bool,X34))) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) <=> ~$spl122),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl122])])).
fof(f16774,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) != s(bool,'const.bool.BOUNDED_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f16706])).
fof(f16706,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) != s(bool,'const.bool.BOUNDED_1'(s(bool,X34))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X32)) ) | $spl0),
  inference(superposition,[],[f15914,f11848])).
fof(f16690,plain,(
  $false | $spl96),
  inference(subsumption_resolution,[],[f16414,f662])).
fof(f16414,plain,(
  p(s(bool,'F_0')) | $spl96),
  inference(backward_demodulation,[],[f15902,f11393])).
fof(f16675,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP59(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16347,f662])).
fof(f16347,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP59(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f1130])).
fof(f16673,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP59(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16343,f662])).
fof(f16343,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP59(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f1126])).
fof(f16672,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP42(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16341,f662])).
fof(f16341,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP42(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f986])).
fof(f16670,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP42(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16337,f662])).
fof(f16337,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP42(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f982])).
fof(f16666,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP21(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16334,f662])).
fof(f16334,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP21(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Loc_1'(s('type.num.num',X6))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f830])).
fof(f16663,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP21(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16330,f662])).
fof(f16330,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP21(X0,X1,X2) | s('type.exhSem.v',X5) != s('type.exhSem.v','const.exhSem.Litv_1'(s('type.ast.lit',X7))) | s('type.conSem.v',X4) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f826])).
fof(f16662,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP68(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16300,f662])).
fof(f16300,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP68(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f1200])).
fof(f16660,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP68(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16295,f662])).
fof(f16295,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP68(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f1195])).
fof(f16659,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP51(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16293,f662])).
fof(f16293,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP51(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f1056])).
fof(f16657,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP51(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16288,f662])).
fof(f16288,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP51(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f1051])).
fof(f16653,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP35(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16285,f662])).
fof(f16285,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (p(s(bool,'F_0')) | sP35(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',X6))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',X6)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f924])).
fof(f16650,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (sP35(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(subsumption_resolution,[],[f16280,f662])).
fof(f16280,plain,(
  ( ! [X4,X2,X0,X7,X5,X1] : (p(s(bool,'F_0')) | sP35(X0,X1,X2) | s('type.conSem.v',X5) != s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',X7))) | s('type.modSem.v',X4) != s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',X7)))) ) | $spl96),
  inference(backward_demodulation,[],[f15902,f919])).
fof(f15904,plain,(
  ( ! [X547,X548] : (s(bool,X548) != s(bool,'const.bool.BOUNDED_1'(s(bool,X547))) | s(bool,X548) = s(bool,'const.bool.BOUNDED_1'(s(bool,X548)))) ) | $spl100),
  inference(cnf_transformation,[],[f15904_D])).
fof(f15904_D,plain,(
  ( ! [X547,X548] : (s(bool,X548) != s(bool,'const.bool.BOUNDED_1'(s(bool,X547))) | s(bool,X548) = s(bool,'const.bool.BOUNDED_1'(s(bool,X548)))) ) <=> ~$spl100),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl100])])).
fof(f15824,plain,(
  ( ! [X546,X547,X548] : (s(bool,X548) != s(bool,'const.bool.BOUNDED_1'(s(bool,X547))) | s(bool,X548) = s(bool,'const.bool.BOUNDED_1'(s(bool,X548))) | s(bool,'F_0') = s(bool,X546)) ) | ($spl0 | $spl76)),
  inference(duplicate_literal_removal,[],[f15528])).
fof(f15528,plain,(
  ( ! [X546,X547,X548] : (s(bool,X548) != s(bool,'const.bool.BOUNDED_1'(s(bool,X547))) | s(bool,X548) = s(bool,'const.bool.BOUNDED_1'(s(bool,X548))) | s(bool,'F_0') = s(bool,X546) | s(bool,'F_0') = s(bool,X546)) ) | ($spl0 | $spl76)),
  inference(superposition,[],[f10650,f15289])).
fof(f15903,plain,(
  ( ! [X545,X544] : (s(bool,X545) != s(bool,'const.bool.BOUNDED_1'(s(bool,X544))) | s(bool,'T_0') = s(bool,X545)) ) | $spl98),
  inference(cnf_transformation,[],[f15903_D])).
fof(f15903_D,plain,(
  ( ! [X545,X544] : (s(bool,X545) != s(bool,'const.bool.BOUNDED_1'(s(bool,X544))) | s(bool,'T_0') = s(bool,X545)) ) <=> ~$spl98),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl98])])).
fof(f15825,plain,(
  ( ! [X545,X543,X544] : (s(bool,X545) != s(bool,'const.bool.BOUNDED_1'(s(bool,X544))) | s(bool,'T_0') = s(bool,X545) | s(bool,'F_0') = s(bool,X543)) ) | ($spl0 | $spl72)),
  inference(duplicate_literal_removal,[],[f15527])).
fof(f15527,plain,(
  ( ! [X545,X543,X544] : (s(bool,X545) != s(bool,'const.bool.BOUNDED_1'(s(bool,X544))) | s(bool,'T_0') = s(bool,X545) | s(bool,'F_0') = s(bool,X543) | s(bool,'F_0') = s(bool,X543)) ) | ($spl0 | $spl72)),
  inference(superposition,[],[f10599,f15289])).
fof(f15059,plain,(
  ( ! [X50] : (sP1('F_0',X50) | s(bool,'F_0') = s(bool,X50)) ) | $spl94),
  inference(cnf_transformation,[],[f15059_D])).
fof(f15059_D,plain,(
  ( ! [X50] : (sP1('F_0',X50) | s(bool,'F_0') = s(bool,X50)) ) <=> ~$spl94),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl94])])).
fof(f15058,plain,(
  ( ! [X50,X49] : (p(s(bool,X49)) | sP1('F_0',X50) | s(bool,'F_0') = s(bool,X50)) ) | $spl0),
  inference(subsumption_resolution,[],[f15038,f673])).
fof(f15038,plain,(
  ( ! [X50,X49] : (p(s(bool,X49)) | sP1('F_0',X50) | s(bool,'F_0') = s(bool,X50) | s(bool,'T_0') = s(bool,X49)) ) | $spl0),
  inference(superposition,[],[f14767,f665])).
fof(f14767,plain,(
  ( ! [X26,X27] : (p(s(bool,X27)) | sP1(X27,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl0),
  inference(subsumption_resolution,[],[f14766,f660])).
fof(f14766,plain,(
  ( ! [X26,X27] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | sP1(X27,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl0),
  inference(forward_demodulation,[],[f14291,f1578])).
fof(f14291,plain,(
  ( ! [X26,X27] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | p(s(bool,X27)) | sP1(X27,X26) | s(bool,'F_0') = s(bool,X26)) ) | $spl0),
  inference(superposition,[],[f758,f14137])).
fof(f15013,plain,(
  ( ! [X50] : (sP1(X50,'F_0') | s(bool,'F_0') = s(bool,X50)) ) | $spl92),
  inference(cnf_transformation,[],[f15013_D])).
fof(f15013_D,plain,(
  ( ! [X50] : (sP1(X50,'F_0') | s(bool,'F_0') = s(bool,X50)) ) <=> ~$spl92),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl92])])).
fof(f15012,plain,(
  ( ! [X50,X49] : (p(s(bool,X49)) | sP1(X50,'F_0') | s(bool,'F_0') = s(bool,X50)) ) | $spl0),
  inference(subsumption_resolution,[],[f14992,f673])).
fof(f14992,plain,(
  ( ! [X50,X49] : (p(s(bool,X49)) | sP1(X50,'F_0') | s(bool,'F_0') = s(bool,X50) | s(bool,'T_0') = s(bool,X49)) ) | $spl0),
  inference(superposition,[],[f14765,f665])).
fof(f14765,plain,(
  ( ! [X24,X25] : (p(s(bool,X25)) | sP1(X24,X25) | s(bool,'F_0') = s(bool,X24)) ) | $spl0),
  inference(subsumption_resolution,[],[f14764,f660])).
fof(f14764,plain,(
  ( ! [X24,X25] : (~p(s(bool,'T_0')) | p(s(bool,X25)) | sP1(X24,X25) | s(bool,'F_0') = s(bool,X24)) ) | $spl0),
  inference(forward_demodulation,[],[f14290,f1578])).
fof(f14290,plain,(
  ( ! [X24,X25] : (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | p(s(bool,X25)) | sP1(X24,X25) | s(bool,'F_0') = s(bool,X24)) ) | $spl0),
  inference(superposition,[],[f755,f14137])).
fof(f13988,plain,(
  ( ! [X542,X541] : (s(bool,X541) != s(bool,X542) | s(bool,X541) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X542)) ) | $spl90),
  inference(cnf_transformation,[],[f13988_D])).
fof(f13988_D,plain,(
  ( ! [X542,X541] : (s(bool,X541) != s(bool,X542) | s(bool,X541) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X542)) ) <=> ~$spl90),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl90])])).
fof(f13991,plain,(
  ( ! [X549,X551,X550] : (s(bool,X550) != s(bool,X551) | s(bool,X549) = s(bool,'const.bool.BOUNDED_1'(s(bool,X549))) | s(bool,'F_0') = s(bool,X551) | s(bool,X550) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl76)),
  inference(subsumption_resolution,[],[f12804,f9546])).
fof(f12804,plain,(
  ( ! [X549,X551,X550] : (s(bool,X550) != s(bool,X551) | s(bool,X549) = s(bool,'const.bool.BOUNDED_1'(s(bool,X549))) | s(bool,'F_0') = s(bool,X551) | s(bool,X550) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X549)) ) | ($spl0 | $spl76)),
  inference(superposition,[],[f10650,f11848])).
fof(f13501,plain,(
  ( ! [X540,X542,X541] : (s(bool,X541) != s(bool,X542) | s(bool,'T_0') = s(bool,X540) | s(bool,'F_0') = s(bool,X542) | s(bool,X541) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl72)),
  inference(duplicate_literal_removal,[],[f12801])).
fof(f12801,plain,(
  ( ! [X540,X542,X541] : (s(bool,X541) != s(bool,X542) | s(bool,'T_0') = s(bool,X540) | s(bool,'F_0') = s(bool,X542) | s(bool,X541) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X540)) ) | ($spl0 | $spl72)),
  inference(superposition,[],[f10599,f11848])).
fof(f13982,plain,(
  ( ! [X524] : (s(bool,'T_0') != s(bool,X524) | s(bool,X524) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl88),
  inference(cnf_transformation,[],[f13982_D])).
fof(f13982_D,plain,(
  ( ! [X524] : (s(bool,'T_0') != s(bool,X524) | s(bool,X524) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) <=> ~$spl88),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl88])])).
fof(f13985,plain,(
  ( ! [X532,X533] : (s(bool,'T_0') != s(bool,X533) | s(bool,X532) = s(bool,'const.bool.BOUNDED_1'(s(bool,X532))) | s(bool,X533) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl68)),
  inference(forward_demodulation,[],[f13984,f663])).
fof(f13984,plain,(
  ( ! [X532,X533] : (s(bool,X533) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X532) = s(bool,'const.bool.BOUNDED_1'(s(bool,X532))) | s(bool,X533) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl68)),
  inference(subsumption_resolution,[],[f12798,f9546])).
fof(f12798,plain,(
  ( ! [X532,X533] : (s(bool,X533) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X532) = s(bool,'const.bool.BOUNDED_1'(s(bool,X532))) | s(bool,X533) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X532)) ) | ($spl0 | $spl68)),
  inference(superposition,[],[f9755,f11848])).
fof(f13983,plain,(
  ( ! [X526,X525] : (s(bool,'T_0') != s(bool,X526) | s(bool,X525) = s(bool,'const.bool.BOUNDED_1'(s(bool,X525))) | s(bool,X526) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(subsumption_resolution,[],[f12795,f9546])).
fof(f12795,plain,(
  ( ! [X526,X525] : (s(bool,'T_0') != s(bool,X526) | s(bool,X525) = s(bool,'const.bool.BOUNDED_1'(s(bool,X525))) | s(bool,X526) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X525)) ) | $spl0),
  inference(superposition,[],[f9546,f11848])).
fof(f13981,plain,(
  ( ! [X524,X523] : (s(bool,'T_0') != s(bool,X524) | s(bool,'T_0') = s(bool,X523) | s(bool,X524) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(forward_demodulation,[],[f13502,f663])).
fof(f13502,plain,(
  ( ! [X524,X523] : (s(bool,X524) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X523) | s(bool,X524) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f12794])).
fof(f12794,plain,(
  ( ! [X524,X523] : (s(bool,X524) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X523) | s(bool,X524) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X523)) ) | $spl0),
  inference(superposition,[],[f9229,f11848])).
fof(f13751,plain,(
  ( ! [X14,X16] : (s(bool,X14) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X14) = s(bool,X16) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16)))) ) | $spl80),
  inference(cnf_transformation,[],[f13751_D])).
fof(f13751_D,plain,(
  ( ! [X14,X16] : (s(bool,X14) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X14) = s(bool,X16) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16)))) ) <=> ~$spl80),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl80])])).
fof(f13511,plain,(
  ( ! [X449,X451,X450] : (s(bool,X450) = s(bool,X451) | s(bool,X451) = s(bool,'const.bool.BOUNDED_1'(s(bool,X451))) | s(bool,'T_0') = s(bool,X449) | s(bool,X450) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f12773])).
fof(f12773,plain,(
  ( ! [X449,X451,X450] : (s(bool,X450) = s(bool,X451) | s(bool,X451) = s(bool,'const.bool.BOUNDED_1'(s(bool,X451))) | s(bool,'T_0') = s(bool,X449) | s(bool,X450) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X449)) ) | $spl0),
  inference(superposition,[],[f3313,f11848])).
fof(f13745,plain,(
  ( ! [X39] : (s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X39)) ) | $spl78),
  inference(cnf_transformation,[],[f13745_D])).
fof(f13745_D,plain,(
  ( ! [X39] : (s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X39)) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f13519,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f12632])).
fof(f12632,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f665,f11848])).
fof(f13896,plain,(
  ( ! [X546,X547] : (s(bool,X546) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X547) | s(bool,'F_0') = s(bool,X546)) ) | ($spl0 | $spl76)),
  inference(global_subsumption,[],[f13895,f659,f658,f660,f663,f665,f674,f673,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f783,f804,f824,f823,f822,f821,f840,f835,f834,f833,f832,f850,f845,f844,f843,f842,f853,f852,f857,f856,f861,f860,f866,f865,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f890,f889,f894,f893,f898,f897,f903,f902,f909,f908,f907,f917,f916,f915,f914,f934,f929,f928,f927,f926,f944,f939,f938,f937,f936,f947,f946,f951,f950,f955,f954,f960,f959,f966,f965,f964,f980,f979,f978,f977,f996,f991,f990,f989,f988,f1006,f1001,f1000,f999,f998,f1009,f1008,f1013,f1012,f1017,f1016,f1022,f1021,f1042,f1037,f1036,f1035,f1034,f1049,f1048,f1047,f1046,f1066,f1061,f1060,f1059,f1058,f1076,f1071,f1070,f1069,f1068,f1079,f1078,f1083,f1082,f1087,f1086,f1092,f1091,f1098,f1097,f1096,f1117,f1112,f1111,f1110,f1109,f1124,f1123,f1122,f1121,f1140,f1135,f1134,f1133,f1132,f1150,f1145,f1144,f1143,f1142,f1153,f1152,f1157,f1156,f1161,f1160,f1166,f1165,f1186,f1181,f1180,f1179,f1178,f1193,f1192,f1191,f1190,f1210,f1205,f1204,f1203,f1202,f1220,f1215,f1214,f1213,f1212,f1223,f1222,f1227,f1226,f1231,f1230,f1236,f1235,f1242,f1241,f1240,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1371,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1632,f1631,f1630,f1629,f1628,f1627,f1626,f1625,f1621,f1619,f1616,f1615,f1611,f1610,f1606,f1605,f1604,f1600,f1596,f1595,f1594,f1593,f1592,f1591,f1590,f1589,f1588,f1587,f1586,f1585,f1584,f1582,f1581,f1580,f1579,f1578,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1926,f1964,f1977,f1983,f1987,f2018,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2425,f2424,f2423,f2422,f2542,f2543,f2544,f2545,f2546,f2547,f2548,f2549,f2550,f2551,f2552,f2553,f2554,f2555,f2556,f2557,f2558,f2561,f2562,f2563,f2564,f2565,f2606,f2605,f2603,f2599,f2598,f2640,f2639,f2633,f2671,f2662,f2716,f2738,f2749,f2762,f2773,f2789,f2794,f2813,f2824,f2840,f2850,f2876,f2884,f2894,f2896,f2906,f2916,f2926,f2934,f2941,f2957,f2964,f2965,f2966,f3005,f3071,f3074,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f4429,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4460,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4515,f1114,f1113,f874,f1030,f1167,f1162,f1023,f1018,f867,f862,f1116,f1115,f1174,f1120,f1119,f1118,f815,f805,f793,f790,f1041,f1040,f910,f895,f891,f737,f736,f4464,f1105,f1045,f1044,f911,f896,f892,f813,f810,f1185,f1184,f1039,f1038,f4463,f1043,f973,f913,f912,f1238,f1233,f1094,f1089,f962,f957,f905,f900,f802,f798,f781,f778,f877,f1147,f1146,f1137,f1136,f1125,f1003,f1002,f993,f992,f981,f847,f846,f837,f836,f825,f1131,f1130,f1129,f1128,f1127,f1126,f987,f986,f985,f984,f983,f982,f870,f831,f830,f829,f828,f827,f826,f976,f1217,f1216,f1209,f1208,f1194,f1073,f1072,f1065,f1064,f1050,f941,f940,f933,f932,f918,f814,f811,f774,f772,f792,f799,f779,f803,f782,f807,f795,f785,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f969,f925,f924,f923,f922,f921,f920,f919,f768,f1176,f1177,f1175,f1107,f1106,f1108,f1032,f1031,f1033,f975,f974,f876,f875,f872,f873,f871,f1158,f1154,f1149,f1148,f1014,f1010,f1005,f1004,f858,f854,f849,f848,f1159,f1155,f1151,f1029,f1028,f1027,f1026,f1015,f1011,f1007,f859,f855,f851,f1168,f1163,f1139,f1138,f1024,f1019,f995,f994,f868,f863,f839,f838,f1173,f1172,f1171,f1170,f1169,f1164,f1141,f1025,f1020,f997,f869,f864,f841,f1243,f1237,f1232,f1228,f1224,f1219,f1218,f1207,f1206,f1099,f1093,f1088,f1084,f1080,f1075,f1074,f1063,f1062,f971,f972,f970,f967,f961,f956,f952,f948,f943,f942,f931,f930,f816,f809,f806,f801,f797,f794,f791,f784,f780,f777,f775,f771,f817,f776,f812,f773,f818,f789,f788,f787,f786,f1244,f1229,f1225,f1221,f1104,f1103,f1102,f1101,f1100,f1085,f1081,f1077,f968,f953,f949,f945,f819,f769,f1239,f1234,f1211,f1095,f1090,f1067,f963,f958,f935,f715,f714,f712,f709,f707,f706,f704,f700,f699,f808,f800,f796,f1183,f1182,f904,f899,f664,f1362,f1361,f1352,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1189,f1188,f1187,f906,f901,f820,f770,f2041,f2040,f2027,f2026,f676,f675,f662,f6058,f6057,f6054,f6053,f6052,f6051,f6048,f6045,f6041,f6038,f6037,f6034,f6031,f6030,f6029,f6028,f6027,f6026,f6025,f6024,f6023,f6022,f6021,f6020,f6019,f6015,f6014,f6006,f6005,f6001,f6000,f5995,f5974,f5973,f5972,f5966,f5960,f5959,f5954,f5943,f5936,f5934,f5933,f5929,f5928,f5927,f5926,f5923,f5921,f5916,f5915,f5911,f5910,f5905,f5902,f5901,f5895,f5892,f5891,f5890,f5889,f5888,f5887,f5886,f5885,f5884,f5883,f5882,f5881,f5877,f5876,f5870,f5866,f5865,f5859,f5857,f5855,f5853,f5851,f5850,f5847,f5846,f5845,f5844,f5842,f5841,f5840,f5839,f5838,f6213,f6259,f6262,f6263,f6264,f2690,f2951,f2689,f2950,f2949,f2685,f3441,f3442,f3582,f3583,f3165,f3166,f2948,f2684,f4462,f4461,f717,f716,f7593,f7595,f7596,f7597,f7700,f7699,f7698,f7701,f7703,f7705,f7708,f7709,f7710,f7749,f7752,f7756,f7757,f7765,f7764,f7763,f7766,f7768,f7770,f7773,f7774,f7775,f7857,f7855,f7853,f7868,f7870,f7872,f7875,f7876,f7877,f7948,f7968,f8031,f8045,f8060,f8066,f8065,f8064,f8086,f8085,f8084,f8132,f8131,f8130,f8179,f8181,f8183,f8189,f9434,f9419,f9407,f9402,f8251,f8252,f9393,f9392,f9465,f8422,f8623,f8626,f8629,f9372,f9546,f9551,f8847,f8848,f8849,f8850,f9594,f9657,f9662,f9665,f9194,f9197,f9200,f9215,f9229,f9690,f9696,f9699,f9701,f9702,f9703,f9704,f9747,f9721,f9722,f9762,f9828,f9834,f9837,f9839,f9840,f9841,f9842,f10091,f10092,f10106,f10032,f10172,f10173,f10174,f10191,f10214,f10234,f10235,f10236,f10237,f10254,f10268,f10269,f10270,f10287,f10358,f10394,f10395,f10396,f10421,f10405,f10423,f10426,f10452,f10453,f10454,f10515,f10537,f10546,f10547,f10662,f10921,f10916,f10911,f10892,f10891,f10888,f10887,f10886,f10885,f10882,f10879,f10875,f10872,f10871,f10868,f10865,f10864,f10863,f10862,f10861,f10860,f10859,f10858,f10857,f10856,f10855,f10854,f10853,f10847,f10839,f10838,f10833,f10832,f10805,f10804,f10803,f10797,f10791,f10790,f10785,f10774,f10767,f10765,f10764,f10760,f10759,f10758,f10757,f10754,f10752,f10747,f10746,f10742,f10741,f10736,f10733,f10732,f10726,f10723,f10722,f10721,f10720,f10719,f10718,f10717,f10716,f10715,f10714,f10713,f10712,f10708,f10707,f10701,f10697,f10696,f10690,f10688,f10686,f10684,f10682,f10681,f10678,f10677,f10676,f10675,f10673,f10672,f10671,f10670,f10669,f10664,f11024,f11034,f11031,f11058,f11057,f11114,f11116,f11117,f11118,f11121,f11123,f11124,f11125,f11126,f11129,f11131,f11138,f11135,f11155,f11165,f11182,f11248,f11249,f11391,f11392,f11393,f11394,f11395,f11424,f11458,f11459,f11579,f11580,f11581,f11584,f11586,f11587,f11588,f11590,f11626,f11611,f11691,f11697,f11700,f11711,f11721,f11724,f11848,f11851,f11852,f11865,f13720,f13719,f13708,f13703,f13701,f11926,f11927,f11928,f13692,f13691,f13690,f12142,f13796,f12161,f12355,f12357,f12362,f12365,f13532,f13887,f13888])).
fof(f12365,plain,(
  ( ! [X617,X613,X615,X616,X618,X614] : (s('type.pair.prod'(X614,bool),'const.pair.,_2'(s(X614,X615),s(bool,X616))) != s('type.pair.prod'(X614,bool),'const.pair.,_2'(s(X614,X617),s(bool,X613))) | s(bool,X616) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X613) = s(bool,X618) | s(bool,'T_0') = s(bool,X618)) ) | $spl0),
  inference(superposition,[],[f766,f11848])).
fof(f12362,plain,(
  ( ! [X600,X596,X598,X597,X599,X595] : (s('type.pair.prod'(bool,X596),'const.pair.,_2'(s(bool,X595),s(X596,X599))) != s('type.pair.prod'(bool,X596),'const.pair.,_2'(s(bool,X597),s(X596,X598))) | s(bool,X597) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X595) = s(bool,X600) | s(bool,'T_0') = s(bool,X600)) ) | $spl0),
  inference(superposition,[],[f765,f11848])).
fof(f12357,plain,(
  ( ! [X573,X569,X571,X572,X570] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X569),s('type.list.list'(bool),X572))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X570),s('type.list.list'(bool),X571))) | s(bool,X570) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X569) = s(bool,X573) | s(bool,'T_0') = s(bool,X573)) ) | $spl0),
  inference(superposition,[],[f719,f11848])).
fof(f12355,plain,(
  ( ! [X565,X563,X564] : (~p(s(bool,happ(s(fun(bool,bool),X564),s(bool,X563)))) | p(s(bool,happ(s(fun(bool,bool),X564),s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X564,bool))))) | s(bool,X563) = s(bool,X565) | s(bool,'T_0') = s(bool,X565)) ) | $spl0),
  inference(superposition,[],[f717,f11848])).
fof(f12161,plain,(
  ( ! [X705,X702,X704,X706,X701,X703] : (s(bool,X702) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(X703,X704) != s(X703,X705) | s('type.pair.prod'(bool,X703),'const.pair.,_2'(s(bool,X701),s(X703,X705))) = s('type.pair.prod'(bool,X703),'const.pair.,_2'(s(bool,X702),s(X703,X704))) | s(bool,X701) = s(bool,X706) | s(bool,'T_0') = s(bool,X706)) ) | $spl0),
  inference(superposition,[],[f767,f11848])).
fof(f12142,plain,(
  ( ! [X613,X614] : (s(bool,X613) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X613) | s(bool,X614) = s(bool,'const.bool.BOUNDED_1'(s(bool,X613))) | s(bool,'T_0') = s(bool,X614)) ) | $spl0),
  inference(superposition,[],[f9657,f11848])).
fof(f11928,plain,(
  ( ! [X10,X8,X11,X9] : (s(bool,X8) = s(bool,X9) | s(bool,X10) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X9) = s(bool,X10) | s(bool,X8) = s(bool,X11) | s(bool,'T_0') = s(bool,X11)) ) | $spl0),
  inference(superposition,[],[f11848,f1649])).
fof(f11927,plain,(
  ( ! [X6,X4,X7,X5] : (s(bool,X4) = s(bool,X5) | s(bool,X6) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X5) = s(bool,X6) | s(bool,X7) = s(bool,'const.bool.BOUNDED_1'(s(bool,X7))) | s(bool,X4) = s(bool,X7)) ) | $spl0),
  inference(superposition,[],[f11848,f3313])).
fof(f11926,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,X0) = s(bool,X1) | s(bool,X2) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X1) = s(bool,X2) | s(bool,X3) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X0) = s(bool,X3)) ) | $spl0),
  inference(superposition,[],[f11848,f11848])).
fof(f11865,plain,(
  ( ! [X39,X40] : (s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X40) = s(bool,'const.bool.BOUNDED_1'(s(bool,X39))) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | $spl0),
  inference(superposition,[],[f11848,f9657])).
fof(f11721,plain,(
  ( ! [X0] : (~sP78('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f10888,f1318])).
fof(f11700,plain,(
  ( ! [X0] : (~sP73('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f10885,f1365])).
fof(f11697,plain,(
  ( ! [X0] : (~sP72('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f10882,f1260])).
fof(f11691,plain,(
  ( ! [X0] : (~sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f10879,f1261])).
fof(f11034,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1388,f1589,f10701,f1263])).
fof(f10686,plain,(
  ( ! [X0] : (sP72('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1386,f1588,f1383,f10662,f1263])).
fof(f10688,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1590,f1380,f1589,f10662,f1263])).
fof(f10690,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1590,f1588,f1589,f10662,f1263])).
fof(f10717,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1578,f10662,f1279])).
fof(f10719,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1578,f10662,f1279])).
fof(f10726,plain,(
  ( ! [X0] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1595,f10662,f1285])).
fof(f10732,plain,(
  ( ! [X0] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1595,f10662,f1285])).
fof(f10733,plain,(
  ( ! [X0,X1] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f10662,f1595,f10662,f1285])).
fof(f10857,plain,(
  ( ! [X0,X1] : (sP78('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1619,f10662,f1363])).
fof(f10859,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1604,f10662,f1364])).
fof(f10861,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1605,f10662,f1364])).
fof(f10879,plain,(
  ( ! [X0] : (~sP71('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f10662,f2544])).
fof(f10882,plain,(
  ( ! [X0] : (~sP70('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f10662,f2545])).
fof(f10885,plain,(
  ( ! [X0] : (~sP74('F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f10662,f2546])).
fof(f10886,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f10662,f2549])).
fof(f10887,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f10662,f2550])).
fof(f10888,plain,(
  ( ! [X0] : (~sP77('const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f10662,f2552])).
fof(f10891,plain,(
  ( ! [X0,X1] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f10662,f2555])).
fof(f10892,plain,(
  ( ! [X0] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f10662,f2556])).
fof(f9840,plain,(
  ( ! [X59,X60,X58] : (p(s(bool,happ(s(fun(X58,bool),X59),s(X58,X60)))) | ~p(s(bool,happ(s(fun(X58,bool),X59),s(X58,sK85('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X59,X58)))))) ) | $spl0),
  inference(subsumption_resolution,[],[f9825,f660])).
fof(f9825,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | p(s(bool,happ(s(fun(X58,bool),X59),s(X58,X60)))) | ~p(s(bool,happ(s(fun(X58,bool),X59),s(X58,sK85('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X59,X58)))))) ) | $spl0),
  inference(superposition,[],[f707,f1578])).
fof(f9702,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,happ(s(fun(X58,bool),X59),s(X58,sK84(X59,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X58))))) | p(s(bool,happ(s(fun(X58,bool),X59),s(X58,X60))))) ) | $spl0),
  inference(subsumption_resolution,[],[f9687,f660])).
fof(f9687,plain,(
  ( ! [X59,X60,X58] : (~p(s(bool,'T_0')) | ~p(s(bool,happ(s(fun(X58,bool),X59),s(X58,sK84(X59,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X58))))) | p(s(bool,happ(s(fun(X58,bool),X59),s(X58,X60))))) ) | $spl0),
  inference(superposition,[],[f706,f1578])).
fof(f9665,plain,(
  ( ! [X540,X541] : (s(bool,'T_0') = s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X540,bool)) | s(bool,X541) = s(bool,'const.bool.BOUNDED_1'(s(bool,X541))) | s(bool,X541) = s(bool,happ(s(fun(bool,bool),X540),s(bool,'T_0')))) ) | $spl0),
  inference(subsumption_resolution,[],[f9187,f660])).
fof(f9187,plain,(
  ( ! [X540,X541] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X540,bool)) | s(bool,X541) = s(bool,'const.bool.BOUNDED_1'(s(bool,X541))) | s(bool,X541) = s(bool,happ(s(fun(bool,bool),X540),s(bool,'T_0')))) ) | $spl0),
  inference(superposition,[],[f2689,f3313])).
fof(f8060,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,bool)) | s(bool,X1) = s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(subsumption_resolution,[],[f8051,f660])).
fof(f8051,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | s(bool,'T_0') = s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,bool)) | s(bool,X1) = s(bool,happ(s(fun(bool,bool),X0),s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X1)) ) | $spl0),
  inference(superposition,[],[f2689,f1649])).
fof(f8045,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(bool,bool),X1),s(bool,X0)))) | s(bool,'T_0') = s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1,bool)) | s(bool,X0) = s(bool,X2) | s(bool,'T_0') = s(bool,X2)) ) | $spl0),
  inference(superposition,[],[f2689,f1649])).
fof(f7876,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.pair.prod'(X46,bool),'const.pair.,_2'(s(X46,X47),s(bool,'T_0'))) != s('type.pair.prod'(X46,bool),'const.pair.,_2'(s(X46,X48),s(bool,X49))) | s(bool,X49) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(superposition,[],[f766,f1578])).
fof(f7774,plain,(
  ( ! [X47,X48,X46,X49] : (s('type.pair.prod'(bool,X46),'const.pair.,_2'(s(bool,'T_0'),s(X46,X47))) != s('type.pair.prod'(bool,X46),'const.pair.,_2'(s(bool,X48),s(X46,X49))) | s(bool,X48) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(superposition,[],[f765,f1578])).
fof(f7756,plain,(
  ( ! [X39,X38,X40] : (sP78(X38,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X39) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl0),
  inference(subsumption_resolution,[],[f7747,f660])).
fof(f7747,plain,(
  ( ! [X39,X38,X40] : (~p(s(bool,'T_0')) | sP78(X38,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X39) | s(bool,X38) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) ) | $spl0),
  inference(superposition,[],[f4448,f1578])).
fof(f7709,plain,(
  ( ! [X39,X38,X40] : (s('type.list.list'(bool),'const.list.CONS_2'(s(bool,'T_0'),s('type.list.list'(bool),X38))) != s('type.list.list'(bool),'const.list.CONS_2'(s(bool,X39),s('type.list.list'(bool),X40))) | s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(superposition,[],[f719,f1578])).
fof(f2950,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | p(s(bool,happ(s(fun(bool,bool),X4),s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X4,bool)))))) ) | $spl0),
  inference(superposition,[],[f717,f1578])).
fof(f2689,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | s(bool,'T_0') = s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X4,bool))) ) | $spl0),
  inference(forward_demodulation,[],[f2686,f1578])).
fof(f2686,plain,(
  ( ! [X4] : (~p(s(bool,happ(s(fun(bool,bool),X4),s(bool,'T_0')))) | s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) = s(bool,sK89('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X4,bool))) ) | $spl0),
  inference(superposition,[],[f716,f1578])).
fof(f5855,plain,(
  ( ! [X0] : (sP72('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1386,f1588,f1383,f664,f1263])).
fof(f5857,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1590,f1380,f1589,f664,f1263])).
fof(f5859,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1590,f1588,f1589,f664,f1263])).
fof(f5886,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1578,f664,f1279])).
fof(f5888,plain,(
  ( ! [X0] : (sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1578,f664,f1279])).
fof(f5895,plain,(
  ( ! [X0] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1595,f664,f1285])).
fof(f5901,plain,(
  ( ! [X0] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1595,f664,f1285])).
fof(f5902,plain,(
  ( ! [X0,X1] : (sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f664,f1595,f664,f1285])).
fof(f6023,plain,(
  ( ! [X0,X1] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1619,f664,f1363])).
fof(f6025,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1604,f664,f1364])).
fof(f6027,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1605,f664,f1364])).
fof(f6045,plain,(
  ( ! [X0] : (~sP71('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f664,f2544])).
fof(f6048,plain,(
  ( ! [X0] : (~sP70('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f664,f2545])).
fof(f6051,plain,(
  ( ! [X0] : (~sP74('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f664,f2546])).
fof(f6052,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f664,f2549])).
fof(f6053,plain,(
  ( ! [X0,X1] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f664,f2550])).
fof(f6054,plain,(
  ( ! [X0] : (~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f664,f2552])).
fof(f6057,plain,(
  ( ! [X0,X1] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f664,f2555])).
fof(f6058,plain,(
  ( ! [X0] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f664,f2556])).
fof(f4460,plain,(
  ( ! [X360,X359,X361] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X360,X359) | p(s(bool,X360)) | s(bool,X359) = s(bool,X361) | s(bool,'T_0') = s(bool,X361)) ) | $spl0),
  inference(subsumption_resolution,[],[f3555,f660])).
fof(f3555,plain,(
  ( ! [X360,X359,X361] : (~p(s(bool,'T_0')) | p(s(bool,X360)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X360,X359) | s(bool,X359) = s(bool,X361) | s(bool,'T_0') = s(bool,X361)) ) | $spl0),
  inference(superposition,[],[f2556,f1649])).
fof(f2966,plain,(
  ~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f660,f662,f2957,f1322])).
fof(f2965,plain,(
  ( ! [X6,X5] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X6,'const.bool.BOUNDED_1'(s(bool,X5))) | p(s(bool,X6))) ) | $spl0),
  inference(subsumption_resolution,[],[f2963,f660])).
fof(f2963,plain,(
  ( ! [X6,X5] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X6,'const.bool.BOUNDED_1'(s(bool,X5)))) ) | $spl0),
  inference(superposition,[],[f2556,f663])).
fof(f2964,plain,(
  ( ! [X4] : (p(s(bool,X4)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X4,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(subsumption_resolution,[],[f2962,f660])).
fof(f2962,plain,(
  ( ! [X4] : (~p(s(bool,'T_0')) | p(s(bool,X4)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X4,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(superposition,[],[f2556,f1578])).
fof(f2957,plain,(
  ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f660,f662,f2556])).
fof(f2941,plain,(
  sP78('F_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f662,f2553])).
fof(f2934,plain,(
  ~sP78('T_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f2926,f1318])).
fof(f2926,plain,(
  ~sP77('T_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f660,f2552])).
fof(f2916,plain,(
  ~sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f2906,f1301])).
fof(f2906,plain,(
  ~sP75('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f662,f662,f2548])).
fof(f2896,plain,(
  ~sP73('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f662,f2894,f1365])).
fof(f2894,plain,(
  ~sP74('F_0','T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f662,f2546])).
fof(f2884,plain,(
  ~sP72('T_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f2876,f1261])).
fof(f2876,plain,(
  ~sP71('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f660,f662,f2544])).
fof(f2850,plain,(
  ( ! [X0] : (~sP77('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f2840,f1540])).
fof(f2840,plain,(
  ( ! [X0] : (~sP78('const.bool.BOUNDED_1'(s(bool,X0)),'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f2565])).
fof(f2824,plain,(
  ( ! [X0] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f2813,f1318])).
fof(f2813,plain,(
  ( ! [X0] : (~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f2564])).
fof(f2794,plain,(
  ( ! [X0] : (~sP73('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f2789,f1365])).
fof(f2789,plain,(
  ( ! [X0] : (~sP74('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f2563])).
fof(f2773,plain,(
  ( ! [X0] : (~sP72('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f2762,f1260])).
fof(f2762,plain,(
  ( ! [X0] : (~sP70('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f2562])).
fof(f2749,plain,(
  ( ! [X0] : (~sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f2738,f1261])).
fof(f2738,plain,(
  ( ! [X0] : (~sP71('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X0)),'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f2561])).
fof(f2662,plain,(
  ~sP70('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f1592,f2424,f1380,f662,f1265])).
fof(f2671,plain,(
  sP72('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f1591,f1588,f1384,f662,f1265])).
fof(f2633,plain,(
  sP72('F_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f1592,f1382,f1385,f662,f1264])).
fof(f2640,plain,(
  sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f1590,f1381,f1384,f662,f1264])).
fof(f2598,plain,(
  ~sP70('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0','F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f1388,f2422,f1382,f660,f1263])).
fof(f2605,plain,(
  sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f1388,f1380,f1589,f660,f1263])).
fof(f2606,plain,(
  sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f1388,f1588,f1589,f660,f1263])).
fof(f2565,plain,(
  ( ! [X99,X100] : (~sP78('const.bool.BOUNDED_1'(s(bool,X100)),X99,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | p(s(bool,X99))) ) | $spl0),
  inference(subsumption_resolution,[],[f2498,f660])).
fof(f2498,plain,(
  ( ! [X99,X100] : (~p(s(bool,'T_0')) | p(s(bool,X99)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X100)),X99,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(superposition,[],[f2124,f1578])).
fof(f2564,plain,(
  ( ! [X92,X91] : (~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X91,'const.bool.BOUNDED_1'(s(bool,X92))) | p(s(bool,X91))) ) | $spl0),
  inference(subsumption_resolution,[],[f2493,f660])).
fof(f2493,plain,(
  ( ! [X92,X91] : (~p(s(bool,'T_0')) | p(s(bool,X91)) | ~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X91,'const.bool.BOUNDED_1'(s(bool,X92)))) ) | $spl0),
  inference(superposition,[],[f2082,f1578])).
fof(f2563,plain,(
  ( ! [X85,X86] : (~sP74(X85,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X86))) | p(s(bool,X85))) ) | $spl0),
  inference(subsumption_resolution,[],[f2490,f660])).
fof(f2490,plain,(
  ( ! [X85,X86] : (~p(s(bool,'T_0')) | p(s(bool,X85)) | ~sP74(X85,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X86)))) ) | $spl0),
  inference(superposition,[],[f1924,f1578])).
fof(f2562,plain,(
  ( ! [X83,X84] : (~sP70('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X84)),X83) | p(s(bool,X83))) ) | $spl0),
  inference(subsumption_resolution,[],[f2489,f660])).
fof(f2489,plain,(
  ( ! [X83,X84] : (~p(s(bool,'T_0')) | p(s(bool,X83)) | ~sP70('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X84)),X83)) ) | $spl0),
  inference(superposition,[],[f1860,f1578])).
fof(f2561,plain,(
  ( ! [X81,X82] : (~sP71('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X82)),X81) | p(s(bool,X81))) ) | $spl0),
  inference(subsumption_resolution,[],[f2488,f660])).
fof(f2488,plain,(
  ( ! [X81,X82] : (~p(s(bool,'T_0')) | p(s(bool,X81)) | ~sP71('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.bool.BOUNDED_1'(s(bool,X82)),X81)) ) | $spl0),
  inference(superposition,[],[f1846,f1578])).
fof(f2558,plain,(
  ( ! [X35,X36] : (~sP75('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X35,X36) | sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X35,X36)) ) | $spl0),
  inference(subsumption_resolution,[],[f2454,f660])).
fof(f2454,plain,(
  ( ! [X35,X36] : (~p(s(bool,'T_0')) | ~sP75('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X35,X36) | sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X35,X36)) ) | $spl0),
  inference(superposition,[],[f1364,f1578])).
fof(f2557,plain,(
  ( ! [X33,X34] : (~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X33,X34) | sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X33,X34)) ) | $spl0),
  inference(subsumption_resolution,[],[f2453,f660])).
fof(f2453,plain,(
  ( ! [X33,X34] : (~p(s(bool,'T_0')) | ~sP77('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X33,X34) | sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X33,X34)) ) | $spl0),
  inference(superposition,[],[f1363,f1578])).
fof(f2556,plain,(
  ( ! [X31,X32] : (~p(s(bool,X31)) | p(s(bool,X32)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X32,X31)) ) | $spl0),
  inference(subsumption_resolution,[],[f2452,f660])).
fof(f2452,plain,(
  ( ! [X31,X32] : (~p(s(bool,'T_0')) | ~p(s(bool,X31)) | p(s(bool,X32)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X32,X31)) ) | $spl0),
  inference(superposition,[],[f1330,f1578])).
fof(f2555,plain,(
  ( ! [X30,X29] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X29,X30) | ~p(s(bool,X29))) ) | $spl0),
  inference(subsumption_resolution,[],[f2451,f660])).
fof(f2451,plain,(
  ( ! [X30,X29] : (~p(s(bool,'T_0')) | ~p(s(bool,X29)) | sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X29,X30)) ) | $spl0),
  inference(superposition,[],[f1329,f1578])).
fof(f2554,plain,(
  ( ! [X28,X27] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X28,X27) | p(s(bool,X27))) ) | $spl0),
  inference(subsumption_resolution,[],[f2450,f660])).
fof(f2450,plain,(
  ( ! [X28,X27] : (~p(s(bool,'T_0')) | p(s(bool,X27)) | sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X28,X27)) ) | $spl0),
  inference(superposition,[],[f1328,f1578])).
fof(f2553,plain,(
  ( ! [X26,X25] : (sP78(X26,X25,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | p(s(bool,X25)) | p(s(bool,X26))) ) | $spl0),
  inference(subsumption_resolution,[],[f2449,f660])).
fof(f2449,plain,(
  ( ! [X26,X25] : (~p(s(bool,'T_0')) | p(s(bool,X25)) | sP78(X26,X25,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | p(s(bool,X26))) ) | $spl0),
  inference(superposition,[],[f1327,f1578])).
fof(f2552,plain,(
  ( ! [X24,X23] : (~sP77(X24,X23,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | ~p(s(bool,X24)) | p(s(bool,X23))) ) | $spl0),
  inference(subsumption_resolution,[],[f2448,f660])).
fof(f2448,plain,(
  ( ! [X24,X23] : (~p(s(bool,'T_0')) | p(s(bool,X23)) | ~p(s(bool,X24)) | ~sP77(X24,X23,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(superposition,[],[f1323,f1578])).
fof(f2551,plain,(
  ( ! [X21,X22] : (~sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X22,X21) | p(s(bool,X22)) | p(s(bool,X21))) ) | $spl0),
  inference(subsumption_resolution,[],[f2447,f660])).
fof(f2447,plain,(
  ( ! [X21,X22] : (~p(s(bool,'T_0')) | p(s(bool,X21)) | p(s(bool,X22)) | ~sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X22,X21)) ) | $spl0),
  inference(superposition,[],[f1313,f1578])).
fof(f2550,plain,(
  ( ! [X19,X20] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X19,X20) | ~p(s(bool,X19))) ) | $spl0),
  inference(subsumption_resolution,[],[f2446,f660])).
fof(f2446,plain,(
  ( ! [X19,X20] : (~p(s(bool,'T_0')) | ~p(s(bool,X19)) | sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X19,X20)) ) | $spl0),
  inference(superposition,[],[f1312,f1578])).
fof(f2549,plain,(
  ( ! [X17,X18] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X18,X17) | ~p(s(bool,X17))) ) | $spl0),
  inference(subsumption_resolution,[],[f2445,f660])).
fof(f2445,plain,(
  ( ! [X17,X18] : (~p(s(bool,'T_0')) | ~p(s(bool,X17)) | sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X18,X17)) ) | $spl0),
  inference(superposition,[],[f1311,f1578])).
fof(f2548,plain,(
  ( ! [X15,X16] : (~sP75('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X15,X16) | p(s(bool,X16)) | p(s(bool,X15))) ) | $spl0),
  inference(subsumption_resolution,[],[f2444,f660])).
fof(f2444,plain,(
  ( ! [X15,X16] : (~p(s(bool,'T_0')) | p(s(bool,X15)) | p(s(bool,X16)) | ~sP75('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X15,X16)) ) | $spl0),
  inference(superposition,[],[f1306,f1578])).
fof(f2547,plain,(
  ( ! [X14,X13] : (~sP75('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X13,X14) | p(s(bool,X13)) | sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X13,X14)) ) | $spl0),
  inference(subsumption_resolution,[],[f2443,f660])).
fof(f2443,plain,(
  ( ! [X14,X13] : (~p(s(bool,'T_0')) | ~sP75('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X13,X14) | p(s(bool,X13)) | sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X13,X14)) ) | $spl0),
  inference(superposition,[],[f1304,f1578])).
fof(f2546,plain,(
  ( ! [X12,X11] : (~sP74(X12,X11,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | p(s(bool,X12)) | ~p(s(bool,X11))) ) | $spl0),
  inference(subsumption_resolution,[],[f2442,f660])).
fof(f2442,plain,(
  ( ! [X12,X11] : (~p(s(bool,'T_0')) | ~p(s(bool,X11)) | p(s(bool,X12)) | ~sP74(X12,X11,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(superposition,[],[f1298,f1578])).
fof(f2545,plain,(
  ( ! [X10,X9] : (~sP70(X9,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X10) | p(s(bool,X10)) | ~p(s(bool,X9))) ) | $spl0),
  inference(subsumption_resolution,[],[f2441,f660])).
fof(f2441,plain,(
  ( ! [X10,X9] : (~p(s(bool,'T_0')) | ~p(s(bool,X9)) | p(s(bool,X10)) | ~sP70(X9,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X10)) ) | $spl0),
  inference(superposition,[],[f1270,f1578])).
fof(f2544,plain,(
  ( ! [X8,X7] : (~sP71(X7,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X8) | p(s(bool,X8)) | ~p(s(bool,X7))) ) | $spl0),
  inference(subsumption_resolution,[],[f2440,f660])).
fof(f2440,plain,(
  ( ! [X8,X7] : (~p(s(bool,'T_0')) | ~p(s(bool,X7)) | p(s(bool,X8)) | ~sP71(X7,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X8)) ) | $spl0),
  inference(superposition,[],[f1266,f1578])).
fof(f2543,plain,(
  ( ! [X6] : (sP1(X6,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | p(s(bool,X6))) ) | $spl0),
  inference(subsumption_resolution,[],[f2439,f660])).
fof(f2439,plain,(
  ( ! [X6] : (~p(s(bool,'T_0')) | p(s(bool,X6)) | sP1(X6,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(superposition,[],[f758,f1578])).
fof(f2542,plain,(
  ( ! [X5] : (sP1('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X5) | p(s(bool,X5))) ) | $spl0),
  inference(subsumption_resolution,[],[f2438,f660])).
fof(f2438,plain,(
  ( ! [X5] : (~p(s(bool,'T_0')) | p(s(bool,X5)) | sP1('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X5)) ) | $spl0),
  inference(superposition,[],[f755,f1578])).
fof(f2422,plain,(
  ~sP72('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1578,f1281])).
fof(f2423,plain,(
  sP72('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1578,f1279])).
fof(f2424,plain,(
  ~sP72('F_0','T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1578,f1281])).
fof(f2425,plain,(
  sP72('T_0','T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1578,f1279])).
fof(f1926,plain,(
  sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0','T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f660,f660,f1595,f1285])).
fof(f1579,plain,(
  s(bool,'F_0') != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f675])).
fof(f1580,plain,(
  ( ! [X0] : (sP0(X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f739])).
fof(f1581,plain,(
  ( ! [X0] : (sP0('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f740])).
fof(f1582,plain,(
  ~sP1('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0') | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1371,f754])).
fof(f1584,plain,(
  ~sP1('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1371,f754])).
fof(f1585,plain,(
  ~sP1('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1371,f754])).
fof(f1586,plain,(
  sP1('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0') | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1371,f755])).
fof(f1587,plain,(
  sP1('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1371,f758])).
fof(f1588,plain,(
  ( ! [X0,X1] : (sP71(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1267])).
fof(f1589,plain,(
  ( ! [X0,X1] : (sP70(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1271])).
fof(f1590,plain,(
  ( ! [X0,X1] : (sP69(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1275])).
fof(f1591,plain,(
  ( ! [X0,X1] : (sP69(X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1276])).
fof(f1592,plain,(
  ( ! [X0,X1] : (sP69('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1277])).
fof(f1593,plain,(
  ( ! [X0] : (~sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1371,f1283])).
fof(f1594,plain,(
  ( ! [X0] : (~sP74('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0',X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1371,f1284])).
fof(f1595,plain,(
  ( ! [X0,X1] : (sP73(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1290])).
fof(f1596,plain,(
  ( ! [X0] : (~sP76('F_0',X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1371,f1299])).
fof(f1600,plain,(
  ( ! [X0] : (~sP76('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1371,f1300])).
fof(f1604,plain,(
  ( ! [X0,X1] : (sP75(X0,X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1307])).
fof(f1605,plain,(
  ( ! [X0,X1] : (sP75(X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1308])).
fof(f1606,plain,(
  ( ! [X0] : (sP76('T_0',X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1371,f1311])).
fof(f1610,plain,(
  ( ! [X0] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1371,f1311])).
fof(f1611,plain,(
  ( ! [X0] : (sP76('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1371,f1312])).
fof(f1615,plain,(
  ( ! [X0] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1371,f1312])).
fof(f1616,plain,(
  ( ! [X0] : (~sP78('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f662,f1371,f1317])).
fof(f1619,plain,(
  ( ! [X0,X1] : (sP77(X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1325])).
fof(f1621,plain,(
  ( ! [X0] : (sP78('T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f660,f1371,f1329])).
fof(f1625,plain,(
  ( ! [X0] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1371,f1329])).
fof(f1626,plain,(
  ( ! [X0] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,'F_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1395,f1371,f1363])).
fof(f1627,plain,(
  ( ! [X0] : (sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0',X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1396,f1371,f1363])).
fof(f1628,plain,(
  ( ! [X0] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0,'T_0')) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1392,f1371,f1364])).
fof(f1629,plain,(
  ( ! [X0] : (sP76('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0',X0)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1393,f1371,f1364])).
fof(f1630,plain,(
  ( ! [X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),X1,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1477])).
fof(f1631,plain,(
  ( ! [X0,X1] : (sP76('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1488])).
fof(f1632,plain,(
  ( ! [X0,X1] : (sP78('const.bool.BOUNDED_1'(s(bool,X0)),'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1)) ) | $spl0),
  inference(unit_resulting_resolution,[],[f1371,f1522])).
fof(f13895,plain,(
  ( ! [X546,X547,X548] : (s(bool,X548) = s(bool,'const.bool.BOUNDED_1'(s(bool,X548))) | s(bool,'F_0') = s(bool,X546) | s(bool,X546) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X547)) ) | ($spl0 | $spl76)),
  inference(subsumption_resolution,[],[f12551,f3313])).
fof(f12551,plain,(
  ( ! [X546,X547,X548] : (s(bool,X547) != s(bool,X548) | s(bool,X548) = s(bool,'const.bool.BOUNDED_1'(s(bool,X548))) | s(bool,'F_0') = s(bool,X546) | s(bool,X546) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X547)) ) | ($spl0 | $spl76)),
  inference(superposition,[],[f10650,f11848])).
fof(f13894,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl72)),
  inference(condensation,[],[f13893])).
fof(f13893,plain,(
  ( ! [X545,X543,X544] : (s(bool,'T_0') = s(bool,X545) | s(bool,'F_0') = s(bool,X543) | s(bool,X543) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X544)) ) | ($spl0 | $spl72)),
  inference(subsumption_resolution,[],[f12550,f1649])).
fof(f12550,plain,(
  ( ! [X545,X543,X544] : (s(bool,X544) != s(bool,X545) | s(bool,'T_0') = s(bool,X545) | s(bool,'F_0') = s(bool,X543) | s(bool,X543) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X544)) ) | ($spl0 | $spl72)),
  inference(superposition,[],[f10599,f11848])).
fof(f13888,plain,(
  ( ! [X530,X531] : (s(bool,X531) = s(bool,'const.bool.BOUNDED_1'(s(bool,X531))) | s(bool,'F_0') = s(bool,X530) | s(bool,X530) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(subsumption_resolution,[],[f12545,f9546])).
fof(f12545,plain,(
  ( ! [X530,X531] : (s(bool,X531) = s(bool,'const.bool.BOUNDED_1'(s(bool,X531))) | s(bool,'F_0') = s(bool,X530) | s(bool,X530) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X531)) ) | $spl0),
  inference(superposition,[],[f9657,f11848])).
fof(f13887,plain,(
  ( ! [X528,X529,X527] : (s(bool,X529) = s(bool,'const.bool.BOUNDED_1'(s(bool,X529))) | s(bool,X527) = s(bool,X529) | s(bool,X527) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X528)) ) | $spl0),
  inference(subsumption_resolution,[],[f12544,f665])).
fof(f12544,plain,(
  ( ! [X528,X529,X527] : (s(bool,'F_0') != s(bool,X528) | s(bool,X529) = s(bool,'const.bool.BOUNDED_1'(s(bool,X529))) | s(bool,X527) = s(bool,X529) | s(bool,X527) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X528)) ) | $spl0),
  inference(superposition,[],[f9594,f11848])).
fof(f13532,plain,(
  ( ! [X445,X443,X444] : (s(bool,'T_0') = s(bool,X444) | s(bool,X445) = s(bool,'const.bool.BOUNDED_1'(s(bool,X445))) | s(bool,X443) = s(bool,X445) | s(bool,X443) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f12519])).
fof(f12519,plain,(
  ( ! [X445,X443,X444] : (s(bool,'T_0') = s(bool,X444) | s(bool,X445) = s(bool,'const.bool.BOUNDED_1'(s(bool,X445))) | s(bool,X443) = s(bool,X445) | s(bool,X443) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X444)) ) | $spl0),
  inference(superposition,[],[f3313,f11848])).
fof(f13796,plain,(
  ( ! [X613,X614] : (s(bool,'T_0') = s(bool,X614) | s(bool,X613) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X613)) ) | $spl0),
  inference(global_subsumption,[],[f659,f658,f660,f663,f665,f674,f673,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f783,f804,f824,f823,f822,f821,f840,f835,f834,f833,f832,f850,f845,f844,f843,f842,f853,f852,f857,f856,f861,f860,f866,f865,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f890,f889,f894,f893,f898,f897,f903,f902,f909,f908,f907,f917,f916,f915,f914,f934,f929,f928,f927,f926,f944,f939,f938,f937,f936,f947,f946,f951,f950,f955,f954,f960,f959,f966,f965,f964,f980,f979,f978,f977,f996,f991,f990,f989,f988,f1006,f1001,f1000,f999,f998,f1009,f1008,f1013,f1012,f1017,f1016,f1022,f1021,f1042,f1037,f1036,f1035,f1034,f1049,f1048,f1047,f1046,f1066,f1061,f1060,f1059,f1058,f1076,f1071,f1070,f1069,f1068,f1079,f1078,f1083,f1082,f1087,f1086,f1092,f1091,f1098,f1097,f1096,f1117,f1112,f1111,f1110,f1109,f1124,f1123,f1122,f1121,f1140,f1135,f1134,f1133,f1132,f1150,f1145,f1144,f1143,f1142,f1153,f1152,f1157,f1156,f1161,f1160,f1166,f1165,f1186,f1181,f1180,f1179,f1178,f1193,f1192,f1191,f1190,f1210,f1205,f1204,f1203,f1202,f1220,f1215,f1214,f1213,f1212,f1223,f1222,f1227,f1226,f1231,f1230,f1236,f1235,f1242,f1241,f1240,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1371,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1632,f1631,f1630,f1629,f1628,f1627,f1626,f1625,f1621,f1619,f1616,f1615,f1611,f1610,f1606,f1605,f1604,f1600,f1596,f1595,f1594,f1593,f1592,f1591,f1590,f1589,f1588,f1587,f1586,f1585,f1584,f1582,f1581,f1580,f1579,f1578,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1926,f1964,f1977,f1983,f1987,f2018,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2425,f2424,f2423,f2422,f2542,f2543,f2544,f2545,f2546,f2547,f2548,f2549,f2550,f2551,f2552,f2553,f2554,f2555,f2556,f2557,f2558,f2561,f2562,f2563,f2564,f2565,f2606,f2605,f2603,f2599,f2598,f2640,f2639,f2633,f2671,f2662,f2716,f2738,f2749,f2762,f2773,f2789,f2794,f2813,f2824,f2840,f2850,f2876,f2884,f2894,f2896,f2906,f2916,f2926,f2934,f2941,f2957,f2964,f2965,f2966,f3005,f3071,f3074,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f4429,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4460,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4515,f1114,f1113,f874,f1030,f1167,f1162,f1023,f1018,f867,f862,f1116,f1115,f1174,f1120,f1119,f1118,f815,f805,f793,f790,f1041,f1040,f910,f895,f891,f737,f736,f4464,f1105,f1045,f1044,f911,f896,f892,f813,f810,f1185,f1184,f1039,f1038,f4463,f1043,f973,f913,f912,f1238,f1233,f1094,f1089,f962,f957,f905,f900,f802,f798,f781,f778,f877,f1147,f1146,f1137,f1136,f1125,f1003,f1002,f993,f992,f981,f847,f846,f837,f836,f825,f1131,f1130,f1129,f1128,f1127,f1126,f987,f986,f985,f984,f983,f982,f870,f831,f830,f829,f828,f827,f826,f976,f1217,f1216,f1209,f1208,f1194,f1073,f1072,f1065,f1064,f1050,f941,f940,f933,f932,f918,f814,f811,f774,f772,f792,f799,f779,f803,f782,f807,f795,f785,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f969,f925,f924,f923,f922,f921,f920,f919,f768,f1176,f1177,f1175,f1107,f1106,f1108,f1032,f1031,f1033,f975,f974,f876,f875,f872,f873,f871,f1158,f1154,f1149,f1148,f1014,f1010,f1005,f1004,f858,f854,f849,f848,f1159,f1155,f1151,f1029,f1028,f1027,f1026,f1015,f1011,f1007,f859,f855,f851,f1168,f1163,f1139,f1138,f1024,f1019,f995,f994,f868,f863,f839,f838,f1173,f1172,f1171,f1170,f1169,f1164,f1141,f1025,f1020,f997,f869,f864,f841,f1243,f1237,f1232,f1228,f1224,f1219,f1218,f1207,f1206,f1099,f1093,f1088,f1084,f1080,f1075,f1074,f1063,f1062,f971,f972,f970,f967,f961,f956,f952,f948,f943,f942,f931,f930,f816,f809,f806,f801,f797,f794,f791,f784,f780,f777,f775,f771,f817,f776,f812,f773,f818,f789,f788,f787,f786,f1244,f1229,f1225,f1221,f1104,f1103,f1102,f1101,f1100,f1085,f1081,f1077,f968,f953,f949,f945,f819,f769,f1239,f1234,f1211,f1095,f1090,f1067,f963,f958,f935,f715,f714,f712,f709,f707,f706,f704,f700,f699,f808,f800,f796,f1183,f1182,f904,f899,f664,f1362,f1361,f1352,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1189,f1188,f1187,f906,f901,f820,f770,f2041,f2040,f2027,f2026,f676,f675,f662,f6058,f6057,f6054,f6053,f6052,f6051,f6048,f6045,f6041,f6038,f6037,f6034,f6031,f6030,f6029,f6028,f6027,f6026,f6025,f6024,f6023,f6022,f6021,f6020,f6019,f6015,f6014,f6006,f6005,f6001,f6000,f5995,f5974,f5973,f5972,f5966,f5960,f5959,f5954,f5943,f5936,f5934,f5933,f5929,f5928,f5927,f5926,f5923,f5921,f5916,f5915,f5911,f5910,f5905,f5902,f5901,f5895,f5892,f5891,f5890,f5889,f5888,f5887,f5886,f5885,f5884,f5883,f5882,f5881,f5877,f5876,f5870,f5866,f5865,f5859,f5857,f5855,f5853,f5851,f5850,f5847,f5846,f5845,f5844,f5842,f5841,f5840,f5839,f5838,f6213,f6259,f6262,f6263,f6264,f2690,f2951,f2689,f2950,f2949,f2685,f3441,f3442,f3582,f3583,f3165,f3166,f2948,f2684,f4462,f4461,f717,f716,f7593,f7595,f7596,f7597,f7700,f7699,f7698,f7701,f7703,f7705,f7708,f7709,f7710,f7749,f7752,f7756,f7757,f7765,f7764,f7763,f7766,f7768,f7770,f7773,f7774,f7775,f7857,f7855,f7853,f7868,f7870,f7872,f7875,f7876,f7877,f7948,f7968,f8031,f8045,f8060,f8066,f8065,f8064,f8086,f8085,f8084,f8132,f8131,f8130,f8179,f8181,f8183,f8189,f9434,f9419,f9407,f9402,f8251,f8252,f9393,f9392,f9465,f8422,f8623,f8626,f8629,f9372,f9546,f9551,f8847,f8848,f8849,f8850,f9594,f9657,f9662,f9665,f9194,f9197,f9200,f9215,f9229,f9690,f9696,f9699,f9701,f9702,f9703,f9704,f9747,f9721,f9722,f9762,f9828,f9834,f9837,f9839,f9840,f9841,f9842,f10091,f10092,f10106,f10032,f10172,f10173,f10174,f10191,f10214,f10234,f10235,f10236,f10237,f10254,f10268,f10269,f10270,f10287,f10358,f10394,f10395,f10396,f10421,f10405,f10423,f10426,f10452,f10453,f10454,f10515,f10537,f10546,f10547,f10662,f10921,f10916,f10911,f10892,f10891,f10888,f10887,f10886,f10885,f10882,f10879,f10875,f10872,f10871,f10868,f10865,f10864,f10863,f10862,f10861,f10860,f10859,f10858,f10857,f10856,f10855,f10854,f10853,f10847,f10839,f10838,f10833,f10832,f10805,f10804,f10803,f10797,f10791,f10790,f10785,f10774,f10767,f10765,f10764,f10760,f10759,f10758,f10757,f10754,f10752,f10747,f10746,f10742,f10741,f10736,f10733,f10732,f10726,f10723,f10722,f10721,f10720,f10719,f10718,f10717,f10716,f10715,f10714,f10713,f10712,f10708,f10707,f10701,f10697,f10696,f10690,f10688,f10686,f10684,f10682,f10681,f10678,f10677,f10676,f10675,f10673,f10672,f10671,f10670,f10669,f10664,f11024,f11034,f11031,f11058,f11057,f11114,f11116,f11117,f11118,f11121,f11123,f11124,f11125,f11126,f11129,f11131,f11138,f11135,f11155,f11165,f11182,f11248,f11249,f11391,f11392,f11393,f11394,f11395,f11424,f11458,f11459,f11579,f11580,f11581,f11584,f11586,f11587,f11588,f11590,f11626,f11611,f11691,f11697,f11700,f11711,f11721,f11724,f11848,f11851,f11852,f11865,f13720,f13719,f13708,f13703,f13701,f11926,f11927,f11928,f13692,f13691,f13690,f12142])).
fof(f13795,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl84),
  inference(cnf_transformation,[],[f13795_D])).
fof(f13795_D,plain,(
  ( ! [X1] : (s(bool,X1) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) <=> ~$spl84),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl84])])).
fof(f13794,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | s(bool,X1) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) | ($spl0 | $spl76)),
  inference(condensation,[],[f13793])).
fof(f13793,plain,(
  ( ! [X546,X547,X548] : (s(bool,X547) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X547) = s(bool,'const.bool.BOUNDED_1'(s(bool,X547))) | s(bool,X546) = s(bool,X548) | s(bool,'T_0') = s(bool,X548)) ) | ($spl0 | $spl76)),
  inference(subsumption_resolution,[],[f12124,f4431])).
fof(f12124,plain,(
  ( ! [X546,X547,X548] : (s(bool,X547) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X547) = s(bool,'const.bool.BOUNDED_1'(s(bool,X547))) | s(bool,'F_0') = s(bool,X546) | s(bool,X546) = s(bool,X548) | s(bool,'T_0') = s(bool,X548)) ) | ($spl0 | $spl76)),
  inference(superposition,[],[f10650,f11848])).
fof(f13690,plain,(
  ( ! [X31,X32] : (s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X32)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f11948])).
fof(f11948,plain,(
  ( ! [X31,X32] : (s(bool,'T_0') = s(bool,X31) | s(bool,X32) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'F_0') = s(bool,X32) | s(bool,'T_0') = s(bool,X31)) ) | $spl0),
  inference(superposition,[],[f11848,f665])).
fof(f13752,plain,(
  ( ! [X28,X26] : (s(bool,X26) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X26) = s(bool,X28) | s(bool,X28) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl82),
  inference(cnf_transformation,[],[f13752_D])).
fof(f13752_D,plain,(
  ( ! [X28,X26] : (s(bool,X26) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X26) = s(bool,X28) | s(bool,X28) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) <=> ~$spl82),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl82])])).
fof(f13691,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X23) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X21) = s(bool,X23) | s(bool,X21) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f11946])).
fof(f11946,plain,(
  ( ! [X23,X21,X22] : (s(bool,'T_0') = s(bool,X22) | s(bool,X23) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X21) = s(bool,X23) | s(bool,X21) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X22)) ) | $spl0),
  inference(superposition,[],[f11848,f11848])).
fof(f13692,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X11) = s(bool,X13) | s(bool,X11) = s(bool,'const.bool.BOUNDED_1'(s(bool,X11)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f11943])).
fof(f11943,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X11) = s(bool,X13) | s(bool,X11) = s(bool,'const.bool.BOUNDED_1'(s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) ) | $spl0),
  inference(superposition,[],[f11848,f3313])).
fof(f13701,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,X34) | s(bool,X34) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f11915])).
fof(f11915,plain,(
  ( ! [X33,X34,X32] : (s(bool,X33) = s(bool,X34) | s(bool,X34) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X32) | s(bool,X33) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X32)) ) | $spl0),
  inference(superposition,[],[f11848,f11848])).
fof(f13703,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) = s(bool,X22) | s(bool,X22) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21)))) ) | $spl0),
  inference(duplicate_literal_removal,[],[f11911])).
fof(f11911,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) = s(bool,X22) | s(bool,X22) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21))) | s(bool,'T_0') = s(bool,X20)) ) | $spl0),
  inference(superposition,[],[f11848,f3313])).
fof(f13708,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f11904])).
fof(f11904,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) ) | $spl0),
  inference(superposition,[],[f11848,f665])).
fof(f13719,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X28) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X26) = s(bool,X28)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f11891])).
fof(f11891,plain,(
  ( ! [X28,X26,X27] : (s(bool,'T_0') = s(bool,X27) | s(bool,X26) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X27) | s(bool,X28) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X26) = s(bool,X28)) ) | $spl0),
  inference(superposition,[],[f11848,f11848])).
fof(f13720,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16)) ) | $spl0),
  inference(duplicate_literal_removal,[],[f11887])).
fof(f11887,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16)) ) | $spl0),
  inference(superposition,[],[f11848,f3313])).
fof(f13744,plain,(
  ( ! [X39,X40] : (s(bool,X39) = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | s(bool,'T_0') = s(bool,X40) | s(bool,'F_0') = s(bool,X39)) ) | ($spl0 | $spl72)),
  inference(global_subsumption,[],[f659,f658,f660,f663,f665,f674,f673,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f783,f804,f824,f823,f822,f821,f840,f835,f834,f833,f832,f850,f845,f844,f843,f842,f853,f852,f857,f856,f861,f860,f866,f865,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f890,f889,f894,f893,f898,f897,f903,f902,f909,f908,f907,f917,f916,f915,f914,f934,f929,f928,f927,f926,f944,f939,f938,f937,f936,f947,f946,f951,f950,f955,f954,f960,f959,f966,f965,f964,f980,f979,f978,f977,f996,f991,f990,f989,f988,f1006,f1001,f1000,f999,f998,f1009,f1008,f1013,f1012,f1017,f1016,f1022,f1021,f1042,f1037,f1036,f1035,f1034,f1049,f1048,f1047,f1046,f1066,f1061,f1060,f1059,f1058,f1076,f1071,f1070,f1069,f1068,f1079,f1078,f1083,f1082,f1087,f1086,f1092,f1091,f1098,f1097,f1096,f1117,f1112,f1111,f1110,f1109,f1124,f1123,f1122,f1121,f1140,f1135,f1134,f1133,f1132,f1150,f1145,f1144,f1143,f1142,f1153,f1152,f1157,f1156,f1161,f1160,f1166,f1165,f1186,f1181,f1180,f1179,f1178,f1193,f1192,f1191,f1190,f1210,f1205,f1204,f1203,f1202,f1220,f1215,f1214,f1213,f1212,f1223,f1222,f1227,f1226,f1231,f1230,f1236,f1235,f1242,f1241,f1240,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1371,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1632,f1631,f1630,f1629,f1628,f1627,f1626,f1625,f1621,f1619,f1616,f1615,f1611,f1610,f1606,f1605,f1604,f1600,f1596,f1595,f1594,f1593,f1592,f1591,f1590,f1589,f1588,f1587,f1586,f1585,f1584,f1582,f1581,f1580,f1579,f1578,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1926,f1964,f1977,f1983,f1987,f2018,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2425,f2424,f2423,f2422,f2542,f2543,f2544,f2545,f2546,f2547,f2548,f2549,f2550,f2551,f2552,f2553,f2554,f2555,f2556,f2557,f2558,f2561,f2562,f2563,f2564,f2565,f2606,f2605,f2603,f2599,f2598,f2640,f2639,f2633,f2671,f2662,f2716,f2738,f2749,f2762,f2773,f2789,f2794,f2813,f2824,f2840,f2850,f2876,f2884,f2894,f2896,f2906,f2916,f2926,f2934,f2941,f2957,f2964,f2965,f2966,f3005,f3071,f3074,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f4429,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4460,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4515,f1114,f1113,f874,f1030,f1167,f1162,f1023,f1018,f867,f862,f1116,f1115,f1174,f1120,f1119,f1118,f815,f805,f793,f790,f1041,f1040,f910,f895,f891,f737,f736,f4464,f1105,f1045,f1044,f911,f896,f892,f813,f810,f1185,f1184,f1039,f1038,f4463,f1043,f973,f913,f912,f1238,f1233,f1094,f1089,f962,f957,f905,f900,f802,f798,f781,f778,f877,f1147,f1146,f1137,f1136,f1125,f1003,f1002,f993,f992,f981,f847,f846,f837,f836,f825,f1131,f1130,f1129,f1128,f1127,f1126,f987,f986,f985,f984,f983,f982,f870,f831,f830,f829,f828,f827,f826,f976,f1217,f1216,f1209,f1208,f1194,f1073,f1072,f1065,f1064,f1050,f941,f940,f933,f932,f918,f814,f811,f774,f772,f792,f799,f779,f803,f782,f807,f795,f785,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f969,f925,f924,f923,f922,f921,f920,f919,f768,f1176,f1177,f1175,f1107,f1106,f1108,f1032,f1031,f1033,f975,f974,f876,f875,f872,f873,f871,f1158,f1154,f1149,f1148,f1014,f1010,f1005,f1004,f858,f854,f849,f848,f1159,f1155,f1151,f1029,f1028,f1027,f1026,f1015,f1011,f1007,f859,f855,f851,f1168,f1163,f1139,f1138,f1024,f1019,f995,f994,f868,f863,f839,f838,f1173,f1172,f1171,f1170,f1169,f1164,f1141,f1025,f1020,f997,f869,f864,f841,f1243,f1237,f1232,f1228,f1224,f1219,f1218,f1207,f1206,f1099,f1093,f1088,f1084,f1080,f1075,f1074,f1063,f1062,f971,f972,f970,f967,f961,f956,f952,f948,f943,f942,f931,f930,f816,f809,f806,f801,f797,f794,f791,f784,f780,f777,f775,f771,f817,f776,f812,f773,f818,f789,f788,f787,f786,f1244,f1229,f1225,f1221,f1104,f1103,f1102,f1101,f1100,f1085,f1081,f1077,f968,f953,f949,f945,f819,f769,f1239,f1234,f1211,f1095,f1090,f1067,f963,f958,f935,f715,f714,f712,f709,f707,f706,f704,f700,f699,f808,f800,f796,f1183,f1182,f904,f899,f664,f1362,f1361,f1352,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1189,f1188,f1187,f906,f901,f820,f770,f2041,f2040,f2027,f2026,f676,f675,f662,f6058,f6057,f6054,f6053,f6052,f6051,f6048,f6045,f6041,f6038,f6037,f6034,f6031,f6030,f6029,f6028,f6027,f6026,f6025,f6024,f6023,f6022,f6021,f6020,f6019,f6015,f6014,f6006,f6005,f6001,f6000,f5995,f5974,f5973,f5972,f5966,f5960,f5959,f5954,f5943,f5936,f5934,f5933,f5929,f5928,f5927,f5926,f5923,f5921,f5916,f5915,f5911,f5910,f5905,f5902,f5901,f5895,f5892,f5891,f5890,f5889,f5888,f5887,f5886,f5885,f5884,f5883,f5882,f5881,f5877,f5876,f5870,f5866,f5865,f5859,f5857,f5855,f5853,f5851,f5850,f5847,f5846,f5845,f5844,f5842,f5841,f5840,f5839,f5838,f6213,f6259,f6262,f6263,f6264,f2690,f2951,f2689,f2950,f2949,f2685,f3441,f3442,f3582,f3583,f3165,f3166,f2948,f2684,f4462,f4461,f717,f716,f7593,f7595,f7596,f7597,f7700,f7699,f7698,f7701,f7703,f7705,f7708,f7709,f7710,f7749,f7752,f7756,f7757,f7765,f7764,f7763,f7766,f7768,f7770,f7773,f7774,f7775,f7857,f7855,f7853,f7868,f7870,f7872,f7875,f7876,f7877,f7948,f7968,f8031,f8045,f8060,f8066,f8065,f8064,f8086,f8085,f8084,f8132,f8131,f8130,f8179,f8181,f8183,f8189,f9434,f9419,f9407,f9402,f8251,f8252,f9393,f9392,f9465,f8422,f8623,f8626,f8629,f9372,f9546,f9551,f8847,f8848,f8849,f8850,f9594,f9657,f9662,f9665,f9194,f9197,f9200,f9215,f9229,f9690,f9696,f9699,f9701,f9702,f9703,f9704,f9747,f9721,f9722,f9762,f9828,f9834,f9837,f9839,f9840,f9841,f9842,f10091,f10092,f10106,f10032,f10172,f10173,f10174,f10191,f10214,f10234,f10235,f10236,f10237,f10254,f10268,f10269,f10270,f10287,f10358,f10394,f10395,f10396,f10421,f10405,f10423,f10426,f10452,f10453,f10454,f10515,f10516,f10537,f10546,f10547,f10591,f10593,f10599,f10644,f10662,f10921,f10916,f10911,f10892,f10891,f10888,f10887,f10886,f10885,f10882,f10879,f10875,f10872,f10871,f10868,f10865,f10864,f10863,f10862,f10861,f10860,f10859,f10858,f10857,f10856,f10855,f10854,f10853,f10847,f10839,f10838,f10833,f10832,f10805,f10804,f10803,f10797,f10791,f10790,f10785,f10774,f10767,f10765,f10764,f10760,f10759,f10758,f10757,f10754,f10752,f10747,f10746,f10742,f10741,f10736,f10733,f10732,f10726,f10723,f10722,f10721,f10720,f10719,f10718,f10717,f10716,f10715,f10714,f10713,f10712,f10708,f10707,f10701,f10697,f10696,f10690,f10688,f10686,f10684,f10682,f10681,f10678,f10677,f10676,f10675,f10673,f10672,f10671,f10670,f10669,f10664,f11024,f11034,f11031,f11058,f11057,f11114,f11116,f11117,f11118,f11121,f11123,f11124,f11125,f11126,f11129,f11131,f11138,f11135,f11155,f11165,f11182,f11248,f11249,f11391,f11392,f11393,f11394,f11395,f11424,f11458,f11459,f11579,f11580,f11581,f11584,f11586,f11587,f11588,f11590,f11626,f11611,f11691,f11697,f11700,f11711,f11721,f11724,f11848,f11851,f11852,f11865])).
fof(f10650,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21))) | s(bool,'F_0') = s(bool,X22)) ) | $spl76),
  inference(cnf_transformation,[],[f10650_D])).
fof(f10650_D,plain,(
  ( ! [X21,X22] : (s(bool,X21) != s(bool,X22) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21))) | s(bool,'F_0') = s(bool,X22)) ) <=> ~$spl76),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl76])])).
fof(f10644,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X22) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21)))) ) | $spl72),
  inference(duplicate_literal_removal,[],[f10618])).
fof(f10618,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) != s(bool,X22) | s(bool,'T_0') = s(bool,X20) | s(bool,'F_0') = s(bool,X22) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21))) | s(bool,'T_0') = s(bool,X20)) ) | $spl72),
  inference(superposition,[],[f10599,f3313])).
fof(f10592,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X7)) ) | $spl74),
  inference(cnf_transformation,[],[f10592_D])).
fof(f10592_D,plain,(
  ( ! [X6,X7] : (s(bool,X6) != s(bool,X7) | s(bool,'T_0') = s(bool,X6) | s(bool,'F_0') = s(bool,X7)) ) <=> ~$spl74),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl74])])).
fof(f10593,plain,(
  ( ! [X10,X8,X9] : (s(bool,X9) != s(bool,X10) | s(bool,'F_0') = s(bool,X10) | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X9)) ) | $spl72),
  inference(subsumption_resolution,[],[f10571,f673])).
fof(f10571,plain,(
  ( ! [X10,X8,X9] : (s(bool,X9) != s(bool,X10) | s(bool,'F_0') = s(bool,X10) | p(s(bool,X8)) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) ) | $spl72),
  inference(superposition,[],[f10516,f1649])).
fof(f10591,plain,(
  ( ! [X6,X7,X5] : (s(bool,X6) != s(bool,X7) | s(bool,'F_0') = s(bool,X7) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6)) ) | $spl72),
  inference(subsumption_resolution,[],[f10570,f673])).
fof(f10570,plain,(
  ( ! [X6,X7,X5] : (s(bool,X6) != s(bool,X7) | s(bool,'F_0') = s(bool,X7) | p(s(bool,X5)) | s(bool,'T_0') = s(bool,X6) | s(bool,'T_0') = s(bool,X5)) ) | $spl72),
  inference(superposition,[],[f10516,f1649])).
fof(f10516,plain,(
  ( ! [X48,X49] : (s(bool,X48) != s(bool,X49) | s(bool,'F_0') = s(bool,X48) | p(s(bool,X49))) ) | $spl72),
  inference(cnf_transformation,[],[f10516_D])).
fof(f10516_D,plain,(
  ( ! [X48,X49] : (s(bool,X48) != s(bool,X49) | s(bool,'F_0') = s(bool,X48) | p(s(bool,X49))) ) <=> ~$spl72),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl72])])).
fof(f10515,plain,(
  ( ! [X50,X48,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X48) != s(bool,X49) | p(s(bool,X49)) | s(bool,'F_0') = s(bool,X48)) )),
  inference(duplicate_literal_removal,[],[f10514])).
fof(f10514,plain,(
  ( ! [X50,X48,X49] : (s(bool,'T_0') = s(bool,X50) | s(bool,X48) != s(bool,X49) | p(s(bool,X49)) | s(bool,'T_0') = s(bool,X50) | s(bool,'F_0') = s(bool,X48)) )),
  inference(forward_demodulation,[],[f10472,f663])).
fof(f10472,plain,(
  ( ! [X50,X48,X49] : (s(bool,X48) != s(bool,X49) | p(s(bool,X49)) | s(bool,X50) = s(bool,'const.bool.BOUNDED_1'(s(bool,X48))) | s(bool,'T_0') = s(bool,X50) | s(bool,'F_0') = s(bool,X48)) )),
  inference(superposition,[],[f3311,f9657])).
fof(f9835,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK85('T_0',X2,X1)))))) ) | $spl70),
  inference(cnf_transformation,[],[f9835_D])).
fof(f9835_D,plain,(
  ( ! [X2,X3,X1] : (p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK85('T_0',X2,X1)))))) ) <=> ~$spl70),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl70])])).
fof(f9839,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK85('T_0',X2,X1)))))) )),
  inference(condensation,[],[f9838])).
fof(f9838,plain,(
  ( ! [X52,X50,X53,X51,X49] : (p(s(bool,happ(s(fun(X50,bool),X51),s(X50,X52)))) | ~p(s(bool,happ(s(fun(X50,bool),X51),s(X50,sK85('T_0',X51,X50))))) | s(bool,X49) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(subsumption_resolution,[],[f9823,f1758])).
fof(f9823,plain,(
  ( ! [X52,X50,X53,X51,X49] : (~p(s(bool,X49)) | p(s(bool,happ(s(fun(X50,bool),X51),s(X50,X52)))) | ~p(s(bool,happ(s(fun(X50,bool),X51),s(X50,sK85('T_0',X51,X50))))) | s(bool,X49) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f707,f1649])).
fof(f9837,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK85('T_0',X2,X1)))))) )),
  inference(condensation,[],[f9836])).
fof(f9836,plain,(
  ( ! [X47,X45,X48,X46,X44] : (p(s(bool,happ(s(fun(X45,bool),X46),s(X45,X47)))) | ~p(s(bool,happ(s(fun(X45,bool),X46),s(X45,sK85('T_0',X46,X45))))) | s(bool,X44) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f9822,f1758])).
fof(f9822,plain,(
  ( ! [X47,X45,X48,X46,X44] : (~p(s(bool,X44)) | p(s(bool,happ(s(fun(X45,bool),X46),s(X45,X47)))) | ~p(s(bool,happ(s(fun(X45,bool),X46),s(X45,sK85('T_0',X46,X45))))) | s(bool,X44) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f707,f1649])).
fof(f9834,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3)))) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK85('T_0',X2,X1)))))) )),
  inference(condensation,[],[f9833])).
fof(f9833,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X43) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42)))) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK85('T_0',X41,X40))))) | s(bool,X39) = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f9832,f1758])).
fof(f9832,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X43) | ~p(s(bool,X39)) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42)))) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK85('T_0',X41,X40))))) | s(bool,X39) = s(bool,X43)) )),
  inference(forward_demodulation,[],[f9821,f663])).
fof(f9821,plain,(
  ( ! [X39,X43,X41,X42,X40] : (~p(s(bool,X39)) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42)))) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK85('T_0',X41,X40))))) | s(bool,X43) = s(bool,'const.bool.BOUNDED_1'(s(bool,X43))) | s(bool,X39) = s(bool,X43)) )),
  inference(superposition,[],[f707,f3313])).
fof(f9755,plain,(
  ( ! [X14] : (s(bool,X14) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X14) = s(bool,'const.bool.BOUNDED_1'(s(bool,X14)))) ) | $spl68),
  inference(cnf_transformation,[],[f9755_D])).
fof(f9755_D,plain,(
  ( ! [X14] : (s(bool,X14) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,X14) = s(bool,'const.bool.BOUNDED_1'(s(bool,X14)))) ) <=> ~$spl68),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl68])])).
fof(f9747,plain,(
  ( ! [X14,X13] : (s(bool,X14) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X13) | s(bool,X14) = s(bool,'const.bool.BOUNDED_1'(s(bool,X14)))) )),
  inference(duplicate_literal_removal,[],[f9714])).
fof(f9714,plain,(
  ( ! [X14,X13] : (s(bool,X14) != s(bool,'const.bool.BOUNDED_1'(s(bool,'T_0'))) | s(bool,'T_0') = s(bool,X13) | s(bool,X14) = s(bool,'const.bool.BOUNDED_1'(s(bool,X14))) | s(bool,'T_0') = s(bool,X13)) )),
  inference(superposition,[],[f9229,f3313])).
fof(f9697,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK84(X2,'T_0',X1))))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) | $spl66),
  inference(cnf_transformation,[],[f9697_D])).
fof(f9697_D,plain,(
  ( ! [X2,X3,X1] : (~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK84(X2,'T_0',X1))))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) ) <=> ~$spl66),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl66])])).
fof(f9701,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK84(X2,'T_0',X1))))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f9700])).
fof(f9700,plain,(
  ( ! [X52,X50,X53,X51,X49] : (~p(s(bool,happ(s(fun(X50,bool),X51),s(X50,sK84(X51,'T_0',X50))))) | p(s(bool,happ(s(fun(X50,bool),X51),s(X50,X52)))) | s(bool,X49) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(subsumption_resolution,[],[f9685,f1758])).
fof(f9685,plain,(
  ( ! [X52,X50,X53,X51,X49] : (~p(s(bool,X49)) | ~p(s(bool,happ(s(fun(X50,bool),X51),s(X50,sK84(X51,'T_0',X50))))) | p(s(bool,happ(s(fun(X50,bool),X51),s(X50,X52)))) | s(bool,X49) = s(bool,X53) | s(bool,'T_0') = s(bool,X53)) )),
  inference(superposition,[],[f706,f1649])).
fof(f9699,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK84(X2,'T_0',X1))))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f9698])).
fof(f9698,plain,(
  ( ! [X47,X45,X48,X46,X44] : (~p(s(bool,happ(s(fun(X45,bool),X46),s(X45,sK84(X46,'T_0',X45))))) | p(s(bool,happ(s(fun(X45,bool),X46),s(X45,X47)))) | s(bool,X44) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f9684,f1758])).
fof(f9684,plain,(
  ( ! [X47,X45,X48,X46,X44] : (~p(s(bool,X44)) | ~p(s(bool,happ(s(fun(X45,bool),X46),s(X45,sK84(X46,'T_0',X45))))) | p(s(bool,happ(s(fun(X45,bool),X46),s(X45,X47)))) | s(bool,X44) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f706,f1649])).
fof(f9696,plain,(
  ( ! [X2,X0,X3,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,happ(s(fun(X1,bool),X2),s(X1,sK84(X2,'T_0',X1))))) | p(s(bool,happ(s(fun(X1,bool),X2),s(X1,X3))))) )),
  inference(condensation,[],[f9695])).
fof(f9695,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X43) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK84(X41,'T_0',X40))))) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42)))) | s(bool,X39) = s(bool,X43)) )),
  inference(subsumption_resolution,[],[f9694,f1758])).
fof(f9694,plain,(
  ( ! [X39,X43,X41,X42,X40] : (s(bool,'T_0') = s(bool,X43) | ~p(s(bool,X39)) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK84(X41,'T_0',X40))))) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42)))) | s(bool,X39) = s(bool,X43)) )),
  inference(forward_demodulation,[],[f9683,f663])).
fof(f9683,plain,(
  ( ! [X39,X43,X41,X42,X40] : (~p(s(bool,X39)) | ~p(s(bool,happ(s(fun(X40,bool),X41),s(X40,sK84(X41,'T_0',X40))))) | p(s(bool,happ(s(fun(X40,bool),X41),s(X40,X42)))) | s(bool,X43) = s(bool,'const.bool.BOUNDED_1'(s(bool,X43))) | s(bool,X39) = s(bool,X43)) )),
  inference(superposition,[],[f706,f3313])).
fof(f9450,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl64),
  inference(cnf_transformation,[],[f9450_D])).
fof(f9450_D,plain,(
  ( ! [X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) <=> ~$spl64),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl64])])).
fof(f9372,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.bool.BOUNDED_1'(s(bool,X3)))) )),
  inference(duplicate_literal_removal,[],[f8643])).
fof(f8643,plain,(
  ( ! [X2,X3] : (s(bool,'F_0') = s(bool,X3) | s(bool,'T_0') = s(bool,X2) | s(bool,X3) = s(bool,'const.bool.BOUNDED_1'(s(bool,X3))) | s(bool,'T_0') = s(bool,X2)) )),
  inference(superposition,[],[f665,f3313])).
fof(f9392,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21))) | s(bool,'F_0') = s(bool,X21)) )),
  inference(duplicate_literal_removal,[],[f8266])).
fof(f8266,plain,(
  ( ! [X21,X20] : (s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21))) | s(bool,'F_0') = s(bool,X21) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f3313,f665])).
fof(f9442,plain,(
  ( ! [X23,X25] : (s(bool,X23) = s(bool,'const.bool.BOUNDED_1'(s(bool,X23))) | s(bool,X23) = s(bool,X25) | s(bool,X25) = s(bool,'const.bool.BOUNDED_1'(s(bool,X25)))) ) | $spl62),
  inference(cnf_transformation,[],[f9442_D])).
fof(f9442_D,plain,(
  ( ! [X23,X25] : (s(bool,X23) = s(bool,'const.bool.BOUNDED_1'(s(bool,X23))) | s(bool,X23) = s(bool,X25) | s(bool,X25) = s(bool,'const.bool.BOUNDED_1'(s(bool,X25)))) ) <=> ~$spl62),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl62])])).
fof(f9393,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.bool.BOUNDED_1'(s(bool,X13))) | s(bool,X11) = s(bool,X13) | s(bool,X11) = s(bool,'const.bool.BOUNDED_1'(s(bool,X11)))) )),
  inference(duplicate_literal_removal,[],[f8264])).
fof(f8264,plain,(
  ( ! [X12,X13,X11] : (s(bool,'T_0') = s(bool,X12) | s(bool,X13) = s(bool,'const.bool.BOUNDED_1'(s(bool,X13))) | s(bool,X11) = s(bool,X13) | s(bool,X11) = s(bool,'const.bool.BOUNDED_1'(s(bool,X11))) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f3313,f3313])).
fof(f9402,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) = s(bool,X22) | s(bool,X22) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22))) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21)))) )),
  inference(duplicate_literal_removal,[],[f8243])).
fof(f8243,plain,(
  ( ! [X21,X22,X20] : (s(bool,X21) = s(bool,X22) | s(bool,X22) = s(bool,'const.bool.BOUNDED_1'(s(bool,X22))) | s(bool,'T_0') = s(bool,X20) | s(bool,X21) = s(bool,'const.bool.BOUNDED_1'(s(bool,X21))) | s(bool,'T_0') = s(bool,X20)) )),
  inference(superposition,[],[f3313,f3313])).
fof(f9407,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X0)) )),
  inference(duplicate_literal_removal,[],[f8236])).
fof(f8236,plain,(
  ( ! [X0,X1] : (s(bool,'F_0') = s(bool,X1) | s(bool,X1) = s(bool,'const.bool.BOUNDED_1'(s(bool,X1))) | s(bool,'T_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(superposition,[],[f3313,f665])).
fof(f9419,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,'const.bool.BOUNDED_1'(s(bool,X14))) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16)) )),
  inference(duplicate_literal_removal,[],[f8226])).
fof(f8226,plain,(
  ( ! [X14,X15,X16] : (s(bool,'T_0') = s(bool,X15) | s(bool,X14) = s(bool,'const.bool.BOUNDED_1'(s(bool,X14))) | s(bool,'T_0') = s(bool,X15) | s(bool,X16) = s(bool,'const.bool.BOUNDED_1'(s(bool,X16))) | s(bool,X14) = s(bool,X16)) )),
  inference(superposition,[],[f3313,f3313])).
fof(f9434,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) = s(bool,'const.bool.BOUNDED_1'(s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,'const.bool.BOUNDED_1'(s(bool,X25))) | s(bool,X23) = s(bool,X25)) )),
  inference(duplicate_literal_removal,[],[f8205])).
fof(f8205,plain,(
  ( ! [X24,X23,X25] : (s(bool,X23) = s(bool,'const.bool.BOUNDED_1'(s(bool,X23))) | s(bool,'T_0') = s(bool,X24) | s(bool,'T_0') = s(bool,X24) | s(bool,X25) = s(bool,'const.bool.BOUNDED_1'(s(bool,X25))) | s(bool,X23) = s(bool,X25)) )),
  inference(superposition,[],[f3313,f3313])).
fof(f7598,plain,(
  ( ! [X28,X29] : (sP1('F_0',X28) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) | $spl60),
  inference(cnf_transformation,[],[f7598_D])).
fof(f7598_D,plain,(
  ( ! [X28,X29] : (sP1('F_0',X28) | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) <=> ~$spl60),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl60])])).
fof(f7597,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1('F_0',X28) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f7589,f673])).
fof(f7589,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1('F_0',X28) | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f4436,f665])).
fof(f7594,plain,(
  ( ! [X10,X8,X11] : (sP1(X8,X10) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X11)) ) | $spl58),
  inference(cnf_transformation,[],[f7594_D])).
fof(f7594_D,plain,(
  ( ! [X10,X8,X11] : (sP1(X8,X10) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X11)) ) <=> ~$spl58),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl58])])).
fof(f7595,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X13)) | sP1(X12,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f7585,f673])).
fof(f7585,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X13)) | sP1(X12,X14) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f4436,f1649])).
fof(f7593,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X9)) | sP1(X8,X10) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f7584,f673])).
fof(f7584,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X9)) | sP1(X8,X10) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f4436,f1649])).
fof(f7554,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6269,f6277])).
fof(f6277,plain,(
  ( ! [X0,X1] : (s(bool,X0) = s(bool,X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f6261,f725])).
fof(f6269,plain,(
  ( ! [X0] : (s(bool,'F_0') != s(bool,X0)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f675])).
fof(f7553,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6272,f660])).
fof(f6272,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1403,f6261,f725])).
fof(f7552,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6278,f660])).
fof(f6278,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1403,f6261,f725])).
fof(f7551,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6287,f660])).
fof(f6287,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1431,f6261,f754])).
fof(f7550,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6288,f6261])).
fof(f6288,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1454,f6261,f754])).
fof(f7549,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6289,f6261])).
fof(f6289,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1587,f6261,f754])).
fof(f7548,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6296,f660])).
fof(f6296,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1426,f6261,f754])).
fof(f7547,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6300,f6261])).
fof(f6300,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1586,f6261,f754])).
fof(f7546,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6301,f6261])).
fof(f6301,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1447,f6261,f754])).
fof(f7545,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6318,f660])).
fof(f6318,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1778,f662,f6261,f1262])).
fof(f7544,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6319,f6261])).
fof(f6319,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2671,f662,f6261,f1262])).
fof(f7543,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6363,f660])).
fof(f6363,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f2639,f662,f6261,f1262])).
fof(f7542,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6364,f6261])).
fof(f6364,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2640,f662,f6261,f1262])).
fof(f7541,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6369,f6502])).
fof(f6502,plain,(
  ( ! [X2,X0,X1] : (sP70(X0,X1,X2)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f1271])).
fof(f6369,plain,(
  ~sP70('T_0','F_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1804,f1380,f6261,f1263])).
fof(f7540,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6375,f6502])).
fof(f6375,plain,(
  ~sP70('T_0','F_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1804,f1381,f6261,f1263])).
fof(f7539,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6385,f6474])).
fof(f6474,plain,(
  ( ! [X2,X0,X1] : (sP71(X0,X1,X2)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f1267])).
fof(f6385,plain,(
  ~sP71('T_0','F_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1804,f1383,f6261,f1263])).
fof(f7538,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6392,f6508])).
fof(f6508,plain,(
  ( ! [X2,X0,X1] : (sP69(X0,X1,X2)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f1277])).
fof(f6392,plain,(
  ~sP69('F_0','T_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1804,f1380,f1383,f6261,f1263])).
fof(f7537,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6401,f6508])).
fof(f6401,plain,(
  ~sP69('F_0','T_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1804,f1381,f1383,f6261,f1263])).
fof(f7536,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6415,f6474])).
fof(f6415,plain,(
  ~sP71('T_0','F_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1804,f1384,f6261,f1263])).
fof(f7535,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6418,f6544])).
fof(f6544,plain,(
  ( ! [X0] : (~sP72(X0,'T_0','F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1403,f6261,f1280])).
fof(f6418,plain,(
  ( ! [X0] : (sP72(X0,'T_0','F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1381,f1384,f6261,f1263])).
fof(f7534,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6420,f6508])).
fof(f6420,plain,(
  ~sP69('F_0','T_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1804,f1381,f1384,f6261,f1263])).
fof(f7533,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6423,f6544])).
fof(f6423,plain,(
  ( ! [X0] : (sP72(X0,'T_0','F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1380,f1384,f6261,f1263])).
fof(f7532,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6424,f1804])).
fof(f6424,plain,(
  sP72('T_0','T_0','F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1386,f1380,f1384,f6261,f1263])).
fof(f7531,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6425,f6544])).
fof(f6425,plain,(
  sP72('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0','F_0') | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1590,f1380,f1384,f6261,f1263])).
fof(f7530,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6426,f6508])).
fof(f6426,plain,(
  ~sP69('F_0','T_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1804,f1380,f1384,f6261,f1263])).
fof(f7529,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6445,f6261])).
fof(f6445,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1382,f662,f6261,f1266])).
fof(f7528,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6457,f6474])).
fof(f6457,plain,(
  ( ! [X0,X1] : (~sP71(X0,X1,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f6261,f1266])).
fof(f7527,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6459,f6261])).
fof(f6459,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1381,f662,f6261,f1266])).
fof(f7526,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6465,f6474])).
fof(f6465,plain,(
  ( ! [X0] : (~sP71('T_0',X0,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f660,f6261,f1266])).
fof(f7525,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6472,f6474])).
fof(f6472,plain,(
  ( ! [X0,X1] : (~sP71(X0,X1,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f6261,f1266])).
fof(f7524,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6477,f6261])).
fof(f6477,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1385,f662,f6261,f1270])).
fof(f7523,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6487,f6502])).
fof(f6487,plain,(
  ( ! [X0,X1] : (~sP70(X0,X1,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f6261,f1270])).
fof(f7522,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6489,f6261])).
fof(f6489,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1384,f662,f6261,f1270])).
fof(f7521,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6494,f6502])).
fof(f6494,plain,(
  ( ! [X0] : (~sP70('T_0',X0,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f660,f6261,f1270])).
fof(f7520,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6500,f6502])).
fof(f6500,plain,(
  ( ! [X0,X1] : (~sP70(X0,X1,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f6261,f1270])).
fof(f7517,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6514,f663])).
fof(f6514,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1813,f6261,f1279])).
fof(f7516,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6516,f1578])).
fof(f6516,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2424,f6261,f1279])).
fof(f7515,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6518,f1578])).
fof(f6518,plain,(
  s(bool,'T_0') != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2422,f6261,f1279])).
fof(f7514,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7513,f663])).
fof(f7513,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | ($spl0 | $spl54)),
  inference(forward_demodulation,[],[f6519,f1578])).
fof(f6519,plain,(
  ( ! [X0] : (s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) != s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2773,f6261,f1279])).
fof(f7512,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6520,f663])).
fof(f6520,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1811,f6261,f1279])).
fof(f7511,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7510,f663])).
fof(f7510,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,'const.bool.BOUNDED_1'(s(bool,X0)))) ) | $spl54),
  inference(forward_demodulation,[],[f6521,f663])).
fof(f6521,plain,(
  ( ! [X0,X1] : (s(bool,'const.bool.BOUNDED_1'(s(bool,X0))) != s(bool,'const.bool.BOUNDED_1'(s(bool,X1)))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2198,f6261,f1279])).
fof(f7507,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6532,f1403])).
fof(f6532,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1777,f6261,f1280])).
fof(f7506,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7505,f1403])).
fof(f7505,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl54)),
  inference(forward_demodulation,[],[f6533,f1578])).
fof(f6533,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2633,f6261,f1280])).
fof(f7504,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6534,f1403])).
fof(f6534,plain,(
  s(bool,'T_0') = s(bool,'F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1778,f6261,f1280])).
fof(f7503,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7502,f1403])).
fof(f7502,plain,(
  s(bool,'T_0') = s(bool,'F_0') | ($spl0 | $spl54)),
  inference(forward_demodulation,[],[f6535,f1578])).
fof(f6535,plain,(
  s(bool,'F_0') = s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2671,f6261,f1280])).
fof(f7501,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6552,f6752])).
fof(f6752,plain,(
  ( ! [X2,X0,X1] : (sP74(X0,X1,X2)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f6261,f6261,f1295])).
fof(f6552,plain,(
  ( ! [X0,X1] : (~sP74(X0,X1,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f1283])).
fof(f7500,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6558,f6752])).
fof(f6558,plain,(
  ( ! [X0,X1] : (~sP74(X0,'F_0',X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f1284])).
fof(f7499,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6561,f6261])).
fof(f6561,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1391,f1453,f6261,f1285])).
fof(f7498,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6562,f6261])).
fof(f6562,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1389,f1453,f6261,f1285])).
fof(f7497,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6565,f6261])).
fof(f6565,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1391,f1594,f6261,f1285])).
fof(f7496,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6566,f6261])).
fof(f6566,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1595,f1594,f6261,f1285])).
fof(f7495,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6571,f6654])).
fof(f6654,plain,(
  ( ! [X2,X0,X1] : (sP73(X0,X1,X2)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f1290])).
fof(f6571,plain,(
  ~sP73('F_0','T_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f660,f6261,f1285])).
fof(f7494,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6574,f6654])).
fof(f6574,plain,(
  ~sP73('F_0','T_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1594,f660,f6261,f1285])).
fof(f7493,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6580,f6654])).
fof(f6580,plain,(
  ( ! [X0] : (~sP73(X0,'F_0','T_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f1285])).
fof(f7492,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6582,f6654])).
fof(f6582,plain,(
  ( ! [X0] : (~sP73('F_0',X0,'T_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f6261,f6261,f1285])).
fof(f7491,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6589,f6654])).
fof(f6589,plain,(
  ( ! [X0] : (~sP73(X0,'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1593,f6261,f6261,f1285])).
fof(f7490,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6591,f6654])).
fof(f6591,plain,(
  ( ! [X0] : (~sP73('F_0',X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1594,f6261,f6261,f1285])).
fof(f7489,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6593,f6261])).
fof(f6593,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1390,f1449,f6261,f1285])).
fof(f7488,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6594,f6261])).
fof(f6594,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1389,f1449,f6261,f1285])).
fof(f7487,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6597,f6261])).
fof(f6597,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1390,f1593,f6261,f1285])).
fof(f7486,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6598,f6261])).
fof(f6598,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1595,f1593,f6261,f1285])).
fof(f7485,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6604,f6654])).
fof(f6604,plain,(
  ~sP73('T_0','F_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f660,f6261,f1285])).
fof(f7484,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6609,f6654])).
fof(f6609,plain,(
  ~sP73('T_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1593,f660,f6261,f1285])).
fof(f7483,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6615,f6654])).
fof(f6615,plain,(
  ( ! [X0] : (~sP73(X0,'F_0','T_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f1285])).
fof(f7482,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6617,f6654])).
fof(f6617,plain,(
  ( ! [X0] : (~sP73('F_0',X0,'T_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f6261,f6261,f1285])).
fof(f7481,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6624,f6654])).
fof(f6624,plain,(
  ( ! [X0] : (~sP73(X0,'F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1593,f6261,f6261,f1285])).
fof(f7480,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6626,f6654])).
fof(f6626,plain,(
  ( ! [X0] : (~sP73('F_0',X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1594,f6261,f6261,f1285])).
fof(f7479,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6629,f6261])).
fof(f6629,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1391,f662,f6261,f1289])).
fof(f7478,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6633,f6654])).
fof(f6633,plain,(
  ( ! [X0] : (~sP73(X0,'T_0','F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f660,f6261,f1289])).
fof(f7477,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6639,f6654])).
fof(f6639,plain,(
  ( ! [X0,X1] : (~sP73(X0,X1,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f6261,f1289])).
fof(f7476,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6648,f6261])).
fof(f6648,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1390,f662,f6261,f1289])).
fof(f7475,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6650,f6654])).
fof(f6650,plain,(
  ( ! [X0] : (~sP73('T_0',X0,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f660,f662,f6261,f1289])).
fof(f7474,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6652,f6654])).
fof(f6652,plain,(
  ( ! [X0,X1] : (~sP73(X0,X1,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f662,f6261,f1289])).
fof(f7473,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6657,f6261])).
fof(f6657,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f660,f6261,f1295])).
fof(f7472,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6659,f6261])).
fof(f6659,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f6261,f6261,f1295])).
fof(f7471,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6660,f660])).
fof(f6660,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1894,f6261,f6261,f1295])).
fof(f7470,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6661,f6261])).
fof(f6661,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2216,f6261,f6261,f1295])).
fof(f7469,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6662,f6261])).
fof(f6662,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2894,f6261,f6261,f1295])).
fof(f7468,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6663,f6261])).
fof(f6663,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2238,f6261,f6261,f1295])).
fof(f7467,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6664,f6261])).
fof(f6664,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2789,f6261,f6261,f1295])).
fof(f7466,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6666,f6261])).
fof(f6666,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1594,f6261,f6261,f1295])).
fof(f7465,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6667,f660])).
fof(f6667,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f660,f6261,f1295])).
fof(f7464,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6669,f6261])).
fof(f6669,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1594,f660,f6261,f1295])).
fof(f7463,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6674,f660])).
fof(f6674,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f1295])).
fof(f7462,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6675,f660])).
fof(f6675,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f6261,f6261,f1295])).
fof(f7461,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6681,f6261])).
fof(f6681,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1593,f6261,f6261,f1295])).
fof(f7460,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6682,f6261])).
fof(f6682,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1594,f6261,f6261,f1295])).
fof(f7459,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6687,f6261])).
fof(f6687,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f660,f6261,f1295])).
fof(f7458,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6689,f6261])).
fof(f6689,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f1295])).
fof(f7457,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6691,f660])).
fof(f6691,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1894,f6261,f6261,f1295])).
fof(f7456,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6692,f660])).
fof(f6692,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f2216,f6261,f6261,f1295])).
fof(f7455,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6693,f660])).
fof(f6693,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2894,f6261,f6261,f1295])).
fof(f7454,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6694,f6261])).
fof(f6694,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2238,f6261,f6261,f1295])).
fof(f7453,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6695,f6261])).
fof(f6695,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2789,f6261,f6261,f1295])).
fof(f7452,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6696,f6261])).
fof(f6696,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1593,f6261,f6261,f1295])).
fof(f7451,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6698,f660])).
fof(f6698,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f660,f6261,f1295])).
fof(f7450,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6702,f6261])).
fof(f6702,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1593,f660,f6261,f1295])).
fof(f7449,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6707,f660])).
fof(f6707,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f1295])).
fof(f7448,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6708,f660])).
fof(f6708,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f6261,f6261,f1295])).
fof(f7447,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6714,f6261])).
fof(f6714,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1593,f6261,f6261,f1295])).
fof(f7446,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6715,f6261])).
fof(f6715,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1594,f6261,f6261,f1295])).
fof(f7445,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6721,f660])).
fof(f6721,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1894,f660,f6261,f1295])).
fof(f7444,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6723,f6261])).
fof(f6723,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f1295])).
fof(f7443,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6725,f660])).
fof(f6725,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1894,f6261,f6261,f1295])).
fof(f7442,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6726,f660])).
fof(f6726,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f2216,f6261,f6261,f1295])).
fof(f7441,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6727,f660])).
fof(f6727,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2894,f6261,f6261,f1295])).
fof(f7440,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6728,f6261])).
fof(f6728,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2238,f6261,f6261,f1295])).
fof(f7439,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6729,f6261])).
fof(f6729,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2789,f6261,f6261,f1295])).
fof(f7438,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6730,f6261])).
fof(f6730,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1593,f6261,f6261,f1295])).
fof(f7437,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6733,f660])).
fof(f6733,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1894,f660,f6261,f1295])).
fof(f7436,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6734,f6261])).
fof(f6734,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2216,f660,f6261,f1295])).
fof(f7435,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6735,f6261])).
fof(f6735,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2894,f660,f6261,f1295])).
fof(f7434,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6742,f6261])).
fof(f6742,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f6261,f6261,f1295])).
fof(f7433,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6743,f660])).
fof(f6743,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1894,f6261,f6261,f1295])).
fof(f7432,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6744,f6261])).
fof(f6744,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2216,f6261,f6261,f1295])).
fof(f7431,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6745,f6261])).
fof(f6745,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2894,f6261,f6261,f1295])).
fof(f7430,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6746,f6261])).
fof(f6746,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2238,f6261,f6261,f1295])).
fof(f7429,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6747,f6261])).
fof(f6747,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2789,f6261,f6261,f1295])).
fof(f7428,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6749,f6261])).
fof(f6749,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1594,f6261,f6261,f1295])).
fof(f7427,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6755,f6261])).
fof(f6755,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1467,f662,f6261,f1298])).
fof(f7426,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6767,f6261])).
fof(f6767,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1458,f662,f6261,f1298])).
fof(f7425,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6793,f7233])).
fof(f7233,plain,(
  ( ! [X0,X1] : (sP76('F_0',X0,X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1394,f6261,f1364])).
fof(f6793,plain,(
  ( ! [X0,X1] : (~sP76('F_0',X0,X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f1299])).
fof(f7424,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6808,f7233])).
fof(f6808,plain,(
  ( ! [X0,X1] : (~sP76('F_0',X0,X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f1300])).
fof(f7423,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6825,f6867])).
fof(f6867,plain,(
  ( ! [X2,X0,X1] : (sP75(X0,X1,X2)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f1308])).
fof(f6825,plain,(
  ~sP75('F_0','T_0','F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1472,f662,f6261,f1303])).
fof(f7422,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6827,f6867])).
fof(f6827,plain,(
  ~sP75('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'F_0') | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1600,f662,f6261,f1303])).
fof(f7421,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6844,f6867])).
fof(f6844,plain,(
  ~sP75('F_0','F_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f662,f6261,f1304])).
fof(f7420,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6845,f6867])).
fof(f6845,plain,(
  ~sP75('F_0','F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1596,f662,f6261,f1304])).
fof(f7419,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6863,f6867])).
fof(f6863,plain,(
  ( ! [X0] : (~sP75(X0,'F_0','F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f662,f6261,f1306])).
fof(f7418,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6869,f660])).
fof(f6869,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1987,f6261,f1311])).
fof(f7417,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6874,f6261])).
fof(f6874,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2916,f6261,f1311])).
fof(f7416,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6875,f6261])).
fof(f6875,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2285,f6261,f1311])).
fof(f7415,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6881,f660])).
fof(f6881,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f6261,f1311])).
fof(f7414,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6882,f6261])).
fof(f6882,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1596,f6261,f1311])).
fof(f7413,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6883,f6261])).
fof(f6883,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1472,f6261,f1311])).
fof(f7412,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6884,f6261])).
fof(f6884,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1600,f6261,f1311])).
fof(f7411,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6891,f660])).
fof(f6891,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1987,f6261,f1312])).
fof(f7410,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6896,f6261])).
fof(f6896,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2916,f6261,f1312])).
fof(f7409,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6897,f6261])).
fof(f6897,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2285,f6261,f1312])).
fof(f7408,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6903,f6261])).
fof(f6903,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f6261,f1312])).
fof(f7407,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6904,f6261])).
fof(f6904,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1596,f6261,f1312])).
fof(f7406,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6905,f660])).
fof(f6905,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1472,f6261,f1312])).
fof(f7405,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6906,f6261])).
fof(f6906,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1600,f6261,f1312])).
fof(f7404,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6941,f7215])).
fof(f7215,plain,(
  ( ! [X0,X1] : (sP78('F_0',X0,X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1397,f6261,f1363])).
fof(f6941,plain,(
  ( ! [X0,X1] : (~sP78('F_0',X0,X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261,f1317])).
fof(f7403,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6944,f6261])).
fof(f6944,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1397,f1504,f6261,f1320])).
fof(f7402,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6945,f6261])).
fof(f6945,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1396,f1504,f6261,f1320])).
fof(f7401,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6947,f6261])).
fof(f6947,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1397,f1616,f6261,f1320])).
fof(f7400,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6948,f6261])).
fof(f6948,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1619,f1616,f6261,f1320])).
fof(f7399,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6955,f7085])).
fof(f7085,plain,(
  ( ! [X2,X0,X1] : (sP77(X0,X1,X2)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f1325])).
fof(f6955,plain,(
  ~sP77('F_0','T_0','T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1504,f660,f6261,f1320])).
fof(f7398,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6957,f7085])).
fof(f6957,plain,(
  ~sP77('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),'T_0') | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1616,f660,f6261,f1320])).
fof(f7397,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6969,f7085])).
fof(f6969,plain,(
  ( ! [X0] : (~sP77('F_0',X0,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f6261,f6261,f1320])).
fof(f7396,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6971,f7085])).
fof(f6971,plain,(
  ( ! [X0] : (~sP77('F_0','T_0',X0)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1504,f6261,f6261,f1320])).
fof(f7395,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6973,f7085])).
fof(f6973,plain,(
  ( ! [X0] : (~sP77('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1616,f6261,f6261,f1320])).
fof(f7394,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6997,f7085])).
fof(f6997,plain,(
  ( ! [X0] : (~sP77('F_0',X0,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f6261,f6261,f1320])).
fof(f7393,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f6998,f7085])).
fof(f6998,plain,(
  ( ! [X0] : (~sP77('F_0','T_0',X0)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1504,f6261,f6261,f1320])).
fof(f7392,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f6999,f7085])).
fof(f6999,plain,(
  ( ! [X0] : (~sP77('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1616,f6261,f6261,f1320])).
fof(f7391,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7025,f7085])).
fof(f7025,plain,(
  ~sP77('F_0','F_0','F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f662,f6261,f1321])).
fof(f7390,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7046,f7085])).
fof(f7046,plain,(
  ~sP77('F_0','F_0','F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f662,f6261,f1322])).
fof(f7389,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7066,f6261])).
fof(f7066,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1397,f662,f6261,f1323])).
fof(f7388,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7069,f7085])).
fof(f7069,plain,(
  ( ! [X0,X1] : (~sP77(X0,'F_0',X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f662,f6261,f1323])).
fof(f7387,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7079,f6261])).
fof(f7079,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1395,f662,f6261,f1323])).
fof(f7386,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7081,f7085])).
fof(f7081,plain,(
  ( ! [X0] : (~sP77('T_0','F_0',X0)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f660,f662,f6261,f1323])).
fof(f7385,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7083,f7085])).
fof(f7083,plain,(
  ( ! [X0,X1] : (~sP77(X0,'F_0',X1)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f662,f6261,f1323])).
fof(f7384,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7114,f660])).
fof(f7114,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f2086,f6261,f1329])).
fof(f7383,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7115,f660])).
fof(f7115,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f2321,f6261,f1329])).
fof(f7382,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7116,f660])).
fof(f7116,plain,(
  ~p(s(bool,'T_0')) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2934,f6261,f1329])).
fof(f7381,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7120,f6261])).
fof(f7120,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2824,f6261,f1329])).
fof(f7380,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7121,f6261])).
fof(f7121,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2957,f6261,f1329])).
fof(f7379,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7122,f6261])).
fof(f7122,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2349,f6261,f1329])).
fof(f7378,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7123,f6261])).
fof(f7123,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2385,f6261,f1329])).
fof(f7377,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7124,f6261])).
fof(f7124,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2840,f6261,f1329])).
fof(f7376,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7132,f6261])).
fof(f7132,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f6261,f1329])).
fof(f7375,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7133,f660])).
fof(f7133,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1504,f6261,f1329])).
fof(f7374,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7134,f6261])).
fof(f7134,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1616,f6261,f1329])).
fof(f7373,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7144,f660])).
fof(f7144,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f1509,f662,f6261,f1330])).
fof(f7372,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7148,f6261])).
fof(f7148,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1626,f662,f6261,f1330])).
fof(f7371,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7149,f6261])).
fof(f7149,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1557,f662,f6261,f1330])).
fof(f7370,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7170,f660])).
fof(f7170,plain,(
  ~p(s(bool,'T_0')) | $spl54),
  inference(unit_resulting_resolution,[],[f2063,f662,f6261,f1330])).
fof(f7369,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7171,f6261])).
fof(f7171,plain,(
  ( ! [X0] : (~p(s(bool,'const.bool.BOUNDED_1'(s(bool,X0))))) ) | $spl54),
  inference(unit_resulting_resolution,[],[f2368,f662,f6261,f1330])).
fof(f7368,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7172,f6261])).
fof(f7172,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2941,f662,f6261,f1330])).
fof(f7367,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7201,f1395])).
fof(f7201,plain,(
  ( ! [X0] : (~sP77('F_0',X0,'F_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f6261,f1363])).
fof(f7366,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7202,f1396])).
fof(f7202,plain,(
  ( ! [X0] : (~sP77('F_0','T_0',X0)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1504,f6261,f1363])).
fof(f7365,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7203,f1619])).
fof(f7203,plain,(
  ( ! [X0] : (~sP77('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1616,f6261,f1363])).
fof(f7364,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7219,f1392])).
fof(f7219,plain,(
  ( ! [X0] : (~sP75('F_0',X0,'T_0')) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f6261,f1364])).
fof(f7363,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7220,f1604])).
fof(f7220,plain,(
  ( ! [X0] : (~sP75('F_0',X0,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1596,f6261,f1364])).
fof(f7362,plain,(
  $false | $spl54),
  inference(subsumption_resolution,[],[f7221,f1393])).
fof(f7221,plain,(
  ( ! [X0] : (~sP75('F_0','T_0',X0)) ) | $spl54),
  inference(unit_resulting_resolution,[],[f1472,f6261,f1364])).
fof(f7361,plain,(
  $false | ($spl0 | $spl54)),
  inference(subsumption_resolution,[],[f7222,f1605])).
fof(f7222,plain,(
  ( ! [X0] : (~sP75('F_0','const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X0)) ) | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1600,f6261,f1364])).
fof(f7329,plain,(
  $false | ($spl34 | $spl54)),
  inference(unit_resulting_resolution,[],[f1509,f662,f6261,f4406])).
fof(f7324,plain,(
  $false | ($spl32 | $spl54)),
  inference(unit_resulting_resolution,[],[f2086,f6261,f4403])).
fof(f7322,plain,(
  $false | ($spl26 | $spl54)),
  inference(unit_resulting_resolution,[],[f1397,f662,f6261,f4394])).
fof(f7316,plain,(
  $false | ($spl22 | $spl54)),
  inference(unit_resulting_resolution,[],[f1987,f6261,f4388])).
fof(f7314,plain,(
  $false | ($spl20 | $spl54)),
  inference(unit_resulting_resolution,[],[f1987,f6261,f4385])).
fof(f7312,plain,(
  $false | ($spl14 | $spl54)),
  inference(unit_resulting_resolution,[],[f1467,f662,f6261,f4376])).
fof(f7307,plain,(
  $false | ($spl12 | $spl54)),
  inference(unit_resulting_resolution,[],[f1385,f662,f6261,f4373])).
fof(f7302,plain,(
  $false | ($spl10 | $spl54)),
  inference(unit_resulting_resolution,[],[f1382,f662,f6261,f4370])).
fof(f7295,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f662,f1626,f6261,f2556])).
fof(f7292,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2824,f6261,f2555])).
fof(f7289,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f662,f1397,f6261,f2552])).
fof(f7284,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2916,f6261,f2550])).
fof(f7282,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2916,f6261,f2549])).
fof(f7280,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f662,f1467,f6261,f2546])).
fof(f7277,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f662,f1385,f6261,f2545])).
fof(f7272,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f662,f1382,f6261,f2544])).
fof(f7264,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f662,f1557,f6261,f2124])).
fof(f7260,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f662,f1397,f6261,f2082])).
fof(f7255,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f662,f1467,f6261,f1924])).
fof(f7252,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f662,f1385,f6261,f1860])).
fof(f7247,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f662,f1382,f6261,f1846])).
fof(f7242,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2349,f6261,f1522])).
fof(f7240,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2285,f6261,f1488])).
fof(f7238,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2285,f6261,f1477])).
fof(f7234,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f1394,f6261,f1364])).
fof(f7232,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1600,f1605,f6261,f1364])).
fof(f7230,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1472,f1393,f6261,f1364])).
fof(f7228,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1596,f1604,f6261,f1364])).
fof(f7226,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f1392,f6261,f1364])).
fof(f7216,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f1397,f6261,f1363])).
fof(f7214,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1616,f1619,f6261,f1363])).
fof(f7212,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1504,f1396,f6261,f1363])).
fof(f7210,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f1395,f6261,f1363])).
fof(f7197,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1509,f662,f6261,f6261,f1330])).
fof(f7183,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2063,f662,f660,f6261,f1330])).
fof(f7168,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1509,f662,f6261,f6261,f1330])).
fof(f7154,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1509,f662,f660,f6261,f1330])).
fof(f7143,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2086,f6261,f6261,f1329])).
fof(f7141,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1504,f660,f6261,f1329])).
fof(f7128,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2086,f6261,f6261,f1329])).
fof(f7126,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2086,f660,f6261,f1329])).
fof(f7113,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f662,f6261,f1328])).
fof(f7100,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f662,f662,f6261,f1327])).
fof(f7086,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2077,f6261,f1325])).
fof(f7084,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1395,f6261,f662,f6261,f1323])).
fof(f7082,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1395,f660,f662,f6261,f1323])).
fof(f7070,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1395,f6261,f662,f6261,f1323])).
fof(f7068,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1397,f660,f662,f6261,f1323])).
fof(f7055,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f1397,f662,f6261,f1322])).
fof(f7053,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f1395,f662,f6261,f1322])).
fof(f7034,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f1397,f662,f6261,f1321])).
fof(f7032,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f1395,f662,f6261,f1321])).
fof(f7012,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f1397,f6261,f6261,f1320])).
fof(f7010,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1616,f1619,f6261,f6261,f1320])).
fof(f7008,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1504,f1396,f6261,f6261,f1320])).
fof(f7006,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1498,f1395,f6261,f6261,f1320])).
fof(f6974,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1397,f1616,f6261,f6261,f1320])).
fof(f6972,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1397,f1504,f6261,f6261,f1320])).
fof(f6970,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1397,f1498,f6261,f6261,f1320])).
fof(f6958,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1397,f1616,f660,f6261,f1320])).
fof(f6956,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1397,f1504,f660,f6261,f1320])).
fof(f6942,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2063,f662,f6261,f1317])).
fof(f6928,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1964,f662,f662,f6261,f1313])).
fof(f6912,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1987,f6261,f6261,f1312])).
fof(f6910,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1472,f660,f6261,f1312])).
fof(f6901,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1987,f6261,f6261,f1312])).
fof(f6899,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1987,f660,f6261,f1312])).
fof(f6890,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1987,f6261,f6261,f1311])).
fof(f6888,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f660,f6261,f1311])).
fof(f6879,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1987,f6261,f6261,f1311])).
fof(f6877,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1987,f660,f6261,f1311])).
fof(f6868,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1977,f6261,f1308])).
fof(f6866,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1977,f6261,f1307])).
fof(f6864,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1394,f662,f662,f6261,f1306])).
fof(f6853,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f1394,f662,f6261,f1304])).
fof(f6851,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1596,f1604,f662,f6261,f1304])).
fof(f6849,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1471,f1392,f662,f6261,f1304])).
fof(f6828,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1394,f1600,f662,f6261,f1303])).
fof(f6826,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1394,f1472,f662,f6261,f1303])).
fof(f6809,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1964,f662,f6261,f1300])).
fof(f6794,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1964,f662,f6261,f1299])).
fof(f6779,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1458,f662,f6261,f6261,f1298])).
fof(f6773,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1458,f662,f660,f6261,f1298])).
fof(f6766,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1458,f662,f6261,f6261,f1298])).
fof(f6760,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1467,f662,f660,f6261,f1298])).
fof(f6753,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f6261,f1295])).
fof(f6751,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f660,f6261,f6261,f1295])).
fof(f6740,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f660,f6261,f1295])).
fof(f6738,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1894,f660,f660,f6261,f1295])).
fof(f6719,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f6261,f1295])).
fof(f6717,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f660,f6261,f6261,f1295])).
fof(f6706,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f660,f6261,f1295])).
fof(f6704,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f660,f660,f6261,f1295])).
fof(f6686,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f6261,f6261,f6261,f1295])).
fof(f6684,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1449,f660,f6261,f6261,f1295])).
fof(f6673,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f6261,f660,f6261,f1295])).
fof(f6671,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1453,f660,f660,f6261,f1295])).
fof(f6655,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1889,f6261,f1290])).
fof(f6653,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1390,f6261,f662,f6261,f1289])).
fof(f6651,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1390,f660,f662,f6261,f1289])).
fof(f6640,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1390,f662,f6261,f6261,f1289])).
fof(f6634,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1391,f662,f660,f6261,f1289])).
fof(f6627,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1391,f1594,f6261,f6261,f1285])).
fof(f6625,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1390,f1593,f6261,f6261,f1285])).
fof(f6618,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1391,f1453,f6261,f6261,f1285])).
fof(f6616,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1390,f1449,f6261,f6261,f1285])).
fof(f6610,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1390,f1593,f660,f6261,f1285])).
fof(f6605,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1390,f1449,f660,f6261,f1285])).
fof(f6592,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1391,f1594,f6261,f6261,f1285])).
fof(f6590,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1390,f1593,f6261,f6261,f1285])).
fof(f6583,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1391,f1453,f6261,f6261,f1285])).
fof(f6581,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1390,f1449,f6261,f6261,f1285])).
fof(f6575,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f1391,f1594,f660,f6261,f1285])).
fof(f6572,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1391,f1453,f660,f6261,f1285])).
fof(f6559,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1467,f662,f6261,f1284])).
fof(f6553,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1458,f662,f6261,f1283])).
fof(f6547,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1777,f1403,f6261,f1280])).
fof(f6545,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1778,f1403,f6261,f1280])).
fof(f6531,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2424,f1578,f6261,f1279])).
fof(f6529,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1813,f663,f6261,f1279])).
fof(f6527,plain,(
  $false | ($spl0 | $spl54)),
  inference(unit_resulting_resolution,[],[f2422,f1578,f6261,f1279])).
fof(f6525,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1811,f663,f6261,f1279])).
fof(f7349,plain,(
  $false | $spl54),
  inference(trivial_inequality_removal,[],[f6517])).
fof(f6517,plain,(
  s(bool,'F_0') != s(bool,'F_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1877,f6261,f1279])).
fof(f7348,plain,(
  $false | $spl54),
  inference(trivial_inequality_removal,[],[f6515])).
fof(f6515,plain,(
  s(bool,'T_0') != s(bool,'T_0') | $spl54),
  inference(unit_resulting_resolution,[],[f1864,f6261,f1279])).
fof(f6509,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1870,f6261,f1277])).
fof(f6507,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1870,f6261,f1276])).
fof(f6505,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1870,f6261,f1275])).
fof(f6503,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1855,f6261,f1271])).
fof(f6501,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1384,f662,f6261,f6261,f1270])).
fof(f6495,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1384,f662,f660,f6261,f1270])).
fof(f6488,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1384,f662,f6261,f6261,f1270])).
fof(f6482,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1385,f662,f660,f6261,f1270])).
fof(f6475,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1840,f6261,f1267])).
fof(f6473,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1381,f662,f6261,f6261,f1266])).
fof(f6466,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1381,f662,f660,f6261,f1266])).
fof(f6458,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1381,f662,f6261,f6261,f1266])).
fof(f6451,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1382,f662,f660,f6261,f1266])).
fof(f6427,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1804,f1380,f1384,f6261,f1263])).
fof(f6421,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1804,f1381,f1384,f6261,f1263])).
fof(f6402,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1804,f1381,f1383,f6261,f1263])).
fof(f6393,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1387,f1804,f1380,f1383,f6261,f1263])).
fof(f6368,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1778,f6261,f662,f6261,f1262])).
fof(f6366,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f2639,f660,f662,f6261,f1262])).
fof(f6342,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1778,f662,f6261,f6261,f1262])).
fof(f6328,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1778,f662,f660,f6261,f1262])).
fof(f6317,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1422,f662,f6261,f758])).
fof(f6311,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1422,f662,f6261,f755])).
fof(f6305,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1426,f6261,f6261,f754])).
fof(f6303,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1426,f660,f6261,f754])).
fof(f6295,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1426,f6261,f6261,f754])).
fof(f6293,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1431,f660,f6261,f754])).
fof(f6285,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1442,f6261,f740])).
fof(f6283,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1442,f6261,f739])).
fof(f6281,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f1403,f6261,f725])).
fof(f6279,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f660,f1403,f6261,f725])).
fof(f6275,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f6261,f1403,f6261,f725])).
fof(f6273,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f660,f1403,f6261,f725])).
fof(f6268,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f1403,f6261,f674])).
fof(f6266,plain,(
  $false | $spl54),
  inference(unit_resulting_resolution,[],[f662,f6261])).
fof(f6265,plain,(
  ( ! [X28,X29] : (sP1(X28,'F_0') | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) | $spl56),
  inference(cnf_transformation,[],[f6265_D])).
fof(f6265_D,plain,(
  ( ! [X28,X29] : (sP1(X28,'F_0') | s(bool,'T_0') = s(bool,X29) | s(bool,X28) = s(bool,X29)) ) <=> ~$spl56),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl56])])).
fof(f6264,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1(X28,'F_0') | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29)) )),
  inference(subsumption_resolution,[],[f6255,f673])).
fof(f6255,plain,(
  ( ! [X28,X29,X27] : (p(s(bool,X27)) | sP1(X28,'F_0') | s(bool,X28) = s(bool,X29) | s(bool,'T_0') = s(bool,X29) | s(bool,'T_0') = s(bool,X27)) )),
  inference(superposition,[],[f4435,f665])).
fof(f6260,plain,(
  ( ! [X10,X8,X11] : (sP1(X10,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X11)) ) | $spl52),
  inference(cnf_transformation,[],[f6260_D])).
fof(f6260_D,plain,(
  ( ! [X10,X8,X11] : (sP1(X10,X8) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X11) | s(bool,X10) = s(bool,X11)) ) <=> ~$spl52),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl52])])).
fof(f6262,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X13)) | sP1(X14,X12) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X12)) )),
  inference(subsumption_resolution,[],[f6251,f673])).
fof(f6251,plain,(
  ( ! [X14,X12,X15,X13] : (p(s(bool,X13)) | sP1(X14,X12) | s(bool,X14) = s(bool,X15) | s(bool,'T_0') = s(bool,X15) | s(bool,'T_0') = s(bool,X13) | s(bool,'T_0') = s(bool,X12)) )),
  inference(superposition,[],[f4435,f1649])).
fof(f6259,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X9)) | sP1(X10,X8) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X8)) )),
  inference(subsumption_resolution,[],[f6250,f673])).
fof(f6250,plain,(
  ( ! [X10,X8,X11,X9] : (p(s(bool,X9)) | sP1(X10,X8) | s(bool,X10) = s(bool,X11) | s(bool,'T_0') = s(bool,X11) | s(bool,'T_0') = s(bool,X8) | s(bool,'T_0') = s(bool,X9)) )),
  inference(superposition,[],[f4435,f1649])).
fof(f5153,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132,f5136,f5138,f5140,f5142,f5144,f5146,f5150,f5152])).
fof(f5152,plain,(
  ( ! [X2,X0,X1] : (sP52(X0,X2,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4848,f660])).
fof(f4848,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP52(X0,X2,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1119])).
fof(f5150,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5149,f660])).
fof(f5149,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP52(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f5148,f4364])).
fof(f5148,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP52(X0,X1,X2) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4847,f660])).
fof(f4847,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP52(X0,X1,X2) | ~p(s(bool,'const.dec_to_exhProof.v_rel_3'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X0),s('type.conSem.v',X4),s('type.exhSem.v',X5)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.exhSem.v',X5))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1118])).
fof(f5146,plain,(
  ( ! [X1] : (s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4836,f660])).
fof(f4836,plain,(
  ( ! [X1] : (~p(s(bool,'T_0')) | s('type.list.list'('type.conSem.v'),'const.list.NIL_0') = s('type.list.list'('type.conSem.v'),X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f736])).
fof(f5144,plain,(
  ( ! [X2,X0,X1] : (sP43(X0,X2,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4832,f660])).
fof(f4832,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP43(X0,X2,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1044])).
fof(f5142,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP22(X0,X1,X2) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4831,f660])).
fof(f4831,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP22(X0,X1,X2) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X6))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X5),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.conSem.v'),X7))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.semanticPrimitives.tid_or_exn',X4))))),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f911])).
fof(f5140,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP25(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X4))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X3)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4830,f660])).
fof(f4830,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | sP25(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X4))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X3)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f896])).
fof(f5138,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP26(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4829,f660])).
fof(f4829,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'T_0')) | sP26(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X3)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f892])).
fof(f5136,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP43(X0,X1,X2) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5135,f660])).
fof(f5135,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP43(X0,X1,X2) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(forward_demodulation,[],[f5134,f4364])).
fof(f5134,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP43(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4821,f660])).
fof(f4821,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP43(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.modSem.v'),X4),s('type.list.list'('type.conSem.v'),X6)))) | s('type.list.list'('type.conSem.v'),X1) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X6))) | s('type.list.list'('type.modSem.v'),X2) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X3),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1043])).
fof(f5132,plain,(
  ( ! [X2,X0,X1] : (sP27(X0,X2,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4818,f660])).
fof(f4818,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP27(X0,X2,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f912])).
fof(f5128,plain,(
  ( ! [X2,X0,X1] : (~sP59(X0,X1,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f4800,f660])).
fof(f4800,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP59(X0,X1,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1125])).
fof(f5126,plain,(
  ( ! [X2,X0,X1] : (~sP42(X0,X1,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f4795,f660])).
fof(f4795,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP42(X0,X1,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f981])).
fof(f5124,plain,(
  ( ! [X2,X0,X1] : (~sP21(X0,X1,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f4790,f660])).
fof(f4790,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP21(X0,X1,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f825])).
fof(f5120,plain,(
  ( ! [X2,X0,X1] : (~sP68(X0,X1,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f4765,f660])).
fof(f4765,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP68(X0,X1,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1194])).
fof(f5118,plain,(
  ( ! [X2,X0,X1] : (~sP51(X0,X1,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f4760,f660])).
fof(f4760,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP51(X0,X1,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1050])).
fof(f5116,plain,(
  ( ! [X2,X0,X1] : (~sP35(X0,X1,X2)) ) | $spl6),
  inference(subsumption_resolution,[],[f4755,f660])).
fof(f4755,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | ~sP35(X0,X1,X2)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f918])).
fof(f5114,plain,(
  ( ! [X0,X1] : (~sP14(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4750,f660])).
fof(f4750,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP14(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f792])).
fof(f5112,plain,(
  ( ! [X0,X1] : (~sP12(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4749,f660])).
fof(f4749,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP12(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f799])).
fof(f5110,plain,(
  ( ! [X0,X1] : (~sP4(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4748,f660])).
fof(f4748,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP4(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f779])).
fof(f5108,plain,(
  ( ! [X0,X1] : (~sP11(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4747,f660])).
fof(f4747,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP11(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f803])).
fof(f5106,plain,(
  ( ! [X0,X1] : (~sP3(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4746,f660])).
fof(f4746,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP3(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f782])).
fof(f5104,plain,(
  ( ! [X0,X1] : (~sP10(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4745,f660])).
fof(f4745,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP10(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f807])).
fof(f5102,plain,(
  ( ! [X0,X1] : (~sP13(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4744,f660])).
fof(f4744,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP13(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f795])).
fof(f5100,plain,(
  ( ! [X0,X1] : (~sP2(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4743,f660])).
fof(f4743,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP2(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f785])).
fof(f5086,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP55(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4691,f660])).
fof(f4691,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP55(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1159])).
fof(f5084,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP56(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4690,f660])).
fof(f4690,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP56(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1155])).
fof(f5082,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP57(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5081,f660])).
fof(f5081,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP57(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(forward_demodulation,[],[f5080,f4364])).
fof(f5080,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP57(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4689,f660])).
fof(f4689,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP57(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1151])).
fof(f5078,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP38(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4684,f660])).
fof(f4684,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP38(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1015])).
fof(f5076,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP39(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4683,f660])).
fof(f4683,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP39(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1011])).
fof(f5074,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP40(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5073,f660])).
fof(f5073,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP40(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(forward_demodulation,[],[f5072,f4364])).
fof(f5072,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP40(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4682,f660])).
fof(f4682,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP40(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1007])).
fof(f5070,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (sP17(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4681,f660])).
fof(f4681,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP17(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Conv_2'(s('type.num.num','const.dec_to_exhProof.get_tag_1'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4))),s('type.list.list'('type.exhSem.v'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),X4),s('type.list.list'('type.conSem.v'),X5)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f859])).
fof(f5068,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP18(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4680,f660])).
fof(f4680,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP18(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Vectorv_1'(s('type.list.list'('type.exhSem.v'),X5))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f855])).
fof(f5066,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP19(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5065,f660])).
fof(f5065,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP19(X0,X1,X2,X3,X4) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(forward_demodulation,[],[f5064,f4364])).
fof(f5064,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP19(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4679,f660])).
fof(f4679,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP19(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X5))),s('type.exhSem.v',X6)))) | s('type.list.list'('type.exhSem.v'),X3) != s('type.list.list'('type.exhSem.v'),'const.list.CONS_2'(s('type.exhSem.v',X6),s('type.list.list'('type.exhSem.v'),X8))) | s('type.list.list'('type.conSem.v'),X4) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X5),s('type.list.list'('type.conSem.v'),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f851])).
fof(f5062,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP53(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5061,f660])).
fof(f5061,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP53(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f5060,f4364])).
fof(f5060,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP53(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4662,f660])).
fof(f4662,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP53(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1169])).
fof(f5058,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP54(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5057,f660])).
fof(f5057,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP54(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f5056,f4364])).
fof(f5056,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP54(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4661,f660])).
fof(f4661,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP54(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1164])).
fof(f5054,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP58(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5053,f660])).
fof(f5053,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP58(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(forward_demodulation,[],[f5052,f4364])).
fof(f5052,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP58(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4660,f660])).
fof(f4660,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP58(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1141])).
fof(f5050,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP36(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5049,f660])).
fof(f5049,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP36(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f5048,f4364])).
fof(f5048,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP36(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4659,f660])).
fof(f4659,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP36(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1025])).
fof(f5046,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP37(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5045,f660])).
fof(f5045,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP37(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f5044,f4364])).
fof(f5044,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP37(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4658,f660])).
fof(f4658,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP37(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1020])).
fof(f5042,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP41(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5041,f660])).
fof(f5041,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP41(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(forward_demodulation,[],[f5040,f4364])).
fof(f5040,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP41(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4657,f660])).
fof(f4657,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP41(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f997])).
fof(f5038,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP15(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5037,f660])).
fof(f5037,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP15(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f5036,f4364])).
fof(f5036,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP15(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4656,f660])).
fof(f4656,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP15(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.exhLang.exp','const.dec_to_exh.compile_exp_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.conLang.exp',X6))))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp',X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f869])).
fof(f5034,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP16(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5033,f660])).
fof(f5033,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP16(X0,X1,X2,X3) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f5032,f4364])).
fof(f5032,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP16(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4655,f660])).
fof(f4655,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP16(X0,X1,X2,X3) | ~p(s(bool,'const.finite_map.SUBMAP_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1)))) | s('type.exhSem.v',X2) != s('type.exhSem.v','const.exhSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X4),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.exhLang.exp'))),'const.dec_to_exh.compile_funs_2'(s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7))),s('type.list.list'('type.string.char'),X6))) | s('type.conSem.v',X3) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X5),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),X7),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f864])).
fof(f5030,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(subsumption_resolution,[],[f5029,f660])).
fof(f5029,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP20(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(forward_demodulation,[],[f5028,f4364])).
fof(f5028,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP20(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4654,f660])).
fof(f4654,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP20(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.exhSem.v',bool),happ(s(fun('type.conSem.v',fun('type.exhSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),fun('type.conSem.v',fun('type.exhSem.v',bool))),X2),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X1))),s('type.conSem.v',X6))),s('type.exhSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.exhSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.exhSem.v')),X9))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f841])).
fof(f5020,plain,(
  ( ! [X0,X1] : (~sP8(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4611,f660])).
fof(f4611,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP8(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f817])).
fof(f5018,plain,(
  ( ! [X0,X1] : (~sP5(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4610,f660])).
fof(f4610,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP5(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f776])).
fof(f5016,plain,(
  ( ! [X0,X1] : (~sP9(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4609,f660])).
fof(f4609,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP9(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f812])).
fof(f5014,plain,(
  ( ! [X0,X1] : (~sP6(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4608,f660])).
fof(f4608,plain,(
  ( ! [X0,X1] : (~p(s(bool,'T_0')) | ~sP6(X0,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f773])).
fof(f5010,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f5009,f660])).
fof(f5009,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1)) ) | $spl6),
  inference(forward_demodulation,[],[f5008,f4364])).
fof(f5008,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5007,f660])).
fof(f5007,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(forward_demodulation,[],[f5006,f4364])).
fof(f5006,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5005,f660])).
fof(f5005,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(forward_demodulation,[],[f5004,f4364])).
fof(f5004,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5003,f660])).
fof(f5003,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(forward_demodulation,[],[f5002,f4364])).
fof(f5002,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f5001,f660])).
fof(f5001,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(forward_demodulation,[],[f5000,f4364])).
fof(f5000,plain,(
  ( ! [X2,X0,X1] : (sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(subsumption_resolution,[],[f4606,f660])).
fof(f4606,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP7(X2,X1,X0) | sP6(X2,X0) | sP5(X1,X0) | ~p(s(bool,happ(s(fun('type.list.list'('type.conSem.v'),bool),happ(s(fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.list.list'('type.modSem.v'),fun('type.list.list'('type.conSem.v'),bool))),X1),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK134(X2,X1,X0)))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))),s('type.list.list'('type.conSem.v'),'const.list.NIL_0')))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK131(X2,X1,X0)))),s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),sK132(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),sK133(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK129(X2,X1,X0)))),s('type.modSem.v','const.modSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Loc_1'(s('type.num.num',sK130(X2,X1,X0))))))) | sP4(X0,X2) | sP3(X0,X2) | sP2(X0,X1) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK126(X2,X1,X0)))),s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),sK127(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),sK128(X2,X1,X0))))))) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK124(X2,X1,X0)))),s('type.modSem.v','const.modSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))),s('type.conSem.v','const.conSem.Litv_1'(s('type.ast.lit',sK125(X2,X1,X0)))))))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f789])).
fof(f4982,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP61(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4602,f660])).
fof(f4602,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP61(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1244])).
fof(f4980,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP64(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4601,f660])).
fof(f4601,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP64(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1229])).
fof(f4978,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP65(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4600,f660])).
fof(f4600,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP65(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1225])).
fof(f4976,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP66(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4975,f660])).
fof(f4975,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP66(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4974,f4364])).
fof(f4974,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP66(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4599,f660])).
fof(f4599,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP66(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1221])).
fof(f4972,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP44(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4594,f660])).
fof(f4594,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP44(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1100])).
fof(f4970,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP47(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4593,f660])).
fof(f4593,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP47(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1085])).
fof(f4968,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP48(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4592,f660])).
fof(f4592,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP48(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1081])).
fof(f4966,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP49(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4965,f660])).
fof(f4965,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP49(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4964,f4364])).
fof(f4964,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP49(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4591,f660])).
fof(f4591,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP49(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1077])).
fof(f4962,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP28(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4590,f660])).
fof(f4590,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP28(X0,X1,X2,X3) | s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X6),s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))))))) != s('type.option.option'('type.pair.prod'('type.num.num','type.num.num')),'const.finite_map.FLOOKUP_2'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1),s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.num.num',X6),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.conSem.v'),X8))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.SOME_1'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X4),s('type.semanticPrimitives.tid_or_exn',X5))))),s('type.list.list'('type.modSem.v'),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f968])).
fof(f4960,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP31(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4589,f660])).
fof(f4589,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP31(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Conv_2'(s('type.option.option'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn')),'const.option.NONE_0'),s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f953])).
fof(f4958,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (sP32(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4588,f660])).
fof(f4588,plain,(
  ( ! [X4,X2,X0,X5,X3,X1] : (~p(s(bool,'T_0')) | sP32(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Vectorv_1'(s('type.list.list'('type.conSem.v'),X5))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Vectorv_1'(s('type.list.list'('type.modSem.v'),X4)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f949])).
fof(f4956,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP33(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4955,f660])).
fof(f4955,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP33(X0,X1,X2,X3,X4) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4954,f4364])).
fof(f4954,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (sP33(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4587,f660])).
fof(f4587,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP33(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X2),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X5))),s('type.conSem.v',X7)))) | s('type.list.list'('type.conSem.v'),X3) != s('type.list.list'('type.conSem.v'),'const.list.CONS_2'(s('type.conSem.v',X7),s('type.list.list'('type.conSem.v'),X8))) | s('type.list.list'('type.modSem.v'),X4) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X5),s('type.list.list'('type.modSem.v'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f945])).
fof(f4952,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP62(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4951,f660])).
fof(f4951,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP62(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4950,f4364])).
fof(f4950,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP62(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4584,f660])).
fof(f4584,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP62(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1239])).
fof(f4948,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP63(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4947,f660])).
fof(f4947,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP63(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4946,f4364])).
fof(f4946,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP63(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4583,f660])).
fof(f4583,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP63(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1234])).
fof(f4944,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP67(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4943,f660])).
fof(f4943,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP67(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(forward_demodulation,[],[f4942,f4364])).
fof(f4942,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP67(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4582,f660])).
fof(f4582,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP67(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1211])).
fof(f4940,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP45(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4939,f660])).
fof(f4939,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP45(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4938,f4364])).
fof(f4938,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP45(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4581,f660])).
fof(f4581,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP45(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1095])).
fof(f4936,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP46(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4935,f660])).
fof(f4935,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP46(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4934,f4364])).
fof(f4934,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP46(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4580,f660])).
fof(f4580,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP46(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1090])).
fof(f4932,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP50(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4931,f660])).
fof(f4931,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP50(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(forward_demodulation,[],[f4930,f4364])).
fof(f4930,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP50(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4579,f660])).
fof(f4579,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP50(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1067])).
fof(f4928,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP29(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4927,f660])).
fof(f4927,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP29(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4926,f4364])).
fof(f4926,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP29(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4578,f660])).
fof(f4578,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP29(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.string.char'),X5),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.modLang.exp',X6))))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.string.char'),X5),s('type.modLang.exp',X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f963])).
fof(f4924,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (sP30(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4923,f660])).
fof(f4923,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP30(X0,X1,X2,X3) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(forward_demodulation,[],[f4922,f4364])).
fof(f4922,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (sP30(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4577,f660])).
fof(f4577,plain,(
  ( ! [X6,X4,X2,X0,X10,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP30(X0,X1,X2,X3) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X9),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X2) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X10),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5))),s('type.list.list'('type.string.char'),X6))) | s('type.modSem.v',X3) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X5),s('type.list.list'('type.string.char'),X6)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f958])).
fof(f4920,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP34(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4919,f660])).
fof(f4919,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP34(X0,X1,X2,X3,X4) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(forward_demodulation,[],[f4918,f4364])).
fof(f4918,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP34(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4576,f660])).
fof(f4576,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP34(X0,X1,X2,X3,X4) | ~p(s(bool,happ(s(fun('type.conSem.v',bool),happ(s(fun('type.modSem.v',fun('type.conSem.v',bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.modSem.v',fun('type.conSem.v',bool))),X0),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X1))),s('type.modSem.v',X6))),s('type.conSem.v',X9)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X3) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.conSem.v',X9))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X8))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X4) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X5),s('type.modSem.v',X6))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X7)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f935])).
fof(f4910,plain,(
  ( ! [X2,X0,X1] : (s(X0,X2) = s(X0,sK89(X2,X1,X0))) ) | $spl6),
  inference(subsumption_resolution,[],[f4562,f660])).
fof(f4562,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | s(X0,X2) = s(X0,sK89(X2,X1,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f716])).
fof(f4890,plain,(
  ( ! [X2,X0,X1] : (sP60(X0,X2,X1)) ) | $spl6),
  inference(subsumption_resolution,[],[f4532,f660])).
fof(f4532,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,'T_0')) | sP60(X0,X2,X1)) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1188])).
fof(f4888,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4887,f660])).
fof(f4887,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP60(X0,X1,X2) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5)))) ) | $spl6),
  inference(forward_demodulation,[],[f4886,f4364])).
fof(f4886,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (sP60(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4531,f660])).
fof(f4531,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (~p(s(bool,'T_0')) | sP60(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X4),s('type.conSem.v',X7)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.conSem.v',X7))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X2) != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.CONS_2'(s('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'),'const.pair.,_2'(s('type.list.list'('type.string.char'),X3),s('type.modSem.v',X4))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X5)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f1187])).
fof(f4884,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1,X9] : (sP23(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4883,f660])).
fof(f4883,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP23(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))) ) | $spl6),
  inference(forward_demodulation,[],[f4882,f4364])).
fof(f4882,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP23(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4530,f660])).
fof(f4530,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP23(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Closure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X6),s('type.list.list'('type.string.char'),X4),s('type.conLang.exp','const.mod_to_con.compile_exp_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.modLang.exp',X5))))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Closure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.string.char'),X4),s('type.modLang.exp',X5)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f906])).
fof(f4880,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1,X9] : (sP24(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4879,f660])).
fof(f4879,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP24(X0,X1,X2) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) ) | $spl6),
  inference(forward_demodulation,[],[f4878,f4364])).
fof(f4878,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (sP24(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) ) | $spl6),
  inference(subsumption_resolution,[],[f4529,f660])).
fof(f4529,plain,(
  ( ! [X6,X4,X2,X0,X8,X7,X5,X3,X1,X9] : (~p(s(bool,'T_0')) | sP24(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.cenv_inv_4'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.finite_map.fmap'('type.ast.id'('type.list.list'('type.string.char')),'type.sptree.spt'('type.num.num')),X8),s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0)))) | s('type.conSem.v',X1) != s('type.conSem.v','const.conSem.Recclosure_3'(s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.conLang.exp'))),'const.mod_to_con.compile_funs_2'(s('type.pair.prod'('type.finite_map.fmap'('type.list.list'('type.string.char'),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.finite_map.fmap'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X9),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4))),s('type.list.list'('type.string.char'),X5))) | s('type.modSem.v',X2) != s('type.modSem.v','const.modSem.Recclosure_3'(s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),X3))),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.list.list'('type.string.char'),'type.modLang.exp'))),X4),s('type.list.list'('type.string.char'),X5)))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f901])).
fof(f4872,plain,(
  ( ! [X0] : (~p(s(bool,X0))) ) | $spl6),
  inference(subsumption_resolution,[],[f4518,f4364])).
fof(f4518,plain,(
  ( ! [X0] : (s(bool,'T_0') != s(bool,X0) | ~p(s(bool,X0))) ) | $spl6),
  inference(backward_demodulation,[],[f4364,f675])).
fof(f5151,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132,f5136,f5138,f5140,f5142,f5144,f5146,f5150])).
fof(f5147,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132,f5136,f5138,f5140,f5142,f5144,f5146])).
fof(f5145,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132,f5136,f5138,f5140,f5142,f5144])).
fof(f5143,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132,f5136,f5138,f5140,f5142])).
fof(f5141,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132,f5136,f5138,f5140])).
fof(f5139,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132,f5136,f5138])).
fof(f5137,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132,f5136])).
fof(f5133,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128,f5132])).
fof(f5129,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126,f5128])).
fof(f5127,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124,f5126])).
fof(f5125,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120,f5124])).
fof(f5121,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118,f5120])).
fof(f5119,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116,f5118])).
fof(f5117,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114,f5116])).
fof(f5115,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112,f5114])).
fof(f5113,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110,f5112])).
fof(f5111,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108,f5110])).
fof(f5109,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106,f5108])).
fof(f5107,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104,f5106])).
fof(f5105,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102,f5104])).
fof(f5103,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100,f5102])).
fof(f5101,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086,f5100])).
fof(f5087,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084,f5086])).
fof(f5085,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082,f5084])).
fof(f5083,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078,f5082])).
fof(f5079,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076,f5078])).
fof(f5077,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074,f5076])).
fof(f5075,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070,f5074])).
fof(f5071,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068,f5070])).
fof(f5069,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066,f5068])).
fof(f5067,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062,f5066])).
fof(f5063,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058,f5062])).
fof(f5059,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054,f5058])).
fof(f5055,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050,f5054])).
fof(f5051,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046,f5050])).
fof(f5047,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042,f5046])).
fof(f5043,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038,f5042])).
fof(f5039,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034,f5038])).
fof(f5035,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030,f5034])).
fof(f5031,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020,f5030])).
fof(f5021,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018,f5020])).
fof(f5019,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016,f5018])).
fof(f5017,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014,f5016])).
fof(f5015,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010,f5014])).
fof(f5011,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982,f5010])).
fof(f4983,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980,f4982])).
fof(f4981,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978,f4980])).
fof(f4979,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976,f4978])).
fof(f4977,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972,f4976])).
fof(f4973,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970,f4972])).
fof(f4971,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968,f4970])).
fof(f4969,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966,f4968])).
fof(f4967,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962,f4966])).
fof(f4963,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960,f4962])).
fof(f4961,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958,f4960])).
fof(f4959,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956,f4958])).
fof(f4957,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952,f4956])).
fof(f4953,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948,f4952])).
fof(f4949,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944,f4948])).
fof(f4945,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940,f4944])).
fof(f4941,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936,f4940])).
fof(f4937,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932,f4936])).
fof(f4933,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928,f4932])).
fof(f4929,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924,f4928])).
fof(f4925,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920,f4924])).
fof(f4921,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910,f4920])).
fof(f4911,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890,f4910])).
fof(f4891,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888,f4890])).
fof(f4889,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884,f4888])).
fof(f4885,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880,f4884])).
fof(f4881,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872,f4880])).
fof(f4873,plain,(
  $false | $spl6),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480,f4481,f4483,f4485,f4487,f4489,f4491,f4493,f4495,f4497,f4499,f4501,f4503,f4505,f4507,f4509,f4511,f4513,f4364,f4872])).
fof(f4871,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f4517,f660])).
fof(f4517,plain,(
  ~p(s(bool,'T_0')) | $spl6),
  inference(backward_demodulation,[],[f4364,f662])).
fof(f4430,plain,(
  ( ! [X1] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1,'T_0') | p(s(bool,X1))) ) | $spl50),
  inference(cnf_transformation,[],[f4430_D])).
fof(f4430_D,plain,(
  ( ! [X1] : (~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1,'T_0') | p(s(bool,X1))) ) <=> ~$spl50),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl50])])).
fof(f4515,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1,'T_0')) ) | $spl0),
  inference(condensation,[],[f4514])).
fof(f4514,plain,(
  ( ! [X364,X365,X363] : (p(s(bool,X364)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X364,'T_0') | s(bool,X363) = s(bool,X365) | s(bool,'T_0') = s(bool,X365)) ) | $spl0),
  inference(subsumption_resolution,[],[f3697,f1758])).
fof(f3697,plain,(
  ( ! [X364,X365,X363] : (~p(s(bool,X363)) | p(s(bool,X364)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X364,'T_0') | s(bool,X363) = s(bool,X365) | s(bool,'T_0') = s(bool,X365)) ) | $spl0),
  inference(superposition,[],[f2556,f1649])).
fof(f4427,plain,(
  ( ! [X2,X1] : (~sP78('const.bool.BOUNDED_1'(s(bool,X2)),X1,'T_0') | p(s(bool,X1))) ) | $spl48),
  inference(cnf_transformation,[],[f4427_D])).
fof(f4427_D,plain,(
  ( ! [X2,X1] : (~sP78('const.bool.BOUNDED_1'(s(bool,X2)),X1,'T_0') | p(s(bool,X1))) ) <=> ~$spl48),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl48])])).
fof(f4513,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X2)),X1,'T_0')) )),
  inference(condensation,[],[f4512])).
fof(f4512,plain,(
  ( ! [X257,X259,X260,X258] : (p(s(bool,X258)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X259)),X258,'T_0') | s(bool,X257) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) )),
  inference(subsumption_resolution,[],[f3661,f1758])).
fof(f3661,plain,(
  ( ! [X257,X259,X260,X258] : (~p(s(bool,X257)) | p(s(bool,X258)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X259)),X258,'T_0') | s(bool,X257) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) )),
  inference(superposition,[],[f2124,f1649])).
fof(f4424,plain,(
  ( ! [X2,X1] : (~sP77('T_0',X1,'const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) ) | $spl46),
  inference(cnf_transformation,[],[f4424_D])).
fof(f4424_D,plain,(
  ( ! [X2,X1] : (~sP77('T_0',X1,'const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) ) <=> ~$spl46),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl46])])).
fof(f4511,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP77('T_0',X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(condensation,[],[f4510])).
fof(f4510,plain,(
  ( ! [X241,X239,X242,X240] : (p(s(bool,X240)) | ~sP77('T_0',X240,'const.bool.BOUNDED_1'(s(bool,X241))) | s(bool,X239) = s(bool,X242) | s(bool,'T_0') = s(bool,X242)) )),
  inference(subsumption_resolution,[],[f3656,f1758])).
fof(f3656,plain,(
  ( ! [X241,X239,X242,X240] : (~p(s(bool,X239)) | p(s(bool,X240)) | ~sP77('T_0',X240,'const.bool.BOUNDED_1'(s(bool,X241))) | s(bool,X239) = s(bool,X242) | s(bool,'T_0') = s(bool,X242)) )),
  inference(superposition,[],[f2082,f1649])).
fof(f4421,plain,(
  ( ! [X2,X1] : (~sP74(X1,'T_0','const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) ) | $spl44),
  inference(cnf_transformation,[],[f4421_D])).
fof(f4421_D,plain,(
  ( ! [X2,X1] : (~sP74(X1,'T_0','const.bool.BOUNDED_1'(s(bool,X2))) | p(s(bool,X1))) ) <=> ~$spl44),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl44])])).
fof(f4509,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP74(X1,'T_0','const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(condensation,[],[f4508])).
fof(f4508,plain,(
  ( ! [X229,X227,X230,X228] : (p(s(bool,X228)) | ~sP74(X228,'T_0','const.bool.BOUNDED_1'(s(bool,X229))) | s(bool,X227) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) )),
  inference(subsumption_resolution,[],[f3653,f1758])).
fof(f3653,plain,(
  ( ! [X229,X227,X230,X228] : (~p(s(bool,X227)) | p(s(bool,X228)) | ~sP74(X228,'T_0','const.bool.BOUNDED_1'(s(bool,X229))) | s(bool,X227) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) )),
  inference(superposition,[],[f1924,f1649])).
fof(f4418,plain,(
  ( ! [X2,X1] : (~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) | $spl42),
  inference(cnf_transformation,[],[f4418_D])).
fof(f4418_D,plain,(
  ( ! [X2,X1] : (~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) <=> ~$spl42),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl42])])).
fof(f4507,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f4506])).
fof(f4506,plain,(
  ( ! [X225,X223,X226,X224] : (p(s(bool,X224)) | ~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X225)),X224) | s(bool,X223) = s(bool,X226) | s(bool,'T_0') = s(bool,X226)) )),
  inference(subsumption_resolution,[],[f3652,f1758])).
fof(f3652,plain,(
  ( ! [X225,X223,X226,X224] : (~p(s(bool,X223)) | p(s(bool,X224)) | ~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X225)),X224) | s(bool,X223) = s(bool,X226) | s(bool,'T_0') = s(bool,X226)) )),
  inference(superposition,[],[f1860,f1649])).
fof(f4415,plain,(
  ( ! [X2,X1] : (~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) | $spl40),
  inference(cnf_transformation,[],[f4415_D])).
fof(f4415_D,plain,(
  ( ! [X2,X1] : (~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1) | p(s(bool,X1))) ) <=> ~$spl40),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl40])])).
fof(f4505,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f4504])).
fof(f4504,plain,(
  ( ! [X222,X220,X219,X221] : (p(s(bool,X220)) | ~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X221)),X220) | s(bool,X219) = s(bool,X222) | s(bool,'T_0') = s(bool,X222)) )),
  inference(subsumption_resolution,[],[f3651,f1758])).
fof(f3651,plain,(
  ( ! [X222,X220,X219,X221] : (~p(s(bool,X219)) | p(s(bool,X220)) | ~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X221)),X220) | s(bool,X219) = s(bool,X222) | s(bool,'T_0') = s(bool,X222)) )),
  inference(superposition,[],[f1846,f1649])).
fof(f4412,plain,(
  ( ! [X2,X1] : (sP76('T_0',X1,X2) | ~sP75('T_0',X1,X2)) ) | $spl38),
  inference(cnf_transformation,[],[f4412_D])).
fof(f4412_D,plain,(
  ( ! [X2,X1] : (sP76('T_0',X1,X2) | ~sP75('T_0',X1,X2)) ) <=> ~$spl38),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl38])])).
fof(f4503,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP75('T_0',X1,X2) | sP76('T_0',X1,X2)) )),
  inference(condensation,[],[f4502])).
fof(f4502,plain,(
  ( ! [X94,X95,X93,X96] : (~sP75('T_0',X94,X95) | sP76('T_0',X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f3613,f1758])).
fof(f3613,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,X93)) | ~sP75('T_0',X94,X95) | sP76('T_0',X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f1364,f1649])).
fof(f4409,plain,(
  ( ! [X2,X1] : (sP78('T_0',X1,X2) | ~sP77('T_0',X1,X2)) ) | $spl36),
  inference(cnf_transformation,[],[f4409_D])).
fof(f4409_D,plain,(
  ( ! [X2,X1] : (sP78('T_0',X1,X2) | ~sP77('T_0',X1,X2)) ) <=> ~$spl36),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl36])])).
fof(f4501,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP77('T_0',X1,X2) | sP78('T_0',X1,X2)) )),
  inference(condensation,[],[f4500])).
fof(f4500,plain,(
  ( ! [X92,X90,X91,X89] : (~sP77('T_0',X90,X91) | sP78('T_0',X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(subsumption_resolution,[],[f3612,f1758])).
fof(f3612,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,X89)) | ~sP77('T_0',X90,X91) | sP78('T_0',X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f1363,f1649])).
fof(f4406,plain,(
  ( ! [X2,X1] : (~sP78('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl34),
  inference(cnf_transformation,[],[f4406_D])).
fof(f4406_D,plain,(
  ( ! [X2,X1] : (~sP78('T_0',X2,X1) | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl34),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl34])])).
fof(f4499,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP78('T_0',X2,X1)) )),
  inference(condensation,[],[f4498])).
fof(f4498,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X86)) | p(s(bool,X87)) | ~sP78('T_0',X87,X86) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f3611,f1758])).
fof(f3611,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X85)) | ~p(s(bool,X86)) | p(s(bool,X87)) | ~sP78('T_0',X87,X86) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f1330,f1649])).
fof(f4403,plain,(
  ( ! [X2,X1] : (sP78('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl32),
  inference(cnf_transformation,[],[f4403_D])).
fof(f4403_D,plain,(
  ( ! [X2,X1] : (sP78('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl32),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl32])])).
fof(f4497,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP78('T_0',X1,X2)) )),
  inference(condensation,[],[f4496])).
fof(f4496,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X82)) | sP78('T_0',X82,X83) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f3610,f1758])).
fof(f3610,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X81)) | ~p(s(bool,X82)) | sP78('T_0',X82,X83) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f1329,f1649])).
fof(f4400,plain,(
  ( ! [X2,X1] : (sP78('T_0',X2,X1) | p(s(bool,X1))) ) | $spl30),
  inference(cnf_transformation,[],[f4400_D])).
fof(f4400_D,plain,(
  ( ! [X2,X1] : (sP78('T_0',X2,X1) | p(s(bool,X1))) ) <=> ~$spl30),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl30])])).
fof(f4495,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP78('T_0',X2,X1)) )),
  inference(condensation,[],[f4494])).
fof(f4494,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,X78)) | sP78('T_0',X79,X78) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(subsumption_resolution,[],[f3609,f1758])).
fof(f3609,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,X77)) | p(s(bool,X78)) | sP78('T_0',X79,X78) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f1328,f1649])).
fof(f4397,plain,(
  ( ! [X2,X1] : (sP78(X2,X1,'T_0') | p(s(bool,X2)) | p(s(bool,X1))) ) | $spl28),
  inference(cnf_transformation,[],[f4397_D])).
fof(f4397_D,plain,(
  ( ! [X2,X1] : (sP78(X2,X1,'T_0') | p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl28),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl28])])).
fof(f4493,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP78(X2,X1,'T_0') | p(s(bool,X2))) )),
  inference(condensation,[],[f4492])).
fof(f4492,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,X74)) | sP78(X75,X74,'T_0') | p(s(bool,X75)) | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f3608,f1758])).
fof(f3608,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,X74)) | sP78(X75,X74,'T_0') | p(s(bool,X75)) | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f1327,f1649])).
fof(f4394,plain,(
  ( ! [X2,X1] : (~sP77(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) | $spl26),
  inference(cnf_transformation,[],[f4394_D])).
fof(f4394_D,plain,(
  ( ! [X2,X1] : (~sP77(X2,X1,'T_0') | ~p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl26),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl26])])).
fof(f4491,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP77(X2,X1,'T_0')) )),
  inference(condensation,[],[f4490])).
fof(f4490,plain,(
  ( ! [X70,X72,X71,X69] : (p(s(bool,X70)) | ~p(s(bool,X71)) | ~sP77(X71,X70,'T_0') | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f3607,f1758])).
fof(f3607,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,X69)) | p(s(bool,X70)) | ~p(s(bool,X71)) | ~sP77(X71,X70,'T_0') | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f1323,f1649])).
fof(f4391,plain,(
  ( ! [X2,X1] : (~sP76('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) | $spl24),
  inference(cnf_transformation,[],[f4391_D])).
fof(f4391_D,plain,(
  ( ! [X2,X1] : (~sP76('T_0',X2,X1) | p(s(bool,X2)) | p(s(bool,X1))) ) <=> ~$spl24),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl24])])).
fof(f4489,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP76('T_0',X2,X1)) )),
  inference(condensation,[],[f4488])).
fof(f4488,plain,(
  ( ! [X68,X66,X67,X65] : (p(s(bool,X66)) | p(s(bool,X67)) | ~sP76('T_0',X67,X66) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f3606,f1758])).
fof(f3606,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,X65)) | p(s(bool,X66)) | p(s(bool,X67)) | ~sP76('T_0',X67,X66) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f1313,f1649])).
fof(f4388,plain,(
  ( ! [X2,X1] : (sP76('T_0',X1,X2) | ~p(s(bool,X1))) ) | $spl22),
  inference(cnf_transformation,[],[f4388_D])).
fof(f4388_D,plain,(
  ( ! [X2,X1] : (sP76('T_0',X1,X2) | ~p(s(bool,X1))) ) <=> ~$spl22),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl22])])).
fof(f4487,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP76('T_0',X1,X2)) )),
  inference(condensation,[],[f4486])).
fof(f4486,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,X62)) | sP76('T_0',X62,X63) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f3605,f1758])).
fof(f3605,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,X61)) | ~p(s(bool,X62)) | sP76('T_0',X62,X63) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f1312,f1649])).
fof(f4385,plain,(
  ( ! [X2,X1] : (sP76('T_0',X2,X1) | ~p(s(bool,X1))) ) | $spl20),
  inference(cnf_transformation,[],[f4385_D])).
fof(f4385_D,plain,(
  ( ! [X2,X1] : (sP76('T_0',X2,X1) | ~p(s(bool,X1))) ) <=> ~$spl20),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl20])])).
fof(f4485,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP76('T_0',X2,X1)) )),
  inference(condensation,[],[f4484])).
fof(f4484,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,X58)) | sP76('T_0',X59,X58) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f3604,f1758])).
fof(f3604,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,X57)) | ~p(s(bool,X58)) | sP76('T_0',X59,X58) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f1311,f1649])).
fof(f4382,plain,(
  ( ! [X2,X1] : (~sP75('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) | $spl18),
  inference(cnf_transformation,[],[f4382_D])).
fof(f4382_D,plain,(
  ( ! [X2,X1] : (~sP75('T_0',X1,X2) | p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl18),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl18])])).
fof(f4483,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP75('T_0',X1,X2)) )),
  inference(condensation,[],[f4482])).
fof(f4482,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,X54)) | p(s(bool,X55)) | ~sP75('T_0',X54,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f3603,f1758])).
fof(f3603,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X53)) | p(s(bool,X54)) | p(s(bool,X55)) | ~sP75('T_0',X54,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f1306,f1649])).
fof(f4481,plain,(
  ( ! [X2,X0,X1] : (~sP75('T_0',X1,X2) | sP76('T_0',X1,X2) | s(bool,'T_0') = s(bool,X0)) )),
  inference(global_subsumption,[],[f659,f658,f660,f662,f663,f664,f665,f674,f673,f676,f675,f700,f699,f706,f704,f709,f707,f714,f712,f717,f716,f715,f718,f721,f720,f719,f725,f722,f731,f730,f733,f732,f735,f734,f737,f736,f740,f739,f1375,f758,f755,f754,f753,f764,f767,f766,f765,f770,f769,f768,f773,f772,f771,f776,f775,f774,f779,f778,f777,f782,f781,f780,f785,f784,f783,f789,f788,f787,f786,f792,f791,f790,f795,f794,f793,f799,f798,f797,f796,f803,f802,f801,f800,f807,f806,f805,f804,f812,f811,f810,f809,f808,f817,f816,f815,f814,f813,f820,f819,f818,f831,f830,f829,f828,f827,f826,f825,f824,f823,f822,f821,f841,f840,f839,f838,f837,f836,f835,f834,f833,f832,f851,f850,f849,f848,f847,f846,f845,f844,f843,f842,f855,f854,f853,f852,f859,f858,f857,f856,f864,f863,f862,f861,f860,f869,f868,f867,f866,f865,f877,f876,f875,f874,f873,f872,f871,f870,f888,f887,f886,f885,f884,f883,f882,f881,f880,f879,f878,f892,f891,f890,f889,f896,f895,f894,f893,f901,f900,f899,f898,f897,f906,f905,f904,f903,f902,f911,f910,f909,f908,f907,f913,f912,f925,f924,f923,f922,f921,f920,f919,f918,f917,f916,f915,f914,f935,f934,f933,f932,f931,f930,f929,f928,f927,f926,f945,f944,f943,f942,f941,f940,f939,f938,f937,f936,f949,f948,f947,f946,f953,f952,f951,f950,f958,f957,f956,f955,f954,f963,f962,f961,f960,f959,f968,f967,f966,f965,f964,f976,f975,f974,f973,f972,f971,f970,f969,f987,f986,f985,f984,f983,f982,f981,f980,f979,f978,f977,f997,f996,f995,f994,f993,f992,f991,f990,f989,f988,f1007,f1006,f1005,f1004,f1003,f1002,f1001,f1000,f999,f998,f1011,f1010,f1009,f1008,f1015,f1014,f1013,f1012,f1020,f1019,f1018,f1017,f1016,f1025,f1024,f1023,f1022,f1021,f1033,f1032,f1031,f1030,f1029,f1028,f1027,f1026,f1043,f1042,f1041,f1040,f1039,f1038,f1037,f1036,f1035,f1034,f1045,f1044,f1057,f1056,f1055,f1054,f1053,f1052,f1051,f1050,f1049,f1048,f1047,f1046,f1067,f1066,f1065,f1064,f1063,f1062,f1061,f1060,f1059,f1058,f1077,f1076,f1075,f1074,f1073,f1072,f1071,f1070,f1069,f1068,f1081,f1080,f1079,f1078,f1085,f1084,f1083,f1082,f1090,f1089,f1088,f1087,f1086,f1095,f1094,f1093,f1092,f1091,f1100,f1099,f1098,f1097,f1096,f1108,f1107,f1106,f1105,f1104,f1103,f1102,f1101,f1118,f1117,f1116,f1115,f1114,f1113,f1112,f1111,f1110,f1109,f1120,f1119,f1131,f1130,f1129,f1128,f1127,f1126,f1125,f1124,f1123,f1122,f1121,f1141,f1140,f1139,f1138,f1137,f1136,f1135,f1134,f1133,f1132,f1151,f1150,f1149,f1148,f1147,f1146,f1145,f1144,f1143,f1142,f1155,f1154,f1153,f1152,f1159,f1158,f1157,f1156,f1164,f1163,f1162,f1161,f1160,f1169,f1168,f1167,f1166,f1165,f1177,f1176,f1175,f1174,f1173,f1172,f1171,f1170,f1187,f1186,f1185,f1184,f1183,f1182,f1181,f1180,f1179,f1178,f1189,f1188,f1201,f1200,f1199,f1198,f1197,f1196,f1195,f1194,f1193,f1192,f1191,f1190,f1211,f1210,f1209,f1208,f1207,f1206,f1205,f1204,f1203,f1202,f1221,f1220,f1219,f1218,f1217,f1216,f1215,f1214,f1213,f1212,f1225,f1224,f1223,f1222,f1229,f1228,f1227,f1226,f1234,f1233,f1232,f1231,f1230,f1239,f1238,f1237,f1236,f1235,f1244,f1243,f1242,f1241,f1240,f1252,f1251,f1250,f1249,f1248,f1247,f1246,f1245,f1265,f1264,f1263,f1262,f1261,f1260,f1259,f1269,f1268,f1267,f1266,f1273,f1272,f1271,f1270,f1277,f1276,f1275,f1274,f1281,f1280,f1279,f1278,f1365,f1285,f1284,f1283,f1282,f1292,f1291,f1290,f1289,f1298,f1295,f1294,f1293,f1305,f1304,f1303,f1364,f1301,f1300,f1299,f1309,f1308,f1307,f1306,f1313,f1312,f1311,f1310,f1322,f1321,f1320,f1363,f1318,f1317,f1316,f1326,f1325,f1324,f1323,f1330,f1329,f1328,f1327,f1351,f1350,f1349,f1352,f1356,f1355,f1354,f1353,f1360,f1359,f1358,f1357,f1361,f1362,f1378,f1379,f1380,f1381,f1382,f1383,f1384,f1385,f1386,f1387,f1388,f1389,f1390,f1391,f1392,f1393,f1394,f1395,f1396,f1397,f1401,f1402,f1403,f1422,f1423,f1426,f1428,f1431,f1433,f1442,f1447,f1449,f1453,f1454,f1458,f1467,f1471,f1472,f1475,f1477,f1481,f1483,f1486,f1488,f1498,f1500,f1504,f1509,f1511,f1515,f1517,f1520,f1522,f1540,f1542,f1556,f1557,f1569,f1571,f1641,f1649,f1758,f1778,f1777,f1786,f1785,f1787,f1804,f1802,f1813,f1811,f1840,f1846,f1855,f1860,f1864,f1870,f1877,f1881,f1889,f1894,f1924,f1964,f1977,f1983,f1987,f2018,f2026,f2027,f2040,f2041,f2063,f2077,f2082,f2086,f2102,f2106,f2114,f2124,f2128,f2138,f2151,f2166,f2174,f2184,f2198,f2216,f2221,f2222,f2238,f2245,f2268,f2285,f2309,f2317,f2321,f2334,f2349,f2368,f2385,f2393,f2397,f2603,f2599,f2639,f2684,f2685,f2690,f2716,f2948,f2949,f2951,f3005,f3071,f3074,f3165,f3166,f3311,f3313,f4362,f4366,f4369,f4372,f4375,f4378,f4381,f4384,f4387,f4390,f4393,f4396,f4399,f4402,f4405,f4408,f4411,f3358,f3361,f4414,f4417,f4420,f4423,f4426,f3441,f3442,f4431,f4432,f4433,f4434,f4435,f4436,f4437,f4438,f4439,f4440,f4441,f4442,f4443,f4444,f4445,f4446,f4447,f4448,f4449,f4450,f4451,f4452,f4453,f4454,f3490,f3493,f4455,f4456,f4457,f4458,f4459,f4461,f4462,f4463,f4464,f3582,f3583,f4470,f4472,f4474,f4476,f4478,f4480])).
fof(f4376,plain,(
  ( ! [X2,X1] : (~sP74(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) | $spl14),
  inference(cnf_transformation,[],[f4376_D])).
fof(f4376_D,plain,(
  ( ! [X2,X1] : (~sP74(X2,X1,'T_0') | p(s(bool,X2)) | ~p(s(bool,X1))) ) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f4478,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP74(X2,X1,'T_0')) )),
  inference(condensation,[],[f4477])).
fof(f4477,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X46)) | p(s(bool,X47)) | ~sP74(X47,X46,'T_0') | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f3601,f1758])).
fof(f3601,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X45)) | ~p(s(bool,X46)) | p(s(bool,X47)) | ~sP74(X47,X46,'T_0') | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f1298,f1649])).
fof(f4373,plain,(
  ( ! [X2,X1] : (~sP70(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl12),
  inference(cnf_transformation,[],[f4373_D])).
fof(f4373_D,plain,(
  ( ! [X2,X1] : (~sP70(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f4476,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP70(X1,'T_0',X2)) )),
  inference(condensation,[],[f4475])).
fof(f4475,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X42)) | p(s(bool,X43)) | ~sP70(X42,'T_0',X43) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f3600,f1758])).
fof(f3600,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X41)) | ~p(s(bool,X42)) | p(s(bool,X43)) | ~sP70(X42,'T_0',X43) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f1270,f1649])).
fof(f4370,plain,(
  ( ! [X2,X1] : (~sP71(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) | $spl10),
  inference(cnf_transformation,[],[f4370_D])).
fof(f4370_D,plain,(
  ( ! [X2,X1] : (~sP71(X1,'T_0',X2) | ~p(s(bool,X1)) | p(s(bool,X2))) ) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f4474,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP71(X1,'T_0',X2)) )),
  inference(condensation,[],[f4473])).
fof(f4473,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X38)) | p(s(bool,X39)) | ~sP71(X38,'T_0',X39) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f3599,f1758])).
fof(f3599,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X37)) | ~p(s(bool,X38)) | p(s(bool,X39)) | ~sP71(X38,'T_0',X39) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1266,f1649])).
fof(f4367,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) | $spl8),
  inference(cnf_transformation,[],[f4367_D])).
fof(f4367_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1(X1,'T_0')) ) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f4472,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f4471])).
fof(f4471,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X35)) | sP1(X35,'T_0') | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f3598,f1758])).
fof(f3598,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | sP1(X35,'T_0') | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f758,f1649])).
fof(f4363,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) | $spl4),
  inference(cnf_transformation,[],[f4363_D])).
fof(f4363_D,plain,(
  ( ! [X1] : (p(s(bool,X1)) | sP1('T_0',X1)) ) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f4470,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f4469])).
fof(f4469,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,X32)) | sP1('T_0',X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f3597,f1758])).
fof(f3597,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X31)) | p(s(bool,X32)) | sP1('T_0',X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f755,f1649])).
fof(f4429,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X1,'T_0')) ) | $spl0),
  inference(condensation,[],[f4428])).
fof(f4428,plain,(
  ( ! [X364,X365,X363] : (p(s(bool,X364)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X364,'T_0') | s(bool,X363) = s(bool,X365) | s(bool,'T_0') = s(bool,X365)) ) | $spl0),
  inference(subsumption_resolution,[],[f3423,f1758])).
fof(f3423,plain,(
  ( ! [X364,X365,X363] : (~p(s(bool,X363)) | p(s(bool,X364)) | ~sP78('const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)),X364,'T_0') | s(bool,X363) = s(bool,X365) | s(bool,'T_0') = s(bool,X365)) ) | $spl0),
  inference(superposition,[],[f2556,f1649])).
fof(f4426,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X2)),X1,'T_0')) )),
  inference(condensation,[],[f4425])).
fof(f4425,plain,(
  ( ! [X257,X259,X260,X258] : (p(s(bool,X258)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X259)),X258,'T_0') | s(bool,X257) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) )),
  inference(subsumption_resolution,[],[f3387,f1758])).
fof(f3387,plain,(
  ( ! [X257,X259,X260,X258] : (~p(s(bool,X257)) | p(s(bool,X258)) | ~sP78('const.bool.BOUNDED_1'(s(bool,X259)),X258,'T_0') | s(bool,X257) = s(bool,X260) | s(bool,'T_0') = s(bool,X260)) )),
  inference(superposition,[],[f2124,f1649])).
fof(f4423,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP77('T_0',X1,'const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(condensation,[],[f4422])).
fof(f4422,plain,(
  ( ! [X241,X239,X242,X240] : (p(s(bool,X240)) | ~sP77('T_0',X240,'const.bool.BOUNDED_1'(s(bool,X241))) | s(bool,X239) = s(bool,X242) | s(bool,'T_0') = s(bool,X242)) )),
  inference(subsumption_resolution,[],[f3382,f1758])).
fof(f3382,plain,(
  ( ! [X241,X239,X242,X240] : (~p(s(bool,X239)) | p(s(bool,X240)) | ~sP77('T_0',X240,'const.bool.BOUNDED_1'(s(bool,X241))) | s(bool,X239) = s(bool,X242) | s(bool,'T_0') = s(bool,X242)) )),
  inference(superposition,[],[f2082,f1649])).
fof(f4420,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP74(X1,'T_0','const.bool.BOUNDED_1'(s(bool,X2)))) )),
  inference(condensation,[],[f4419])).
fof(f4419,plain,(
  ( ! [X229,X227,X230,X228] : (p(s(bool,X228)) | ~sP74(X228,'T_0','const.bool.BOUNDED_1'(s(bool,X229))) | s(bool,X227) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) )),
  inference(subsumption_resolution,[],[f3379,f1758])).
fof(f3379,plain,(
  ( ! [X229,X227,X230,X228] : (~p(s(bool,X227)) | p(s(bool,X228)) | ~sP74(X228,'T_0','const.bool.BOUNDED_1'(s(bool,X229))) | s(bool,X227) = s(bool,X230) | s(bool,'T_0') = s(bool,X230)) )),
  inference(superposition,[],[f1924,f1649])).
fof(f4417,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f4416])).
fof(f4416,plain,(
  ( ! [X225,X223,X226,X224] : (p(s(bool,X224)) | ~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X225)),X224) | s(bool,X223) = s(bool,X226) | s(bool,'T_0') = s(bool,X226)) )),
  inference(subsumption_resolution,[],[f3378,f1758])).
fof(f3378,plain,(
  ( ! [X225,X223,X226,X224] : (~p(s(bool,X223)) | p(s(bool,X224)) | ~sP70('T_0','const.bool.BOUNDED_1'(s(bool,X225)),X224) | s(bool,X223) = s(bool,X226) | s(bool,'T_0') = s(bool,X226)) )),
  inference(superposition,[],[f1860,f1649])).
fof(f4414,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X2)),X1)) )),
  inference(condensation,[],[f4413])).
fof(f4413,plain,(
  ( ! [X222,X220,X219,X221] : (p(s(bool,X220)) | ~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X221)),X220) | s(bool,X219) = s(bool,X222) | s(bool,'T_0') = s(bool,X222)) )),
  inference(subsumption_resolution,[],[f3377,f1758])).
fof(f3377,plain,(
  ( ! [X222,X220,X219,X221] : (~p(s(bool,X219)) | p(s(bool,X220)) | ~sP71('T_0','const.bool.BOUNDED_1'(s(bool,X221)),X220) | s(bool,X219) = s(bool,X222) | s(bool,'T_0') = s(bool,X222)) )),
  inference(superposition,[],[f1846,f1649])).
fof(f4411,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP75('T_0',X1,X2) | sP76('T_0',X1,X2)) )),
  inference(condensation,[],[f4410])).
fof(f4410,plain,(
  ( ! [X94,X95,X93,X96] : (~sP75('T_0',X94,X95) | sP76('T_0',X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(subsumption_resolution,[],[f3339,f1758])).
fof(f3339,plain,(
  ( ! [X94,X95,X93,X96] : (~p(s(bool,X93)) | ~sP75('T_0',X94,X95) | sP76('T_0',X94,X95) | s(bool,X93) = s(bool,X96) | s(bool,'T_0') = s(bool,X96)) )),
  inference(superposition,[],[f1364,f1649])).
fof(f4408,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP77('T_0',X1,X2) | sP78('T_0',X1,X2)) )),
  inference(condensation,[],[f4407])).
fof(f4407,plain,(
  ( ! [X92,X90,X91,X89] : (~sP77('T_0',X90,X91) | sP78('T_0',X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(subsumption_resolution,[],[f3338,f1758])).
fof(f3338,plain,(
  ( ! [X92,X90,X91,X89] : (~p(s(bool,X89)) | ~sP77('T_0',X90,X91) | sP78('T_0',X90,X91) | s(bool,X89) = s(bool,X92) | s(bool,'T_0') = s(bool,X92)) )),
  inference(superposition,[],[f1363,f1649])).
fof(f4405,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP78('T_0',X2,X1)) )),
  inference(condensation,[],[f4404])).
fof(f4404,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X86)) | p(s(bool,X87)) | ~sP78('T_0',X87,X86) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(subsumption_resolution,[],[f3337,f1758])).
fof(f3337,plain,(
  ( ! [X88,X87,X85,X86] : (~p(s(bool,X85)) | ~p(s(bool,X86)) | p(s(bool,X87)) | ~sP78('T_0',X87,X86) | s(bool,X85) = s(bool,X88) | s(bool,'T_0') = s(bool,X88)) )),
  inference(superposition,[],[f1330,f1649])).
fof(f4402,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP78('T_0',X1,X2)) )),
  inference(condensation,[],[f4401])).
fof(f4401,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X82)) | sP78('T_0',X82,X83) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(subsumption_resolution,[],[f3336,f1758])).
fof(f3336,plain,(
  ( ! [X83,X81,X84,X82] : (~p(s(bool,X81)) | ~p(s(bool,X82)) | sP78('T_0',X82,X83) | s(bool,X81) = s(bool,X84) | s(bool,'T_0') = s(bool,X84)) )),
  inference(superposition,[],[f1329,f1649])).
fof(f4399,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP78('T_0',X2,X1)) )),
  inference(condensation,[],[f4398])).
fof(f4398,plain,(
  ( ! [X80,X78,X79,X77] : (p(s(bool,X78)) | sP78('T_0',X79,X78) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(subsumption_resolution,[],[f3335,f1758])).
fof(f3335,plain,(
  ( ! [X80,X78,X79,X77] : (~p(s(bool,X77)) | p(s(bool,X78)) | sP78('T_0',X79,X78) | s(bool,X77) = s(bool,X80) | s(bool,'T_0') = s(bool,X80)) )),
  inference(superposition,[],[f1328,f1649])).
fof(f4396,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP78(X2,X1,'T_0') | p(s(bool,X2))) )),
  inference(condensation,[],[f4395])).
fof(f4395,plain,(
  ( ! [X76,X74,X75,X73] : (p(s(bool,X74)) | sP78(X75,X74,'T_0') | p(s(bool,X75)) | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(subsumption_resolution,[],[f3334,f1758])).
fof(f3334,plain,(
  ( ! [X76,X74,X75,X73] : (~p(s(bool,X73)) | p(s(bool,X74)) | sP78(X75,X74,'T_0') | p(s(bool,X75)) | s(bool,X73) = s(bool,X76) | s(bool,'T_0') = s(bool,X76)) )),
  inference(superposition,[],[f1327,f1649])).
fof(f4393,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | ~p(s(bool,X2)) | ~sP77(X2,X1,'T_0')) )),
  inference(condensation,[],[f4392])).
fof(f4392,plain,(
  ( ! [X70,X72,X71,X69] : (p(s(bool,X70)) | ~p(s(bool,X71)) | ~sP77(X71,X70,'T_0') | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(subsumption_resolution,[],[f3333,f1758])).
fof(f3333,plain,(
  ( ! [X70,X72,X71,X69] : (~p(s(bool,X69)) | p(s(bool,X70)) | ~p(s(bool,X71)) | ~sP77(X71,X70,'T_0') | s(bool,X69) = s(bool,X72) | s(bool,'T_0') = s(bool,X72)) )),
  inference(superposition,[],[f1323,f1649])).
fof(f4390,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP76('T_0',X2,X1)) )),
  inference(condensation,[],[f4389])).
fof(f4389,plain,(
  ( ! [X68,X66,X67,X65] : (p(s(bool,X66)) | p(s(bool,X67)) | ~sP76('T_0',X67,X66) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(subsumption_resolution,[],[f3332,f1758])).
fof(f3332,plain,(
  ( ! [X68,X66,X67,X65] : (~p(s(bool,X65)) | p(s(bool,X66)) | p(s(bool,X67)) | ~sP76('T_0',X67,X66) | s(bool,X65) = s(bool,X68) | s(bool,'T_0') = s(bool,X68)) )),
  inference(superposition,[],[f1313,f1649])).
fof(f4387,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP76('T_0',X1,X2)) )),
  inference(condensation,[],[f4386])).
fof(f4386,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,X62)) | sP76('T_0',X62,X63) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(subsumption_resolution,[],[f3331,f1758])).
fof(f3331,plain,(
  ( ! [X61,X64,X62,X63] : (~p(s(bool,X61)) | ~p(s(bool,X62)) | sP76('T_0',X62,X63) | s(bool,X61) = s(bool,X64) | s(bool,'T_0') = s(bool,X64)) )),
  inference(superposition,[],[f1312,f1649])).
fof(f4384,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | sP76('T_0',X2,X1)) )),
  inference(condensation,[],[f4383])).
fof(f4383,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,X58)) | sP76('T_0',X59,X58) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(subsumption_resolution,[],[f3330,f1758])).
fof(f3330,plain,(
  ( ! [X59,X57,X60,X58] : (~p(s(bool,X57)) | ~p(s(bool,X58)) | sP76('T_0',X59,X58) | s(bool,X57) = s(bool,X60) | s(bool,'T_0') = s(bool,X60)) )),
  inference(superposition,[],[f1311,f1649])).
fof(f4381,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | p(s(bool,X2)) | ~sP75('T_0',X1,X2)) )),
  inference(condensation,[],[f4380])).
fof(f4380,plain,(
  ( ! [X54,X56,X55,X53] : (p(s(bool,X54)) | p(s(bool,X55)) | ~sP75('T_0',X54,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(subsumption_resolution,[],[f3329,f1758])).
fof(f3329,plain,(
  ( ! [X54,X56,X55,X53] : (~p(s(bool,X53)) | p(s(bool,X54)) | p(s(bool,X55)) | ~sP75('T_0',X54,X55) | s(bool,X53) = s(bool,X56) | s(bool,'T_0') = s(bool,X56)) )),
  inference(superposition,[],[f1306,f1649])).
fof(f4379,plain,(
  ( ! [X2,X1] : (~sP75('T_0',X1,X2) | sP76('T_0',X1,X2) | p(s(bool,X1))) ) | $spl16),
  inference(cnf_transformation,[],[f4379_D])).
fof(f4379_D,plain,(
  ( ! [X2,X1] : (~sP75('T_0',X1,X2) | sP76('T_0',X1,X2) | p(s(bool,X1))) ) <=> ~$spl16),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl16])])).
fof(f4378,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~sP75('T_0',X1,X2) | p(s(bool,X1)) | sP76('T_0',X1,X2)) )),
  inference(condensation,[],[f4377])).
fof(f4377,plain,(
  ( ! [X52,X50,X51,X49] : (~sP75('T_0',X50,X51) | p(s(bool,X50)) | sP76('T_0',X50,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(subsumption_resolution,[],[f3328,f1758])).
fof(f3328,plain,(
  ( ! [X52,X50,X51,X49] : (~p(s(bool,X49)) | ~sP75('T_0',X50,X51) | p(s(bool,X50)) | sP76('T_0',X50,X51) | s(bool,X49) = s(bool,X52) | s(bool,'T_0') = s(bool,X52)) )),
  inference(superposition,[],[f1304,f1649])).
fof(f4375,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP74(X2,X1,'T_0')) )),
  inference(condensation,[],[f4374])).
fof(f4374,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X46)) | p(s(bool,X47)) | ~sP74(X47,X46,'T_0') | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(subsumption_resolution,[],[f3327,f1758])).
fof(f3327,plain,(
  ( ! [X47,X45,X48,X46] : (~p(s(bool,X45)) | ~p(s(bool,X46)) | p(s(bool,X47)) | ~sP74(X47,X46,'T_0') | s(bool,X45) = s(bool,X48) | s(bool,'T_0') = s(bool,X48)) )),
  inference(superposition,[],[f1298,f1649])).
fof(f4372,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP70(X1,'T_0',X2)) )),
  inference(condensation,[],[f4371])).
fof(f4371,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X42)) | p(s(bool,X43)) | ~sP70(X42,'T_0',X43) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(subsumption_resolution,[],[f3326,f1758])).
fof(f3326,plain,(
  ( ! [X43,X41,X44,X42] : (~p(s(bool,X41)) | ~p(s(bool,X42)) | p(s(bool,X43)) | ~sP70(X42,'T_0',X43) | s(bool,X41) = s(bool,X44) | s(bool,'T_0') = s(bool,X44)) )),
  inference(superposition,[],[f1270,f1649])).
fof(f4369,plain,(
  ( ! [X2,X0,X1] : (s(bool,'T_0') = s(bool,X0) | ~p(s(bool,X1)) | p(s(bool,X2)) | ~sP71(X1,'T_0',X2)) )),
  inference(condensation,[],[f4368])).
fof(f4368,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X38)) | p(s(bool,X39)) | ~sP71(X38,'T_0',X39) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(subsumption_resolution,[],[f3325,f1758])).
fof(f3325,plain,(
  ( ! [X39,X37,X38,X40] : (~p(s(bool,X37)) | ~p(s(bool,X38)) | p(s(bool,X39)) | ~sP71(X38,'T_0',X39) | s(bool,X37) = s(bool,X40) | s(bool,'T_0') = s(bool,X40)) )),
  inference(superposition,[],[f1266,f1649])).
fof(f4366,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1(X1,'T_0')) )),
  inference(condensation,[],[f4365])).
fof(f4365,plain,(
  ( ! [X35,X36,X34] : (p(s(bool,X35)) | sP1(X35,'T_0') | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(subsumption_resolution,[],[f3324,f1758])).
fof(f3324,plain,(
  ( ! [X35,X36,X34] : (~p(s(bool,X34)) | p(s(bool,X35)) | sP1(X35,'T_0') | s(bool,X34) = s(bool,X36) | s(bool,'T_0') = s(bool,X36)) )),
  inference(superposition,[],[f758,f1649])).
fof(f4362,plain,(
  ( ! [X0,X1] : (s(bool,'T_0') = s(bool,X0) | p(s(bool,X1)) | sP1('T_0',X1)) )),
  inference(condensation,[],[f4361])).
fof(f4361,plain,(
  ( ! [X33,X31,X32] : (p(s(bool,X32)) | sP1('T_0',X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(subsumption_resolution,[],[f3323,f1758])).
fof(f3323,plain,(
  ( ! [X33,X31,X32] : (~p(s(bool,X31)) | p(s(bool,X32)) | sP1('T_0',X32) | s(bool,X31) = s(bool,X33) | s(bool,'T_0') = s(bool,X33)) )),
  inference(superposition,[],[f755,f1649])).
fof(f1377,plain,(
  $false | ($spl1 | $spl2)),
  inference(subsumption_resolution,[],[f1376,f664])).
fof(f1376,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0')))) | ($spl1 | $spl2)),
  inference(forward_demodulation,[],[f1372,f1373])).
fof(f1371,plain,(
  p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | $spl0),
  inference(cnf_transformation,[],[f1371_D])).
fof(f1371_D,plain,(
  p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f1373,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80) | $spl2),
  inference(cnf_transformation,[],[f1373_D])).
fof(f1373_D,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f658,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80) | p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))))),
  inference(cnf_transformation,[],[f319])).
fof(f319,plain,(
  (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)) & (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK79,sK80])],[f318])).
fof(f318,plain,(
  ? [X0,X1] : ((p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)) & (~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)))) | s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)))),
  inference(nnf_transformation,[],[f165])).
fof(f165,plain,(
  ? [X0,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)))) <~> s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1)))) <=> s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X1))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) <=> s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : (p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7)))) <=> s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') = s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),X7))),
  file('thm.mod_to_conProof.v_rel_eqns|split|6','thm.mod_to_conProof.v_rel_eqns|split|6')).
fof(f1372,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) | $spl1),
  inference(cnf_transformation,[],[f1372_D])).
fof(f1372_D,plain,(
  ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80)))) <=> ~$spl1),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl1])])).
fof(f1374,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80) | $spl3),
  inference(cnf_transformation,[],[f1374_D])).
fof(f1374_D,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80) <=> ~$spl3),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3])])).
fof(f659,plain,(
  s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),'const.list.NIL_0') != s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80) | ~p(s(bool,'const.mod_to_conProof.env_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK79),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'const.list.NIL_0'),s('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.conSem.v')),sK80))))),
  inference(cnf_transformation,[],[f319])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 1049
% Passive clauses: 4768
% Generated clauses: 74710
% Final active clauses: 977
% Final passive clauses: 2322
% Input formulas: 69
% Initial clauses: 705
% 
% Duplicate literals: 3048
% Trivial inequalities: 278
% Fw subsumption resolutions: 5365
% Fw demodulations: 5756
% Bw demodulations: 1182
% Condensations: 12475
% Global subsumptions: 84
% 
% Simple tautologies: 404
% Equational tautologies: 772
% Forward subsumptions: 41189
% Fw demodulations to eq. taut.: 112
% Bw demodulations to eq. taut.: 21
% 
% Unit resulting resolution: 6041
% Factoring: 1
% Forward superposition: 13871
% Backward superposition: 24052
% Self superposition: 387
% Equality factoring: 280
% Equality resolution: 50
% 
% Split clauses: 169
% Split components: 341
% SAT solver clauses: 5617
% SAT solver unit clauses: 634
% SAT solver binary clauses: 1176
% 
% Sat splits: 169
% Sat splitting refutations: 425
% 
% Memory used [KB]: 46822
% Time elapsed: 5.992 s
% ------------------------------
% ------------------------------
% Success in time 7.36 s
