Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.mod_to_conProof
% (20345)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 106
% Passive clauses: 2434
% Generated clauses: 14627
% Final active clauses: 99
% Final passive clauses: 2166
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 898
% Trivial inequalities: 169
% Fw subsumption resolutions: 2388
% Fw demodulations: 554
% Bw demodulations: 4
% 
% Simple tautologies: 278
% Equational tautologies: 82
% Forward subsumptions: 6273
% 
% Binary resolution: 235
% Factoring: 2
% Forward superposition: 5347
% Backward superposition: 4316
% Self superposition: 312
% Equality factoring: 216
% Equality resolution: 21
% 
% Split clauses: 686
% Split components: 1377
% SAT solver clauses: 1646
% SAT solver unit clauses: 30
% SAT solver binary clauses: 218
% 
% Sat splits: 686
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 1646
% TWLsolver calls for satisfiability: 184
% 
% Memory used [KB]: 6268
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.mod_to_conProof
% (20372)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 119
% Passive clauses: 447
% Generated clauses: 17702
% Final active clauses: 102
% Final passive clauses: 261
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 1502
% Trivial inequalities: 172
% Fw subsumption resolutions: 1524
% Fw demodulations: 1269
% Bw demodulations: 65
% Condensations: 2335
% 
% Simple tautologies: 253
% Equational tautologies: 61
% Forward subsumptions: 7396
% Bw demodulations to eq. taut.: 10
% 
% Binary resolution: 201
% Factoring: 2
% Forward superposition: 4764
% Backward superposition: 4951
% Self superposition: 256
% Equality factoring: 183
% Equality resolution: 20
% 
% Split clauses: 118
% Split components: 254
% SAT solver clauses: 931
% SAT solver unit clauses: 30
% SAT solver binary clauses: 43
% 
% Sat splits: 118
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 931
% TWLsolver calls for satisfiability: 522
% 
% Memory used [KB]: 10874
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.mod_to_conProof
% (20406)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 308
% Passive clauses: 2477
% Generated clauses: 84185
% Final active clauses: 111
% Final passive clauses: 354
% Input formulas: 7
% Initial clauses: 27
% 
% Duplicate literals: 7232
% Trivial inequalities: 647
% Fw subsumption resolutions: 6444
% Fw demodulations: 3867
% Bw demodulations: 1512
% Condensations: 14400
% Global subsumptions: 97
% 
% Simple tautologies: 982
% Equational tautologies: 1893
% Forward subsumptions: 43150
% Bw demodulations to eq. taut.: 17
% 
% Unit resulting resolution: 7471
% Factoring: 2
% Forward superposition: 21017
% Backward superposition: 14605
% Self superposition: 651
% Equality factoring: 497
% Equality resolution: 69
% 
% Split clauses: 245
% Split components: 494
% SAT solver clauses: 3412
% SAT solver unit clauses: 39
% SAT solver binary clauses: 281
% 
% Sat splits: 245
% Sat splitting refutations: 346
% 
% Memory used [KB]: 28144
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.mod_to_conProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.mod_to_conProof
% SZS output start Proof for thm.mod_to_conProof
fof(f1554,plain,(
  $false),
  inference(subsumption_resolution,[],[f1549,f66])).
fof(f66,plain,(
  ~sP1(sK2,'const.semanticPrimitives.Refv_1'(s('type.modSem.v',sK3)),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',sK4)))),
  inference(resolution,[],[f29,f46])).
fof(f46,plain,(
  ( ! [X2,X0,X1] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) | ~sP1(X0,X1,X2)) )),
  inference(cnf_transformation,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) | sP1(X0,X1,X2)) & (~sP1(X0,X1,X2) | p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(nnf_transformation,[],[f19])).
fof(f19,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> sP1(X0,X1,X2))),
  inference(definition_folding,[],[f14,f18,f17])).
fof(f17,plain,(
  ! [X4,X6,X5] : (sP0(X4,X6,X5) <=> ? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP0])])).
fof(f18,plain,(
  ! [X0,X1,X2] : (sP1(X0,X1,X2) <=> ! [X3] : (? [X4,X5,X6] : ((sP0(X4,X6,X5) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  introduced(predicate_definition_introduction,[new_symbols(naming,[sP1])])).
fof(f14,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> ! [X3] : (? [X4,X5,X6] : ((? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(ennf_transformation,[],[f10])).
fof(f10,plain,(
  ! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))) <=> ! [X3] : (! [X4,X5,X6] : ((? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X5,X11,X12] : (p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5),s('type.semanticPrimitives.store_v'('type.modSem.v'),X11),s('type.semanticPrimitives.store_v'('type.conSem.v'),X12)))) <=> ! [X13] : (! [X14,X15,X16] : ((? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X15) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X16) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X8))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14),s('type.modSem.v',X7),s('type.conSem.v',X8))))) | ? [X17] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X15) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X17))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X16) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X17)))) | ? [X18,X19] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X15) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X18))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X16) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X19))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14),s('type.list.list'('type.modSem.v'),X18),s('type.list.list'('type.conSem.v'),X19)))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X14))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X15))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X16))))) => p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X13),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X5))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X11))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X12))))))),
  file('thm.mod_to_conProof.sv_rel_rules|split|0','thm.mod_to_conProof.sv_rel_def')).
fof(f29,plain,(
  ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',sK3))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',sK4))))))),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2),s('type.modSem.v',sK3),s('type.conSem.v',sK4)))) & ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',sK3))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',sK4))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4])],[f13])).
fof(f13,plain,(
  ? [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) & ~p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X2)))))))),
  inference(ennf_transformation,[],[f9])).
fof(f9,plain,(
  ~! [X0,X1,X2] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X1),s('type.conSem.v',X2)))) => p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X2)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X8)))) => p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X7))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X8)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8] : (p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.modSem.v',X7),s('type.conSem.v',X8)))) => p(s(bool,'const.mod_to_conProof.sv_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X6),s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X7))),s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X8)))))))),
  file('thm.mod_to_conProof.sv_rel_rules|split|0','thm.mod_to_conProof.sv_rel_rules|split|0')).
fof(f1549,plain,(
  sP1(sK2,'const.semanticPrimitives.Refv_1'(s('type.modSem.v',sK3)),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',sK4)))),
  inference(resolution,[],[f1548,f1538])).
fof(f1538,plain,(
  ( ! [X2,X0,X1] : (~sP0(X0,X2,X1) | sP1(X0,X1,X2)) )),
  inference(duplicate_literal_removal,[],[f1513])).
fof(f1513,plain,(
  ( ! [X2,X0,X1] : (sP1(X0,X1,X2) | ~sP0(X0,X2,X1) | sP1(X0,X1,X2)) )),
  inference(resolution,[],[f37,f40])).
fof(f40,plain,(
  ( ! [X2,X0,X1] : (sP1(X0,X1,X2) | ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK11(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) )),
  inference(cnf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X10] : (((sP0(sK5(X10,X2,X1,X0),sK7(X10,X2,X1,X0),sK6(X10,X2,X1,X0)) | (s('type.semanticPrimitives.store_v'('type.modSem.v'),sK6(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK8(X10,X2,X1,X0)))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),sK7(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),sK8(X10,X2,X1,X0))))) | (s('type.semanticPrimitives.store_v'('type.modSem.v'),sK6(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),sK9(X10,X2,X1,X0)))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),sK7(X10,X2,X1,X0)) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),sK10(X10,X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK5(X10,X2,X1,X0)),s('type.list.list'('type.modSem.v'),sK9(X10,X2,X1,X0)),s('type.list.list'('type.conSem.v'),sK10(X10,X2,X1,X0))))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK5(X10,X2,X1,X0)))),s('type.semanticPrimitives.store_v'('type.modSem.v'),sK6(X10,X2,X1,X0)))),s('type.semanticPrimitives.store_v'('type.conSem.v'),sK7(X10,X2,X1,X0)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & ((! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK11(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK11(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7,sK8,sK9,sK10,sK11])],[f22])).
fof(f22,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X10] : (? [X11,X12,X13] : ((sP0(X11,X13,X12) | ? [X16] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X12) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X16))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X16)))) | ? [X14,X15] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X12) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X14))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X13) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X15))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11),s('type.list.list'('type.modSem.v'),X14),s('type.list.list'('type.conSem.v'),X15)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X11))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X12))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X13))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X10),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & (? [X3] : (! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(rectify,[],[f21])).
fof(f21,plain,(
  ! [X0,X1,X2] : ((~sP1(X0,X1,X2) | ! [X3] : (? [X4,X5,X6] : ((sP0(X4,X6,X5) | ? [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) | ? [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) & p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2)))))) & (? [X3] : (! [X4,X5,X6] : ((~sP0(X4,X6,X5) & ! [X9] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.W8array_1'(s('type.list.list'('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))),X9)))) & ! [X7,X8] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Varray_1'(s('type.list.list'('type.conSem.v'),X8))) | ~p(s(bool,'const.mod_to_conProof.vs_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.list.list'('type.modSem.v'),X7),s('type.list.list'('type.conSem.v'),X8)))))) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6))))) & ~p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),X3),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X1))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X2))))) | sP1(X0,X1,X2)))),
  inference(nnf_transformation,[],[f18])).
fof(f37,plain,(
  ( ! [X6,X4,X2,X0,X5,X1] : (sP1(X0,X1,X2) | p(s(bool,happ(s(fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool),happ(s(fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool)),happ(s(fun('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),fun('type.semanticPrimitives.store_v'('type.modSem.v'),fun('type.semanticPrimitives.store_v'('type.conSem.v'),bool))),sK11(X2,X1,X0)),s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4))),s('type.semanticPrimitives.store_v'('type.modSem.v'),X5))),s('type.semanticPrimitives.store_v'('type.conSem.v'),X6)))) | ~sP0(X4,X6,X5)) )),
  inference(cnf_transformation,[],[f23])).
fof(f1548,plain,(
  sP0(sK2,'const.semanticPrimitives.Refv_1'(s('type.conSem.v',sK4)),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',sK3)))),
  inference(equality_resolution,[],[f1546])).
fof(f1546,plain,(
  ( ! [X0] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X0) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',sK3))) | sP0(sK2,'const.semanticPrimitives.Refv_1'(s('type.conSem.v',sK4)),X0)) )),
  inference(equality_resolution,[],[f54])).
fof(f54,plain,(
  ( ! [X0,X1] : (s('type.semanticPrimitives.store_v'('type.conSem.v'),X0) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',sK4))) | sP0(sK2,X0,X1) | s('type.semanticPrimitives.store_v'('type.modSem.v'),X1) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',sK3)))) )),
  inference(resolution,[],[f28,f44])).
fof(f44,plain,(
  ( ! [X4,X2,X0,X3,X1] : (sP0(X0,X1,X2) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X4)))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X1) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X4))) | s('type.semanticPrimitives.store_v'('type.modSem.v'),X2) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X3)))) )),
  inference(cnf_transformation,[],[f26])).
fof(f26,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | (s('type.semanticPrimitives.store_v'('type.modSem.v'),X2) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',sK12(X2,X1,X0)))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X1) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',sK13(X2,X1,X0)))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',sK12(X2,X1,X0)),s('type.conSem.v',sK13(X2,X1,X0))))))) & (! [X3,X4] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X2) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X3))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X1) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X4))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X4))))) | sP0(X0,X1,X2)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13])],[f25])).
fof(f25,plain,(
  ! [X0,X1,X2] : ((~sP0(X0,X1,X2) | ? [X5,X6] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X2) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X5))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X1) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X6))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X5),s('type.conSem.v',X6)))))) & (! [X3,X4] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X2) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X3))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X1) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X4))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X0),s('type.modSem.v',X3),s('type.conSem.v',X4))))) | sP0(X0,X1,X2)))),
  inference(rectify,[],[f24])).
fof(f24,plain,(
  ! [X4,X6,X5] : ((~sP0(X4,X6,X5) | ? [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) = s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) & s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) = s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) & p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11)))))) & (! [X10,X11] : (s('type.semanticPrimitives.store_v'('type.modSem.v'),X5) != s('type.semanticPrimitives.store_v'('type.modSem.v'),'const.semanticPrimitives.Refv_1'(s('type.modSem.v',X10))) | s('type.semanticPrimitives.store_v'('type.conSem.v'),X6) != s('type.semanticPrimitives.store_v'('type.conSem.v'),'const.semanticPrimitives.Refv_1'(s('type.conSem.v',X11))) | ~p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),X4),s('type.modSem.v',X10),s('type.conSem.v',X11))))) | sP0(X4,X6,X5)))),
  inference(nnf_transformation,[],[f17])).
fof(f28,plain,(
  p(s(bool,'const.mod_to_conProof.v_rel_3'(s('type.finite_map.fmap'('type.pair.prod'('type.list.list'('type.string.char'),'type.semanticPrimitives.tid_or_exn'),'type.pair.prod'('type.num.num','type.num.num')),sK2),s('type.modSem.v',sK3),s('type.conSem.v',sK4))))),
  inference(cnf_transformation,[],[f20])).
% SZS output end Proof for thm.mod_to_conProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 53
% Passive clauses: 308
% Generated clauses: 1469
% Final active clauses: 28
% Final passive clauses: 225
% Input formulas: 7
% Initial clauses: 26
% 
% Selected by SInE selection: 6
% SInE iterations: 1
% 
% Duplicate literals: 147
% Fw subsumption resolutions: 176
% Fw demodulations: 14
% Bw demodulations: 21
% 
% Simple tautologies: 68
% Equational tautologies: 27
% Forward subsumptions: 672
% 
% Binary resolution: 155
% Forward superposition: 432
% Backward superposition: 382
% Self superposition: 44
% Equality factoring: 48
% Equality resolution: 4
% 
% Split clauses: 77
% Split components: 154
% SAT solver clauses: 81
% SAT solver unit clauses: 3
% SAT solver binary clauses: 77
% 
% Sat splits: 77
% Sat splitting refutations: 3
% 
% Memory used [KB]: 1535
% Time elapsed: 0.041 s
% ------------------------------
% ------------------------------
% Success in time 11.798 s
