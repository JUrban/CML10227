Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_removeProof
% (111385)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 115
% Passive clauses: 2040
% Generated clauses: 15891
% Final active clauses: 111
% Final passive clauses: 1757
% Input formulas: 36
% Initial clauses: 37
% 
% Duplicate literals: 921
% Trivial inequalities: 172
% Fw subsumption resolutions: 1611
% Fw demodulations: 2709
% Bw demodulations: 2
% 
% Simple tautologies: 252
% Equational tautologies: 24
% Forward subsumptions: 7490
% 
% Binary resolution: 8
% Forward superposition: 6133
% Backward superposition: 3989
% Self superposition: 179
% Equality factoring: 68
% Equality resolution: 22
% 
% Split clauses: 342
% Split components: 699
% SAT solver clauses: 841
% SAT solver unit clauses: 31
% SAT solver binary clauses: 156
% 
% Sat splits: 342
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 837
% TWLsolver calls for satisfiability: 104
% 
% Memory used [KB]: 12537
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_removeProof
% (111415)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 88
% Passive clauses: 730
% Generated clauses: 10354
% Final active clauses: 84
% Final passive clauses: 611
% Input formulas: 36
% Initial clauses: 37
% 
% Duplicate literals: 612
% Trivial inequalities: 130
% Fw subsumption resolutions: 340
% Fw demodulations: 1119
% Bw demodulations: 31
% Condensations: 1034
% 
% Simple tautologies: 174
% Equational tautologies: 24
% Forward subsumptions: 4996
% 
% Binary resolution: 6
% Forward superposition: 3796
% Backward superposition: 2252
% Self superposition: 171
% Equality factoring: 76
% Equality resolution: 16
% 
% Split clauses: 6
% Split components: 12
% SAT solver clauses: 1199
% SAT solver unit clauses: 68
% SAT solver binary clauses: 34
% 
% Sat splits: 6
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1199
% TWLsolver calls for satisfiability: 119
% 
% Memory used [KB]: 15607
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_removeProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_removeProof
% SZS output start Proof for thm.clos_removeProof
fof(f14714,plain,(
  $false),
  inference(trivial_inequality_removal,[],[f14693])).
fof(f14693,plain,(
  s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK0),s('type.closLang.exp',sK1))))) != s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK0),s('type.closLang.exp',sK1)))))),
  inference(superposition,[],[f92,f13788])).
fof(f13788,plain,(
  ( ! [X15,X16] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X15),s('type.closLang.exp',X16))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X15))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X16)))))) )),
  inference(forward_demodulation,[],[f13727,f7725])).
fof(f7725,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X7),s('type.closLang.exp',X8))))) = s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X6),s('type.list.list'('type.closLang.exp'),X7))),s('type.closLang.exp',X8)))))) )),
  inference(forward_demodulation,[],[f7697,f143])).
fof(f143,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X0),s('type.closLang.exp',X1))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0)))))) )),
  inference(backward_demodulation,[],[f114,f135])).
fof(f135,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X0),s('type.closLang.exp',X1))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0)))))) )),
  inference(forward_demodulation,[],[f134,f96])).
fof(f96,plain,(
  ( ! [X0] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f40])).
fof(f40,plain,(
  ! [X0] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f23])).
fof(f23,axiom,(
  ! [X11] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X11))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|4','thm.clos_removeProof.code_loc|39|_def')).
fof(f134,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X0),s('type.closLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0)))))) )),
  inference(forward_demodulation,[],[f111,f96])).
fof(f111,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X0),s('type.closLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0)))))) )),
  inference(cnf_transformation,[],[f58])).
fof(f58,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X0),s('type.closLang.exp',X1))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6)))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|4','thm.closProps.code_locs_def|split|4')).
fof(f114,plain,(
  ( ! [X2,X0,X3,X1] : (s(X0,'const.bool.LET_2'(s(fun(X1,X0),X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X3)))) )),
  inference(cnf_transformation,[],[f63])).
fof(f63,plain,(
  ! [X0,X1,X2,X3] : s(X0,'const.bool.LET_2'(s(fun(X1,X0),X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X3)))),
  inference(flattening,[],[f62])).
fof(f62,plain,(
  ! [X0,X1] : ! [X2,X3] : s(X0,'const.bool.LET_2'(s(fun(X1,X0),X2),s(X1,X3))) = s(X0,happ(s(fun(X1,X0),X2),s(X1,X3)))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X9] : ! [X10,X11] : s(X8,'const.bool.LET_2'(s(fun(X9,X8),X10),s(X9,X11))) = s(X8,happ(s(fun(X9,X8),X10),s(X9,X11)))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|4','thm.bool.LET_THM')).
fof(f7697,plain,(
  ( ! [X6,X8,X7] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X6),s('type.list.list'('type.closLang.exp'),X7))),s('type.closLang.exp',X8))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X8))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X7)))))) )),
  inference(superposition,[],[f142,f758])).
fof(f758,plain,(
  ( ! [X2,X3] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X3))) = s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X2),s('type.list.list'('type.closLang.exp'),X3)))))) )),
  inference(superposition,[],[f109,f96])).
fof(f109,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X1),s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  inference(rectify,[],[f16])).
fof(f16,axiom,(
  ! [X6,X16] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X16),s('type.list.list'('type.closLang.exp'),X6))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|4','thm.closProps.code_locs_def|split|7')).
fof(f142,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X1),s('type.closLang.exp',X0))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) )),
  inference(backward_demodulation,[],[f114,f138])).
fof(f138,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X1),s('type.closLang.exp',X0))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) )),
  inference(forward_demodulation,[],[f137,f96])).
fof(f137,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X1),s('type.closLang.exp',X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) )),
  inference(forward_demodulation,[],[f136,f96])).
fof(f136,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X1),s('type.closLang.exp',X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) )),
  inference(forward_demodulation,[],[f112,f96])).
fof(f112,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X1),s('type.closLang.exp',X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f59])).
fof(f59,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X1),s('type.closLang.exp',X0))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f20])).
fof(f20,axiom,(
  ! [X7,X15] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X15),s('type.closLang.exp',X7))),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X7),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X15),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|4','thm.closProps.code_locs_def|split|11')).
fof(f13727,plain,(
  ( ! [X14,X15,X16] : (s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X15))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X16))))) = s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp','const.closLang.Op_2'(s('type.closLang.op',X14),s('type.list.list'('type.closLang.exp'),X15))),s('type.closLang.exp',X16)))))) )),
  inference(superposition,[],[f8925,f758])).
fof(f8925,plain,(
  ( ! [X2,X1] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X2),s('type.closLang.exp',X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X2))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) )),
  inference(backward_demodulation,[],[f8924,f1670])).
fof(f1670,plain,(
  ( ! [X2,X1] : (s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X2))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1))))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) )),
  inference(superposition,[],[f133,f96])).
fof(f133,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) )),
  inference(forward_demodulation,[],[f110,f96])).
fof(f110,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))) )),
  inference(cnf_transformation,[],[f57])).
fof(f57,plain,(
  ! [X0,X1] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X1)))))),
  inference(rectify,[],[f22])).
fof(f22,axiom,(
  ! [X11,X6] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),X6))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6)))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|4','thm.closProps.code_locs_cons')).
fof(f8924,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Handle_2'(s('type.closLang.exp',X1),s('type.closLang.exp',X0))))) = s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) )),
  inference(forward_demodulation,[],[f8874,f142])).
fof(f8874,plain,(
  ( ! [X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X1),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X0))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))) )),
  inference(superposition,[],[f151,f96])).
fof(f151,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'const.bool.LET_2'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X2)))))) )),
  inference(forward_demodulation,[],[f150,f114])).
fof(f150,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X2)))))) )),
  inference(forward_demodulation,[],[f119,f96])).
fof(f119,plain,(
  ( ! [X2,X0,X1] : (s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f71])).
fof(f71,plain,(
  ! [X0,X1,X2] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),X1))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X2),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X12,X6,X11] : s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X6))))))) = s('type.list.list'('type.num.num'),happ(s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),happ(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),'_dst_x0x1x0_3'(s(fun(fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num')),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.bool.LET_0'),s(fun('type.list.list'('type.num.num'),fun('type.list.list'('type.num.num'),'type.list.list'('type.num.num'))),'const.list.APPEND_0'),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X12),s('type.list.list'('type.closLang.exp'),X6))))))))),s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X11),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0')))))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|4','thm.closProps.code_locs_def|split|1')).
fof(f92,plain,(
  s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK0),s('type.closLang.exp',sK1))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),sK0))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',sK1)))))),
  inference(cnf_transformation,[],[f89])).
fof(f89,plain,(
  s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),sK0),s('type.closLang.exp',sK1))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),sK0))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',sK1)))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1])],[f87])).
fof(f87,plain,(
  ? [X0,X1] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X0),s('type.closLang.exp',X1))))) != s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))),
  inference(ennf_transformation,[],[f38])).
fof(f38,plain,(
  ~! [X0,X1] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X0),s('type.closLang.exp',X1))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X0))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X1)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.closLang.exp',X7))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X7)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp','const.closLang.Let_2'(s('type.list.list'('type.closLang.exp'),X6),s('type.closLang.exp',X7))))) = s('type.list.list'('type.num.num'),'const.list.APPEND_2'(s('type.list.list'('type.num.num'),'const.closProps.code_locs_1'(s('type.list.list'('type.closLang.exp'),X6))),s('type.list.list'('type.num.num'),'const.clos_removeProof.code_loc|39|_1'(s('type.closLang.exp',X7)))))),
  file('thm.clos_removeProof.code_loc|39|_THM|split|4','thm.clos_removeProof.code_loc|39|_THM|split|4')).
% SZS output end Proof for thm.clos_removeProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 117
% Passive clauses: 970
% Generated clauses: 14408
% Final active clauses: 116
% Final passive clauses: 821
% Input formulas: 36
% Initial clauses: 37
% 
% Duplicate literals: 579
% Trivial inequalities: 136
% Fw subsumption resolutions: 708
% Fw demodulations: 2328
% Bw demodulations: 33
% Condensations: 1148
% 
% Simple tautologies: 165
% Equational tautologies: 94
% Forward subsumptions: 8258
% Fw demodulations to eq. taut.: 4
% 
% Unit resulting resolution: 340
% Forward superposition: 5118
% Backward superposition: 3789
% Self superposition: 176
% Equality factoring: 64
% Equality resolution: 16
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 978
% SAT solver unit clauses: 354
% SAT solver binary clauses: 202
% 
% Sat splits: 3
% 
% Memory used [KB]: 22771
% Time elapsed: 0.806 s
% ------------------------------
% ------------------------------
% Success in time 2.12 s
