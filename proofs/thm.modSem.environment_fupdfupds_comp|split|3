Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modSem
% SZS output start Proof for thm.modSem
fof(f2162,plain,(
  $false),
  inference(subsumption_resolution,[],[f2161,f87])).
fof(f87,plain,(
  ( ! [X6,X4,X2,X0,X5,X3,X1] : (s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))) )),
  inference(cnf_transformation,[],[f50])).
fof(f50,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(flattening,[],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3] : ! [X4,X5,X6] : s(fun(X2,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X2,X1),'const.combin.o_2'(s(fun(X3,X1),X5),s(fun(X2,X3),X6))))) = s(fun(X2,X0),'const.combin.o_2'(s(fun(X3,X0),'const.combin.o_2'(s(fun(X1,X0),X4),s(fun(X3,X1),X5))),s(fun(X2,X3),X6)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X13,X6,X17,X14] : ! [X9,X8,X7] : s(fun(X17,X13),'const.combin.o_2'(s(fun(X6,X13),X9),s(fun(X17,X6),'const.combin.o_2'(s(fun(X14,X6),X8),s(fun(X17,X14),X7))))) = s(fun(X17,X13),'const.combin.o_2'(s(fun(X14,X13),'const.combin.o_2'(s(fun(X6,X13),X9),s(fun(X14,X6),X8))),s(fun(X17,X14),X7)))),
  file('thm.modSem.environment_fupdfupds_comp|split|3','thm.combin.o_ASSOC')).
fof(f2161,plain,(
  s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK2))),s(fun(sK0,'type.modSem.environment'),sK1))))) != s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK2))))),s(fun(sK0,'type.modSem.environment'),sK1)))),
  inference(forward_demodulation,[],[f61,f74])).
fof(f74,plain,(
  ( ! [X0,X1] : (s(fun('type.modSem.environment','type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1))),s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0))))) = s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))))) )),
  inference(cnf_transformation,[],[f35])).
fof(f35,plain,(
  ! [X0,X1] : s(fun('type.modSem.environment','type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1))),s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0))))) = s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X1),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X0)))))),
  inference(rectify,[],[f7])).
fof(f7,axiom,(
  ! [X8,X9] : s(fun('type.modSem.environment','type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9))),s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X8))))) = s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X8)))))),
  file('thm.modSem.environment_fupdfupds_comp|split|3','thm.modSem.environment_fupdfupds_comp|split|2')).
fof(f61,plain,(
  s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK2))),s(fun(sK0,'type.modSem.environment'),sK1))))) != s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK2))))),s(fun(sK0,'type.modSem.environment'),sK1)))),
  inference(cnf_transformation,[],[f56])).
fof(f56,plain,(
  s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3))),s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK2))),s(fun(sK0,'type.modSem.environment'),sK1))))) != s(fun(sK0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK3),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),sK2))))),s(fun(sK0,'type.modSem.environment'),sK1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f51])).
fof(f51,plain,(
  ? [X0,X1,X2,X3] : s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3))),s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2))),s(fun(X0,'type.modSem.environment'),X1))))) != s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2))))),s(fun(X0,'type.modSem.environment'),X1)))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3] : s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3))),s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2))),s(fun(X0,'type.modSem.environment'),X1))))) = s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2))))),s(fun(X0,'type.modSem.environment'),X1)))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0] : ! [X1,X2,X3] : s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3))),s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2))),s(fun(X0,'type.modSem.environment'),X1))))) = s(fun(X0,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X3),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X2))))),s(fun(X0,'type.modSem.environment'),X1)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : s(fun(X6,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9))),s(fun(X6,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X8))),s(fun(X6,'type.modSem.environment'),X7))))) = s(fun(X6,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X8))))),s(fun(X6,'type.modSem.environment'),X7)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : s(fun(X6,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9))),s(fun(X6,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X8))),s(fun(X6,'type.modSem.environment'),X7))))) = s(fun(X6,'type.modSem.environment'),'const.combin.o_2'(s(fun('type.modSem.environment','type.modSem.environment'),'const.modSem.environment_v_fupd_1'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),'const.combin.o_2'(s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X9),s(fun('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v')),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.modSem.v'))),X8))))),s(fun(X6,'type.modSem.environment'),X7)))),
  file('thm.modSem.environment_fupdfupds_comp|split|3','thm.modSem.environment_fupdfupds_comp|split|3')).
% SZS output end Proof for thm.modSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 38
% Passive clauses: 500
% Generated clauses: 2038
% Final active clauses: 34
% Final passive clauses: 397
% Input formulas: 21
% Initial clauses: 27
% 
% Duplicate literals: 162
% Trivial inequalities: 18
% Fw subsumption resolutions: 245
% Fw demodulations: 39
% Bw demodulations: 1
% 
% Simple tautologies: 47
% Equational tautologies: 40
% Forward subsumptions: 914
% 
% Binary resolution: 84
% Factoring: 1
% Forward superposition: 535
% Backward superposition: 684
% Self superposition: 121
% Equality factoring: 94
% Equality resolution: 1
% 
% Split clauses: 53
% Split components: 106
% SAT solver clauses: 132
% SAT solver unit clauses: 8
% SAT solver binary clauses: 29
% 
% Sat splits: 53
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 132
% TWLsolver calls for satisfiability: 63
% 
% Memory used [KB]: 2558
% Time elapsed: 0.068 s
% ------------------------------
% ------------------------------
% Success in time 0.072 s
