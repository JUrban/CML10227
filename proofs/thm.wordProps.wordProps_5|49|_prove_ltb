Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.wordProps
% (69449)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 86
% Passive clauses: 2953
% Generated clauses: 12385
% Final active clauses: 82
% Final passive clauses: 2762
% Input formulas: 21
% Initial clauses: 40
% 
% Duplicate literals: 770
% Trivial inequalities: 86
% Fw subsumption resolutions: 1341
% Fw demodulations: 433
% Bw demodulations: 1
% 
% Simple tautologies: 232
% Equational tautologies: 76
% Forward subsumptions: 5297
% 
% Binary resolution: 143
% Factoring: 2
% Forward superposition: 4937
% Backward superposition: 4047
% Self superposition: 287
% Equality factoring: 188
% Equality resolution: 10
% 
% Split clauses: 351
% Split components: 721
% SAT solver clauses: 913
% SAT solver unit clauses: 17
% SAT solver binary clauses: 184
% 
% Sat splits: 351
% Sat splitting refutations: 3
% 
% TWLsolver clauses: 911
% TWLsolver calls for satisfiability: 112
% 
% Memory used [KB]: 10234
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.wordProps
% (69493)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 61
% Passive clauses: 472
% Generated clauses: 7118
% Final active clauses: 57
% Final passive clauses: 394
% Input formulas: 21
% Initial clauses: 40
% 
% Duplicate literals: 781
% Trivial inequalities: 40
% Fw subsumption resolutions: 273
% Fw demodulations: 102
% Bw demodulations: 16
% Condensations: 1319
% Global subsumptions: 5
% 
% Simple tautologies: 100
% Equational tautologies: 58
% Forward subsumptions: 2795
% 
% Binary resolution: 109
% Factoring: 2
% Forward superposition: 1777
% Backward superposition: 1833
% Self superposition: 194
% Equality factoring: 142
% Equality resolution: 6
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 934
% SAT solver unit clauses: 63
% SAT solver binary clauses: 43
% SAT solver learnt clauses: 10
% 
% Sat splits: 12
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 914
% TWLsolver calls for satisfiability: 7929
% 
% Memory used [KB]: 8443
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.wordProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.wordProps
% SZS output start Proof for thm.wordProps
fof(f3550,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f117,f126])).
fof(f126,plain,(
  ( ! [X12,X11] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X11),s('type.wordSem.state'(sK2,sK3),X12))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK10),s('type.wordSem.state'(sK2,sK3),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(sK2)),sK12),s('type.wordSem.state'(sK2,sK3),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(sK2)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',sK9),s('type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK7),s('type.num.num',sK6))))))))),s('type.wordSem.state'(sK2,sK3),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK11),s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK2,sK3),sK5))))))),s('type.wordSem.state'(sK2,sK3),sK5)))))))))))))) )),
  inference(backward_demodulation,[],[f94,f80])).
fof(f80,plain,(
  ( ! [X12,X11] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X11),s('type.wordSem.state'(sK2,sK3),X12))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK10),s('type.wordSem.state'(sK2,sK3),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(sK2)),sK12),s('type.wordSem.state'(sK2,sK3),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(sK2)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',sK9),s('type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK7),s('type.num.num',sK6))))))))),s('type.wordSem.state'(sK2,sK3),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK2,sK3),sK5))),s('type.num.num',sK11))))),s('type.wordSem.state'(sK2,sK3),sK5)))))))))))))) )),
  inference(cnf_transformation,[],[f66])).
fof(f66,plain,(
  ! [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(sK2)),X11),s('type.wordSem.state'(sK2,sK3),X12))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(sK2)),'type.wordSem.state'(sK2,sK3)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(sK2),'type.wordSem.state'(sK2,sK3)),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK10),s('type.wordSem.state'(sK2,sK3),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(sK2)),sK12),s('type.wordSem.state'(sK2,sK3),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(sK2)),sK4),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',sK9),s('type.pair.prod'('type.wordLang.prog'(sK2),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(sK2),sK8),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',sK7),s('type.num.num',sK6))))))))),s('type.wordSem.state'(sK2,sK3),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(sK2,sK3),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(sK2,sK3),sK5))),s('type.num.num',sK11))))),s('type.wordSem.state'(sK2,sK3),sK5)))))))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK2,sK3,sK4,sK5,sK6,sK7,sK8,sK9,sK10,sK11,sK12])],[f54])).
fof(f54,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ! [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X11),s('type.wordSem.state'(X0,X1),X12))) != s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X8),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X10),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X7),s('type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X0),X6),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num',X4))))))))),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))),s('type.num.num',X9))))),s('type.wordSem.state'(X0,X1),X3)))))))))))))),
  inference(ennf_transformation,[],[f24])).
fof(f24,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X11),s('type.wordSem.state'(X0,X1),X12))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X8),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X10),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X7),s('type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X0),X6),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num',X4))))))))),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))),s('type.num.num',X9))))),s('type.wordSem.state'(X0,X1),X3)))))))))))))),
  inference(flattening,[],[f23])).
fof(f23,plain,(
  ~! [X0,X1] : ! [X2,X3,X4,X5,X6,X7,X8,X9,X10] : ? [X11,X12] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X11),s('type.wordSem.state'(X0,X1),X12))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X8),s('type.wordSem.state'(X0,X1),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X0)),X10),s('type.wordSem.state'(X0,X1),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X0)),X2),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X7),s('type.pair.prod'('type.wordLang.prog'(X0),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X0),X6),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X5),s('type.num.num',X4))))))))),s('type.wordSem.state'(X0,X1),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X0,X1),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X0,X1),X3))),s('type.num.num',X9))))),s('type.wordSem.state'(X0,X1),X3)))))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : ? [X17,X18] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X17),s('type.wordSem.state'(X6,X7),X18))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X14),s('type.wordSem.state'(X6,X7),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X6)),X16),s('type.wordSem.state'(X6,X7),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X6),X12),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X11),s('type.num.num',X10))))))))),s('type.wordSem.state'(X6,X7),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X9))),s('type.num.num',X15))))),s('type.wordSem.state'(X6,X7),X9)))))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7] : ! [X8,X9,X10,X11,X12,X13,X14,X15,X16] : ? [X17,X18] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X17),s('type.wordSem.state'(X6,X7),X18))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X14),s('type.wordSem.state'(X6,X7),'const.wordSem.call_env_2'(s('type.list.list'('type.wordSem.word_loc'(X6)),X16),s('type.wordSem.state'(X6,X7),'const.wordSem.push_env_3'(s('type.sptree.spt'('type.wordSem.word_loc'(X6)),X8),s('type.option.option'('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')))),'const.option.SOME_1'(s('type.pair.prod'('type.num.num','type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num'))),'const.pair.,_2'(s('type.num.num',X13),s('type.pair.prod'('type.wordLang.prog'(X6),'type.pair.prod'('type.num.num','type.num.num')),'const.pair.,_2'(s('type.wordLang.prog'(X6),X12),s('type.pair.prod'('type.num.num','type.num.num'),'const.pair.,_2'(s('type.num.num',X11),s('type.num.num',X10))))))))),s('type.wordSem.state'(X6,X7),'const.wordSem.dec_clock_1'(s('type.wordSem.state'(X6,X7),'const.wordSem.state_clock_fupd_2'(s(fun('type.num.num','type.num.num'),'const.combin.K_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num','const.wordSem.state_clock_1'(s('type.wordSem.state'(X6,X7),X9))),s('type.num.num',X15))))),s('type.wordSem.state'(X6,X7),X9)))))))))))))),
  file('thm.wordProps.wordProps_5|49|_prove_ltb','thm.wordProps.wordProps_5|49|_prove_ltb')).
fof(f94,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))) )),
  inference(cnf_transformation,[],[f36])).
fof(f36,plain,(
  ! [X0,X1] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X1),s('type.num.num',X0)))),
  inference(rectify,[],[f14])).
fof(f14,axiom,(
  ! [X34,X21] : s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X21),s('type.num.num',X34))) = s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X34),s('type.num.num',X21)))),
  file('thm.wordProps.wordProps_5|49|_prove_ltb','thm.arithmetic.ADD_SYM')).
fof(f117,plain,(
  ( ! [X2,X0,X3,X1] : (s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),sK69(X3,X2,X1,X0)),s('type.wordSem.state'(X0,X1),sK70(X3,X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f79])).
fof(f79,plain,(
  ! [X0,X1,X2,X3] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),X2))))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),sK69(X3,X2,X1,X0)),s('type.wordSem.state'(X0,X1),sK70(X3,X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK69,sK70])],[f49])).
fof(f49,plain,(
  ! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X4),s('type.wordSem.state'(X0,X1),X5))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(flattening,[],[f48])).
fof(f48,plain,(
  ! [X0,X1] : ! [X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X0)),X4),s('type.wordSem.state'(X0,X1),X5))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X0)),'type.wordSem.state'(X0,X1)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X0),'type.wordSem.state'(X0,X1)),'const.pair.,_2'(s('type.wordLang.prog'(X0),X3),s('type.wordSem.state'(X0,X1),X2)))))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X6,X7] : ! [X9,X30] : ? [X32,X33] : s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.option.option'('type.wordSem.result'(X6)),X32),s('type.wordSem.state'(X6,X7),X33))) = s('type.pair.prod'('type.option.option'('type.wordSem.result'(X6)),'type.wordSem.state'(X6,X7)),'const.wordSem.evaluate_1'(s('type.pair.prod'('type.wordLang.prog'(X6),'type.wordSem.state'(X6,X7)),'const.pair.,_2'(s('type.wordLang.prog'(X6),X30),s('type.wordSem.state'(X6,X7),X9)))))),
  file('thm.wordProps.wordProps_5|49|_prove_ltb','thm.wordProps.wordProps_34_prove_ltb')).
% SZS output end Proof for thm.wordProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 41
% Passive clauses: 315
% Generated clauses: 3394
% Final active clauses: 40
% Final passive clauses: 254
% Input formulas: 21
% Initial clauses: 40
% 
% Duplicate literals: 359
% Trivial inequalities: 25
% Fw subsumption resolutions: 124
% Fw demodulations: 47
% Bw demodulations: 17
% Condensations: 645
% Global subsumptions: 3
% 
% Simple tautologies: 59
% Equational tautologies: 64
% Forward subsumptions: 1724
% 
% Unit resulting resolution: 58
% Factoring: 1
% Forward superposition: 862
% Backward superposition: 982
% Self superposition: 126
% Equality factoring: 94
% Equality resolution: 3
% 
% Split clauses: 29
% Split components: 58
% SAT solver clauses: 379
% SAT solver unit clauses: 23
% SAT solver binary clauses: 68
% 
% Sat splits: 29
% Sat splitting refutations: 1
% 
% Memory used [KB]: 3965
% Time elapsed: 0.256 s
% ------------------------------
% ------------------------------
% Success in time 1.58 s
