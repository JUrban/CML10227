Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f4012,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4011,f223,f409,f407,f405,f403,f401,f4009,f4008,f4007,f4010])).
fof(f4010,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f405,f227])).
fof(f227,plain,(
  ( ! [X2,X3] : (s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X2))),s('type.closSem.v',X3)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',sK13),s('type.num.num',sK14))),s('type.closSem.v',sK15))) | s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK16))),s('type.closSem.v',sK17))) | s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK18))),s('type.closSem.v',sK19))) | s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',sK20))) | s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',sK21)))) & ! [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) & ! [X5,X6] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X5))),s('type.closSem.v',X6))) & ! [X4] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X4))) & ! [X2,X3] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X2))),s('type.closSem.v',X3))) & ! [X1] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X16,X17,X18] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.closSem.v',X18))) | ? [X14,X15] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X14))),s('type.closSem.v',X15))) | ? [X12,X13] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X12))),s('type.closSem.v',X13))) | ? [X11] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X11))) | ? [X10] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X10)))) & ! [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) & ! [X5,X6] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X5))),s('type.closSem.v',X6))) & ! [X4] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X4))) & ! [X2,X3] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X2))),s('type.closSem.v',X3))) & ! [X1] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X1))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) | ? [X5,X6] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X5))),s('type.closSem.v',X6))) | ? [X3,X4] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X3))),s('type.closSem.v',X4))) | ? [X2] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X2))) | ? [X1] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X1)))) & ! [X16,X17,X18] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.closSem.v',X18))) & ! [X14,X15] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X14))),s('type.closSem.v',X15))) & ! [X13] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X13))) & ! [X11,X12] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X11))),s('type.closSem.v',X12))) & ! [X10] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X10))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) | ? [X5,X6] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X5))),s('type.closSem.v',X6))) | ? [X3,X4] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X3))),s('type.closSem.v',X4))) | ? [X2] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X2))) | ? [X1] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X1)))) & (! [X16,X17,X18] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.closSem.v',X18))) & ! [X14,X15] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X14))),s('type.closSem.v',X15))) & ! [X13] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X13))) & ! [X11,X12] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X11))),s('type.closSem.v',X12))) & ! [X10] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X10)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) | ? [X5,X6] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X5))),s('type.closSem.v',X6))) | ? [X3,X4] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X3))),s('type.closSem.v',X4))) | ? [X2] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X2))) | ? [X1] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X1)))) => (? [X16,X17,X18] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X16),s('type.num.num',X17))),s('type.closSem.v',X18))) | ? [X14,X15] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X14))),s('type.closSem.v',X15))) | ? [X13] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X13))) | ? [X11,X12] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X11))),s('type.closSem.v',X12))) | ? [X10] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X0) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X10)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) | ? [X10,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X10))),s('type.closSem.v',X9))) | ? [X11,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X11))),s('type.closSem.v',X9))) | ? [X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X9))) | ? [X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X9)))) => (? [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) | ? [X10,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X10))),s('type.closSem.v',X9))) | ? [X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X9))) | ? [X11,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X11))),s('type.closSem.v',X9))) | ? [X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X9)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) | ? [X10,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X10))),s('type.closSem.v',X9))) | ? [X11,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X11))),s('type.closSem.v',X9))) | ? [X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X9))) | ? [X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X9)))) => (? [X7,X8,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9))) | ? [X10,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X10))),s('type.closSem.v',X9))) | ? [X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X9))) | ? [X11,X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',X11))),s('type.closSem.v',X9))) | ? [X9] : s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),X6) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X9)))))),
  file('thm.clos_knownProof.clos_knownProof_|49||49|5_prove_ltb','thm.clos_knownProof.clos_knownProof_|49||49|5_prove_ltb')).
fof(f4007,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f401,f224])).
fof(f224,plain,(
  ( ! [X8,X7,X9] : (s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',X7),s('type.num.num',X8))),s('type.closSem.v',X9)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4008,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f407,f228])).
fof(f228,plain,(
  ( ! [X1] : (s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',X1)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4009,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f409,f226])).
fof(f226,plain,(
  ( ! [X4] : (s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',X4)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f401,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',sK13),s('type.num.num',sK14))),s('type.closSem.v',sK15))) | $spl0),
  inference(cnf_transformation,[],[f401_D])).
fof(f401_D,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',sK13),s('type.num.num',sK14))),s('type.closSem.v',sK15))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f403,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK16))),s('type.closSem.v',sK17))) | $spl2),
  inference(cnf_transformation,[],[f403_D])).
fof(f403_D,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK16))),s('type.closSem.v',sK17))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f405,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK18))),s('type.closSem.v',sK19))) | $spl4),
  inference(cnf_transformation,[],[f405_D])).
fof(f405_D,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK18))),s('type.closSem.v',sK19))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f407,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',sK20))) | $spl6),
  inference(cnf_transformation,[],[f407_D])).
fof(f407_D,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',sK20))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f409,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',sK21))) | $spl8),
  inference(cnf_transformation,[],[f409_D])).
fof(f409_D,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',sK21))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f223,plain,(
  s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Impossible_0'),s('type.closSem.v',sK21))) | s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Other_0'),s('type.closSem.v',sK20))) | s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Int_1'(s('type.integer.int',sK18))),s('type.closSem.v',sK19))) | s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),sK16))),s('type.closSem.v',sK17))) | s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) = s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Clos_2'(s('type.num.num',sK13),s('type.num.num',sK14))),s('type.closSem.v',sK15)))),
  inference(cnf_transformation,[],[f138])).
fof(f4011,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f403,f225])).
fof(f225,plain,(
  ( ! [X6,X5] : (s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),sK12) != s('type.pair.prod'('type.clos_known.val_approx','type.closSem.v'),'const.pair.,_2'(s('type.clos_known.val_approx','const.clos_known.Tuple_1'(s('type.list.list'('type.clos_known.val_approx'),X5))),s('type.closSem.v',X6)))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 311
% Passive clauses: 1169
% Generated clauses: 3782
% Final active clauses: 311
% Final passive clauses: 711
% Input formulas: 37
% Initial clauses: 173
% 
% Duplicate literals: 143
% Trivial inequalities: 13
% Fw subsumption resolutions: 257
% 
% Simple tautologies: 141
% Equational tautologies: 20
% Forward subsumptions: 2037
% 
% Binary resolution: 2281
% Factoring: 706
% Forward superposition: 102
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 8
% 
% Split clauses: 78
% Split components: 160
% SAT solver clauses: 157
% SAT solver unit clauses: 11
% SAT solver binary clauses: 29
% SAT solver learnt clauses: 1
% 
% Sat splits: 78
% Sat splitting refutations: 5
% 
% TWLsolver clauses: 156
% TWLsolver calls for satisfiability: 136
% 
% Memory used [KB]: 1918
% Time elapsed: 0.155 s
% ------------------------------
% ------------------------------
% Success in time 0.18 s
