Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% (143545)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 130
% Passive clauses: 3723
% Generated clauses: 15342
% Final active clauses: 130
% Final passive clauses: 3497
% Input formulas: 68
% Initial clauses: 121
% 
% Duplicate literals: 402
% Trivial inequalities: 290
% Fw subsumption resolutions: 877
% Fw demodulations: 1774
% 
% Simple tautologies: 290
% Equational tautologies: 44
% Forward subsumptions: 7801
% Fw demodulations to eq. taut.: 1
% 
% Binary resolution: 179
% Factoring: 1
% Forward superposition: 6277
% Backward superposition: 5234
% Self superposition: 176
% Equality factoring: 60
% Equality resolution: 41
% 
% Split clauses: 141
% Split components: 288
% SAT solver clauses: 236
% SAT solver unit clauses: 14
% SAT solver binary clauses: 68
% 
% Sat splits: 141
% 
% TWLsolver clauses: 236
% TWLsolver calls for satisfiability: 67
% 
% Memory used [KB]: 18166
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modProps
% (143564)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 87
% Passive clauses: 1127
% Generated clauses: 8607
% Final active clauses: 81
% Final passive clauses: 1027
% Input formulas: 68
% Initial clauses: 121
% 
% Duplicate literals: 239
% Trivial inequalities: 64
% Fw subsumption resolutions: 250
% Fw demodulations: 598
% Bw demodulations: 12
% Condensations: 611
% Global subsumptions: 12
% 
% Simple tautologies: 109
% Equational tautologies: 40
% Forward subsumptions: 3686
% Fw demodulations to eq. taut.: 1
% Bw demodulations to eq. taut.: 1
% 
% Binary resolution: 134
% Factoring: 1
% Forward superposition: 2881
% Backward superposition: 2350
% Self superposition: 117
% Equality factoring: 50
% Equality resolution: 22
% 
% Split clauses: 12
% Split components: 24
% SAT solver clauses: 2004
% SAT solver unit clauses: 159
% SAT solver binary clauses: 62
% SAT solver learnt clauses: 24
% 
% Sat splits: 12
% Sat splitting refutations: 4
% 
% TWLsolver clauses: 1956
% TWLsolver calls for satisfiability: 438
% 
% Memory used [KB]: 14328
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.modProps
% (143591)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 442
% Passive clauses: 8633
% Generated clauses: 155351
% Final active clauses: 234
% Final passive clauses: 960
% Input formulas: 68
% Initial clauses: 121
% Discarded non-redundant clauses: 54982
% 
% Duplicate literals: 2891
% Trivial inequalities: 971
% Fw subsumption resolutions: 4838
% Fw demodulations: 32869
% Bw demodulations: 1453
% Condensations: 6148
% Global subsumptions: 902
% 
% Simple tautologies: 880
% Equational tautologies: 624
% Forward subsumptions: 73598
% Fw demodulations to eq. taut.: 5798
% Bw demodulations to eq. taut.: 38
% 
% Unit resulting resolution: 34632
% Factoring: 6
% Forward superposition: 34002
% Backward superposition: 33237
% Self superposition: 494
% Equality factoring: 171
% Equality resolution: 93
% 
% Split clauses: 63
% Split components: 131
% SAT solver clauses: 10589
% SAT solver unit clauses: 1749
% SAT solver binary clauses: 3269
% 
% Sat splits: 63
% Sat splitting refutations: 925
% 
% Memory used [KB]: 193301
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f789,plain,(
  $false),
  inference(equality_resolution,[],[f734])).
fof(f734,plain,(
  ( ! [X16] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),X16) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.prompt'),sK2)))) )),
  inference(superposition,[],[f627,f212])).
fof(f212,plain,(
  ( ! [X2,X0,X1] : (s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))) )),
  inference(cnf_transformation,[],[f153])).
fof(f153,plain,(
  ! [X0,X1,X2] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK4(X2,X1,X0)),s(X1,sK5(X2,X1,X0))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK4,sK5])],[f93])).
fof(f93,plain,(
  ! [X0,X1,X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(flattening,[],[f92])).
fof(f92,plain,(
  ! [X0,X1] : ! [X2] : ? [X3,X4] : s('type.pair.prod'(X0,X1),X2) = s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X3),s(X1,X4)))),
  inference(rectify,[],[f56])).
fof(f56,axiom,(
  ! [X6,X14] : ! [X21] : ? [X57,X13] : s('type.pair.prod'(X6,X14),X21) = s('type.pair.prod'(X6,X14),'const.pair.,_2'(s(X6,X57),s(X14,X13)))),
  file('thm.modProps.modProps_|49|3_prove_ltb','thm.pair.ABS_PAIR_THM')).
fof(f627,plain,(
  ( ! [X10,X11] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.prompt'),sK2))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X11),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),X10)))) )),
  inference(superposition,[],[f338,f212])).
fof(f338,plain,(
  ( ! [X14,X12,X13] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.prompt'),sK2))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X13),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X14),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),X12)))))) )),
  inference(superposition,[],[f180,f212])).
fof(f180,plain,(
  ( ! [X6,X4,X7,X5] : (s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.prompt'),sK2))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))) )),
  inference(cnf_transformation,[],[f142])).
fof(f142,plain,(
  ! [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',sK3),s('type.modSem.state'(sK0),sK1),s('type.list.list'('type.modLang.prompt'),sK2))) != s('type.pair.prod'('type.modSem.state'(sK0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(sK0),X4),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f128])).
fof(f128,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.prompt'),X2))) != s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(ennf_transformation,[],[f71])).
fof(f71,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.prompt'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(flattening,[],[f70])).
fof(f70,plain,(
  ~! [X0] : ! [X1,X2,X3] : ? [X4,X5,X6,X7] : s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',X3),s('type.modSem.state'(X0),X1),s('type.list.list'('type.modLang.prompt'),X2))) = s('type.pair.prod'('type.modSem.state'(X0),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X0),X4),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X5),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X6),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X7)))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',X9),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.prompt'),X8))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X11),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9] : ? [X10,X11,X12,X13] : s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.modSem.evaluate_prompts_3'(s('type.modSem.environment',X9),s('type.modSem.state'(X6),X7),s('type.list.list'('type.modLang.prompt'),X8))) = s('type.pair.prod'('type.modSem.state'(X6),'type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))))),'const.pair.,_2'(s('type.modSem.state'(X6),X10),s('type.pair.prod'('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),'type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')))),'const.pair.,_2'(s('type.pair.prod'('type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn'))))),'type.list.list'('type.pair.prod'('type.list.list'('type.string.char'),'type.pair.prod'('type.num.num','type.semanticPrimitives.tid_or_exn')))),X11),s('type.pair.prod'('type.list.list'('type.option.option'('type.modSem.v')),'type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v'))),'const.pair.,_2'(s('type.list.list'('type.option.option'('type.modSem.v')),X12),s('type.option.option'('type.semanticPrimitives.error_result'('type.modSem.v')),X13)))))))),
  file('thm.modProps.modProps_|49|3_prove_ltb','thm.modProps.modProps_|49|3_prove_ltb')).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 58
% Passive clauses: 241
% Generated clauses: 476
% Final active clauses: 58
% Final passive clauses: 228
% Input formulas: 68
% Initial clauses: 84
% 
% Selected by SInE selection: 39
% SInE iterations: 1
% 
% Duplicate literals: 2
% Trivial inequalities: 1
% Fw demodulations: 24
% 
% Simple tautologies: 32
% Equational tautologies: 2
% Forward subsumptions: 214
% 
% Forward superposition: 494
% Equality resolution: 5
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 3070
% Time elapsed: 0.060 s
% ------------------------------
% ------------------------------
% Success in time 11.84 s
