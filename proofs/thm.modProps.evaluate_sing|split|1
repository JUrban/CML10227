Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.modProps
% (109007)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 903
% Passive clauses: 9154
% Generated clauses: 28370
% Final active clauses: 891
% Final passive clauses: 7868
% Input formulas: 78
% Initial clauses: 201
% 
% Duplicate literals: 347
% Trivial inequalities: 149
% Fw subsumption resolutions: 2292
% Fw demodulations: 2436
% Bw demodulations: 11
% 
% Simple tautologies: 246
% Equational tautologies: 57
% Forward subsumptions: 13415
% Fw demodulations to eq. taut.: 7
% 
% Binary resolution: 9000
% Factoring: 1492
% Forward superposition: 6353
% Backward superposition: 5851
% Self superposition: 46
% Equality factoring: 26
% Equality resolution: 25
% 
% Split clauses: 304
% Split components: 609
% SAT solver clauses: 588
% SAT solver unit clauses: 11
% SAT solver binary clauses: 86
% 
% Sat splits: 304
% 
% TWLsolver clauses: 588
% TWLsolver calls for satisfiability: 411
% 
% Memory used [KB]: 14072
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 143 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.modProps
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.modProps
% SZS output start Proof for thm.modProps
fof(f11703,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f11673,f298,f506,f669,f673,f303,f516,f374,f560,f11556,f11559,f9893,f9895,f297,f508,f671,f675,f379,f564])).
fof(f564,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5)))) ) | $spl86),
  inference(cnf_transformation,[],[f564_D])).
fof(f564_D,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5)))) ) <=> ~$spl86),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl86])])).
fof(f379,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5)))) )),
  inference(cnf_transformation,[],[f191])).
fof(f191,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(ennf_transformation,[],[f145])).
fof(f145,plain,(
  ! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(flattening,[],[f144])).
fof(f144,plain,(
  ! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(rectify,[],[f27])).
fof(f27,axiom,(
  ! [X21] : ! [X13,X10,X8,X11,X12,X9,X7] : (s('type.pair.prod'('type.modSem.state'(X21),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X21),X9),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) = s('type.pair.prod'('type.modSem.state'(X21),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X13),s('type.modSem.state'(X21),X10),s('type.modSem.v',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X11),s('type.modSem.v',X12))) => s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  file('thm.modProps.evaluate_sing|split|1','thm.modProps.evaluate_length|split|1')).
fof(f675,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7)))) ) | $spl276),
  inference(cnf_transformation,[],[f675_D])).
fof(f675_D,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7)))) ) <=> ~$spl276),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl276])])).
fof(f671,plain,(
  ( ! [X6,X4,X2,X0,X7,X5,X3,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X7))) | s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X6),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) != s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X1),s('type.modSem.state'(X0),X2),s('type.modSem.v',X3),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X4),s('type.modSem.v',X5)))) ) | ($spl10 | $spl86)),
  inference(backward_demodulation,[],[f516,f564])).
fof(f508,plain,(
  s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),sK13))))) = s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',sK19),s('type.modSem.state'(sK12),sK16),s('type.modSem.v',sK14),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),sK17),s('type.modSem.v',sK18))) | $spl2),
  inference(cnf_transformation,[],[f508_D])).
fof(f508_D,plain,(
  s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),sK13))))) = s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',sK19),s('type.modSem.state'(sK12),sK16),s('type.modSem.v',sK14),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),sK17),s('type.modSem.v',sK18))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f297,plain,(
  s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),sK13))))) = s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',sK19),s('type.modSem.state'(sK12),sK16),s('type.modSem.v',sK14),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),sK17),s('type.modSem.v',sK18)))),
  inference(cnf_transformation,[],[f226])).
fof(f226,plain,(
  s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),sK13))))) = s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',sK19),s('type.modSem.state'(sK12),sK16),s('type.modSem.v',sK14),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),sK17),s('type.modSem.v',sK18))) & ! [X8] : s('type.list.list'('type.modSem.v'),sK13) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X8),s('type.list.list'('type.modSem.v'),'const.list.NIL_0')))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19])],[f179])).
fof(f179,plain,(
  ? [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X3),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X1))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X7),s('type.modSem.state'(X0),X4),s('type.modSem.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X5),s('type.modSem.v',X6))) & ! [X8] : s('type.list.list'('type.modSem.v'),X1) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X8),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(ennf_transformation,[],[f81])).
fof(f81,plain,(
  ~! [X0,X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X3),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X1))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X7),s('type.modSem.state'(X0),X4),s('type.modSem.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X5),s('type.modSem.v',X6))) => ? [X8] : s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X8),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(flattening,[],[f80])).
fof(f80,plain,(
  ~! [X0] : ! [X1,X2,X3,X4,X5,X6,X7] : (s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X0),X3),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X1))))) = s('type.pair.prod'('type.modSem.state'(X0),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X7),s('type.modSem.state'(X0),X4),s('type.modSem.v',X2),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X5),s('type.modSem.v',X6))) => ? [X8] : s('type.list.list'('type.modSem.v'),X1) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X8),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ! [X7,X8,X9,X10,X11,X12,X13] : (s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X9),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X13),s('type.modSem.state'(X6),X10),s('type.modSem.v',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X11),s('type.modSem.v',X12))) => ? [X14] : s('type.list.list'('type.modSem.v'),X7) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X14),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ! [X7,X8,X9,X10,X11,X12,X13] : (s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(X6),X9),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X7))))) = s('type.pair.prod'('type.modSem.state'(X6),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.modSem.evaluate_match_5'(s('type.modSem.environment',X13),s('type.modSem.state'(X6),X10),s('type.modSem.v',X8),s('type.list.list'('type.pair.prod'('type.ast.pat','type.modLang.exp')),X11),s('type.modSem.v',X12))) => ? [X14] : s('type.list.list'('type.modSem.v'),X7) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X14),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))))),
  file('thm.modProps.evaluate_sing|split|1','thm.modProps.evaluate_sing|split|1')).
fof(f9895,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),sK13))))) != s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X1)))) ) | $spl2848),
  inference(cnf_transformation,[],[f9895_D])).
fof(f9895_D,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),sK13))))) != s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X1)))) ) <=> ~$spl2848),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2848])])).
fof(f9893,plain,(
  ( ! [X0,X1] : (s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),sK15),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),sK13))))) != s('type.pair.prod'('type.modSem.state'(sK12),'type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v')),'const.pair.,_2'(s('type.modSem.state'(sK12),X0),s('type.semanticPrimitives.result'('type.list.list'('type.modSem.v'),'type.modSem.v'),'const.semanticPrimitives.Rval_1'(s('type.list.list'('type.modSem.v'),X1))))) | s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),X1)))) ) | ($spl2 | $spl276)),
  inference(superposition,[],[f675,f508])).
fof(f11559,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK13))) | $spl3140),
  inference(cnf_transformation,[],[f11559_D])).
fof(f11559_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK13))) <=> ~$spl3140),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl3140])])).
fof(f11556,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.list.LENGTH_1'(s('type.list.list'('type.modSem.v'),sK13))) | $spl2848),
  inference(equality_resolution,[],[f9895])).
fof(f560,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) | $spl78),
  inference(cnf_transformation,[],[f560_D])).
fof(f560_D,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) ) <=> ~$spl78),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl78])])).
fof(f374,plain,(
  ( ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) )),
  inference(cnf_transformation,[],[f248])).
fof(f248,plain,(
  ! [X0,X1] : ((s('type.list.list'(X0),X1) != s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) | s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))) & (s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) != s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))))),
  inference(nnf_transformation,[],[f137])).
fof(f137,plain,(
  ! [X0,X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(flattening,[],[f136])).
fof(f136,plain,(
  ! [X0] : ! [X1] : (s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  inference(rectify,[],[f24])).
fof(f24,axiom,(
  ! [X6] : ! [X20] : (s('type.list.list'(X6),X20) = s('type.list.list'(X6),'const.list.CONS_2'(s(X6,'const.list.HD_1'(s('type.list.list'(X6),X20))),s('type.list.list'(X6),'const.list.NIL_0'))) <=> s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X6),X20))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))))),
  file('thm.modProps.evaluate_sing|split|1','thm.misc.SING_HD|split|0')).
fof(f516,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) | $spl10),
  inference(cnf_transformation,[],[f516_D])).
fof(f516_D,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0'))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f303,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  inference(cnf_transformation,[],[f41])).
fof(f41,axiom,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) = s('type.num.num','const.arithmetic.NUMERAL_1'(s('type.num.num','const.arithmetic.BIT|49|_1'(s('type.num.num','const.arithmetic.ZERO_0')))))),
  file('thm.modProps.evaluate_sing|split|1','thm.numeral.numeral_distrib|split|13')).
fof(f673,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) | $spl272),
  inference(cnf_transformation,[],[f673_D])).
fof(f673_D,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) <=> ~$spl272),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl272])])).
fof(f669,plain,(
  ( ! [X0,X1] : (s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.list.LENGTH_1'(s('type.list.list'(X0),X1))) | s('type.list.list'(X0),X1) = s('type.list.list'(X0),'const.list.CONS_2'(s(X0,'const.list.HD_1'(s('type.list.list'(X0),X1))),s('type.list.list'(X0),'const.list.NIL_0')))) ) | ($spl10 | $spl78)),
  inference(backward_demodulation,[],[f516,f560])).
fof(f506,plain,(
  ( ! [X8] : (s('type.list.list'('type.modSem.v'),sK13) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X8),s('type.list.list'('type.modSem.v'),'const.list.NIL_0')))) ) | $spl0),
  inference(cnf_transformation,[],[f506_D])).
fof(f506_D,plain,(
  ( ! [X8] : (s('type.list.list'('type.modSem.v'),sK13) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X8),s('type.list.list'('type.modSem.v'),'const.list.NIL_0')))) ) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f298,plain,(
  ( ! [X8] : (s('type.list.list'('type.modSem.v'),sK13) != s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v',X8),s('type.list.list'('type.modSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f226])).
fof(f11673,plain,(
  $false | ($spl0 | $spl272 | $spl3140)),
  inference(subsumption_resolution,[],[f11672,f506])).
fof(f11672,plain,(
  s('type.list.list'('type.modSem.v'),sK13) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.list.HD_1'(s('type.list.list'('type.modSem.v'),sK13))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))) | ($spl272 | $spl3140)),
  inference(trivial_inequality_removal,[],[f11560])).
fof(f11560,plain,(
  s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) != s('type.num.num','const.num.SUC_1'(s('type.num.num','const.num.|48|_0'))) | s('type.list.list'('type.modSem.v'),sK13) = s('type.list.list'('type.modSem.v'),'const.list.CONS_2'(s('type.modSem.v','const.list.HD_1'(s('type.list.list'('type.modSem.v'),sK13))),s('type.list.list'('type.modSem.v'),'const.list.NIL_0'))) | ($spl272 | $spl3140)),
  inference(superposition,[],[f673,f11559])).
% SZS output end Proof for thm.modProps
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 498
% Passive clauses: 1593
% Generated clauses: 11392
% Final active clauses: 471
% Final passive clauses: 1019
% Input formulas: 78
% Initial clauses: 201
% 
% Duplicate literals: 114
% Trivial inequalities: 58
% Fw subsumption resolutions: 804
% Fw demodulations: 965
% Bw demodulations: 88
% Condensations: 122
% Global subsumptions: 13
% 
% Simple tautologies: 201
% Equational tautologies: 8
% Forward subsumptions: 5784
% Fw demodulations to eq. taut.: 4
% 
% Binary resolution: 2119
% Factoring: 306
% Forward superposition: 2615
% Backward superposition: 2312
% Self superposition: 27
% Equality factoring: 2
% Equality resolution: 11
% 
% Split clauses: 8
% Split components: 16
% SAT solver clauses: 1947
% SAT solver unit clauses: 252
% SAT solver binary clauses: 79
% SAT solver learnt clauses: 28
% SAT solver learnt literals: 11
% 
% Sat splits: 8
% Sat splitting refutations: 16
% 
% TWLsolver clauses: 1893
% TWLsolver calls for satisfiability: 1729
% 
% Memory used [KB]: 9466
% Time elapsed: 0.521 s
% ------------------------------
% ------------------------------
% Success in time 1.136 s
