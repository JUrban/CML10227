Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.bvlSem
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.bvlSem
% SZS output start Proof for thm.bvlSem
fof(f4649,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f4648,f223,f418,f416,f414,f412,f410,f408,f406,f404,f4646,f3995,f3784,f3783,f3782,f917,f4647])).
fof(f4647,plain,(
  $false | $spl8),
  inference(subsumption_resolution,[],[f412,f225])).
fof(f225,plain,(
  ( ! [X14,X12,X13] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X13),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X14),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f138,plain,(
  (s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK13))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK16),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK17),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK19),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK20),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK21),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK22),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK23),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK24),s('type.list.list'('type.bvlSem.v'),sK25))))))))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK26))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK27)))) & ! [X15] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X15),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) & ! [X12,X13,X14] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X13),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X14),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) & ! [X11] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11))) & ! [X10] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))) & ! [X8,X9] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X8),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X9),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) & ! [X3,X4,X5,X6,X7] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X4),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X5),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X6),s('type.list.list'('type.bvlSem.v'),X7))))))))) & ! [X2] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2))) & ! [X1] : s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK12,sK13,sK14,sK15,sK16,sK17,sK18,sK19,sK20,sK21,sK22,sK23,sK24,sK25,sK26,sK27])],[f137])).
fof(f137,plain,(
  ? [X0] : ((? [X30] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X30))) | ? [X29] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X29))) | ? [X28] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X28),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X26,X27] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X26),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X27),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X23,X24,X25] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X23),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X24),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X25),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X18,X19,X20,X21,X22] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X18),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X19),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X20),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X21),s('type.list.list'('type.bvlSem.v'),X22))))))))) | ? [X17] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X17))) | ? [X16] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X16)))) & ! [X15] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X15),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) & ! [X12,X13,X14] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X12),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X13),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X14),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) & ! [X11] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11))) & ! [X10] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10))) & ! [X8,X9] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X8),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X9),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) & ! [X3,X4,X5,X6,X7] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X4),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X5),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X6),s('type.list.list'('type.bvlSem.v'),X7))))))))) & ! [X2] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2))) & ! [X1] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1))))),
  inference(rectify,[],[f97])).
fof(f97,plain,(
  ? [X0] : ((? [X15] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X15))) | ? [X14] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))) | ? [X13] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X13),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X11,X12] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X11),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X12),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X8),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X9),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X10),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X4),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X5),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X6),s('type.list.list'('type.bvlSem.v'),X7))))))))) | ? [X2] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2))) | ? [X1] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1)))) & ! [X30] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X30),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) & ! [X27,X28,X29] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X27),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X28),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X29),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) & ! [X26] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X26))) & ! [X25] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X25))) & ! [X23,X24] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X23),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X24),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) & ! [X18,X19,X20,X21,X22] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X18),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X19),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X20),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X21),s('type.list.list'('type.bvlSem.v'),X22))))))))) & ! [X17] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X17))) & ! [X16] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X16))))),
  inference(flattening,[],[f96])).
fof(f96,plain,(
  ? [X0] : ((? [X15] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X15))) | ? [X14] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))) | ? [X13] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X13),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X11,X12] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X11),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X12),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X8),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X9),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X10),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X4),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X5),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X6),s('type.list.list'('type.bvlSem.v'),X7))))))))) | ? [X2] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2))) | ? [X1] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1)))) & (! [X30] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X30),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) & ! [X27,X28,X29] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X27),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X28),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X29),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) & ! [X26] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X26))) & ! [X25] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X25))) & ! [X23,X24] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X23),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X24),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) & ! [X18,X19,X20,X21,X22] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X18),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X19),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X20),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X21),s('type.list.list'('type.bvlSem.v'),X22))))))))) & ! [X17] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X17))) & ! [X16] : s('type.bvlSem.v',X0) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X16)))))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0] : ((? [X15] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X15))) | ? [X14] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X14))) | ? [X13] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X13),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X11,X12] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X11),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X12),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X8,X9,X10] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X8),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X9),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X10),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X3,X4,X5,X6,X7] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X4),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X5),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X6),s('type.list.list'('type.bvlSem.v'),X7))))))))) | ? [X2] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2))) | ? [X1] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1)))) => (? [X30] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X30),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X27,X28,X29] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X27),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X28),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X29),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X26] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X26))) | ? [X25] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X25))) | ? [X23,X24] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X23),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X24),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X18,X19,X20,X21,X22] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X18),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X19),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X20),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X21),s('type.list.list'('type.bvlSem.v'),X22))))))))) | ? [X17] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X17))) | ? [X16] : s('type.bvlSem.v',X0) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X16)))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6] : ((? [X7] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X9] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X10,X11] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X11),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X9,X12,X13] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X12),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X13),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X10,X11,X14,X15,X16] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X11),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X14),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X15),s('type.list.list'('type.bvlSem.v'),X16))))))))) | ? [X17] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X17))) | ? [X18] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X18)))) => (? [X9] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X9,X12,X13] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X12),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X13),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X7] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X10,X11] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X11),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X10,X11,X14,X15,X16] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X11),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X14),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X15),s('type.list.list'('type.bvlSem.v'),X16))))))))) | ? [X17] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X17))) | ? [X18] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X18)))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6] : ((? [X7] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X9] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X10,X11] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X11),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X9,X12,X13] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X12),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X13),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X10,X11,X14,X15,X16] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X11),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X14),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X15),s('type.list.list'('type.bvlSem.v'),X16))))))))) | ? [X17] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X17))) | ? [X18] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X18)))) => (? [X9] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | ? [X9,X12,X13] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X9),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X12),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X13),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | ? [X7] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X7))) | ? [X8] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X8))) | ? [X10,X11] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X11),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | ? [X10,X11,X14,X15,X16] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X10),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X11),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X14),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X15),s('type.list.list'('type.bvlSem.v'),X16))))))))) | ? [X17] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X17))) | ? [X18] : s('type.bvlSem.v',X6) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X18)))))),
  file('thm.bvlSem.bvlSem_|49||48|9_prove_ltb','thm.bvlSem.bvlSem_|49||48|9_prove_ltb')).
fof(f917,plain,(
  $false | $spl4),
  inference(subsumption_resolution,[],[f408,f224])).
fof(f224,plain,(
  ( ! [X15] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X15),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3782,plain,(
  $false | $spl2),
  inference(subsumption_resolution,[],[f406,f227])).
fof(f227,plain,(
  ( ! [X10] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),X10)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3783,plain,(
  $false | $spl0),
  inference(subsumption_resolution,[],[f404,f226])).
fof(f226,plain,(
  ( ! [X11] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',X11)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3784,plain,(
  $false | $spl14),
  inference(subsumption_resolution,[],[f418,f231])).
fof(f231,plain,(
  ( ! [X1] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',X1)))) )),
  inference(cnf_transformation,[],[f138])).
fof(f3995,plain,(
  $false | $spl6),
  inference(subsumption_resolution,[],[f410,f228])).
fof(f228,plain,(
  ( ! [X8,X9] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X8),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X9),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0')))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f4646,plain,(
  $false | $spl10),
  inference(subsumption_resolution,[],[f414,f229])).
fof(f229,plain,(
  ( ! [X6,X4,X7,X5,X3] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',X3),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X4),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X5),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',X6),s('type.list.list'('type.bvlSem.v'),X7)))))))))) )),
  inference(cnf_transformation,[],[f138])).
fof(f404,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK13))) | $spl0),
  inference(cnf_transformation,[],[f404_D])).
fof(f404_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK13))) <=> ~$spl0),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl0])])).
fof(f406,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | $spl2),
  inference(cnf_transformation,[],[f406_D])).
fof(f406_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) <=> ~$spl2),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl2])])).
fof(f408,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | $spl4),
  inference(cnf_transformation,[],[f408_D])).
fof(f408_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f410,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK16),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK17),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | $spl6),
  inference(cnf_transformation,[],[f410_D])).
fof(f410_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK16),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK17),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) <=> ~$spl6),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl6])])).
fof(f412,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK19),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK20),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | $spl8),
  inference(cnf_transformation,[],[f412_D])).
fof(f412_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK19),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK20),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f414,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK21),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK22),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK23),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK24),s('type.list.list'('type.bvlSem.v'),sK25))))))))) | $spl10),
  inference(cnf_transformation,[],[f414_D])).
fof(f414_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK21),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK22),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK23),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK24),s('type.list.list'('type.bvlSem.v'),sK25))))))))) <=> ~$spl10),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl10])])).
fof(f416,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK26))) | $spl12),
  inference(cnf_transformation,[],[f416_D])).
fof(f416_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK26))) <=> ~$spl12),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl12])])).
fof(f418,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK27))) | $spl14),
  inference(cnf_transformation,[],[f418_D])).
fof(f418_D,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK27))) <=> ~$spl14),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl14])])).
fof(f223,plain,(
  s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.RefPtr_1'(s('type.num.num',sK27))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',sK26))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK21),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK22),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK23),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK24),s('type.list.list'('type.bvlSem.v'),sK25))))))))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK18),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK19),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK20),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK16),s('type.list.list'('type.bvlSem.v'),'const.list.CONS_2'(s('type.bvlSem.v',sK17),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Block_2'(s('type.num.num',sK15),s('type.list.list'('type.bvlSem.v'),'const.list.NIL_0'))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Word64_1'(s('type.fcp.cart'(bool,'type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.fcp.bit|48|'('type.one.one'))))))),sK14))) | s('type.bvlSem.v',sK12) = s('type.bvlSem.v','const.bvlSem.Number_1'(s('type.integer.int',sK13)))),
  inference(cnf_transformation,[],[f138])).
fof(f4648,plain,(
  $false | $spl12),
  inference(subsumption_resolution,[],[f416,f230])).
fof(f230,plain,(
  ( ! [X2] : (s('type.bvlSem.v',sK12) != s('type.bvlSem.v','const.bvlSem.CodePtr_1'(s('type.num.num',X2)))) )),
  inference(cnf_transformation,[],[f138])).
% SZS output end Proof for thm.bvlSem
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 372
% Passive clauses: 1462
% Generated clauses: 4419
% Final active clauses: 372
% Final passive clauses: 908
% Input formulas: 37
% Initial clauses: 176
% 
% Duplicate literals: 153
% Trivial inequalities: 25
% Fw subsumption resolutions: 298
% 
% Simple tautologies: 145
% Equational tautologies: 30
% Forward subsumptions: 2304
% 
% Binary resolution: 2713
% Factoring: 771
% Forward superposition: 154
% Backward superposition: 59
% Self superposition: 2
% Equality factoring: 2
% Equality resolution: 14
% 
% Split clauses: 100
% Split components: 207
% SAT solver clauses: 194
% SAT solver unit clauses: 14
% SAT solver binary clauses: 41
% SAT solver learnt clauses: 1
% 
% Sat splits: 100
% Sat splitting refutations: 8
% 
% TWLsolver clauses: 193
% TWLsolver calls for satisfiability: 165
% 
% Memory used [KB]: 2430
% Time elapsed: 0.200 s
% ------------------------------
% ------------------------------
% Success in time 0.22 s
