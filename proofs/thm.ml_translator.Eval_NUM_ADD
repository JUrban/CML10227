Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 150 next slice time: 5
dis+11_7_3 on thm.ml_translator
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.ml_translator
% SZS output start Proof for thm.ml_translator
fof(f15390,plain,(
  $false),
  inference(sat_splitting_refutation,[],[f15357,f76,f214,f79,f218])).
fof(f218,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))) | $spl8),
  inference(cnf_transformation,[],[f218_D])).
fof(f218_D,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))) <=> ~$spl8),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl8])])).
fof(f79,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))),
  inference(subsumption_resolution,[],[f78,f36])).
fof(f36,plain,(
  ~p(s(bool,'F_0'))),
  inference(cnf_transformation,[],[f14])).
fof(f14,plain,(
  ~p(s(bool,'F_0'))),
  inference(flattening,[],[f2])).
fof(f2,axiom,(
  ~p(s(bool,'F_0'))),
  file('thm.ml_translator.Eval_NUM_ADD',aHL_FALSITY)).
fof(f78,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))),
  inference(superposition,[],[f33,f40])).
fof(f40,plain,(
  ( ! [X0] : (s(bool,'F_0') = s(bool,X0) | s(bool,'T_0') = s(bool,X0)) )),
  inference(cnf_transformation,[],[f3])).
fof(f3,axiom,(
  ! [X0] : (s(bool,'T_0') = s(bool,X0) | s(bool,'F_0') = s(bool,X0))),
  file('thm.ml_translator.Eval_NUM_ADD',aHL_BOOL_CASES)).
fof(f33,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2))))))),
  inference(cnf_transformation,[],[f29])).
fof(f29,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) & p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3,sK4])],[f25])).
fof(f25,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) & p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2)))))))))),
  inference(flattening,[],[f24])).
fof(f24,plain,(
  ? [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) & (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) & ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))))))))),
  inference(ennf_transformation,[],[f13])).
fof(f13,plain,(
  ~! [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X3)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X2)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X3),s('type.num.num',X2))))))))))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9,X10] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X8)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8))))))))))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9,X10] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X8)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X9),s('type.num.num',X8))))))))))),
  file('thm.ml_translator.Eval_NUM_ADD','thm.ml_translator.Eval_NUM_ADD')).
fof(f214,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))) | $spl4),
  inference(cnf_transformation,[],[f214_D])).
fof(f214_D,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))) <=> ~$spl4),
  introduced(sat_splitting_component,[new_symbols(naming,[$spl4])])).
fof(f76,plain,(
  s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))),
  inference(subsumption_resolution,[],[f75,f36])).
fof(f75,plain,(
  p(s(bool,'F_0')) | s(bool,'T_0') = s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))),
  inference(superposition,[],[f32,f40])).
fof(f32,plain,(
  p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))))),
  inference(cnf_transformation,[],[f29])).
fof(f15357,plain,(
  $false | ($spl4 | $spl8)),
  inference(subsumption_resolution,[],[f15356,f35])).
fof(f35,plain,(
  p(s(bool,'T_0'))),
  inference(cnf_transformation,[],[f1])).
fof(f1,axiom,(
  p(s(bool,'T_0'))),
  file('thm.ml_translator.Eval_NUM_ADD',aHL_TRUTH)).
fof(f15356,plain,(
  ~p(s(bool,'T_0')) | ($spl4 | $spl8)),
  inference(forward_demodulation,[],[f15355,f214])).
fof(f15355,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | $spl8),
  inference(subsumption_resolution,[],[f15354,f35])).
fof(f15354,plain,(
  ~p(s(bool,'T_0')) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3)))))) | $spl8),
  inference(forward_demodulation,[],[f15302,f218])).
fof(f15302,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK2)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp',sK1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',sK3))))))),
  inference(resolution,[],[f3588,f34])).
fof(f34,plain,(
  ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),sK4),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',sK0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',sK3),s('type.num.num',sK2))))))))),
  inference(cnf_transformation,[],[f29])).
fof(f3588,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X2),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X0)))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X4))))))) )),
  inference(forward_demodulation,[],[f3587,f37])).
fof(f37,plain,(
  ( ! [X0] : (s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))) )),
  inference(cnf_transformation,[],[f15])).
fof(f15,plain,(
  ! [X0] : s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0)))))),
  inference(rectify,[],[f9])).
fof(f9,axiom,(
  ! [X15] : s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X15))) = s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X15)))))),
  file('thm.ml_translator.Eval_NUM_ADD','thm.ml_translator.NUM_def')).
fof(f3587,plain,(
  ( ! [X4,X2,X0,X3,X1] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X2),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X4),s('type.num.num',X0)))))))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X4))))))) )),
  inference(forward_demodulation,[],[f3551,f43])).
fof(f43,plain,(
  ( ! [X0,X1] : (s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))) )),
  inference(cnf_transformation,[],[f20])).
fof(f20,plain,(
  ! [X0,X1] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X0),s('type.num.num',X1))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X1)))))),
  inference(rectify,[],[f8])).
fof(f8,axiom,(
  ! [X14,X15] : s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num','const.arithmetic.+_2'(s('type.num.num',X14),s('type.num.num',X15))))) = s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X14))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X15)))))),
  file('thm.ml_translator.Eval_NUM_ADD','thm.integer.INT_ADD')).
fof(f3551,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X4)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X2),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X4))),s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))))))))))) )),
  inference(superposition,[],[f2167,f37])).
fof(f2167,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X3),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp',X2),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.NUM_1'(s('type.num.num',X0)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X1),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X2),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X3),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int','const.integer.int_of_num_1'(s('type.num.num',X0))),s('type.integer.int',X4))))))))) )),
  inference(superposition,[],[f45,f37])).
fof(f45,plain,(
  ( ! [X4,X2,X0,X3,X1] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))))) )),
  inference(cnf_transformation,[],[f28])).
fof(f28,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | ~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4)))))))))),
  inference(flattening,[],[f27])).
fof(f27,plain,(
  ! [X0,X1,X2,X3,X4] : (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) | (~p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) | p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))))))),
  inference(ennf_transformation,[],[f23])).
fof(f23,plain,(
  ! [X0,X1,X2,X3,X4] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X1),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X3)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp',X0),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X4)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X2),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X1),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X0),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X3),s('type.integer.int',X4))))))))))),
  inference(rectify,[],[f10])).
fof(f10,axiom,(
  ! [X6,X7,X10,X9,X8] : (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X7),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X9)))))) => (p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp',X6),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int',X8)))))) => p(s(bool,'const.ml_translator.Eval_3'(s('type.semanticPrimitives.environment'('type.semanticPrimitives.v'),X10),s('type.ast.exp','const.ast.App_2'(s('type.ast.op','const.ast.Opn_1'(s('type.ast.opn','const.ast.Plus_0'))),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X7),s('type.list.list'('type.ast.exp'),'const.list.CONS_2'(s('type.ast.exp',X6),s('type.list.list'('type.ast.exp'),'const.list.NIL_0'))))))),s(fun('type.semanticPrimitives.v',bool),'const.ml_translator.INT_1'(s('type.integer.int','const.integer.int_add_2'(s('type.integer.int',X9),s('type.integer.int',X8))))))))))),
  file('thm.ml_translator.Eval_NUM_ADD','thm.ml_translator.Eval_INT_ADD')).
% SZS output end Proof for thm.ml_translator
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 83
% Passive clauses: 2125
% Generated clauses: 14871
% Final active clauses: 77
% Final passive clauses: 1868
% Input formulas: 11
% Initial clauses: 14
% 
% Duplicate literals: 986
% Trivial inequalities: 217
% Fw subsumption resolutions: 1813
% Fw demodulations: 925
% Bw demodulations: 2
% 
% Simple tautologies: 327
% Equational tautologies: 94
% Forward subsumptions: 6521
% 
% Binary resolution: 44
% Forward superposition: 6538
% Backward superposition: 3563
% Self superposition: 350
% Equality factoring: 262
% Equality resolution: 12
% 
% Split clauses: 857
% Split components: 1752
% SAT solver clauses: 2007
% SAT solver unit clauses: 276
% SAT solver binary clauses: 604
% SAT solver learnt clauses: 1
% 
% Sat splits: 857
% Sat splitting refutations: 2
% 
% TWLsolver clauses: 1969
% TWLsolver calls for satisfiability: 114
% 
% Memory used [KB]: 6268
% Time elapsed: 0.499 s
% ------------------------------
% ------------------------------
% Success in time 0.5 s
