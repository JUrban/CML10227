Hi Geoff, go and have some cold beer while I am trying to solve this very hard problem!
% remaining time: 149 next slice time: 5
dis+11_7_3 on thm.clos_knownProof
% (36471)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 160
% Passive clauses: 3282
% Generated clauses: 21058
% Final active clauses: 156
% Final passive clauses: 2962
% Input formulas: 37
% Initial clauses: 57
% 
% Duplicate literals: 561
% Trivial inequalities: 764
% Fw subsumption resolutions: 1595
% Fw demodulations: 4781
% Bw demodulations: 3
% 
% Simple tautologies: 419
% Equational tautologies: 23
% Forward subsumptions: 9135
% 
% Binary resolution: 55
% Forward superposition: 7756
% Backward superposition: 5166
% Self superposition: 153
% Equality factoring: 56
% Equality resolution: 33
% 
% Split clauses: 227
% Split components: 465
% SAT solver clauses: 588
% SAT solver unit clauses: 19
% SAT solver binary clauses: 141
% 
% Sat splits: 227
% Sat splitting refutations: 1
% 
% TWLsolver clauses: 588
% TWLsolver calls for satisfiability: 93
% 
% Memory used [KB]: 15607
% Time elapsed: 0.600 s
% ------------------------------
% ------------------------------
% remaining time: 144 next slice time: 6
lrs-11_2_cond=on:fde=unused:gs=on:nwc=3:stl=30:sdd=off:sfr=on:ssfp=100000:ssfq=1.4:smm=sco:ssnc=all_4 on thm.clos_knownProof
% (36491)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 101
% Passive clauses: 1200
% Generated clauses: 10891
% Final active clauses: 100
% Final passive clauses: 1071
% Input formulas: 37
% Initial clauses: 57
% 
% Duplicate literals: 346
% Trivial inequalities: 234
% Fw subsumption resolutions: 451
% Fw demodulations: 1896
% Bw demodulations: 29
% Condensations: 664
% Global subsumptions: 4
% 
% Simple tautologies: 236
% Equational tautologies: 19
% Forward subsumptions: 4168
% 
% Binary resolution: 45
% Forward superposition: 3262
% Backward superposition: 2605
% Self superposition: 120
% Equality factoring: 44
% Equality resolution: 25
% 
% Split clauses: 32
% Split components: 64
% SAT solver clauses: 1733
% SAT solver unit clauses: 73
% SAT solver binary clauses: 52
% SAT solver learnt clauses: 8
% 
% Sat splits: 32
% 
% TWLsolver clauses: 1717
% TWLsolver calls for satisfiability: 200
% 
% Memory used [KB]: 19701
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 136 next slice time: 103
lrs+11_2_br=off:cond=on:fde=none:gs=on:gsaa=full_model:lwlo=on:nwc=2:sas=minisat:stl=30:ssfp=100000:ssfq=1.4:smm=sco:ssnc=none:sp=occurrence:urr=on_98 on thm.clos_knownProof
% (36514)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 602
% Passive clauses: 12146
% Generated clauses: 212733
% Final active clauses: 111
% Final passive clauses: 397
% Input formulas: 37
% Initial clauses: 57
% Discarded non-redundant clauses: 15187
% 
% Duplicate literals: 2787
% Trivial inequalities: 3447
% Fw subsumption resolutions: 10819
% Fw demodulations: 84726
% Bw demodulations: 8221
% Condensations: 4381
% Global subsumptions: 769
% 
% Simple tautologies: 1221
% Equational tautologies: 871
% Forward subsumptions: 88461
% Fw demodulations to eq. taut.: 14
% Bw demodulations to eq. taut.: 458
% 
% Unit resulting resolution: 15441
% Forward superposition: 44327
% Backward superposition: 25762
% Self superposition: 222
% Equality factoring: 83
% Equality resolution: 110
% 
% Split clauses: 76
% Split components: 183
% SAT solver clauses: 14691
% SAT solver unit clauses: 1372
% SAT solver binary clauses: 7989
% 
% Sat splits: 76
% Sat splitting refutations: 1622
% 
% Memory used [KB]: 112194
% Time elapsed: 10.400 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 32
dis+11_5_fde=none:nwc=1:sas=minisat:sd=1:ss=axioms:st=5.0:sos=all:sdd=large:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none_37 on thm.clos_knownProof
% Refutation not found, incomplete strategy
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation not found, incomplete strategy

% Active clauses: 21
% Passive clauses: 3
% Generated clauses: 28
% Final active clauses: 21
% Input formulas: 37
% Initial clauses: 36
% 
% Selected by SInE selection: 19
% SInE iterations: 1
% 
% Duplicate literals: 1
% 
% Simple tautologies: 17
% Forward subsumptions: 25
% 
% Forward superposition: 27
% 
% SAT solver clauses: 1
% 
% Memory used [KB]: 1151
% Time elapsed: 0.005 s
% ------------------------------
% ------------------------------
% remaining time: 32 next slice time: 6
lrs+1002_2:3_br=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:sas=minisat:stl=30:sac=on:sser=off:sfr=on:ssfp=100000:ssfq=2.0:ssnc=none:sp=reverse_arity:urr=on_4 on thm.clos_knownProof
% (36918)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 90
% Passive clauses: 1490
% Generated clauses: 12489
% Final active clauses: 83
% Final passive clauses: 1363
% Input formulas: 37
% Initial clauses: 57
% 
% Duplicate literals: 234
% Trivial inequalities: 149
% Fw subsumption resolutions: 866
% Fw demodulations: 3309
% Bw demodulations: 38
% Global subsumptions: 3
% 
% Simple tautologies: 259
% Equational tautologies: 78
% Forward subsumptions: 6069
% 
% Unit resulting resolution: 839
% Forward superposition: 3829
% Backward superposition: 3000
% Self superposition: 124
% Equality factoring: 22
% Equality resolution: 7
% 
% Split clauses: 2
% Split components: 4
% SAT solver clauses: 1500
% SAT solver unit clauses: 312
% SAT solver binary clauses: 353
% 
% Sat splits: 2
% Sat splitting refutations: 3
% 
% Memory used [KB]: 18166
% Time elapsed: 0.700 s
% ------------------------------
% ------------------------------
% remaining time: 25 next slice time: 15
lrs+1011_12_bs=on:bsr=unit_only:cond=on:gs=on:gsaa=from_current:gsssp=full:nwc=1.1:sas=minisat:stl=60:sos=all:sac=on:sdd=off:sser=off:sfr=on:ssfp=100000:ssfq=1.2:ssnc=none:sp=reverse_arity:updr=off_14 on thm.clos_knownProof
% (36943)Time limit reached!
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Time limit
% Termination phase: Saturation

% Active clauses: 196
% Passive clauses: 3858
% Generated clauses: 16767
% Final active clauses: 39
% Final passive clauses: 79
% Input formulas: 37
% Initial clauses: 57
% 
% Duplicate literals: 213
% Trivial inequalities: 488
% Fw subsumption resolutions: 617
% Bw subsumption resolutions: 835
% Fw demodulations: 3233
% Bw demodulations: 214
% Condensations: 129
% Global subsumptions: 42
% 
% Simple tautologies: 247
% Equational tautologies: 18
% Forward subsumptions: 7076
% Backward subsumptions: 2727
% 
% Binary resolution: 1515
% Forward superposition: 6961
% Backward superposition: 2472
% Self superposition: 17
% Equality resolution: 28
% 
% Split clauses: 3
% Split components: 6
% SAT solver clauses: 3956
% SAT solver unit clauses: 8
% SAT solver binary clauses: 505
% 
% Sat splits: 3
% Sat splitting refutations: 50
% 
% Memory used [KB]: 24946
% Time elapsed: 1.600 s
% ------------------------------
% ------------------------------
% remaining time: 9 next slice time: 9
lrs+10_8:1_bd=preordered:bs=on:ccuc=first:fsr=off:fde=unused:gs=on:gsaa=from_current:gsem=on:gsssp=full:nwc=1:nicw=on:sas=minisat:stl=120:sos=on:sscc=on:sser=off:sfr=on:ssfp=4000:ssfq=1.0:ssnc=none:sp=reverse_arity:urr=on_7 on thm.clos_knownProof
% Refutation found. Thanks to Tanya!
% SZS status Theorem for thm.clos_knownProof
% SZS output start Proof for thm.clos_knownProof
fof(f410,plain,(
  $false),
  inference(unit_resulting_resolution,[],[f139,f306,f159])).
fof(f159,plain,(
  ( ! [X2,X0,X1] : (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))) )),
  inference(cnf_transformation,[],[f112])).
fof(f112,plain,(
  ! [X0,X1,X2] : ((~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) & (s(X0,X1) != s(X0,X2) | p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2))))))),
  inference(nnf_transformation,[],[f76])).
fof(f76,plain,(
  ! [X0,X1,X2] : (p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) <=> s(X0,X1) = s(X0,X2))),
  inference(rectify,[],[f36])).
fof(f36,axiom,(
  ! [X40,X41,X42] : (p(s(bool,happ(s(fun(X40,bool),happ(s(fun(X40,fun(X40,bool)),'=_0'),s(X40,X41))),s(X40,X42)))) <=> s(X40,X41) = s(X40,X42))),
  file('thm.clos_knownProof.clos_knownProof_|49|2_prove_ltb',arity_0_HL_EQ)).
fof(f306,plain,(
  ( ! [X0] : (~p(s(bool,happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),bool),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),bool)),'=_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',sK2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),sK1))),s('type.sptree.spt'('type.clos_known.val_approx'),sK3))))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),X0))))) )),
  inference(unit_resulting_resolution,[],[f175,f152])).
fof(f152,plain,(
  ( ! [X2,X0,X8,X1] : (~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X8)))) | p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK5(X2,X1,X0)),s(X1,sK6(X2,X1,X0)))))))) )),
  inference(cnf_transformation,[],[f110])).
fof(f110,plain,(
  ! [X0,X1,X2] : ((! [X8] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X8)))) | p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,sK5(X2,X1,X0)),s(X1,sK6(X2,X1,X0)))))))) & (! [X4,X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))) | p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),sK7(X2,X1,X0)))))))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK5,sK6,sK7])],[f109])).
fof(f109,plain,(
  ! [X0,X1,X2] : ((! [X8] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X8)))) | ? [X6,X7] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X6),s(X1,X7))))))) & (! [X4,X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))) | ? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3))))))),
  inference(rectify,[],[f108])).
fof(f108,plain,(
  ! [X0,X1,X2] : ((! [X3] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) | ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5))))))) & (! [X4,X5] : ~p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))) | ? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3))))))),
  inference(nnf_transformation,[],[f68])).
fof(f68,plain,(
  ! [X0,X1,X2] : (? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) <=> ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))))),
  inference(flattening,[],[f67])).
fof(f67,plain,(
  ! [X0,X1] : ! [X2] : (? [X3] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),X3)))) <=> ? [X4,X5] : p(s(bool,happ(s(fun('type.pair.prod'(X0,X1),bool),X2),s('type.pair.prod'(X0,X1),'const.pair.,_2'(s(X0,X4),s(X1,X5)))))))),
  inference(rectify,[],[f25])).
fof(f25,axiom,(
  ! [X16,X30] : ! [X32] : (? [X33] : p(s(bool,happ(s(fun('type.pair.prod'(X16,X30),bool),X32),s('type.pair.prod'(X16,X30),X33)))) <=> ? [X34,X35] : p(s(bool,happ(s(fun('type.pair.prod'(X16,X30),bool),X32),s('type.pair.prod'(X16,X30),'const.pair.,_2'(s(X16,X34),s(X30,X35)))))))),
  file('thm.clos_knownProof.clos_knownProof_|49|2_prove_ltb','thm.pair.EXISTS_PROD')).
fof(f175,plain,(
  ( ! [X0,X1] : (~p(s(bool,happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),bool),happ(s(fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),fun('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),bool)),'=_0'),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',sK2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),sK1))),s('type.sptree.spt'('type.clos_known.val_approx'),sK3))))),s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X0),s('type.sptree.spt'('type.clos_known.val_approx'),X1))))))) )),
  inference(unit_resulting_resolution,[],[f116,f158])).
fof(f158,plain,(
  ( ! [X2,X0,X1] : (~p(s(bool,happ(s(fun(X0,bool),happ(s(fun(X0,fun(X0,bool)),'=_0'),s(X0,X1))),s(X0,X2)))) | s(X0,X1) = s(X0,X2)) )),
  inference(cnf_transformation,[],[f112])).
fof(f116,plain,(
  ( ! [X4,X5] : (s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',sK2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),sK1))),s('type.sptree.spt'('type.clos_known.val_approx'),sK3)))) )),
  inference(cnf_transformation,[],[f94])).
fof(f94,plain,(
  ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',sK0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',sK2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),sK1))),s('type.sptree.spt'('type.clos_known.val_approx'),sK3)))),
  inference(skolemisation,[status(esa),new_symbols(skolem,[sK0,sK1,sK2,sK3])],[f91])).
fof(f91,plain,(
  ? [X0,X1,X2,X3] : ! [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) != s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(ennf_transformation,[],[f39])).
fof(f39,plain,(
  ~! [X0,X1,X2,X3] : ? [X4,X5] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X4),s('type.sptree.spt'('type.clos_known.val_approx'),X5))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X0),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X2),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X1))),s('type.sptree.spt'('type.clos_known.val_approx'),X3)))),
  inference(rectify,[],[f6])).
fof(f6,negated_conjecture,(
  ~! [X6,X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X8),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X7))),s('type.sptree.spt'('type.clos_known.val_approx'),X9)))),
  inference(negated_conjecture,[],[f5])).
fof(f5,conjecture,(
  ! [X6,X7,X8,X9] : ? [X10,X11] : s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.pair.,_2'(s('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),X10),s('type.sptree.spt'('type.clos_known.val_approx'),X11))) = s('type.pair.prod'('type.list.list'('type.pair.prod'('type.closLang.exp','type.clos_known.val_approx')),'type.sptree.spt'('type.clos_known.val_approx')),'const.clos_known.known_3'(s('type.list.list'('type.closLang.exp'),'const.list.CONS_2'(s('type.closLang.exp',X6),s('type.list.list'('type.closLang.exp'),'const.list.NIL_0'))),s('type.list.list'('type.clos_known.val_approx'),'const.list.APPEND_2'(s('type.list.list'('type.clos_known.val_approx'),'const.rich_list.REPLICATE_2'(s('type.num.num',X8),s('type.clos_known.val_approx','const.clos_known.Other_0'))),s('type.list.list'('type.clos_known.val_approx'),X7))),s('type.sptree.spt'('type.clos_known.val_approx'),X9)))),
  file('thm.clos_knownProof.clos_knownProof_|49|2_prove_ltb','thm.clos_knownProof.clos_knownProof_|49|2_prove_ltb')).
fof(f139,plain,(
  ( ! [X0,X1] : (s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))) )),
  inference(cnf_transformation,[],[f54])).
fof(f54,plain,(
  ! [X0,X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(flattening,[],[f53])).
fof(f53,plain,(
  ! [X0] : ! [X1] : s(X0,X1) = s(X0,happ(s(fun(X0,X0),'_i_0_0'),s(X0,X1)))),
  inference(rectify,[],[f13])).
fof(f13,axiom,(
  ! [X19] : ! [X20] : s(X19,X20) = s(X19,happ(s(fun(X19,X19),'_i_0_0'),s(X19,X20)))),
  file('thm.clos_knownProof.clos_knownProof_|49|2_prove_ltb','_i0_ax')).
% SZS output end Proof for thm.clos_knownProof
% ------------------------------
% Version: Vampire 4.0 CASC-25 Entry
% Termination reason: Refutation

% Active clauses: 45
% Passive clauses: 23
% Generated clauses: 259
% Final active clauses: 43
% Final passive clauses: 8
% Input formulas: 37
% Initial clauses: 57
% 
% Duplicate literals: 1
% Fw demodulations: 26
% Bw demodulations: 2
% 
% Simple tautologies: 17
% Forward subsumptions: 185
% Backward subsumptions: 9
% 
% Binary resolution: 6
% Unit resulting resolution: 26
% Forward superposition: 203
% 
% SAT solver clauses: 25
% SAT solver unit clauses: 23
% 
% Memory used [KB]: 2174
% Time elapsed: 0.020 s
% ------------------------------
% ------------------------------
% Success in time 14.083 s
